At first I was like::

    # NB: the reason prayer has to use tmpfiles.d instead of RuntimeDirectory + User,
    # is that prayer *always* assumes it runs as root then drops privileges (cf. stunnel4).
    >$t/etc/tmpfiles.d/prayer.conf          echo d /run/prayer 2700 prayer
    >$t/etc/systemd/system/prayer.service   printf %s\\n [Service]  Type=forking ExecStart='/usr/sbin/prayer $ERRATA' EnvironmentFile=-/prayer.errata  [Unit]  After=systemd-tmpfiles-setup.service  [Install]  WantedBy=graphical.target
    chroot $t systemctl enable prayer

But then I was like::

    # FIXME: it *should* be possible to run prayer directly, as stunnel.
    # prayer is the slowest component (8.9s of the total 10.6s),
    # so it's worth a quick attempt.

    ## THIS ISN'T WORKING.
    ## I worked around it by binding to 8080 instead of 80,
    ## which defeats the purpose.
    # >$t/etc/systemd/system/prayer-sexy.service   printf %s\\n [Service]	ExecStart='/usr/sbin/prayer --foreground $ERRATA' EnvironmentFile=-/prayer.errata Capabilities=cap_net_bind_service+pei SecureBits=keep-caps {RuntimeDirectory,User}=prayer

Ref. http://stackoverflow.com/questions/413807/is-there-a-way-for-non-root-processes-to-bind-to-privileged-ports-1024-on-l ::

        [Service]
        ExecStart=/usr/local/bin/dnschain
        PermissionsStartOnly=true
        ExecStartPre=/sbin/sysctl -w net.ipv4.ip_forward=1
        ExecStartPre=-/sbin/iptables -D INPUT -p udp --dport 5333 -j ACCEPT
        ExecStartPre=-/sbin/iptables -t nat -D PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5333
        ExecStartPre=/sbin/iptables -A INPUT -p udp --dport 5333 -j ACCEPT
        ExecStartPre=/sbin/iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5333
        ExecStopPost=/sbin/iptables -D INPUT -p udp --dport 5333 -j ACCEPT
        ExecStopPost=/sbin/iptables -t nat -D PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5333
        User=dns
        Group=dns

        # Unfortunately, capabilities are basically worthless because they're designed to restrict root daemons. Instead, we use iptables to listen on privileged ports.
        # Capabilities=cap_net_bind_service+pei
        # SecureBits=keep-caps

Which was TOTAL BULLSHIT, so instead I was like ::

    # After RTFSing prayer, I see an undocumented --ports=<tcp port>:<use ssl?>:<file descriptor> option.
    # Using it makes prayer assume binding has been done in advance.
    # We configure systemd as if prayer uses sd_listen_fds(3), but instead we just HARD CODE in the fd it will get.
    # UPDATE: THIS SEEMS TO WORK!  YAAAAY.
    >$t/etc/systemd/system/prayerX.socket    printf %s\\n [Socket] ListenStream=127.0.2.1:80
    >$t/etc/systemd/system/prayerX.service   printf %s\\n [Service] ExecStart='/usr/sbin/prayer --foreground --ports=80:0:3' {RuntimeDirectory,User}=prayer

    # FIXME: should we instead use --ports=80:0:0 and StandardInput=socket ?

    # UPDATE: that didn't seem to work (I think because the
      StandardInput=socket interface is for inetd which assumes one
      socket --> fd0 = in, fd1 = out, whereas prayer seems to
      explicitly expect socket --> fdN = in/out.

    # UPDATE: I also tried removing "use_http_port 127.0.2.1:80" from prayer.cf,
      but prayer's config validation didn't like that.
