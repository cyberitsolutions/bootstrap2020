* Startup — Startup, Home page and New Tab page
 Configure the pages to load on startup, the default home page and the default new tab page in Google Chrome and prevents users from changing them.

       The user's home page settings are only completely locked down if you either select the home page to be the new tab page, or set it to be a URL and specify a home page URL. If you don't specify the home page URL, then the user is still able to set the home page to the new tab page by specifying 'chrome://newtab'.

       The policy 'URLs to open on startup' is ignored unless you select 'Open a list of URLs' in 'Action on startup'.

** ShowHomeButton — Show Home button on toolbar
SYNOPSIS: true
 Setting the policy to Enabled shows the Home button on Google Chrome's toolbar. Setting the policy to Disabled keeps the Home button from appearing.

       If you set the policy, users can't change it in Google Chrome. If not set, users chooses whether to show the Home button.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Show the Home button on the toolbar
    value: true
  - caption: Hide the Home button from the toolbar
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** HomepageLocation — Configure the home page URL
SYNOPSIS: "https://www.chromium.org"
 Setting the policy sets the default homepage URL in Google Chrome. You open the homepage using the Home button. On desktop, the RestoreOnStartup policies control the pages that open on startup.

       If the homepage is set to the New Tab Page, by the user or HomepageIsNewTabPage, this policy has no effect.

        The URL needs a standard scheme, such as http://example.com or https://example.com. When this policy is set, users can't change their homepage URL in Google Chrome.

       Leaving both HomepageLocation and HomepageIsNewTabPage unset lets users choose their homepage.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Home page URL
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  type: string

** HomepageIsNewTabPage — Use New Tab Page as homepage
SYNOPSIS: true
 Setting the policy to Enabled makes the New Tab page the user's homepage, ignoring any homepage URL location. Setting the policy to Disabled means that their homepage is never the New Tab page, unless the user's homepage URL is set to chrome://newtab.

       If you set the policy, users can't change their homepage type in Google Chrome. If not set, the user decides whether or not the New Tab page is their homepage.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Use New Tab Page as homepage
    value: true
  - caption: Do not use New Tab Page as homepage
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** NewTabPageLocation — Configure the New Tab page URL
SYNOPSIS: "https://www.chromium.org"
 Setting the policy configures the default New Tab page URL and prevents users from changing it.

       The New Tab page opens with new tabs and windows.

       This policy doesn't decide which pages open on start up. Those are controlled by the RestoreOnStartup policies. This policy does affect the homepage, if that's set to open the New Tab page, as well as the startup page if it's set to open the New Tab page.

       It is a best practice to provide fully canonicalized URL, if the URL is not fully canonicalized Google Chrome will default to https://.

       Leaving the policy unset or empty puts the default New Tab page in use.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    dynamic_refresh: true
    per_profile: true
  label: New Tab page URL
  schema:
    type: string
  supported_on:
  - chrome.*:58-
  type: string

** RestoreOnStartup — Action on startup
SYNOPSIS: 4
 Setting the policy lets you specify system behavior on startup. Turning this setting off amounts to leaving it unset as Google Chrome must have specified start up behavior.

       If you set the policy, users can't change it in Google Chrome. If not set, users can change it.

       Setting this policy to RestoreOnStartupIsLastSession turns off some settings that rely on sessions or that perform actions on exit, such as clearing browsing data on exit or session-only cookies.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Open New Tab Page
    name: RestoreOnStartupIsNewTabPage
    value: 5
  - caption: Restore the last session
    name: RestoreOnStartupIsLastSession
    value: 1
  - caption: Open a list of URLs
    name: RestoreOnStartupIsURLs
    value: 4
  schema:
    enum:
    - 1
    - 4
    - 5
    type: integer
  supported_on:
  - chrome.*:8-
  type: int-enum

** RestoreOnStartupURLs — URLs to open on startup
SYNOPSIS: ["https://example.com", "https://www.chromium.org"]
 If RestoreOnStartup is set to RestoreOnStartupIsURLs, then setting RestoreOnStartupURLs to a list of URLs specify which URLs open.

       If not set, the New Tab page opens on start up.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:8-
  type: list

* RemoteAccess — Remote access
 Configure remote access options in Chrome Remote Desktop host.

       Chrome Remote Desktop host is a native service that runs on the target machine that a user can connect to using Chrome Remote Desktop application.  The native service is packaged and executed separately from the Google Chrome browser.

       These policies are ignored unless the
       Chrome Remote Desktop host is installed.

** RemoteAccessClientFirewallTraversal (DEPRECATED) — Enable firewall traversal from remote access client
SYNOPSIS: false
 This policy is no longer supported.
           Enables usage of STUN and relay servers when connecting to a remote client.

           If this setting is enabled, then this machine can discover and connect to remote host machines even if they are separated by a firewall.

           If this setting is disabled and outgoing UDP connections are filtered by the firewall, then this machine can only connect to host machines within the local network.

  features:
    dynamic_refresh: true
    platform_only: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:14-16
  type: main

** RemoteAccessHostClientDomain (DEPRECATED) — Configure the required domain name for remote access clients
SYNOPSIS: "my-awesome-domain.com"
 This policy is deprecated. Please use RemoteAccessHostClientDomainList instead.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:22-
  type: string

** RemoteAccessHostClientDomainList — Configure the required domain names for remote access clients
SYNOPSIS: ["my-awesome-domain.com", "my-auxiliary-domain.com"]
 Setting the policy specifies the client domain names that are imposed on remote access clients, and users can't change them. Only clients from one of the specified domains can connect to the host.

       Setting the policy to an empty list or leaving it unset applies the default policy for the connection type. For remote assistance, this allows clients from any domain to connect to the host. For anytime remote access, only the host owner can connect.

       See also RemoteAccessHostDomainList.

       Note: This setting overrides RemoteAccessHostClientDomain, if present.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:60-
  type: list

** RemoteAccessHostFirewallTraversal — Enable firewall traversal from remote access host
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset allows the usage of STUN servers, letting remote clients discover and connect to this machine, even if separated by a firewall.

       Setting the policy to Disabled when outgoing UDP connections are filtered by the firewall means the machine only allows connections from client machines within the local network.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Enable firewall traversal from remote access host
    value: true
  - caption: Disable firewall traversal from remote access host
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:14-
  type: main

** RemoteAccessHostDomain (DEPRECATED) — Configure the required domain name for remote access hosts
SYNOPSIS: "my-awesome-domain.com"
 This policy is deprecated. Please use RemoteAccessHostDomainList instead.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:22-
  type: string

** RemoteAccessHostDomainList — Configure the required domain names for remote access hosts
SYNOPSIS: ["my-awesome-domain.com", "my-auxiliary-domain.com"]
 Setting the policy specifies the host domain names that are imposed on remote access hosts, and users can't change them. Hosts can be shared only using accounts registered on one of the specified domain names.

       Setting the policy to an empty list or leaving it unset means hosts can be shared using any account.

       See also RemoteAccessHostClientDomainList.

       Note: This setting will override RemoteAccessHostDomain, if present.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:60-
  type: list

** RemoteAccessHostRequireTwoFactor (DEPRECATED) — Enable two-factor authentication for remote access hosts
SYNOPSIS: false
 Enables two-factor authentication for remote access hosts instead of a user-specified PIN.

           If this setting is enabled, then users must provide a valid two-factor code when accessing a host.

           If this setting is disabled or not set, then two-factor will not be enabled and the default behavior of having a user-defined PIN will be used.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:22-22
  type: main

** RemoteAccessHostTalkGadgetPrefix (DEPRECATED) — Configure the TalkGadget prefix for remote access hosts
SYNOPSIS: "chromoting-host"
 Configures the TalkGadget prefix that will be used by remote access hosts and prevents users from changing it.

           If specified, this prefix is prepended to the base TalkGadget name to create a full domain name for the TalkGadget. The base TalkGadget domain name is '.talkgadget.google.com'.

           If this setting is enabled, then hosts will use the custom domain name when accessing the TalkGadget instead of the default domain name.

           If this setting is disabled or not set, then the default TalkGadget domain name ('chromoting-host.talkgadget.google.com') will be used for all hosts.

           Remote access clients are not affected by this policy setting. They will always use 'chromoting-client.talkgadget.google.com' to access the TalkGadget.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:22-75
  type: string

** RemoteAccessHostRequireCurtain — Enable curtaining of remote access hosts
SYNOPSIS: false
 Setting the policy to Enabled turns off remote access hosts' physical input and output devices during a remote connection.

       Setting the policy to Disabled or leaving it unset lets both local and remote users interact with the host while it's shared.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Enable curtaining of the remote access host
    value: true
  - caption: Disable curtaining of the remote access host
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:23-
  tags:
  - system-security
  type: main

** RemoteAccessHostAllowClientPairing — Enable or disable PIN-less authentication for remote access hosts
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset lets users pair clients and hosts at connection time, eliminating the need to enter a PIN every time.

       Setting the policy to Disabled makes this feature unavailable.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Enable PIN-less authentication for the remote access host
    value: true
  - caption: Disable PIN-less authentication for the remote access host
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:30-
  type: main

** RemoteAccessHostAllowGnubbyAuth — Allow gnubby authentication for remote access hosts
SYNOPSIS: true
 Setting the policy to Enabled means gnubby authentication requests will be proxied across a remote host connection.

       Setting the policy to Disabled or leaving it unset means gnubby authentication requests won't be proxied.

       Note that this feature requires additional components which are not available outside of the Google network environment in order to work properly.

  features:
    dynamic_refresh: true
    internal_only: true
    per_profile: false
    platform_only: true
  items:
  - caption: Enable gnubby authentication for the remote access host
    value: true
  - caption: Disable gnubby authentication for the remote access host
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:35-
  type: main

** RemoteAccessHostAllowRelayedConnection — Enable the use of relay servers by the remote access host
SYNOPSIS: false
 If RemoteAccessHostFirewallTraversal is set to Enabled, setting RemoteAccessHostAllowRelayedConnection to Enabled or leaving it unset allows the use of remote clients to use relay servers to connect to this machine when a direct connection is not available, for example, because of firewall restrictions.

       Setting the policy to Disabled doesn't turn remote access off, but only allows connections from the same network (not NAT traversal or relay).

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Enable the use of relay servers by the remote access host
    value: true
  - caption: Disable the use of relay servers by the remote access host
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:36-
  type: main

** RemoteAccessHostUdpPortRange — Restrict the UDP port range used by the remote access host
SYNOPSIS: "12400-12409"
 Setting the policy restricts the UDP port range used by the remote access host in this machine.

       Leaving the policy unset or set to an empty string means the remote access host can use any available port.

       Note: If RemoteAccessHostFirewallTraversal is Disabled, the remote access host will use UDP ports in the 12400-12409 range.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:36-
  type: string

** RemoteAccessHostMatchUsername — Require that the name of the local user and the remote access host owner match
SYNOPSIS: false
 Setting the policy to Enabled has the remote access host compare the name of the local user the host is associated with and the name of the Google Account registered as the host owner ("johndoe," if the host is owned by "johndoe@example.com"). This host won't start if the host owner's name differs from the name of the local user that the host is associated with. To enforce that the owner's Google Account is associated with a specific domain, use the policy with RemoteAccessHostDomain.

       Setting the policy to Disabled or leaving it unset means the remote access host can be associated with any local user.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Require matching local user and remote access host owner
    value: true
  - caption: Do not require matching local user and remote access host owner
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:25-
  type: main

** RemoteAccessHostTokenUrl — URL where remote access clients should obtain their authentication token
SYNOPSIS: "https://example.com/issue"
 Setting the policy means the remote access host requires authenticating clients to get an authentication token from this URL to connect.

       This feature is disabled if empty or not set.

       Note: This policy must be used with RemoteAccessHostTokenValidationUrl.

  features:
    dynamic_refresh: true
    internal_only: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:28-
  tags:
  - website-sharing
  type: string

** RemoteAccessHostTokenValidationUrl — URL for validating remote access client authentication token
SYNOPSIS: "https://example.com/validate"
 Setting the policy means the remote access host uses this URL to validate authentication tokens from remote access clients to accept connections. This feature is disabled if empty or not set.

       Note: Use the policy with RemoteAccessHostTokenUrl.

  features:
    dynamic_refresh: true
    internal_only: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:28-
  tags:
  - website-sharing
  type: string

** RemoteAccessHostTokenValidationCertificateIssuer — Client certificate for connecting to RemoteAccessHostTokenValidationUrl
SYNOPSIS: "Example Certificate Authority"
 Setting the policy means the remote access host uses a client certificate with the given issuer CN to authenticate to RemoteAccessHostTokenValidationUrl. To use any available client certificate, set it to *. This feature is disabled if empty or not set.

  features:
    dynamic_refresh: true
    internal_only: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:28-
  type: string

** RemoteAccessHostDebugOverridePolicies (DEPRECATED) — Policy overrides for Debug builds of the remote access host
SYNOPSIS: "{ \"RemoteAccessHostMatchUsername\": true }"
 Overrides policies on Debug builds of the remote access host.

           The value is parsed as a JSON dictionary of policy name to policy value mappings.

  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:25-47
  type: string

** RemoteAccessHostAllowFileTransfer — Allow remote access users to transfer files to/from the host
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset allows users connected to a remote access host to transfer files between the client and the host. This doesn't apply to remote assistance connections, which don't support file transfer.

       Setting the policy to Disabled disallows file transfer.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Enable remote access users to transfer files to and from the remote host
    value: true
  - caption: Disable remote access users from transferring files to and from the remote
      host
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:74-
  type: main

** RemoteAccessHostEnableUserInterface — Enable connection-related UI on the host desktop when a connection is active
SYNOPSIS: false
 If this policy is disabled, connection related UI (e.g. the disconnect window) will not be shown for non-curtained remote access connections. Curtained remote access sessions and remote support sessions are not affected by this policy.

           This policy has no effect if it is set to true, left empty, or is not set.

  default: true
  features:
    dynamic_refresh: true
    internal_only: true
    per_profile: false
    platform_only: true
  items:
  - caption: Enable connection-related UI on the remote host desktop when a connection
      is active
    value: true
  - caption: Disable connection-related UI on the remote host desktop when a connection
      is active
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:88-
  type: main

** RemoteAccessHostAllowRemoteAccessConnections — Allow remote access connections to this machine
SYNOPSIS: false
 If this policy is Disabled, the remote access host service cannot be started or configured to accept incoming connections.  This policy does not affect remote support scenarios.

           This policy has no effect if it is set to Enabled, left empty, or is not set.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Allow remote access connections to this machine
    value: true
  - caption: Prevent remote access connections to this machine
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:89-
  type: main

** RemoteAccessHostMaximumSessionDurationMinutes — Maximum session duration allowed for remote access connections
SYNOPSIS: 1200
 If this policy is set, remote access connections will automatically disconnect after the number of minutes defined in the policy have elapsed. This does not prevent the client from reconnecting after the maximum session duration has been reached. Setting the policy to a value that is not within the min/max range may prevent the host from starting. This policy does not affect remote support scenarios.

           This policy has no effect if it is not set. In this case, remote access connections will have no maximum duration on this machine.

  default: null
  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    maximum: 10080
    minimum: 30
    type: integer
  supported_on:
  - chrome.*:89-
  type: int

** RemoteAccessHostClipboardSizeBytes — The maximum size, in bytes, that can be transferred between client and host via clipboard synchronization
SYNOPSIS: 1048576
 If this policy is set, clipboard data sent to and from the host will be truncated to the limit set by this policy.

           If a value of 0 is set, then clipboard sync is disabled.

           This policy affects both remote access and remote support scenarios.

           This policy has no effect if it is not set.

           Setting the policy to a value that is not within the min/max range may prevent the host from starting.

           Please note that the actual upper bound for the clipboard size is based on the maximum WebRTC data channel message size which this policy does not control.

  default: null
  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  schema:
    maximum: 2147483647
    minimum: 0
    type: integer
  supported_on:
  - chrome.*:97-
  type: int

** RemoteAccessHostAllowRemoteSupportConnections — Allow remote support connections to this machine
SYNOPSIS: false
 If this policy is disabled, the remote support host cannot be started or configured to accept incoming connections.

           This policy does not affect remote access scenarios.

           This policy does not prevent enterprise admins from connecting to managed Chrome OS devices.

           This policy has no effect if enabled, left empty, or is not set.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
    platform_only: true
  items:
  - caption: Allow remote support connections to this machine
    value: true
  - caption: Prevent remote support connections to this machine
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:97-
  type: main

* PasswordManager — Password manager
 Configures the password manager.

** PasswordManagerEnabled — Enable saving passwords to the password manager
SYNOPSIS: true
 Setting the policy to Enabled means users have Google Chrome remember passwords and provide them the next time they sign in to a site.

       Setting the policy to Disabled means users can't save new passwords, but previously saved passwords will still work.

       If the policy is set, users can't change it in Google Chrome. If not set, the user can turn off password saving.

  arc_support: This policy has no effect on Android apps.
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable saving passwords using the password manager
    value: true
  - caption: Disable saving passwords using the password manager
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** PasswordManagerAllowShowPasswords (DEPRECATED) — Allow users to show passwords in Password Manager (deprecated)
SYNOPSIS: false
 The associated setting was used before reauthentication on viewing passwords was introduced. Since then, the setting and hence this policy had no effect on the behavior of Chrome. The current behavior of Chrome is now the same as if the policy was set to disable showing passwords in clear text in the password manager settings page. That means that the settings page contains just a placeholder, and only upon the user clicking "Show" (and reauthenticating, if applicable) Chrome shows the password. Original description of the policy follows below.

           Controls whether the user may show passwords in clear text in the password manager.

           If you disable this setting, the password manager does not allow showing stored passwords in clear text in the password manager window.

           If you enable or do not set this policy, users can view their passwords in clear text in the password manager.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-50
  type: main

** PasswordLeakDetectionEnabled — Enable leak detection for entered credentials
SYNOPSIS: true
 Setting the policy to Enabled lets users have Google Chrome check whether usernames and passwords entered were part of a leak.

       If the policy is set, users can't change it in Google Chrome. If not set, credential leak checking is allowed, but the user can turn it off. 

       This behavior will not trigger if Safe Browsing is disabled (either by policy or by the user). In order to force Safe Browsing on, use the SafeBrowsingEnabled policy or the SafeBrowsingProtectionLevel policy.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable password leak detection
    value: true
  - caption: Disable password leak detection
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:79-
  tags:
  - google-sharing
  type: main

* Proxy — Proxy server
 Allows you to specify the proxy server used by Google Chrome and prevents users from changing proxy settings.

       If you choose to never use a proxy server and always connect directly, all other options are ignored.

       If you choose to auto detect the proxy server, all other options are ignored.

       For detailed examples, visit:
       https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett.

       If you enable this setting, Google Chrome and ARC-apps ignore all proxy-related options specified from the command line.

       Leaving these policies not set will allow the users to choose the proxy settings on their own.

** ProxyMode (DEPRECATED) — Choose how to specify proxy server settings
SYNOPSIS: "direct"
 This policy is deprecated, please use ProxySettings instead.

        Setting the policy to Enabled lets you specify the proxy server Chrome uses and prevents users from changing proxy settings. Chrome and ARC-apps ignore all proxy-related options specified from the command line. The policy only takes effect if the ProxySettings policy isn't specified.

        Other options are ignored if you choose:
          * direct = Never use a proxy server and always connect directly
          * system = Use system proxy settings
          * auto_detect = Auto detect the proxy server

        If you choose to use:
          * fixed_servers = Fixed proxy servers. You can specify further options with ProxyServer and ProxyBypassList. Only the HTTP proxy server with the highest priority is available for ARC-apps.
          * pac_script =  A .pac proxy script. Use ProxyPacUrl to set the URL to a proxy .pac file.

       Leaving the policy unset lets users choose the proxy settings.

       Note: For detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Never use a proxy
    name: ProxyDisabled
    value: direct
  - caption: Auto detect proxy settings
    name: ProxyAutoDetect
    value: auto_detect
  - caption: Use a .pac proxy script
    name: ProxyPacScript
    value: pac_script
  - caption: Use fixed proxy servers
    name: ProxyFixedServers
    value: fixed_servers
  - caption: Use system proxy settings
    name: ProxyUseSystem
    value: system
  schema:
    enum:
    - direct
    - auto_detect
    - pac_script
    - fixed_servers
    - system
    type: string
  supported_on:
  - chrome.*:10-
  - chrome_os:11-
  - android:30-
  type: string-enum

** ProxyServerMode (DEPRECATED) — Choose how to specify proxy server settings
SYNOPSIS: 2
 This policy is deprecated, use ProxyMode instead.

           Allows you to specify the proxy server used by Google Chrome and prevents users from changing proxy settings.

           This policy only takes effect  if the ProxySettings policy has not been specified.

           If you choose to never use a proxy server and always connect directly, all other options are ignored.

           If you choose to use system proxy settings or auto detect the proxy server, all other options are ignored.

           If you choose manual proxy settings, you can specify further options in 'Address or URL of proxy server', 'URL to a proxy .pac file' and 'Comma-separated list of proxy bypass rules'. Only the HTTP proxy server with the highest priority is available for ARC-apps.

           For detailed examples, visit:
           https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett.

           If you enable this setting, Google Chrome ignores all proxy-related options specified from the command line.

           Leaving this policy not set will allow the users to choose the proxy settings on their own.

  arc_support: You cannot force Android apps to use a proxy. A subset of proxy settings
    is made available to Android apps, which they may voluntarily choose to honor. See
    the ProxyMode policy for more details.
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Never use a proxy
    name: ProxyServerDisabled
    value: 0
  - caption: Auto detect proxy settings
    name: ProxyServerAutoDetect
    value: 1
  - caption: Manually specify proxy settings
    name: ProxyServerManual
    value: 2
  - caption: Use system proxy settings
    name: ProxyServerUseSystem
    value: 3
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    id: ProxyServerMode
    type: integer
  supported_on:
  - chrome.*:8-
  type: int-enum

** ProxyServer (DEPRECATED) — Address or URL of proxy server
SYNOPSIS: "123.123.123.123:8080"
 This policy is deprecated, please use ProxySettings instead.

        Setting the policy lets you specify the URL of the proxy server. This policy only takes effect if the ProxySettings policy isn't specified and you selected fixed_servers with ProxyMode.

        Leave this policy unset if you selected any other mode for setting proxy policies.

       Note: For detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).

  arc_support: You cannot force Android apps to use a proxy. A subset of proxy settings
    is made available to Android apps, which they may voluntarily choose to honor. See
    the ProxyMode policy for more details.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  type: string

** ProxyPacUrl (DEPRECATED) — URL to a proxy .pac file
SYNOPSIS: "https://internal.site/example.pac"
 This policy is deprecated, please use ProxySettings instead.

        Setting the policy lets you specify a URL to a proxy .pac file. This policy only takes effect if the ProxySettings policy isn't specified and you selected pac_script with ProxyMode.

        Leave this policy unset if you selected any other mode for setting proxy policies.

        Note: For detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).

  arc_support: You cannot force Android apps to use a proxy. A subset of proxy settings
    is made available to Android apps, which they may voluntarily choose to honor. See
    the ProxyMode policy for more details.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  type: string

** ProxyBypassList (DEPRECATED) — Proxy bypass rules
SYNOPSIS: "https://www.example1.com,https://www.example2.com,https://internalsite/"
 This policy is deprecated, please use ProxySettings instead.

        Setting the policy means Google Chrome bypasses any proxy for the list of hosts given here. This policy only takes effect if the ProxySettings policy isn't specified and you specified either fixed_servers or pac_script for ProxyMode.

        Leave this policy unset if you selected any other mode for setting proxy policies.

        Note: For more detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).

  arc_support: You cannot force Android apps to use a proxy. A subset of proxy settings
    is made available to Android apps, which they may voluntarily choose to honor. See
    the ProxyMode policy for more details.
  features:
    dynamic_refresh: true
    per_profile: true
  label: Comma-separated list of proxy bypass rules
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  type: string

* HTTPAuthentication — HTTP authentication
 Policies related to integrated HTTP authentication.

** AuthSchemes — Supported authentication schemes
SYNOPSIS: "basic,digest,ntlm,negotiate"
 Setting the policy specifies which HTTP authentication schemes Google Chrome supports.

       Leaving the policy unset employs all 4 schemes.

       Valid values:

       * basic

       * digest

       * ntlm

       * negotiate

       Note: Separate multiple values with commas.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:9-
  type: string

** DisableAuthNegotiateCnameLookup — Disable CNAME lookup when negotiating Kerberos authentication
SYNOPSIS: false
 Setting the policy to Enabled skips CNAME lookup. The server name is used as entered when generating the Kerberos SPN.

       Setting the policy to Disabled or leaving it unset means CNAME lookup determines the canonical name of the server when generating the Kerberos SPN.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Disable CNAME lookup during Kerberos authentication
    value: true
  - caption: Use CNAME lookup during Kerberos authentication
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:9-
  type: main

** EnableAuthNegotiatePort — Include non-standard port in Kerberos SPN
SYNOPSIS: false
 Setting the policy to Enabled and entering a nonstandard port (in other words, a port other than 80 or 443) includes it in the generated Kerberos SPN.

       Setting the policy to Disabled or leaving it unset means the generated Kerberos SPN won't include a port.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Include non-standard port in generated Kerberos SPN
    value: true
  - caption: Do not include port in generated Kerberos SPN
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:9-
  type: main

** BasicAuthOverHttpEnabled — Allow Basic authentication for HTTP
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset will allow Basic authentication challenges received over non-secure HTTP.

       Setting the policy to Disabled forbids non-secure HTTP requests from using the Basic authentication scheme; only secure HTTPS is allowed.

       This policy setting is ignored (and Basic is always forbidden) if the AuthSchemes policy is set and does not include Basic.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Basic authentication is allowed on HTTP connections
    value: true
  - caption: Non-secure HTTP connections are not permitted to use Basic authentication;
      HTTPS is required
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:88-
  type: main

** AuthServerAllowlist — Authentication server allowlist
SYNOPSIS: "*.example.com,example.com"
 Setting the policy specifies which servers should be allowed for integrated authentication. Integrated authentication is only on when Google Chrome gets an authentication challenge from a proxy or from a server in this permitted list.

       Leaving the policy unset means Google Chrome tries to detect if a server is on the intranet. Only then will it respond to IWA requests. If a server is detected as internet, then Google Chrome ignores IWA requests from it.

       Note: Separate multiple server names with commas. Wildcards, *, are allowed.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:86-
  type: string

** AuthServerWhitelist (DEPRECATED) — Authentication server whitelist
SYNOPSIS: "*.example.com,example.com"
 This policy is deprecated, please use the 'AuthServerAllowlist' policy instead.

       Setting the policy specifies which servers should be allowed for integrated authentication. Integrated authentication is only on when Google Chrome gets an authentication challenge from a proxy or from a server in this permitted list.

       Leaving the policy unset means Google Chrome tries to detect if a server is on the intranet. Only then will it respond to IWA requests. If a server is detected as internet, then Google Chrome ignores IWA requests from it.

       Note: Separate multiple server names with commas. Wildcards, *, are allowed.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:9-
  type: string

** AuthNegotiateDelegateAllowlist — Kerberos delegation server allowlist
SYNOPSIS: "foobar.example.com"
 Setting the policy assigns servers that Google Chrome may delegate to. Separate multiple server names with commas. Wildcards, *, are allowed.

       Leaving the policy unset means Google Chrome won't delegate user credentials, even if a server is detected as intranet.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:86-
  type: string

** AuthNegotiateDelegateWhitelist (DEPRECATED) — Kerberos delegation server whitelist
SYNOPSIS: "foobar.example.com"
 This policy is deprecated, please use the 'AuthNegotiateDelegateAllowlist' policy instead.

       Setting the policy assigns servers that Google Chrome may delegate to. Separate multiple server names with commas. Wildcards, *, are allowed.

       Leaving the policy unset means Google Chrome won't delegate user credentials, even if a server is detected as intranet.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:9-
  type: string

** AuthNegotiateDelegateByKdcPolicy — Use KDC policy to delegate credentials.
SYNOPSIS: true
 Setting the policy to Enabled means HTTP authentication respects approval by KDC policy. In other words, Google Chrome delegates user credentials to the service being accessed if the KDC sets OK-AS-DELEGATE on the service ticket. See RFC 5896 ( https://tools.ietf.org/html/rfc5896.html ). The service should also be allowed by AuthNegotiateDelegateAllowlist.

       Setting the policy to Disabled or leaving it unset means KDC policy is ignored on supported platforms and only AuthNegotiateDelegateAllowlist is respected.

       On Microsoft® Windows®, KDC policy is always respected.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Use KDC policy approval during HTTP authentication
    value: true
  - caption: Ignore KDC policy approval during HTTP authentication
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:74-
  tags:
  - website-sharing
  type: main

** GSSAPILibraryName — GSSAPI library name
SYNOPSIS: "libgssapi_krb5.so.2"
 Setting the policy specifies which GSSAPI library to use for HTTP authentication. Set the policy to either a library name or a full path.

       Leaving the policy unset means Google Chrome uses a default library name.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.linux:9-
  type: string

** AllowCrossOriginAuthPrompt — Cross-origin HTTP Authentication prompts
SYNOPSIS: false
 Setting the policy to Enabled allows third-party images on a page to show an authentication prompt.

        Setting the policy to Disabled or leaving it unset renders third-party images unable to show an authentication prompt.

       Typically, this policy is Disabled as a phishing defense.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Allow third-party images to show an authentication prompt
    value: true
  - caption: Prevent third-party images from showing an authentication prompt
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:13-
  - chrome_os:62-
  tags:
  - website-sharing
  type: main

** NtlmV2Enabled — Enable NTLMv2 authentication.
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset turns NTLMv2 on.

       Setting the policy to Disabled turns NTLMv2 off.

       All recent versions of Samba and Microsoft® Windows® servers support NTLMv2. This should only be turned off for backward compatibility as it reduces the security of authentication.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Turn NTLMv2 on
    value: true
  - caption: Turn NTLMv2 off
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:63-
  tags:
  - website-sharing
  type: main

** IntegratedWebAuthenticationAllowed (DEPRECATED) — Allow reusing the Google Chrome OS login credentials for network authentication
SYNOPSIS: true
  This policy is deprecated, please configure Kerberos policies to reuse the login password instead.

  default: false
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: The Google Chrome OS login credentials will be used for network authentication
      to a managed proxy.
    value: true
  - caption: The Google Chrome OS login credentials will not be used for network authentication.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:89-93
  type: main

* Kerberos — Kerberos
 Policies related to Kerberos authentication.

** KerberosRememberPasswordEnabled — Enable 'Remember password' feature
SYNOPSIS: true
 Controls whether the 'Remember password' feature is enabled in the Kerberos authentication dialog. Passwords are stored encryped on disk, only accessible to the Kerberos system daemon and during a user session.

           If this policy is enabled or not set, users can decide whether Kerberos passwords are remembered, so that they do not have to be entered again. Kerberos tickets are automatically fetched unless additional authentication is required (two-factor authentication).

           If this policy is disabled, passwords are never remembered and all previously stored passwords are removed. Users have to enter their password every time they need to authenticate with the Kerberos system. Depending on server settings, this usually happens between every 8 hours to several months.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:87-
  tags:
  - website-sharing
  type: main

** KerberosAccounts — Configure Kerberos accounts
SYNOPSIS: [{"principal": "${LOGIN_EMAIL}", "password": "${PASSWORD}"}, {"principal": "user1@REALM.COM", "remember_password": true}, {"principal": "user2@REALM.COM", "password": "p4zzw0rd!", "krb5conf": ["[libdefaults]", "  default_tgs_enctypes = aes256-cts-hmac-sha1-96", "  default_tkt_enctypes = aes256-cts-hmac-sha1-96", "  permitted_enctypes = aes256-cts-hmac-sha1-96", "  default_realm = REALM.COM", "", "[realms]", "  REALM.COM = {", "    kdc = us-west.realm.com", "    master_kdc = us-west.realm.com", "    kpasswd_server = us-west.realm.com", "  }"]}]
 Adds prefilled Kerberos accounts. If the Kerberos credentials match the login credentials, an account can be configured to reuse the login credentials by specifying '${{LOGIN_EMAIL}}' and ${{PASSWORD}}' for principal and password, respectively, so that the Kerberos ticket can be retrieved automatically unless two-factor authentication is configured. Users cannot modify accounts added via this policy.

           If this policy is enabled, the list of accounts defined by the policy is added to the Kerberos Accounts settings.

           If this policy is disabled or not set, no accounts are added to the Kerberos Accounts settings and all accounts previously added with this policy are removed. Users may still add accounts manually if the 'Users can add Kerberos accounts' policy is enabled.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      properties:
        krb5conf:
          description: Kerberos configuration (one line per array item), see https://web.mit.edu/kerberos/krb5-1.12/doc/admin/conf_files/krb5_conf.html.
          items:
            type: string
          type: array
        password:
          description: Kerberos password. The placeholder ${{PASSWORD}} is replaced
            by the login password.
          sensitiveValue: true
          type: string
        principal:
          description: User principal 'user@realm'. The placeholder ${{LOGIN_ID}} is
            replaced by the username 'user'. The placeholder ${{LOGIN_EMAIL}} is replaced
            by the full principal 'user@realm'.
          pattern: ^(?:[^@]+@[^@]+)|(?:\${LOGIN_ID})|(?:\${LOGIN_EMAIL})$
          type: string
        remember_password:
          description: Whether to remember the Kerberos password. If not set or set
            to false, the password is not remembered. Ignored if the password is not
            specified.
          type: boolean
      required:
      - principal
      type: object
    type: array
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:87-
  tags:
  - website-sharing
  type: dict

* Extensions — Extensions
 Configures extension-related policies. The user is not allowed to install blocked extensions unless they are whitelisted. You can also force Google Chrome to automatically install extensions by specifying them in ExtensionInstallForcelist. Force-installed extensions are installed regardless whether they are present in the blocklist.

** ExtensionInstallAllowlist — Configure extension installation allow list
SYNOPSIS: ["extension_id1", "extension_id2"]
 Setting the policy specifies which extensions are not subject to the blocklist.

        A blocklist value of * means all extensions are blocked and users can only install extensions listed in the allow list.

        By default, all extensions are allowed. But, if you prohibited extensions by policy, use the list of allowed extensions to change that policy.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Extension IDs to exempt from the blocklist
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** ExtensionInstallBlocklist — Configure extension installation blocklist
SYNOPSIS: ["extension_id1", "extension_id2"]
 Allows you to specify which extensions the users can NOT install. Extensions already installed will be disabled if blocked, without a way for the user to enable them. Once an extension disabled due to the blocklist is removed from it, it will automatically get re-enabled.

           A blocklist value of '*' means all extensions are blocked unless they are explicitly listed in the allowlist.

           If this policy is left not set the user can install any extension in Google Chrome.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Extension IDs the user should be prevented from installing (or * for all)
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** ExtensionInstallBlacklist (DEPRECATED) — Configure extension installation blacklist
SYNOPSIS: ["extension_id1", "extension_id2"]
 This policy is deprecated, please use the 'ExtensionInstallBlocklist' policy instead.

        Setting the policy specifies which extensions users can't install. Extensions already installed are turned off, if prohibited, without a way for users to turn them on. If a prohibited extension gets removed from the blocked list, it's automatically re-enabled. Use a value of * to prohibit all extensions, except those explicitly allowed.

       If the policy is unset, users can install any extension in Google Chrome.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Extension IDs the user should be prevented from installing (or * for all)
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:8-
  type: list

** ExtensionInstallWhitelist (DEPRECATED) — Configure extension installation whitelist
SYNOPSIS: ["extension_id1", "extension_id2"]
 This policy is deprecated, please use the 'ExtensionInstallAllowlist' policy instead.

       Setting the policy specifies which extensions are exempt from the list of prohibited extensions. Use a value of * for ExtensionInstallBlacklist to prohibit all extensions, and users can only install explicitly allowed extensions. By default, all extensions are allowed. But, if you prohibited extensions by policy, use the list of allowed extensions to change that policy.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Extension IDs to exempt from the blacklist
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:8-
  type: list

** ExtensionInstallForcelist — Configure the list of force-installed apps and extensions
SYNOPSIS: ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;https://clients2.google.com/service/update2/crx", "abcdefghijklmnopabcdefghijklmnop"]
 Setting the policy specifies a list of apps and extensions that install silently, without user interaction, and which users can't uninstall or turn off. Permissions are granted implicitly, including for the enterprise.deviceAttributes and enterprise.platformKeys extension APIs. (These 2 APIs aren't available to apps and extensions that aren't force-installed.)

       Leaving the policy unset means no apps or extensions are autoinstalled, and users can uninstall any app or extension in Google Chrome.

       This policy superseeds ExtensionInstallBlocklist policy. If a previously force-installed app or extension is removed from this list, Google Chrome automatically uninstalls it.

       On Microsoft® Windows® instances, apps and extensions from outside the Chrome Web Store can only be forced installed if the instance is joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management.

       On macOS instances, apps and extensions from outside the Chrome Web Store can only be force installed if the instance is managed via MDM, or joined to a domain via MCX.

       The source code of any extension may be altered by users through developer tools, potentially rendering the extension dysfunctional. If this is a concern, set the DeveloperToolsDisabled policy.

       Each list item of the policy is a string that contains an extension ID and, optionally, an "update" URL separated by a semicolon (;). The extension ID is the 32-letter string found, for example, on chrome://extensions when in Developer mode. If specified, the "update" URL should point to an Update Manifest XML document ( https://developer.chrome.com/extensions/autoupdate ). By default, the Chrome Web Store's update URL is used. The "update" URL set in this policy is only used for the initial installation; subsequent updates of the extension use the update URL in the extension's manifest.

        Note: This policy doesn't apply to Incognito mode. Read about hosting extensions ( https://developer.chrome.com/extensions/hosting ).

  arc_support: Android apps can be force-installed from the Google Admin console using
    Google Play. They do not use this policy.
  features:
    dynamic_refresh: true
    per_profile: true
  label: Extension/App IDs and update URLs to be silently installed
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:9-
  tags:
  - full-admin-access
  type: list

** ExtensionInstallSources — Configure extension, app, and user script install sources
SYNOPSIS: ["https://corp.mycompany.com/*"]
 Setting the policy specifies which URLs may install extensions, apps, and themes. Before Google Chrome 21, users could click on a link to a *.crx file, and Google Chrome would offer to install the file after a few warnings. Afterwards, such files must be downloaded and dragged to the Google Chrome settings page. This setting allows specific URLs to have the old, easier installation flow.

       Each item in this list is an extension-style match pattern (see https://developer.chrome.com/extensions/match_patterns). Users can easily install items from any URL that matches an item in this list. Both the location of the *.crx file and the page where the download is started from (the referrer) must be allowed by these patterns.

       ExtensionInstallBlocklist takes precedence over this policy. That is, an extension on the blocklist won't be installed, even if it happens from a site on this list.

  features:
    dynamic_refresh: true
    per_profile: true
  label: URL patterns to allow extension, app, and user script installs from
  schema:
    id: ExtensionInstallSources
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:21-
  tags:
  - full-admin-access
  - system-security
  type: list

** ExtensionAllowedTypes — Configure allowed app/extension types
SYNOPSIS: ["hosted_app"]
 Setting the policy controls which apps and extensions may be installed in Google Chrome, which hosts they can interact with, and limits runtime access.

       Leaving the policy unset results in no restrictions on the acceptable extension and app types.

       Extensions and apps which have a type that's not on the list won't be installed. Each value should be one of these strings:

       * "extension"

       * "theme"

       * "user_script"

       * "hosted_app"

       * "legacy_packaged_app"

       * "platform_app"

       See the Google Chrome extensions documentation for more information on these types.

       Versions earlier than 75 that use multiple comma separated extension IDs aren't supported and are skipped. The rest of the policy applies.

       Note: This policy also affects extensions and apps to be force-installed using ExtensionInstallForcelist.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Types of extensions/apps that are allowed to be installed
  schema:
    id: ExtensionAllowedTypes
    items:
      enum:
      - extension
      - theme
      - user_script
      - hosted_app
      - legacy_packaged_app
      - platform_app
      type: string
    type: array
  supported_on:
  - chrome.*:25-
  type: list

** ExtensionAllowInsecureUpdates (DEPRECATED) — Allow insecure algorithms in integrity checks on extension updates and installs
SYNOPSIS: false
 Setting the policy to Enabled means Google Chrome permits installation and updates for extensions hosted outside the Chrome Web Store, the content of which might only be minimally protected.

       Setting the policy to Disabled means Google Chrome won't permit fresh installation of (and updates to) such extensions. The policy has no effect in Google Chrome 78 and later.

       Leaving this policy unset means it is Enabled in Google Chrome 73 to 75, and Disabled in Google Chrome 76 and 77.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow installation and updates for extensions hosted outside of Chrome
      Web Store
    value: true
  - caption: Prevent installation and updates for extensions hosted outside of Chrome
      Web Store
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:73-77
  tags:
  - system-security
  type: main

** ExtensionSettings — Extension management settings
SYNOPSIS: {"abcdefghijklmnopabcdefghijklmnop": {"installation_mode": "allowed", "blocked_permissions": ["history"], "minimum_version_required": "1.0.1", "toolbar_pin": "force_pinned"}, "bcdefghijklmnopabcdefghijklmnopa": {"installation_mode": "force_installed", "update_url": "https://example.com/update_url", "allowed_permissions": ["downloads"], "runtime_blocked_hosts": ["*://*.example.com"], "runtime_allowed_hosts": ["*://good.example.com"]}, "cdefghijklmnopabcdefghijklmnopab": {"installation_mode": "blocked", "blocked_install_message": "Custom error message."}, "defghijklmnopabcdefghijklmnopabc,efghijklmnopabcdefghijklmnopabcd": {"installation_mode": "blocked", "blocked_install_message": "Custom error message."}, "update_url:https://www.example.com/update.xml": {"blocked_permissions": ["wallpaper"], "allowed_permissions": ["downloads"], "installation_mode": "allowed"}, "fghijklmnopabcdefghijklmnopabcde": {"installation_mode": "removed", "blocked_install_message": "Custom removal message."}, "ghijklmnopabcdefghijklmnopabcdef": {"installation_mode": "force_installed", "update_url": "https://example.com/update_url", "override_update_url": true}, "*": {"installation_mode": "blocked", "blocked_permissions": ["downloads", "bookmarks"], "install_sources": ["https://company-intranet/chromeapps"], "allowed_types": ["hosted_app"], "runtime_blocked_hosts": ["*://*.example.com"], "runtime_allowed_hosts": ["*://good.example.com"], "blocked_install_message": "Custom error message."}}
 Setting the policy controls extension management settings for Google Chrome, including any controlled by existing extension-related policies. The policy supersedes any legacy policies that might be set.

       This policy maps an extension ID or an update URL to its specific setting only. A default configuration can be set for the special ID "*", which applies to all extensions without a custom configuration in this policy. With an update URL, configuration applies to extensions with the exact update URL stated in the extension manifest ( http://support.google.com/chrome/a?p=Configure_ExtensionSettings_policy ). If the 'override_update_url' flag is set to true, the extension is installed and updated using the "update" URL specified in the ExtensionInstallForcelist policy or in 'update_url' field in this policy. The flag 'override_update_url' is ignored if the 'update_url' is a Chrome Web Store url.

       Note: For Windows® instances not joined to a Microsoft® Active Directory® domain, forced installation is limited to apps and extensions listed in the Chrome Web Store.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    patternProperties:
      ^[a-p]{32}(?:,[a-p]{32})*,?$:
        properties:
          allowed_permissions:
            $ref: ListOfPermissions
          blocked_install_message:
            description: text that will be displayed to the user in the chrome webstore
              if installation is blocked.
            type: string
          blocked_permissions:
            id: ListOfPermissions
            items:
              pattern: ^[a-z][a-zA-Z0-9.]*$
              type: string
            type: array
          installation_mode:
            enum:
            - blocked
            - allowed
            - force_installed
            - normal_installed
            - removed
            type: string
          minimum_version_required:
            pattern: ^[0-9]+([.][0-9]+)*$
            type: string
          override_update_url:
            type: boolean
          runtime_allowed_hosts:
            $ref: ListOfUrlPatterns
          runtime_blocked_hosts:
            id: ListOfUrlPatterns
            items:
              type: string
            type: array
          toolbar_pin:
            enum:
            - force_pinned
            - default_unpinned
            type: string
          update_url:
            type: string
        type: object
      '^update_url:':
        properties:
          allowed_permissions:
            $ref: ListOfPermissions
          blocked_permissions:
            $ref: ListOfPermissions
          installation_mode:
            enum:
            - blocked
            - allowed
            - removed
            type: string
        type: object
    properties:
      '*':
        properties:
          allowed_types:
            $ref: ExtensionAllowedTypes
          blocked_install_message:
            type: string
          blocked_permissions:
            $ref: ListOfPermissions
          install_sources:
            $ref: ExtensionInstallSources
          installation_mode:
            enum:
            - blocked
            - allowed
            - removed
            type: string
          runtime_allowed_hosts:
            $ref: ListOfUrlPatterns
          runtime_blocked_hosts:
            $ref: ListOfUrlPatterns
        type: object
    type: object
  supported_on:
  - chrome.*:62-
  type: dict
  url_schema: https://www.chromium.org/administrators/policy-list-3/extension-settings-full

** BlockExternalExtensions — Blocks external extensions from being installed
SYNOPSIS: true
 Controls external extensions installation.

       Enabling this setting blocks external extensions from being installed.

       Disabling this setting or leaving it unset allows external extensions to be installed.

       External extensions and their installation are documented at https://developer.chrome.com/apps/external_extensions.
      

  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Block installation of external extensions
    value: true
  - caption: Allow installation of external extensions
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-
  type: main

* DefaultSearchProvider — Default search provider
 Configures the default search provider. You can specify the default search provider that the user will use or choose to disable default search.

** DefaultSearchProviderEnabled — Enable the default search provider
SYNOPSIS: true
 Setting the policy to Enabled means a default search is performed when a user enters non-URL text in the address bar. To specify the default search provider, set the rest of the default search policies. If you leave those policies empty, the user can choose the default provider. Setting the policy to Disabled means there's no search when the user enters non-URL text in the address bar.

       If you set the policy, users can't change it in Google Chrome. If not set, the default search provider is on, and users can set the search provider list.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  default: null
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable the default search provider
    value: true
  - caption: Disable the default search provider
    value: false
  - caption: Enable the default search provider and allow users to modify the search
      provier list
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** DefaultSearchProviderName — Default search provider name
SYNOPSIS: "My Intranet Search"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderName specifies the default search provider's name.

       Leaving DefaultSearchProviderName unset means the hostname specified by the search URL is used.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  tags:
  - website-sharing
  type: string

** DefaultSearchProviderKeyword — Default search provider keyword
SYNOPSIS: "mis"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderKeyword specifies the keyword or shortcut used in the address bar to trigger the search for this provider.

       Leaving DefaultSearchProviderKeyword unset means no keyword activates the search provider.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  type: string

** DefaultSearchProviderSearchURL — Default search provider search URL
SYNOPSIS: "https://search.my.company/search?q={searchTerms}"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSearchURL specifies the URL of the search engine used during a default search. The URL should include the string '{searchTerms}', replaced in the query by the user's search terms.

       You can specify Google's search URL as: '{google:baseURL}search?q={searchTerms}&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:searchClient}{google:sourceId}ie={inputEncoding}'.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  tags:
  - website-sharing
  type: string

** DefaultSearchProviderSuggestURL — Default search provider suggest URL
SYNOPSIS: "https://search.my.company/suggest?q={searchTerms}"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSuggestURL specifies the URL of the search engine to provide search suggestions. The URL should include the string '{searchTerms}', replaced in the query by the user's search terms.

       You can specify Google's search URL as: '{google:baseURL}complete/search?output=chrome&q={searchTerms}'.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  type: string

** DefaultSearchProviderInstantURL (DEPRECATED) — Default search provider instant URL
SYNOPSIS: "https://search.my.company/suggest?q={searchTerms}"
 Specifies the URL of the search engine used to provide instant results. The URL should contain the string '{searchTerms}', which will be replaced at query time by the text the user has entered so far.

           This policy is optional. If not set, no instant search results will be provided.

           Google's instant results URL can be specified as: '{google:baseURL}suggest?q={searchTerms}'.

           This policy is only respected if the 'DefaultSearchProviderEnabled' policy is enabled.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:10-63
  type: string

** DefaultSearchProviderIconURL — Default search provider icon
SYNOPSIS: "https://search.my.company/favicon.ico"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderIconURL specifies the default search provider's favorite icon URL.

       Leaving DefaultSearchProviderIconURL unset means there's no icon for the search provider.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:8-
  type: string

** DefaultSearchProviderEncodings — Default search provider encodings
SYNOPSIS: ["UTF-8", "UTF-16", "GB2312", "ISO-8859-1"]
 If DefaultSearchProviderEnabled is on, setting DefaultSearchProviderEncodings specifies the character encodings supported by the search provider. Encodings are code page names such as UTF-8, GB2312, and ISO-8859-1. They're tried in the order provided.

       Leaving DefaultSearchProviderEncodings unset puts UTF-8 in use.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:8-
  type: list

** DefaultSearchProviderAlternateURLs — List of alternate URLs for the default search provider
SYNOPSIS: ["https://search.my.company/suggest#q={searchTerms}", "https://search.my.company/suggest/search#q={searchTerms}"]
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderAlternateURLs specifies a list of alternate URLs for extracting search terms from the search engine. The URLs should include the string '{searchTerms}'.

       Leaving DefaultSearchProviderAlternateURLs unset means no alternate URLs are used to extract search terms.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:24-
  type: list

** DefaultSearchProviderSearchTermsReplacementKey (DEPRECATED) — Parameter controlling search term placement for the default search provider
SYNOPSIS: "espv"
 If this policy is set and a search URL suggested from the omnibox contains this parameter in the query string or in the fragment identifier, then the suggestion will show the search terms and search provider instead of the raw search URL.

           This policy is optional. If not set, no search term replacement will be performed.

           This policy is only respected if the 'DefaultSearchProviderEnabled' policy is enabled.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:25-63
  type: string

** DefaultSearchProviderImageURL — Parameter providing search-by-image feature for the default search provider
SYNOPSIS: "https://search.my.company/searchbyimage/upload"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderImageURL specifies the URL of the search engine used for image search. (If DefaultSearchProviderImageURLPostParams is set, then image search requests use the POST method instead.)

       Leaving DefaultSearchProviderImageURL unset means no image search is used.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:29-
  type: string

** DefaultSearchProviderNewTabURL — Default search provider new tab page URL
SYNOPSIS: "https://search.my.company/newtab"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderNewTabURL specifies the URL of the search engine used to provide a New Tab page.

       Leaving DefaultSearchProviderNewTabURL unset means no new tab page is provided.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:30-
  type: string

** DefaultSearchProviderSearchURLPostParams — Parameters for search URL which uses POST
SYNOPSIS: "q={searchTerms},ie=utf-8,oe=utf-8"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSearchURLPostParams specifies the parameters when searching a URL with POST. It consists of comma-separated, name-value pairs. If a value is a template parameter, such as '{searchTerms}', real search terms data replaces it.

       Leaving DefaultSearchProviderSearchURLPostParams unset means search requests are sent using the GET method.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:29-
  type: string

** DefaultSearchProviderSuggestURLPostParams — Parameters for suggest URL which uses POST
SYNOPSIS: "q={searchTerms},ie=utf-8,oe=utf-8"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSuggestURLPostParams specifies the parameters during suggestion search with POST. It consists of comma-separated, name-value pairs. If a value is a template parameter, such as '{searchTerms}', real search terms data replaces it.

       Leaving DefaultSearchProviderSuggestURLPostParams unset unset means suggest search requests are sent using the GET method.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:29-
  type: string

** DefaultSearchProviderInstantURLPostParams (DEPRECATED) — Parameters for instant URL which uses POST
SYNOPSIS: "q={searchTerms},ie=utf-8,oe=utf-8"
 Specifies the parameters used when doing instant search with POST. It consists of comma-separated name/value pairs. If a value is a template parameter, like {searchTerms} in above example, it will be replaced with real search terms data.

           This policy is optional. If not set, instant search request will be sent using the GET method.

           This policy is only respected if the 'DefaultSearchProviderEnabled' policy is enabled.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:29-63
  type: string

** DefaultSearchProviderImageURLPostParams — Parameters for image URL which uses POST
SYNOPSIS: "content={imageThumbnail},url={imageURL},sbisrc={SearchSource}"
 If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderImageURLPostParams specifies the parameters during image search with POST. It consists of comma-separated, name-value pairs. If a value is a template parameter, such as {imageThumbnail}, real image thumbnail data replaces it.

       Leaving DefaultSearchProviderImageURLPostParams unset means image search request is sent using the GET method.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:29-
  type: string

* ContentSettings — Content settings
 Content settings allow you to specify how contents of a specific type (for example Cookies, Images or JavaScript) is handled.

** DefaultCookiesSetting — Default cookies setting
SYNOPSIS: 1
 Unless the RestoreOnStartup policy is set to permanently restore URLs from previous sessions, then setting CookiesSessionOnlyForUrls lets you make a list of URL patterns that specify sites that can and can't set cookies for one session.

       Leaving the policy unset results in the use of DefaultCookiesSetting for all sites, if it's set. If not, the user's personal setting applies. URLs not covered by the patterns specified also result in the use of defaults.

       While no specific policy takes precedence, see CookiesBlockedForUrls and CookiesAllowedForUrls. URL patterns among these 3 policies must not conflict.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow all sites to set local data
    name: AllowCookies
    value: 1
  - caption: Do not allow any site to set local data
    name: BlockCookies
    value: 2
  - caption: Keep cookies for the duration of the session
    name: SessionOnly
    value: 4
  schema:
    enum:
    - 1
    - 2
    - 4
    type: integer
  supported_on:
  - chrome.*:10-
  type: int-enum

** DefaultFileHandlingGuardSetting (DEPRECATED) — Control use of the File Handling API
SYNOPSIS: 2
 Setting the policy to AskFileHandling lets web apps ask for access to file types via the File Handling API. Setting the policy to BlockFileHandling denies access to file types.

       Leaving it unset lets web apps ask for access, but users can change this setting.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any web app to access file types via the File Handling API
    name: BlockFileHandling
    value: 2
  - caption: Allow web apps to ask the user to grant access to file types via the File
      Handling API
    name: AskFileHandling
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:91-96
  tags:
  - website-sharing
  type: int-enum

** DefaultFileSystemReadGuardSetting — Control use of the File System API for reading
SYNOPSIS: 2
 Setting the policy to 3 lets websites ask for read access to files and directories in the host operating system's file system via the File System API. Setting the policy to 2 denies access.

       Leaving it unset lets websites ask for access, but users can change this setting.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any site to request read access to files and directories via
      the File System API
    name: BlockFileSystemRead
    value: 2
  - caption: Allow sites to ask the user to grant read access to files and directories
      via the File System API
    name: AskFileSystemRead
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:86-
  tags:
  - website-sharing
  type: int-enum

** DefaultFileSystemWriteGuardSetting — Control use of the File System API for writing
SYNOPSIS: 2
 Setting the policy to 3 lets websites ask for write access to files and directories in the host operating system's file system. Setting the policy to 2 denies access.

       Leaving it unset lets websites ask for access, but users can change this setting.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any site to request write access to files and directories
    name: BlockFileSystemWrite
    value: 2
  - caption: Allow sites to ask the user to grant write access to files and directories
    name: AskFileSystemWrite
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:86-
  tags:
  - website-sharing
  type: int-enum

** DefaultImagesSetting — Default images setting
SYNOPSIS: 1
 Setting the policy to 1 lets all websites display images. Setting the policy to 2 denies image display.

       Leaving it unset allows images, but users can change this setting.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow all sites to show all images
    name: AllowImages
    value: 1
  - caption: Do not allow any site to show images
    name: BlockImages
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:10-
  type: int-enum

** DefaultInsecureContentSetting — Control use of insecure content exceptions
SYNOPSIS: 2
 Allows you to set whether users can add exceptions to allow mixed content for specific sites.

           This policy can be overridden for specific URL patterns using the 'InsecureContentAllowedForUrls' and 'InsecureContentBlockedForUrls' policies.

           If this policy is left not set, users will be allowed to add exceptions to allow blockable mixed content and disable autoupgrades for optionally blockable mixed content.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any site to load mixed content
    name: BlockInsecureContent
    value: 2
  - caption: Allow users to add exceptions to allow mixed content
    name: AllowExceptionsInsecureContent
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:79-
  type: int-enum

** DefaultJavaScriptSetting — Default JavaScript setting
SYNOPSIS: 1
 Setting the policy to 1 lets websites run JavaScript. Setting the policy to 2 denies JavaScript.

       Leaving it unset allows JavaScript, but users can change this setting.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow all sites to run JavaScript
    name: AllowJavaScript
    value: 1
  - caption: Do not allow any site to run JavaScript
    name: BlockJavaScript
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:10-
  type: int-enum

** DefaultJavaScriptJitSetting — Control use of JavaScript JIT
SYNOPSIS: 1
 Allows you to set whether Google Chrome will run the v8 JavaScript engine with JIT (Just In Time) compiler enabled or not.

           Disabling the JavaScript JIT will mean that Google Chrome may render web content more slowly, and may also disable parts of JavaScript including WebAssembly. Disabling the JavaScript JIT may allow Google Chrome to render web content in a more secure configuration.

           This policy can be overridden for specific URL patterns using the JavaScriptJitAllowedForSites and JavaScriptJitBlockedForSites policies.

           If this policy is left not set, JavaScript JIT is enabled.

  default: 1
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow any site to run JavaScript JIT
    name: AllowJavaScriptJit
    value: 1
  - caption: Do not allow any site to run JavaScript JIT
    name: BlockJavaScriptJit
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:93-
  type: int-enum

** DefaultPluginsSetting (DEPRECATED) — Default Flash setting
SYNOPSIS: 1
 This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy to 1 lets you set whether all websites can automatically run the Flash plugin. Setting the policy to 2 denies this plugin for all websites. Click to play lets the Flash plugin run, but users click on the placeholder to start it.

       Leaving the policy unset uses BlockPlugins and lets users change this setting.

       Note: Automatic playback is only for domains explicitly listed in the PluginsAllowedForUrls policy. To turn automatic playback on for all sites, add http://* and https://* to this list.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow all sites to automatically run the Flash plugin
    name: AllowPlugins
    value: 1
  - caption: Block the Flash plugin
    name: BlockPlugins
    value: 2
  - caption: Click to play
    name: ClickToPlay
    value: 3
  schema:
    enum:
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:10-87
  type: int-enum

** DefaultPopupsSetting — Default popups setting
SYNOPSIS: 1
 Setting the policy to 1 lets websites display pop-ups. Setting the policy to 2 denies pop-ups.

       Leaving it unset means BlockPopups applies, but users can change this setting.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow all sites to show pop-ups
    name: AllowPopups
    value: 1
  - caption: Do not allow any site to show popups
    name: BlockPopups
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:10-
  type: int-enum

** DefaultNotificationsSetting — Default notification setting
SYNOPSIS: 2
 Setting the policy to 1 lets websites display desktop notifications. Setting the policy to 2 denies desktop notifications.

       Leaving it unset means AskNotifications applies, but users can change this setting.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow sites to show desktop notifications
    name: AllowNotifications
    value: 1
  - caption: Do not allow any site to show desktop notifications
    name: BlockNotifications
    value: 2
  - caption: Ask every time a site wants to show desktop notifications
    name: AskNotifications
    value: 3
  schema:
    enum:
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:10-
  type: int-enum

** DefaultGeolocationSetting — Default geolocation setting
SYNOPSIS: 1
 Setting the policy to 1 lets sites track the users' physical location as the default state. Setting the policy to 2 denies this tracking by default. You can set the policy to ask whenever a site wants to track the users' physical location.

       Leaving the policy unset means the AskGeolocation policy applies, but users can change this setting.

  arc_support: If this policy is set to BlockGeolocation, Android apps cannot access
    location information. If you set this policy to any other value or leave it unset,
    the user is asked to consent when an Android app wants to access location information.
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow sites to track the users' physical location
    name: AllowGeolocation
    value: 1
  - caption: Do not allow any site to track the users' physical location
    name: BlockGeolocation
    value: 2
  - caption: Ask whenever a site wants to track the users' physical location
    name: AskGeolocation
    value: 3
  schema:
    enum:
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:10-
  tags:
  - website-sharing
  type: int-enum

** DefaultMediaStreamSetting (DEPRECATED) — Default mediastream setting
SYNOPSIS: 2
 Allows you to set whether websites are allowed to get access to media capture devices. Access to media capture devices can be allowed by default, or the user can be asked every time a website wants to get access to media capture devices.

           If this policy is left not set, 'PromptOnAccess' will be used and the user will be able to change it.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any site to access the camera and microphone
    name: BlockAccess
    value: 2
  - caption: Ask every time a site wants to access the camera and/or microphone
    name: PromptOnAccess
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:22-
  tags:
  - website-sharing
  type: int-enum

** DefaultSensorsSetting — Default sensors setting
SYNOPSIS: 2
 Setting the policy to 1 lets websites access and use sensors such as motion and light. Setting the policy to 2 denies acess to sensors.

       Leaving it unset means AllowSensors applies, but users can change this setting.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow sites to access sensors
    name: AllowSensors
    value: 1
  - caption: Do not allow any site to access sensors
    name: BlockSensors
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:88-
  type: int-enum

** DefaultWebBluetoothGuardSetting — Control use of the Web Bluetooth API
SYNOPSIS: 2
 Setting the policy to 3 lets websites ask for access to nearby Bluetooth devices. Setting the policy to 2 denies access to nearby Bluetooth devices.

       Leaving the policy unset lets sites ask for access, but users can change this setting.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any site to request access to Bluetooth devices via the Web
      Bluetooth API
    name: BlockWebBluetooth
    value: 2
  - caption: Allow sites to ask the user to grant access to a nearby Bluetooth device
    name: AskWebBluetooth
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:50-
  tags:
  - website-sharing
  type: int-enum

** DefaultKeygenSetting (DEPRECATED) — Default key generation setting
SYNOPSIS: 2
 Allows you to set whether websites are allowed to use key generation. Using key generation can be either allowed for all websites or denied for all websites.

           If this policy is left not set, 'BlockKeygen' will be used and the user will be able to change it.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow all sites to use key generation
    name: AllowKeygen
    value: 1
  - caption: Do not allow any site to use key generation
    name: BlockKeygen
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:49-56
  tags:
  - system-security
  - website-sharing
  - local-data-access
  type: int-enum

** DefaultWebUsbGuardSetting — Control use of the WebUSB API
SYNOPSIS: 2
 Setting the policy to 3 lets websites ask for access to connected USB devices. Setting the policy to 2 denies access to connected USB devices.

       Leaving it unset lets websites ask for access, but users can change this setting.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any site to request access to USB devices via the WebUSB API
    name: BlockWebUsb
    value: 2
  - caption: Allow sites to ask the user to grant access to a connected USB device
    name: AskWebUsb
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:67-
  tags:
  - website-sharing
  type: int-enum

** DefaultSerialGuardSetting — Control use of the Serial API
SYNOPSIS: 2
 Setting the policy to 3 lets websites ask for access to serial ports. Setting the policy to 2 denies access to serial ports.

       Leaving it unset lets websites ask for access, but users can change this setting.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not allow any site to request access to serial ports via the Serial
      API
    name: BlockSerial
    value: 2
  - caption: Allow sites to ask the user to grant access to a serial port
    name: AskSerial
    value: 3
  schema:
    enum:
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:86-
  tags:
  - website-sharing
  type: int-enum

** AutoSelectCertificateForUrls — Automatically select client certificates for these sites
SYNOPSIS: ["{\"pattern\":\"https://www.example.com\",\"filter\":{\"ISSUER\":{\"CN\":\"certificate issuer name\", \"L\": \"certificate issuer location\", \"O\": \"certificate issuer org\", \"OU\": \"certificate issuer org unit\"}, \"SUBJECT\":{\"CN\":\"certificate subject name\", \"L\": \"certificate subject location\", \"O\": \"certificate subject org\", \"OU\": \"certificate subject org unit\"}}}"]
 Setting the policy lets you make a list of URL patterns that specify sites for which Chrome can automatically select a client certificate. The value is an array of stringified JSON dictionaries, each with the form { "pattern": "$URL_PATTERN", "filter" : $FILTER }, where $URL_PATTERN is a content setting pattern. $FILTER restricts the client certificates the browser automatically selects from. Independent of the filter, only certificates that match the server's certificate request are selected.

       Examples for the usage of the $FILTER section:

       * When $FILTER is set to { "ISSUER": { "CN": "$ISSUER_CN" } }, only client certificates issued by a certificate with the CommonName $ISSUER_CN are selected.

       * When $FILTER contains both the "ISSUER" and the "SUBJECT" sections, only client certificates that satisfy both conditions are selected.

       * When $FILTER contains a "SUBJECT" section with the "O" value, a certificate needs at least one organization matching the specified value to be selected.

       * When $FILTER contains a "SUBJECT" section with a "OU" value, a certificate needs at least one organizational unit matching the specified value to be selected.

       * When $FILTER is set to {}, the selection of client certificates is not additionally restricted. Note that filters provided by the web server still apply.

       Leaving the policy unset means there's no autoselection for any site.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:15-
  tags:
  - website-sharing
  type: list
  validation_schema:
    items:
      properties:
        filter:
          properties:
            ISSUER:
              id: CertPrincipalFields
              properties:
                CN:
                  type: string
                L:
                  type: string
                O:
                  type: string
                OU:
                  type: string
              type: object
            SUBJECT:
              $ref: CertPrincipalFields
          type: object
        pattern:
          type: string
      type: object
    type: array

** CookiesAllowedForUrls — Allow cookies on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Allows you to set a list of url patterns that specify sites which are allowed to set cookies.

           If this policy is left not set the global default value will be used for all sites either from the DefaultCookiesSetting policy if it is set, or the user's personal configuration otherwise.

           See also policies CookiesBlockedForUrls and CookiesSessionOnlyForUrls. Note that there must be no conflicting URL patterns between these three policies - it is unspecified which policy takes precedence.

           For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  - chrome_os:11-
  - android:30-
  type: list

** CookiesBlockedForUrls — Block cookies on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you make a list of URL patterns that specify sites that can't set cookies.

       Leaving the policy unset results in the use of DefaultCookiesSetting for all sites, if it's set. If not, the user's personal setting applies.

       While no specific policy takes precedence, see CookiesAllowedForUrls and CookiesSessionOnlyForUrls. URL patterns among these 3 policies must not conflict.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** CookiesSessionOnlyForUrls — Limit cookies from matching URLs to the current session
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Unless the RestoreOnStartup policy is set to permanently restore URLs from previous sessions, then setting CookiesSessionOnlyForUrls lets you make a list of URL patterns that specify sites that can and can't set cookies for one session.

       Leaving the policy unset results in the use of DefaultCookiesSetting for all sites, if it's set. If not, the user's personal setting applies. URLs not covered by the patterns specified also result in the use of defaults.

       While no specific policy takes precedence, see CookiesBlockedForUrls and CookiesAllowedForUrls. URL patterns among these 3 policies must not conflict.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** FileHandlingAllowedForUrls (DEPRECATED) — Allow the File Handling API on these web apps
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which web apps are granted access to file types.

       Leaving the policy unset means DefaultFileHandlingGuardSetting applies for all web apps, if it's set. If not, users' personal settings apply.

       For URL patterns which match neither FileHandlingAllowedForUrls nor FileHandlingBlockedForUrls, DefaultFileHandlingGuardSetting, or the users' personal settings, will be used, in that order.

       URL patterns must not conflict with FileHandlingBlockedForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:91-96
  tags:
  - website-sharing
  type: list

** FileHandlingBlockedForUrls (DEPRECATED) — Block the File Handling API on these web apps
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which web apps can't ask users to grant them access to file types.

       Leaving the policy unset means DefaultFileHandlingGuardSetting applies for all web apps, if it's set. If not, the user's personal setting applies.

       For URL patterns which match neither FileHandlingAllowedForUrls nor FileHandlingBlockedForUrls, DefaultFileHandlingGuardSetting, or the users' personal settings, will be used, in that order.

       URL patterns must not conflict with FileHandlingAllowedForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:91-96
  type: list

** FileSystemReadAskForUrls — Allow read access via the File System API on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them read access to files or directories in the host operating system's file system via the File System API.

       Leaving the policy unset means DefaultFileSystemReadGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.

       URL patterns must not conflict with FileSystemReadBlockedForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  tags:
  - website-sharing
  type: list

** FileSystemReadBlockedForUrls — Block read access via the File System API on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them read access to files or directories in the host operating system's file system via the File System API.

       Leaving the policy unset means DefaultFileSystemReadGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.

       URL patterns can't conflict with FileSystemReadAskForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** FileSystemWriteAskForUrls — Allow write access to files and directories on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them write access to files or directories in the host operating system's file system.

       Leaving the policy unset means DefaultFileSystemWriteGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.

       URL patterns must not conflict with FileSystemWriteBlockedForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  tags:
  - website-sharing
  type: list

** FileSystemWriteBlockedForUrls — Block write access to files and directories on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them write access to files or directories in the host operating system's file system.

       Leaving the policy unset means DefaultFileSystemWriteGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.

       URL patterns can't conflict with FileSystemWriteAskForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** ImagesAllowedForUrls — Allow images on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify sites that may display images.

       Leaving the policy unset means DefaultImagesSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

       Note that previously this policy was erroneously enabled on Android, but this functionality has never been fully supported on Android.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** ImagesBlockedForUrls — Block images on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify sites that can't display images.

       Leaving the policy unset means DefaultImagesSetting applies for all sites, if it's set. If not, the user's personal setting applies.

        For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

        Note that previously this policy was erroneously enabled on Android, but this functionality has never been fully supported on Android.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** InsecureContentAllowedForUrls — Allow insecure content on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Allows you to set a list of url patterns that specify sites which are allowed to display blockable (i.e. active) mixed content (i.e. HTTP content on HTTPS sites) and for which optionally blockable mixed content upgrades will be disabled.

           If this policy is left not set blockable mixed content will be blocked and optionally blockable mixed content will be upgraded, and users will be allowed to set exceptions to allow it for specific sites.

           For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:79-
  type: list

** InsecureContentBlockedForUrls — Block insecure content on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Allows you to set a list of url patterns that specify sites which are not allowed to display blockable (i.e. active) mixed content (i.e. HTTP content on HTTPS sites), and for which optionally blockable (i.e. passive) mixed content will be upgraded.

           If this policy is left not set blockable mixed content will be blocked and optionally blockable mixed content will be upgraded, but users will be allowed to set exceptions to allow it for specific sites.

           For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:79-
  type: list

** JavaScriptAllowedForUrls — Allow JavaScript on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can run JavaScript.

       Leaving the policy unset means DefaultJavaScriptSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** JavaScriptBlockedForUrls — Block JavaScript on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can't run JavaScript.

       Leaving the policy unset means DefaultJavaScriptSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** JavaScriptJitAllowedForSites — Allow JavaScript to use JIT on these sites
SYNOPSIS: ["[*.]example.edu"]
 Allows you to set a list of site url patterns that specify sites which are allowed to run JavaScript with JIT (Just In Time) compiler enabled.

           For detailed information on valid site url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

           JavaScript JIT policy exceptions will only be enforced at a site granularity (eTLD+1). A policy set for only subdomain.site.com will not correctly apply to site.com or subdomain.site.com since they both resolve to the same eTLD+1 (site.com) for which there is no policy. In this case, policy must be set on site.com to apply correctly for both site.com and subdomain.site.com.

           This policy applies on a frame-by-frame basis and not based on top level origin url alone, so e.g. if site-one.com is listed in the JavaScriptJitAllowedForSites policy but site-one.com loads a frame containing site-two.com then site-one.com will have JavaScript JIT enabled, but site-two.com will use the policy from DefaultJavaScriptJitSetting, if set, or default to JavaScript JIT enabled.

           If this policy is not set for a site then the policy from DefaultJavaScriptJitSetting applies to the site, if set, otherwise Javascript JIT is enabled for the site.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:93-
  type: list

** JavaScriptJitBlockedForSites — Block JavaScript from using JIT on these sites
SYNOPSIS: ["[*.]example.edu"]
 Allows you to set a list of site url patterns that specify sites which are not allowed to run JavaScript JIT (Just In Time) compiler enabled.

           Disabling the JavaScript JIT will mean that Google Chrome may render web content more slowly, and may also disable parts of JavaScript including WebAssembly. Disabling the JavaScript JIT may allow Google Chrome to render web content in a more secure configuration.

           For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

           JavaScript JIT policy exceptions will only be enforced at a site granularity (eTLD+1). A policy set for only subdomain.site.com will not correctly apply to site.com or subdomain.site.com since they both resolve to the same eTLD+1 (site.com) for which there is no policy. In this case, policy must be set on site.com to apply correctly for both site.com and subdomain.site.com.

           This policy applies on a frame-by-frame basis and not based on top level origin url alone, so e.g. if site-one.com is listed in the JavaScriptJitBlockedForSites policy but site-one.com loads a frame containing site-two.com then site-one.com will have JavaScript JIT disabled, but site-two.com will use the policy from DefaultJavaScriptJitSetting, if set, or default to JavaScript JIT enabled.

           If this policy is not set for a site then the policy from DefaultJavaScriptJitSetting applies to the site, if set, otherwise JavaScript JIT is enabled for the site.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:93-
  type: list

** KeygenAllowedForUrls (DEPRECATED) — Allow key generation on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Allows you to set a list of url patterns that specify sites which are allowed to use key generation. If a url pattern is in 'KeygenBlockedForUrls', that overrides these exceptions.

           If this policy is left not set the global default value will be used for all sites either from the 'DefaultKeygenSetting' policy if it is set, or the user's personal configuration otherwise.

           For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:49-56
  tags:
  - system-security
  - website-sharing
  - local-data-access
  type: list

** KeygenBlockedForUrls (DEPRECATED) — Block key generation on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Allows you to set a list of url patterns that specify sites which are not allowed to use key generation. If a url pattern is in 'KeygenAllowedForUrls', this policy overrides these exceptions.

           If this policy is left not set the global default value will be used for all sites either from the 'DefaultKeygenSetting' policy if it is set, or the user's personal configuration otherwise.

           For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:49-56
  tags:
  - system-security
  - website-sharing
  - local-data-access
  type: list

** LegacySameSiteCookieBehaviorEnabled (DEPRECATED) — Default legacy SameSite cookie behavior setting
SYNOPSIS: 1
 This policy is deprecated, if you still require legacy cookie behavior please use LegacySameSiteCookieBehaviorEnabledForDomainList. Allows you to revert all cookies to legacy SameSite behavior. Reverting to legacy behavior causes cookies that don't specify a SameSite attribute to be treated as if they were "SameSite=None", removes the requirement for "SameSite=None" cookies to carry the "Secure" attribute, and skips the scheme comparison when evaluating if two sites are same-site. See https://www.chromium.org/administrators/policy-list-3/cookie-legacy-samesite-policies for full description.

           When this policy is not set, the default SameSite behavior for cookies will depend on the user's personal configuration for the SameSite-by-default feature, the Cookies-without-SameSite-must-be-secure feature, and the Schemeful Same-Site feature which may be set by a field trial or by enabling or disabling the same-site-by-default-cookies flag, the cookies-without-same-site-must-be-secure flag, or the schemeful-same-site flag, respectively.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Revert to legacy SameSite behavior for cookies on all sites
    name: DefaultToLegacySameSiteCookieBehavior
    value: 1
  - caption: Use SameSite-by-default behavior for cookies on all sites
    name: DefaultToSameSiteByDefaultCookieBehavior
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:79-92
  type: int-enum

** LegacySameSiteCookieBehaviorEnabledForDomainList — Revert to legacy SameSite behavior for cookies on these sites
SYNOPSIS: ["www.example.com", "[*.]example.edu"]
 Cookies set for domains matching these patterns will revert to legacy SameSite behavior. Reverting to legacy behavior causes cookies that don't specify a SameSite attribute to be treated as if they were "SameSite=None", removes the requirement for "SameSite=None" cookies to carry the "Secure" attribute, and skips the scheme comparison when evaluating if two sites are same-site. See https://www.chromium.org/administrators/policy-list-3/cookie-legacy-samesite-policies for full description.

           For cookies on domains not covered by the patterns specified here, or for all cookies if this policy is not set, the global default value will be the user's personal configuration.

           For detailed information on valid patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.

           Note that patterns you list here are treated as domains, not URLs, so you should not specify a scheme or port.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:79-
  type: list

** PluginsAllowedForUrls (DEPRECATED) — Allow the Flash plugin on these sites
SYNOPSIS: ["https://www.example.com", "http://example.edu:8080"]
 This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy lets you set a list of URL patterns that specify the sites that can run the Flash plugin.

       Leaving the policy unset means DefaultPluginsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. However, starting in M85, patterns with '*' and '[*.]' wildcards in the host are no longer supported for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-87
  type: list

** PluginsBlockedForUrls (DEPRECATED) — Block the Flash plugin on these sites
SYNOPSIS: ["https://www.example.com", "http://example.edu:8080"]
 This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy lets you set a list of URL patterns that specify the sites that can't run the Flash plugin.

       Leaving the policy unset means DefaultPluginsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. However, starting in M85, patterns with '*' and '[*.]' wildcards in the host are no longer supported for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-87
  type: list

** PopupsAllowedForUrls — Allow popups on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can open pop-ups.

       Leaving the policy unset means DefaultPopupsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** RegisteredProtocolHandlers — Register protocol handlers
SYNOPSIS: [{"protocol": "mailto", "url": "https://mail.google.com/mail/?extsrc=mailto&url=%s", "default": true}]
 Setting the policy (as recommended only) lets you register a list of protocol handlers, which merge with the ones that the user registers, putting both sets in use. Set the property "protocol" to the scheme, such as "mailto", and set the property "URL" to the URL pattern of the application that handles the scheme specified in the "protocol" field. The pattern can include a "%s" placeholder, which the handled URL replaces.

       Users can't remove a protocol handler registered by policy. However, by installing a new default handler, they can change the protocol handlers installed by policy.

  arc_support: The protocol handlers set via this policy are not used when handling
    Android intents.
  features:
    can_be_mandatory: false
    can_be_recommended: true
    dynamic_refresh: false
    per_profile: true
  schema:
    items:
      properties:
        default:
          description: A boolean flag indicating if the protocol handler should be set
            as the default.
          type: boolean
        protocol:
          description: The protocol for the protocol handler.
          type: string
        url:
          description: The URL of the protocol handler.
          type: string
      required:
      - protocol
      - url
      type: object
    type: array
  supported_on:
  - chrome.*:37-
  type: dict

** PopupsBlockedForUrls — Block popups on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can't open pop-ups.

       Leaving the policy unset means DefaultPopupsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-
  type: list

** NotificationsAllowedForUrls — Allow notifications on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can display notifications.

       Leaving the policy unset means DefaultNotificationsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:16-
  type: list

** NotificationsBlockedForUrls — Block notifications on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can't display notifications.

       Leaving the policy unset means DefaultNotificationsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:16-
  type: list

** SensorsAllowedForUrls — Allow access to sensors on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can access sensors like motion and light sensors.

       Leaving the policy unset means DefaultSensorsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       If the same URL pattern exists in both this policy and the SensorsBlockedForUrls policy, the latter is prioritized and access to motion or light sensors will be blocked.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:88-
  type: list

** SensorsBlockedForUrls — Block access to sensors on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that specify the sites that can't access sensors like motion and light sensors.

       Leaving the policy unset means DefaultSensorsSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       If the same URL pattern exists in both this policy and the SensorsAllowedForUrls policy, this policy is prioritized and access to motion or light sensors will be blocked.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:88-
  type: list

** WebUsbAllowDevicesForUrls — Automatically grant permission to these sites to connect to USB devices with the given vendor and product IDs.
SYNOPSIS: [{"devices": [{"vendor_id": 1234, "product_id": 5678}], "urls": ["https://google.com"]}]
 Setting the policy lets you list the URL patterns that specify which sites are automatically granted permission to access a USB device with the given vendor and product IDs. Each item in the list requires both devices and urls fields for the policy to be valid. Each item in the devices field can have a vendor_id and product_id field. Omitting the vendor_id field will create a policy matching any device. Omitting the product_id field will create a policy matching any device with the given vendor ID. A policy which has a product_id field without a vendor_id field is invalid.

       The USB permission model will grant the specified URL permission to access the USB device as a top-level origin. If embedded frames need to access USB devices, the 'usb' feature-policy header should be used to grant access. The URL must be valid, otherwise the policy is ignored.

       Deprecated: The USB permission model used to support specifying both the requesting and embedding URLs. This is deprecated and only supported for backwards compatiblity in this manner: if both a requesting and embedding URL is specified, then the embedding URL will be granted the permission as top-level origin and the requsting URL will be ignored entirely.

       This policy overrides DefaultWebUsbGuardSetting, WebUsbAskForUrls, WebUsbBlockedForUrls and the user's preferences.

       This policy only affects access to USB devices through the WebUSB API. To grant access to USB devices through the Web Serial API see the SerialAllowUsbDevicesForUrls policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      properties:
        devices:
          items:
            properties:
              product_id:
                maximum: 65535
                minimum: 0
                type: integer
              vendor_id:
                maximum: 65535
                minimum: 0
                type: integer
            type: object
          type: array
        urls:
          items:
            type: string
          type: array
      required:
      - devices
      - urls
      type: object
    type: array
  supported_on:
  - chrome.*:74-
  tags:
  - website-sharing
  type: dict

** WebUsbAskForUrls — Allow WebUSB on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them access to a USB device.

       Leaving the policy unset means DefaultWebUsbGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.

       URL patterns must not conflict with WebUsbAskForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:68-
  - android:68-
  - chrome.*:68-
  tags:
  - website-sharing
  type: list

** WebUsbBlockedForUrls — Block WebUSB on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them access to a USB device.

       Leaving the policy unset means DefaultWebUsbGuardSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       URL patterns can't conflict with WebUsbAskForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:68-
  type: list

** SerialAskForUrls — Allow the Serial API on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them access to a serial port.

       Leaving the policy unset means DefaultSerialGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.

       For URL patterns which do not match the policy SerialBlockedForUrls (if there is a match), DefaultSerialGuardSetting (if set), or the users' personal settings take precedence, in that order.

       URL patterns must not conflict with SerialBlockedForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  tags:
  - website-sharing
  type: list

** SerialBlockedForUrls — Block the Serial API on these sites
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them access to a serial port.

       Leaving the policy unset means DefaultSerialGuardSetting applies for all sites, if it's set. If not, the user's personal setting applies.

       For URL patterns which do not match the policy SerialAskForUrls (if there is a match), DefaultSerialGuardSetting (if set), or the users' personal settings take precedence, in that order.

       URL patterns can't conflict with SerialAskForUrls. Neither policy takes precedence if a URL matches with both.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** SerialAllowAllPortsForUrls — Automatically grant permission to sites to connect all serial ports.
SYNOPSIS: ["https://www.example.com"]
 Setting the policy allows you to list sites which are automatically granted permission to access all available serial ports.

       The URLs must be valid, otherwise the policy is ignored. Only the origin (scheme, host and port) of the URL is considered.

       On Chrome OS, this policy only applies to affiliated users.

       This policy overrides DefaultSerialGuardSetting, SerialAskForUrls, SerialBlockedForUrls and the user's preferences.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:94-
  type: list

** SerialAllowUsbDevicesForUrls — Automatically grant permission to sites to connect to USB serial devices.
SYNOPSIS: [{"devices": [{"vendor_id": 1234, "product_id": 5678}], "urls": ["https://specific-device.example.com"]}, {"devices": [{"vendor_id": 1234}], "urls": ["https://all-vendor-devices.example.com"]}]
 Setting the policy allows you to list sites which are automatically granted permission to access USB serial devices with vendor and product IDs matching the vendor_id and product_id fields. Omitting the product_id field allows the given sites permission to access devices with a vendor ID matching the vendor_id field and any product ID.

       The URLs must be valid, otherwise the policy is ignored. Only the origin (scheme, host and port) of the URL is considered.

       On Chrome OS, this policy only applies to affiliated users.

       This policy overrides DefaultSerialGuardSetting, SerialAskForUrls, SerialBlockedForUrls and the user's preferences.

       This policy only affects access to USB devices through the Web Serial API. To grant access to USB devices through the WebUSB API see the WebUsbAllowDevicesForUrls policy.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      properties:
        devices:
          items:
            properties:
              product_id:
                maximum: 65535
                minimum: 0
                type: integer
              vendor_id:
                maximum: 65535
                minimum: 0
                type: integer
            required:
            - vendor_id
            type: object
          type: array
        urls:
          items:
            type: string
          type: array
      required:
      - devices
      - urls
      type: object
    type: array
  supported_on:
  - chrome.*:94-
  tags:
  - website-sharing
  type: dict

* NativeMessaging — Native Messaging
 Configures policies for Native Messaging. Blocked native messaging hosts won't be allowed unless they are whitelisted.

** NativeMessagingBlacklist (DEPRECATED) — Configure native messaging blocklist
SYNOPSIS: ["com.native.messaging.host.name1", "com.native.messaging.host.name2"]
 This policy is deprecated, please use the 'NativeMessagingBlocklist' policy instead.

       Setting the policy specifies which native messaging hosts shouldn't be loaded. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.

       Leaving the policy unset means Google Chrome loads all installed native messaging hosts.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Names of the forbidden native messaging hosts (or * for all)
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:34-
  type: list

** NativeMessagingBlocklist — Configure native messaging blocklist
SYNOPSIS: ["com.native.messaging.host.name1", "com.native.messaging.host.name2"]
 Setting the policy specifies which native messaging hosts shouldn't be loaded. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.

       Leaving the policy unset means Google Chrome loads all installed native messaging hosts.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Names of the forbidden native messaging hosts (or * for all)
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** NativeMessagingAllowlist — Configure native messaging allowlist
SYNOPSIS: ["com.native.messaging.host.name1", "com.native.messaging.host.name2"]
 Setting the policy specifies which native messaging hosts aren't subject to the deny list. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.

       All native messaging hosts are allowed by default. But, if all native messaging hosts are denied by policy, the admin can use the allow list to change that policy.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Names of the native messaging hosts to exempt from the blocklist
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** NativeMessagingWhitelist (DEPRECATED) — Configure native messaging whitelist
SYNOPSIS: ["com.native.messaging.host.name1", "com.native.messaging.host.name2"]
 This policy is deprecated, please use the 'NativeMessagingAllowlist' policy instead.

       Setting the policy specifies which native messaging hosts aren't subject to the deny list. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.

       All native messaging hosts are allowed by default. But, if all native messaging hosts are denied by policy, the admin can use the allow list to change that policy.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Names of the native messaging hosts to exempt from the blocklist
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:34-
  type: list

** NativeMessagingUserLevelHosts — Allow user-level Native Messaging hosts (installed without admin permissions)
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset means Google Chrome can use native messaging hosts installed at the user level.

       Setting the policy to Disabled means Google Chrome can only use these hosts if installed at the system level.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow both user-level and system-level native messaging hosts
    value: true
  - caption: Allow only system-level native messaging hosts
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:34-
  type: main

* ChromeFrameRendererSettings — Default HTML renderer for Google Chrome Frame
 Allows you to configure the default HTML renderer when Google Chrome Frame is installed.
       The default setting is to allow the host browser do the rendering, but you can optionally override this and have Google Chrome Frame render HTML pages by default.

** ChromeFrameRendererSettings (DEPRECATED) — Default HTML renderer for Google Chrome Frame
SYNOPSIS: 1
 Allows you to configure the default HTML renderer when Google Chrome Frame is installed.
           The default setting used when this policy is left not set is to allow the host browser do the rendering, but you can optionally override this and have Google Chrome Frame render HTML pages by default.

  features:
    dynamic_refresh: false
  items:
  - caption: Use the host browser by default
    name: RenderInHost
    value: 0
  - caption: Use Google Chrome Frame by default
    name: RenderInChromeFrame
    value: 1
  schema:
    enum:
    - 0
    - 1
    type: integer
  supported_on:
  - chrome_frame:8-32
  type: int-enum

** RenderInChromeFrameList (DEPRECATED) — Always render the following URL patterns in Google Chrome Frame
SYNOPSIS: ["https://www.example.com", "https://www.example.edu"]
 Customize the list of URL patterns that should always be rendered by Google Chrome Frame.

           If this policy is not set the default renderer will be used for all sites as specified by the 'ChromeFrameRendererSettings' policy.

           For example patterns see https://www.chromium.org/developers/how-tos/chrome-frame-getting-started.

  features:
    dynamic_refresh: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_frame:8-32
  type: list

** RenderInHostList (DEPRECATED) — Always render the following URL patterns in the host browser
SYNOPSIS: ["https://www.example.com", "https://www.example.edu"]
 Customize the list of URL patterns that should always be rendered by the host browser.

           If this policy is not set the default renderer will be used for all sites as specified by the 'ChromeFrameRendererSettings' policy.

           For example patterns see https://www.chromium.org/developers/how-tos/chrome-frame-getting-started.

  features:
    dynamic_refresh: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_frame:8-32
  type: list

** AdditionalLaunchParameters (DEPRECATED) — Additional command line parameters for Google Chrome
SYNOPSIS: "--enable-media-stream --enable-media-source"
 Allows you to specify additional parameters that are used when Google Chrome Frame launches Google Chrome.

           If this policy is not set the default command line will be used.

  features:
    dynamic_refresh: false
  schema:
    type: string
  supported_on:
  - chrome_frame:19-32
  type: string

** SkipMetadataCheck (DEPRECATED) — Skip the meta tag check in Google Chrome Frame
SYNOPSIS: false
 Normally pages with X-UA-Compatible set to chrome=1 will be rendered in Google Chrome Frame regardless of the 'ChromeFrameRendererSettings' policy.

           If you enable this setting, pages will not be scanned for meta tags.

           If you disable this setting, pages will be scanned for meta tags.

           If this policy is not set, pages will be scanned for meta tags.

  features:
    dynamic_refresh: false
  schema:
    type: boolean
  supported_on:
  - chrome_frame:31-32
  type: main

* ChromeFrameContentTypes — Allow Google Chrome Frame to handle the following content types
 Allow Google Chrome Frame to handle the following content types.

** ChromeFrameContentTypes (DEPRECATED) — Allow Google Chrome Frame to handle the listed content types
SYNOPSIS: ["text/xml", "application/xml"]
 If this policy is set, the specified content types are handled by Google Chrome Frame.

           If this policy is not set, the default renderer is used for all sites. (The ChromeFrameRendererSettings policy may be used to configure the default renderer.)

  features:
    dynamic_refresh: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_frame:8-32
  type: list

* Drive — Google Drive
 Configure Google Drive in Google Chrome OS.

** DriveDisabledOverCellular — Disable Google Drive over cellular connections in the Google Chrome OS Files app
SYNOPSIS: true
 Setting the policy to Enabled turns off Google Drive syncing in the Google Chrome OS Files app when on a cellular connection. Data is only synced to Drive when connected through Wi-Fi or Ethernet.

       Setting the policy to Disabled or leaving it unset lets users transfer files to Drive on cellular connections.

  arc_support: This policy has no effect on the Android Google Drive app. If you want
    to prevent use of Google Drive over cellular connections, you should disallow installation
    of the Android Google Drive app.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:19-
  type: main

* PowerManagement — Power management
 Configure power management in Google Chrome OS.

       These policies let you configure how Google Chrome OS behaves when the user remains idle for some amount of time.

** ScreenDimDelayAC (DEPRECATED) — Screen dim delay when running on AC power
SYNOPSIS: 420000
 Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.

           Specifies the length of time without user input after which the screen is dimmed when running on AC power.

           When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS dims the screen.

           When this policy is set to zero, Google Chrome OS does not dim the screen when the user becomes idle.

           When this policy is unset, a default length of time is used.

           The policy value should be specified in milliseconds. Values are clamped to be less than or equal the screen off delay (if set) and the idle delay.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:26-
  type: int

** ScreenLockDelayAC (DEPRECATED) — Screen lock delay when running on AC power
SYNOPSIS: 600000
 Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use ScreenLockDelays instead.

           Specifies the length of time without user input after which the screen is locked when running on AC power.

           When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS locks the screen.

           When this policy is set to zero, Google Chrome OS does not lock the screen when the user becomes idle.

           When this policy is unset, a default length of time is used.

           The recommended way to lock the screen on idle is to enable screen locking on suspend and have Google Chrome OS suspend after the idle delay. This policy should only be used when screen locking should occur a significant amount of time sooner than suspend or when suspend on idle is not desired at all.

           The policy value should be specified in milliseconds. Values are clamped to be less than the idle delay.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:26-
  type: int

** IdleDelayAC (DEPRECATED) — Idle delay when running on AC power
SYNOPSIS: 1800000
 Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.

           Specifies the length of time without user input after which the idle action is taken when running on AC power.

           When this policy is set, it specifies the length of time that the user must remain idle before Google Chrome OS takes the idle action, which can be configured separately.

           When this policy is unset, a default length of time is used.

           The policy value should be specified in milliseconds.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:26-
  type: int

** ScreenOffDelayBattery (DEPRECATED) — Screen off delay when running on battery power
SYNOPSIS: 360000
 Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.

           Specifies the length of time without user input after which the screen is turned off when running on battery power.

           When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS turns off the screen.

           When this policy is set to zero, Google Chrome OS does not turn off the screen when the user becomes idle.

           When this policy is unset, a default length of time is used.

           The policy value should be specified in milliseconds. Values are clamped to be less than or equal the idle delay.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:26-
  type: int

** IdleWarningDelayBattery (DEPRECATED) — Idle warning delay when running on battery power
SYNOPSIS: 545000
 Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.

           Specifies the length of time without user input after which a warning dialog is shown when running on battery power.

           When this policy is set, it specifies the length of time that the user must remain idle before Google Chrome OS shows a warning dialog telling the user that the idle action is about to be taken.

           When this policy is unset, no warning dialog is shown.

           The policy value should be specified in milliseconds. Values are clamped to be less than or equal the idle delay.

           The warning message is only shown if the idle action is to logout or shut down.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:27-
  type: int

** IdleAction (DEPRECATED) — Action to take when the idle delay is reached
SYNOPSIS: 0
 Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.

           This policy provides a fallback value for the more-specific IdleActionAC and IdleActionBattery policies. If this policy is set, its value gets used if the respective more-specific policy is not set.

           When this policy is unset, behavior of the more-specific policies remains unaffected.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Suspend
    name: IdleActionSuspend
    value: 0
  - caption: Log the user out
    name: IdleActionLogout
    value: 1
  - caption: Shut down
    name: IdleActionShutdown
    value: 2
  - caption: Do nothing
    name: IdleActionDoNothing
    value: 3
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome_os:26-
  type: int-enum

** IdleActionBattery (DEPRECATED) — Action to take when the idle delay is reached while running on battery power
SYNOPSIS: 0
 Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.

           When this policy is set, it specifies the action that Google Chrome OS takes when the user remains idle for the length of time given by the idle delay, which can be configured separately.

           When this policy is unset, the default action is taken, which is suspend.

           If the action is suspend, Google Chrome OS can separately be configured to either lock or not lock the screen before suspending.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Suspend
    name: IdleActionSuspend
    value: 0
  - caption: Log the user out
    name: IdleActionLogout
    value: 1
  - caption: Shut down
    name: IdleActionShutdown
    value: 2
  - caption: Do nothing
    name: IdleActionDoNothing
    value: 3
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome_os:30-
  type: int-enum

** PowerManagementUsesAudioActivity — Specify whether audio activity affects power management
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset means the user is not considered idle while audio plays. This prevents the idle timeout from being reached and the idle action from being taken. However, screen dimming, screen off, and screen lock will still occur after their configured timeouts despite audio activity.

       Setting the policy to Disabled means the system can consider users idle despite audio activity.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:26-
  type: main

** PresentationIdleDelayScale (DEPRECATED) — Percentage by which to scale the idle delay in presentation mode (deprecated)
SYNOPSIS: 200
 This policy has been retired as of Google Chrome OS version 29. Please use the PresentationScreenDimDelayScale policy instead.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: integer
  supported_on:
  - chrome_os:26-28
  type: int

** AllowWakeLocks — Allow wake locks
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset allows wake locks for power management. Extensions can request wake locks through the power management extension API and ARC apps.

       Setting the policy to Disabled means wake lock requests are ignored.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Allow wake locks for power management
    value: true
  - caption: Ignore requests for wake locks for power management
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:71-
  type: main

** UserActivityScreenDimDelayScale — Percentage by which to scale the screen dim delay if the user becomes active after dimming
SYNOPSIS: 200
 If PowerSmartDimEnabled is Disabled, then setting UserActivityScreenDimDelayScale specifies the percent that the screen dim delay scales when there's user activity while the screen dims or soon after the screen turns off. When the dim delay scales, the screen off, screen lock and idle delays adjust to maintain the same distances from the screen dim delay as originally set.

       Leaving the policy unset puts a default scale factor in use.

       Note: The scale factor must be 100% or more.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: integer
  supported_on:
  - chrome_os:29-
  type: int

** PowerManagementIdleSettings — Power management settings when the user becomes idle
SYNOPSIS: {"AC": {"IdleAction": "DoNothing"}, "Battery": {"IdleAction": "DoNothing", "Delays": {"ScreenDim": 10000, "ScreenOff": 20000, "IdleWarning": 5000, "Idle": 30000}}}
 Setting the policy controls the power management strategy when the user idles.

       There are 4 actions:

       * The screen dims if the user is idle for the time specified by ScreenDim.

       * The screen turns off if the user is idle for the time specified by ScreenOff.

       * A warning dialog appears if the user remains idle for the time specified by IdleWarning. It warns the user that the idle action will be taken and only appears if the idle action is to sign out or shut down.

       * The action specified by IdleAction is taken if the user is idle for the time specified by Idle.

       For each of the above actions, the delay should be specified in milliseconds and must be set to a value greater than zero to trigger the corresponding action. If the delay is set to zero, Google Chrome OS won't take the corresponding action.

       For each of the above delays, when the time is unset, a default value is used.

       ScreenDim values will be clamped to be less than or equal to ScreenOff. ScreenOff and IdleWarning will be clamped to be less than or equal to Idle.

       IdleAction can be one of 4 actions:

       * Suspend

       * Logout

       * Shutdown

       * DoNothing

       If the IdleAction is not set, Suspend is taken.

       Note: There are separate settings for AC power and battery.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    properties:
      AC:
        description: Delays and actions to take when the device is idle and running
          on AC power
        id: PowerManagementDelays
        properties:
          Delays:
            properties:
              Idle:
                description: The length of time without user input after which the idle
                  action is taken, in milliseconds
                minimum: 0
                type: integer
              IdleWarning:
                description: The length of time without user input after which a warning
                  dialog is shown, in milliseconds
                minimum: 0
                type: integer
              ScreenDim:
                description: The length of time without user input after which the screen
                  is dimmed, in milliseconds
                minimum: 0
                type: integer
              ScreenOff:
                description: The length of time without user input after which the screen
                  is turned off, in milliseconds
                minimum: 0
                type: integer
            type: object
          IdleAction:
            description: Action to take when the idle delay is reached
            enum:
            - Suspend
            - Logout
            - Shutdown
            - DoNothing
            type: string
        type: object
      Battery:
        $ref: PowerManagementDelays
        description: Delays and actions to take when the device is idle and running
          on battery
    type: object
  supported_on:
  - chrome_os:35-
  type: dict

** ScreenBrightnessPercent — Screen brightness percent
SYNOPSIS: {"BrightnessAC": 90, "BrightnessBattery": 75}
 Setting the policy specifies screen brightness percent, turning autobrightness features off. Initial screen brightness adjusts to the policy value, but users can change it.

       Leaving the policy unset doesn't affect user screen controls or autobrightness features.

       Note: The policy values should be specified in percents from 0 to 100.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    properties:
      BrightnessAC:
        description: Screen brightness percent when running on AC power
        maximum: 100
        minimum: 0
        type: integer
      BrightnessBattery:
        description: Screen brightness percent when running on battery power
        maximum: 100
        minimum: 0
        type: integer
    type: object
  supported_on:
  - chrome_os:72-
  type: dict

** DevicePowerPeakShiftDayConfig — Set power peak shift day config
SYNOPSIS: {"entries": [{"day": "MONDAY", "start_time": {"hour": 9, "minute": 0}, "end_time": {"hour": 15, "minute": 15}, "charge_start_time": {"hour": 20, "minute": 45}}, {"day": "FRIDAY", "start_time": {"hour": 2, "minute": 30}, "end_time": {"hour": 21, "minute": 0}, "charge_start_time": {"hour": 23, "minute": 45}}]}
 If DevicePowerPeakShiftEnabled is Enabled, setting DevicePowerPeakShiftDayConfig sets power peak shift day configuration.

       Leaving the policy unset keeps power peak shift off.

       Valid values for the minute field in start_time, end_time and charge_start_time are 0, 15, 30, 45.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    properties:
      entries:
        items:
          properties:
            charge_start_time:
              $ref: Time
              description: Time when the device will use alternating current to charge
                battery, interpreted in the device's local time zone.
            day:
              $ref: WeekDay
            end_time:
              $ref: Time
              description: Time when the device will run from alternating current, interpreted
                in the device's local time zone.
            start_time:
              $ref: Time
              description: Time when the device will start running from the battery,
                interpreted in the device's local time zone.
          type: object
        type: array
    type: object
  supported_on:
  - chrome_os:75-
  type: dict

** DevicePowerPeakShiftEnabled — Enable peak shift power management
SYNOPSIS: false
 Setting the policy to Enabled and setting DevicePowerPeakShiftBatteryThreshold and DevicePowerPeakShiftDayConfig keeps power peak shift on, if supported on the device. Power peak shift power management policy is a power-saving policy that minimizes alternating current usage during peak times. For each weekday, you can set a start and end time to run in power peak shift mode. As long as the battery stays above the threshold specified, during these times, the device runs from the battery (even if the alternating current is attached). After the specified end time, the device runs from alternating current (if attached), but won't charge the battery. The device will again function normally using alternating current and recharging the battery after the specified charge start time.

       Setting the policy to Disabled keeps power peak shift off.

       If unset, power peak shift is off at first. Users can't change this setting.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:75-
  type: main

** DeviceAdvancedBatteryChargeModeEnabled — Enable advanced battery charge mode
SYNOPSIS: false
 If DeviceAdvancedBatteryChargeModeDayConfig is set, setting DeviceAdvancedBatteryChargeModeEnabled to Enabled keeps advanced battery charge mode power management policy on (if supported on the device). Using a standard charging algorithm and other techniques outside work hours, this mode lets users maximize battery health. During work hours, the system uses an express charge, which lets the battery charge faster. Specify the time when the system is used most each day by the start time and the duration.

       Setting the policy to Disabled or leaving it unset keeps advanced battery charge mode off.

       Users are unable to change this setting.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:75-
  type: main

** DeviceBatteryChargeMode — Battery charge mode
SYNOPSIS: 1
 Unless DeviceAdvancedBatteryChargeModeEnabled is specified, which overrides DeviceBatteryChargeMode, then setting DeviceBatteryChargeMode specifies battery charge mode power management policy (if supported on the device). To extend battery life, the policy dynamically controls battery charging by minimizing stress and wear-out.

       Leaving the policy unset (if supported on the device) applies the standard battery charge mode, and users can't change it.

       Note: If Custom battery charge mode is selected, then also specify DeviceBatteryChargeCustomStartCharging and DeviceBatteryChargeCustomStopCharging.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Fully charge battery at a standard rate.
    name: Standard
    value: 1
  - caption: Charge battery using fast charging technology.
    name: ExpressCharge
    value: 2
  - caption: Charge battery for devices that are primarily connected to an external
      power source.
    name: PrimarilyAcUse
    value: 3
  - caption: Adaptive charge battery based on battery usage pattern.
    name: Adaptive
    value: 4
  - caption: Charge battery while it is within a fixed range.
    name: Custom
    value: 5
  schema:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
  supported_on:
  - chrome_os:75-
  type: int-enum

** DeviceBatteryChargeCustomStopCharging — Set battery charge custom stop charging in percent
SYNOPSIS: 90
 If DeviceBatteryChargeMode is set to "custom", then setting DeviceBatteryChargeCustomStopCharging customizes when the battery stops charging, based on the percentage of battery charge. DeviceBatteryChargeCustomStartCharging must be at least 5 percentage points below DeviceBatteryChargeCustomStopCharging.

       Leaving the policy unset applies the "standard" battery charge mode.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    maximum: 100
    minimum: 55
    type: integer
  supported_on:
  - chrome_os:75-
  type: int

** DeviceUsbPowerShareEnabled — Enable USB power share
SYNOPSIS: true
 Setting the policy to Enabled turns on the USB power share power management policy.

       Certain devices have a specific USB port with a lightning bolt or battery icon for charging devices using the system battery. This policy affects the charging behavior of this port while the system is in sleep and shut down modes. It doesn't affect the other USB ports and the charging behavior while the system is awake, when the USB port always provides power.

       When sleeping, power is supplied to the USB port when the device is plugged in to the wall charger or if the battery level exceeds 50%. When shut down, power is supplied to the USB port when the device is plugged in to the wall charger.

       Setting the policy to Disabled means no power is supplied.

       Leaving the policy unset means the policy is on, and users can't turn it off.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:75-
  type: main

* Accessibility — Accessibility settings
 Configure Google Chrome OS accessibility features.

** SpokenFeedbackEnabled — Enable spoken feedback
SYNOPSIS: true
 Setting the policy to True keeps spoken feedback on. Setting the policy to False keeps spoken feedback off.

        If you set the policy, users can't change it. If not set, spoken feedback is off at first, but users can turn it on any time.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:29-
  type: main

** VirtualKeyboardEnabled — Enable on-screen keyboard
SYNOPSIS: true
 Setting the policy to True keeps the on-screen keyboard on. Setting the policy to False keeps the on-screen keyboard off.

       If you set the policy, users can't change it. If not set, the on-screen keyboard is off at first, but users can turn it on any time.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:34-
  type: main

** StickyKeysEnabled — Enable sticky keys
SYNOPSIS: true
 Setting the policy to True keeps sticky keys on. Setting the policy to False keeps sticky keys off.

       If you set the policy, users can't change it. If not set, sticky keys is off at first, but users can turn it on any time.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:76-
  type: main

** KeyboardDefaultToFunctionKeys — Media keys default to function keys
SYNOPSIS: true
 Setting the policy to True makes the top row of keys on the keyboard act as function key commands. Pressing the Search key changes their behavior back to media keys.

       If set to False or not set, the keyboard defaults to producing media key commands. Pressing the Search key changes them to function keys.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:35-
  type: main

** DictationEnabled — Enable the dictation accessibility feature
SYNOPSIS: true
 Enable the dictation accessibility feature.

           If this policy is set to enabled, the dictation will always be enabled.

           If this policy is set to disabled, the dictation will always be disabled.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the dictation is disabled initially but can be enabled by the user anytime.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:78-
  type: main

** CursorHighlightEnabled — Enable the cursor highlight accessibility feature
SYNOPSIS: true
 Enable the cursor highlight accessibility feature.

           This feature is responsible for highlighting the area that surrounds the mouse cursor while moving it.

           If this policy is set to enabled, the cursor highlight will always be enabled.

           If this policy is set to disabled, the cursor highlight will always be disabled.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the cursor highlight is disabled initially but can be enabled by the user anytime.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:78-
  type: main

** MonoAudioEnabled — Enable the mono audio accessibility feature
SYNOPSIS: true
 Enable the mono audio accessibility feature.

           This feature is responsible for outputing stereo audio which includes different left and right channels, so different ears get different sounds.

           If this policy is set to enabled, the mono audio will always be enabled.

           If this policy is set to disabled, the mono audio will always be disabled.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the mono audio is disabled initially but can be enabled by the user anytime.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:78-
  type: main

** DeviceLoginScreenDefaultLargeCursorEnabled — Set default state of the large cursor on the login screen
SYNOPSIS: true
 Setting the policy to True turns the large cursor on at the sign-in screen. Setting the policy to False turns the large cursor off at the sign-in screen.

       If you set the policy, users can temporarily turn the large cursor on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.

       If not set, the large cursor is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.

           Note: DeviceLoginScreenLargeCursorEnabled overrides this policy if the former is specified.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:29-
  type: main

** DeviceLoginScreenDefaultSpokenFeedbackEnabled — Set the default state of spoken feedback on the login screen
SYNOPSIS: true
 Setting the policy to True turns spoken feedback on at the sign-in screen. Setting the policy to False turns spoken feedback off at the screen.

       If you set the policy, users can temporarily turn spoken feedback on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.

       If not set, spoken feedback is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.

           Note: DeviceLoginScreenSpokenFeedbackEnabled overrides this policy if the former is specified.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:29-
  type: main

** DeviceLoginScreenDefaultHighContrastEnabled — Set the default state of high contrast mode on the login screen
SYNOPSIS: true
 Setting the policy to True turns High-contrast mode on at the sign-in screen. Setting the policy to False turns High-contrast mode off at the screen.

       If you set the policy, users can temporarily change High-contrast mode, turning it on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.

       If not set, High-contrast mode is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.

           Note: DeviceLoginScreenHighContrastEnabled overrides this policy if the former is specified.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:29-
  type: main

** DeviceLoginScreenDefaultVirtualKeyboardEnabled (DEPRECATED) — Set default state of the on-screen keyboard on the login screen
SYNOPSIS: true
 This policy is deprecated, please use the DeviceLoginScreenVirtualKeyboardEnabled policy instead.

       Setting the policy to True turns the on-screen keyboard on at sign-in. Setting the policy to False turns the on-screen keyboard off at sign-in.

       If you set the policy, users can temporarily turn the on-screen keyboard on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.

       If not set, the on-screen keyboard is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.

       Note: DeviceLoginScreenVirtualKeyboardEnabled overrides this policy if the former is specified.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:34-
  type: main

** DeviceLoginScreenSelectToSpeakEnabled — Enable the select to speak on the login screen
SYNOPSIS: true
 Enable the select to speak accessibility feature on the login screen.

           If this policy is set to true, the select to speak will always be enabled on the login screen.

           If this policy is set to false, the select to speak will always be disabled on the login screen.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the select to speak is disabled on the login screen initially but can be enabled by the user anytime.

  device_only: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:79-
  type: main

** DeviceLoginScreenCaretHighlightEnabled — Enable the caret highlight on the login screen
SYNOPSIS: true
 Enable the caret highlight accessibility feature on the login screen.

           If this policy is set to true, the caret highlight will always be enabled on the login screen.

           If this policy is set to false, the caret highlight will always be disabled on the login screen.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the caret highlight is disabled on the login screen initially but can be enabled by the user anytime.

  device_only: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:79-
  type: main

** DeviceLoginScreenAutoclickEnabled — Enable the autoclick on the login screen
SYNOPSIS: true
 Enable the autoclick accessibility feature on the login screen.

           This feature allows to automatically click when the mouse cursor stops, without requiring the user to physically press the mouse or touchpad buttons.

           If this policy is set to true, the autoclick will always be enabled on the login screen.

           If this policy is set to false, the autoclick will always be disabled on the login screen.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the autoclick is disabled on the login screen initially but can be enabled by the user anytime.

  device_only: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:79-
  type: main

** DeviceLoginScreenKeyboardFocusHighlightEnabled — Enable the keyboard focus highlighting accessibility feature
SYNOPSIS: true
 Enable the keyboard focus highlighting accessibility feature on the login screen.

           This feature is responsible for highlighting the object that is focused by the keyboard.

           If this policy is set to enabled, the keyboard focus highlighting will always be enabled.

           If this policy is set to disabled, the keyboard focus highlighting will always be disabled.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the keyboard focus highlighting is disabled initially but can be enabled by the user anytime.

  device_only: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:79-
  type: main

** DeviceLoginScreenScreenMagnifierType — Set the screen magnifier type on the login screen
SYNOPSIS: true
 If this policy is set, it controls the type of screen magnifier that is enabled.

           If this policy is set to "Full-screen", the screen magnifier will always be enabled in full-screen magnifier mode on the login screen.

           If this policy is set to "Docked", the screen magnifier will always be enabled in docked magnifier mode on the login screen.

           If this policy is set to "None", the screen magnifier will always be disabled on the login screen.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the dictation is disabled on the login screen initially but can be enabled by the user anytime.

  device_only: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
  items:
  - caption: Screen magnifier disabled
    name: None
    value: 0
  - caption: Full-screen magnifier enabled
    name: Full-screen
    value: 1
  - caption: Docked magnifier enabled
    name: Docked
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome_os:79-
  type: int-enum

** DeviceLoginScreenShowOptionsInSystemTrayMenu — Show accessibility options in system tray menu in the login screen
SYNOPSIS: true
 Setting the policy to True displays the accessibility options in the system tray menu. If you set the policy to False, the options don't appear in the menu.

       If you set the policy, users can't change it. If not set, accessibility options don't appear in the menu, but users can make them appear through the Settings page.

       If you turn on accessibility features by other means (for example, by key combination), accessibility options always appear in the system tray menu.

  device_only: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:80-
  type: main

** DeviceLoginScreenAccessibilityShortcutsEnabled — Enable accessibility features shortcuts on the login screen
SYNOPSIS: true
 Enable accessibility features shortcuts on the login screen.

           If this policy is set to true, accessibility features shortcuts will always be enabled on the login screen.

           If this policy is set to false, accessibility features shortcuts will always be disabled on the login screen.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, accessibility features shortcuts will be enabled by default on the login screen.

  device_only: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:81-
  type: main

** EnhancedNetworkVoicesInSelectToSpeakAllowed — Allow the enhanced network text-to-speech voices in Select-to-speak
SYNOPSIS: true
 Allow the enhanced network text-to-speech voices in Select-to-speak accessibility feature. These voices send text to Google's servers to synthesize natural-sounding speech.

           If this policy is set to false, the enhanced network text-to-speech voices feature in Select-to-speak will always be disabled.

           If this policy is set to true or unset, the enhanced network text-to-speech voices feature in Select-to-speak can be enabled or disabled by the user.

  default: true
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow enhanced network text-to-speech voices when using Select-to-Speak
    value: true
  - caption: Disallow enhanced network text-to-speech voices when using Select-to-Speak
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:94-
  type: main

* Attestation — Remote attestation
 Configure the remote attestation with TPM mechanism.

** AttestationEnabledForDevice — Enable remote attestation for the device
SYNOPSIS: true
 Setting the policy to Enabled allows remote attestation for the device. A certificate is automatically generated and uploaded to the Device Management Server.

       Setting the policy to Disabled or leaving it unset means no certificate is generated and calls to the Enterprise Platform Keys API fail.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:28-
  type: main

** AttestationExtensionAllowlist — Extensions allowed to to use the remote attestation API
SYNOPSIS: ["ghdilpkmfbfdnomkmaiogjhjnggaggoi"]
 Setting the policy specifies the allowed extensions to use the Enterprise Platform Keys API functions for remote attestation. Extensions must be on this list to use the API.

       If an extension is not in the list, or the list is not set, the call to the API fails with an error code.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:87-
  type: list

** AttestationForContentProtectionEnabled — Enable the use of remote attestation for content protection for the device
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset lets Google Chrome OS devices use remote attestation (Verified Access) to get a certificate issued by the Google Chrome OS CA that asserts the device is eligible to play protected content. This process involves sending hardware endorsement information to the Google Chrome OS CA which uniquely identifies the device.

       Setting the policy to Disabled means the device won't use remote attestation for content protection, and the device may not play protected content.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:31-
  type: main

* LocallyManagedUsers — Locally managed users settings
 Configure settings for managed users.

** SupervisedUserCreationEnabled (DEPRECATED) — Enable creation of supervised users
SYNOPSIS: true
 If set to false, supervised-user creation by this user will be disabled. Any existing supervised users will still be available.

           If set to true or not configured, supervised users can be created and managed by this user.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:29-70
  type: main

* GoogleCast — Google Cast
 Configure policies for Google Cast, a feature that allows users to send the contents of tabs, sites or the desktop from the browser to remote displays and sound systems.

** EnableMediaRouter — Enable Google Cast
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset turns on Google Cast, which users can launch from the app menu, page context menus, media controls on Cast-enabled websites, and (if shown) the Cast toolbar icon.

       Setting the policy to Disabled turns off Google Cast.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:52-
  type: main

** ShowCastIconInToolbar — Show the Google Cast toolbar icon
SYNOPSIS: false
 Setting the policy to Enabled displays the Cast toolbar icon on the toolbar or the overflow menu, and users can't remove it.

       Setting the policy to Disabled or leaving it unset lets users pin or remove the icon through its contextual menu.

       If the policy EnableMediaRouter is set to Disabled, then this policy's value has no effect, and the toolbar icon doesn't appear.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:58-
  type: main

* ScreenCapture — Allow or deny screen capture
 Configure policies to control the level of screen-share APIs (e.g., getDisplayMedia() or the Desktop Capture extension API)
       that a site may capture (e.g. tab, window or desktop capture).

** ScreenCaptureAllowed — Allow or deny screen capture
SYNOPSIS: false
 If enabled or not configured (default), a Web page can use
       screen-share APIs (e.g., getDisplayMedia() or the Desktop Capture extension API)
       to prompt the user to select a tab, window or desktop to capture.

       When this policy is disabled, any calls to screen-share APIs will fail
       with an error; however this policy is not considered (and a site will be
       allowed to use screen-share APIs) if the site matches an origin pattern in
       any of the following policies:
       ScreenCaptureAllowedByOrigins,
       WindowCaptureAllowedByOrigins,
       TabCaptureAllowedByOrigins,
       SameOriginTabCaptureAllowedByOrigins.
      

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:81-
  type: main

** ScreenCaptureAllowedByOrigins — Allow Desktop, Window, and Tab capture by these origins
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that can use Desktop, Window, and Tab Capture.

       Leaving the policy unset means that sites will not be considered for an override at this level of Capture.

       This policy is not considered if a site matches a URL pattern in any of the following policies: WindowCaptureAllowedByOrigins, TabCaptureAllowedByOrigins, SameOriginTabCaptureAllowedByOrigins.

       If a site matches a URL pattern in this policy, the ScreenCaptureAllowed will not be considered.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:95-
  type: list

** WindowCaptureAllowedByOrigins — Allow Window and Tab capture by these origins
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that can use Window and Tab Capture.

       Leaving the policy unset means that sites will not be considered for an override at this level of Capture.

       This policy is not considered if a site matches a URL pattern in any of the following policies: TabCaptureAllowedByOrigins, SameOriginTabCaptureAllowedByOrigins.

       If a site matches a URL pattern in this policy, the following policies will not be considered: ScreenCaptureAllowedByOrigins, ScreenCaptureAllowed.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:95-
  type: list

** TabCaptureAllowedByOrigins — Allow Tab capture by these origins
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that can use Tab Capture.

       Leaving the policy unset means that sites will not be considered for an override at this level of capture.

       Note that windowed Chrome Apps will still be allowed to be captured.

       This policy is not considered if a site matches a URL pattern in the SameOriginTabCaptureAllowedByOrigins policy.

       If a site matches a URL pattern in this policy, the following policies will not be considered: WindowCaptureAllowedByOrigins, ScreenCaptureAllowedByOrigins, ScreenCaptureAllowed.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:95-
  type: list

** SameOriginTabCaptureAllowedByOrigins — Allow Same Origin Tab capture by these origins
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets you set a list of URL patterns that can capture tabs with their same Origin.

       Leaving the policy unset means that sites will not be considered for an override at this level of capture.

       Note that windowed Chrome Apps with the same origin as this site will still be allowed to be captured.

       If a site matches a URL pattern in this policy, the following policies will not be considered: TabCaptureAllowedByOrigins, WindowCaptureAllowedByOrigins, ScreenCaptureAllowedByOrigins, ScreenCaptureAllowed.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:95-
  type: list

* QuickUnlock — Quick unlock
 Configures quick unlock related policies.

** QuickUnlockModeWhitelist (DEPRECATED) — Configure allowed quick unlock modes
SYNOPSIS: ["PIN"]
 Setting the policy controls which quick unlock modes can unlock the lock screen.

       To allow:

       * Every quick unlock mode, use ["all"] (includes modes added in the future).

       * Only PIN unlock, use ["PIN"].

       * PIN and fingerprint, use ["PIN", "FINGERPRINT"].

       If the policy is unset or set to an empty list, no quick unlock modes are available for managed devices.

       This policy is deprecated, please use QuickUnlockModeAllowlist instead

  default_for_enterprise_users: []
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    id: QuickUnlockModeWhitelist
    items:
      enum:
      - all
      - PIN
      - FINGERPRINT
      type: string
    type: array
  supported_on:
  - chrome_os:56-
  type: list

** PinUnlockMinimumLength — Set the minimum length of the lock screen PIN
SYNOPSIS: 6
 Setting the policy enforces the minimum PIN length chosen. (Values below 1 are rounded up to the minimum of 1.)

       Leaving the policy unset enforces a minimal PIN length of 6 digits, the recommended minimum.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: integer
  supported_on:
  - chrome_os:57-
  type: int

** PinUnlockWeakPinsAllowed — Enable users to set weak PINs for the lock screen PIN
SYNOPSIS: false
 Setting the policy to Enabled allows weak PINs. Some characteristics of weak PINs: only one digit (1111), digits increase by 1 (1234), digits decrease by 1 (4321), and common PINs. Setting the policy to Disabled means users can't set weak, easy-to-guess PINs.

       By default, users get a warning, not an error, for a weak PIN.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:57-
  type: main

** PinUnlockAutosubmitEnabled — Enable PIN auto-submit feature on the lock and login screen.
SYNOPSIS: true
 The PIN auto-submit feature changes how PINs are entered in Chrome OS.
           Instead of showing the same textfield that is used for password input, this
           feature shows a special UI that clearly shows to the user how many
           digits are necessary for their PIN. As a consequence, the user's PIN length
           will be stored outside the user encrypted data. Only supports PINs that are
           between 6 and 12 digits long.

           If this policy is set to false, users will not have the option of enabling
           the feature on the Settings page.

  default_for_enterprise_users: false
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:86-
  type: main

* CastReceiver — Cast Receiver
 Configure the Cast Receiver in Google Chrome OS.

** CastReceiverEnabled (DEPRECATED) — Enable casting content to the device
SYNOPSIS: false
 Allow content to be cast to the device using Google Cast.

           If this policy is set to False, users will not be able to cast content to their device. If this policy is set to True, users are allowed to cast content. If this policy is not set, users are not allowed to cast content to enrolled Chrome OS devices, but can cast to non enrolled devices.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  type: main

** CastReceiverName (DEPRECATED) — Name of the Google Cast destination
SYNOPSIS: "My Chromebook"
 Determine the name advertised as a Google Cast destination.

           If this policy is set to a non empty string, that string will be used as the name of the Google Cast destination. Otherwise, the destination name will be the device name. If this policy is not set, the destination name will be the device name, and the owner of the device (or a user from the domain managing the device) will be allowed to change it. The name is limited to 24 characters.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  type: string

* SafeBrowsing — Safe Browsing settings
 Configure Safe Browsing related policies.

** SafeBrowsingEnabled (DEPRECATED) — Enable Safe Browsing
SYNOPSIS: true
 This policy is deprecated in Google Chrome 83, please use SafeBrowsingProtectionLevel instead.

       Setting the policy to Enabled keeps Chrome's Safe Browsing feature on. Setting the policy to Disabled keeps Safe Browsing off.

       If you set this policy, users can't change it or override the "Enable phishing and malware protection" setting in Chrome. If not set, "Enable phishing and malware protection" is set to True, but the user can change it.

       See more about Safe Browsing ( https://developers.google.com/safe-browsing ).

       If the policy SafeBrowsingProtectionLevel is set, the value of the policy SafeBrowsingEnabled is ignored.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable Safe Browsing
    value: true
  - caption: Disable Safe Browsing
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  tags:
  - system-security
  type: main

** SafeBrowsingExtendedReportingEnabled — Enable Safe Browsing Extended Reporting
SYNOPSIS: true
 Setting the policy to Enabled turns on Google Chrome's Safe Browsing Extended Reporting, which sends some system information and page content to Google servers to help detect dangerous apps and sites.

       Setting the policy to Disabled means reports are never sent.

       If you set this policy, users can't change it. If not set, users can decide whether to send reports or not.

       See more about Safe Browsing ( https://developers.google.com/safe-browsing ).

  arc_support: This policy is not supported within Arc.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:66-
  tags:
  - google-sharing
  type: main

** SafeBrowsingProtectionLevel — Safe Browsing Protection Level
SYNOPSIS: 2
 Allows you to control whether Google Chrome's Safe Browsing feature is enabled and the mode it operates in.

       If this policy is set to 'NoProtection' (value 0), Safe Browsing is never active.

       If this policy is set to 'StandardProtection' (value 1, which is the default), Safe Browsing is always active in the standard mode.

       If this policy is set to 'EnhancedProtection' (value 2), Safe Browsing is always active in the enhanced mode, which provides better security, but requires sharing more browsing information with Google.

       If you set this policy as mandatory, users cannot change or override the Safe Browsing setting in Google Chrome.

       If this policy is left not set, Safe Browsing will operate in Standard Protection mode but users can change this setting.

       See https://developers.google.com/safe-browsing for more info on Safe Browsing.

  arc_support: This policy is not supported within Arc.
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Safe Browsing is never active.
    name: NoProtection
    value: 0
  - caption: Safe Browsing is active in the standard mode.
    name: StandardProtection
    value: 1
  - caption: Safe Browsing is active in the enhanced mode. This mode provides better
      security, but requires sharing more browsing information with Google.
    name: EnhancedProtection
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:83-
  tags:
  - system-security
  type: int-enum

** SafeBrowsingWhitelistDomains (DEPRECATED) — Configure the list of domains on which Safe Browsing will not trigger warnings.
SYNOPSIS: ["mydomain.com", "myuniversity.edu"]
 This policy is deprecated, please use SafeBrowsingAllowlistDomains instead.

       Setting the policy to Enabled means Safe Browsing will trust the domains you designate. It won't check them for dangerous resources such as phishing, malware, or unwanted software. Safe Browsing's download protection service won't check downloads hosted on these domains. Its password protection service won't check for password reuse.

       Setting the policy to Disabled or leaving it unset means default Safe Browsing protection applies to all resources.

        On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:68-
  - chrome_os:68-
  type: list

** SafeBrowsingAllowlistDomains — Configure the list of domains on which Safe Browsing will not trigger warnings.
SYNOPSIS: ["mydomain.com", "myuniversity.edu"]
 Setting the policy to Enabled means Safe Browsing will trust the domains you designate. It won't check them for dangerous resources such as phishing, malware, or unwanted software. Safe Browsing's download protection service won't check downloads hosted on these domains. Its password protection service won't check for password reuse.

       Leaving the policy unset means default Safe Browsing protection applies to all resources.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** PasswordProtectionWarningTrigger — Password protection warning trigger
SYNOPSIS: 1
 Setting the policy lets you control the triggering of password protection warning. Password protection alerts users when they reuse their protected password on potentially suspicious sites.

       Use PasswordProtectionLoginURLs and PasswordProtectionChangePasswordURL to set which password to protect.

       If this policy is set to:

       * PasswordProtectionWarningOff, no password protection warning will be shown.

       * PasswordProtectionWarningOnPasswordReuse, password protection warning will be shown when the user reuses their protected password on a non-allowed site.

       * PasswordProtectionWarningOnPhishingReuse, password protection warning will be shown when the user reuses their protected password on a phishing site.

       Leaving the policy unset has the password protection service only protect Google passwords, but users can change this setting.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Password protection warning is off
    name: PasswordProtectionWarningOff
    value: 0
  - caption: Password protection warning is triggered by password reuse
    name: PasswordProtectionWarningOnPasswordReuse
    value: 1
  - caption: Password protection warning is triggered by password reuse on phishing
      page
    name: PasswordProtectionWarningOnPhishingReuse
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:69-
  - chrome_os:69-
  type: int-enum

** PasswordProtectionLoginURLs — Configure the list of enterprise login URLs where password protection service should capture salted hashes of passwords.
SYNOPSIS: ["https://mydomain.com/login.html", "https://login.mydomain.com"]
 Setting the policy sets the list of enterprise login URLs (HTTP and HTTPS protocols only). Password protection service will capture salted hashes of passwords on these URLs and use them for password reuse detection. For Google Chrome to correctly capture password salted hashes, ensure your sign-in pages follow these guidelines ( https://www.chromium.org/developers/design-documents/create-amazing-password-forms ).

       Turning this setting off or leaving it unset means the password protection service only captures the password salted hashes on https://accounts.google.com.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:69-
  type: list

** PasswordProtectionChangePasswordURL — Configure the change password URL.
SYNOPSIS: "https://mydomain.com/change_password.html"
 Setting the policy sets the URL for users to change their password after seeing a warning in the browser. The password protection service sends users to the URL (HTTP and HTTPS protocols only) you designate through this policy. For Google Chrome to correctly capture the salted hash of the new password on this change password page, make sure your change password page follows these guidelines ( https://www.chromium.org/developers/design-documents/create-amazing-password-forms ).

       Turning the policy off or leaving it unset means the service sends users to https://myaccount.google.com to change their password.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:69-
  type: string

* NetworkFileShares — Network File Shares settings
 Configure Network File Share related policies.

** NTLMShareAuthenticationEnabled — Controls enabling NTLM as an authentication protocol for SMB mounts
SYNOPSIS: true
 Setting the policy to Enabled means the Network File Shares feature for Google Chrome OS uses NTLM for authentication to SMB shares if necessary. Setting the policy to Disabled turns off NTLM authentication to SMB shares.

       Leaving the policy unset means the behavior defaults to off for managed users and on for other users.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:71-
  type: main

* CloudReporting — Cloud Reporting
 Configure cloud reporting policies.

       When the policy CloudReportingEnabled is left unset or set to disabled, these policies will be ignored.

       These policies are only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.
       These policies are always effective for Google Chrome OS.

** ReportVersionData — Report OS and Google Chrome Version Information
SYNOPSIS: false
 This policy controls whether to report version information, such as OS version, OS platform, OS architecture, Google Chrome version and Google Chrome channel.

       When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.

       When this policy is left unset or set to True, version information is gathered.
       When this policy is set to False, version information is not gathered.

       This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.
       This policy is always effective for Google Chrome OS.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  schema:
    type: boolean
  tags:
  - admin-sharing
  type: main

** ReportPolicyData — Report Google Chrome Policy Information
SYNOPSIS: false
 This policy controls whether to report policy data and time of policy fetch.

       When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.

       When this policy is left unset or set to True, policy data and time of policy fetch are gathered.
       When this policy is set to False, policy data and time of policy fetch are not gathered.

       This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.
       This policy is always effective for Google Chrome OS.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  schema:
    type: boolean
  tags:
  - admin-sharing
  type: main

** ReportMachineIDData — Report Machine Identification information
SYNOPSIS: false
 This policy controls whether to report information that can be used to identify machines, such as machine name and network addresses.

       When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.

       When this policy is left unset or set to True, information that can be used to identify machines is gathered.
       When this policy is set to False, information that can be used to identify machines is not gathered.

       This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  schema:
    type: boolean
  tags:
  - admin-sharing
  type: main

** ReportUserIDData — Report User Identification information
SYNOPSIS: false
 This policy controls whether to report information that can be used to identify users, such as OS login, Google Chrome Profile login, Google Chrome Profile name, Google Chrome Profile path and Google Chrome executable path.

       When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.

       When this policy is left unset or set to True, information that can be used to identify users is gathered.
       When this policy is set to False, information that can be used to identify users is not gathered.

       This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.
       This policy is always effective for Google Chrome OS.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  schema:
    type: boolean
  tags:
  - admin-sharing
  type: main

** ReportExtensionsAndPluginsData — Report Extensions and Plugins information
SYNOPSIS: false
 This policy controls whether to report extensions and plugins information.

       When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.

       When this policy is left unset or set to True, extension and plugins data are gathered.
       When this policy is set to False, extensions and plugins data are not gathered.

       This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.
       This policy is always effective for Google Chrome OS.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  schema:
    type: boolean
  tags:
  - admin-sharing
  type: main

** ReportSafeBrowsingData (DEPRECATED) — Report Safe Browsing information
SYNOPSIS: false
 This policy controls whether to report Safe Browsing information including the number of Safe Browsing warning and the number of safe browsering warning click through.

       When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.

       When this policy is left unset or set to True, Safe Browsing data are gathered.
       When this policy is set to False, Safe Browsing data are not gathered.

       This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.
       This policy is always effective for Google Chrome OS.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:72-84
  tags:
  - admin-sharing
  type: main

** CloudExtensionRequestEnabled — Enables Google Chrome extension installation requests
SYNOPSIS: true
 This policy controls Google Chrome extension installation requests which allows users to send the requests to the Google Admin console for approval.

       When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored, extension installation requests are not created or uploaded.
       When this policy is left unset or set to disabled, extension installation requests are not created or uploaded.
       When this policy is set to enabled, extension installation requests are created and uploaded to Google Admin console.

       Extension installation requests are created when users try to install an extension that is not allowed by ExtensionInstallAllowlist or ExtensionSettings.

       This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.
       This policy is always effective for Google Chrome OS.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:85-
  tags:
  - admin-sharing
  - google-sharing
  type: main

** CloudReportingEnabled — Enables Google Chrome cloud reporting
SYNOPSIS: true
 This policy controls Google Chrome cloud reporting which uploads information about the browser operation to Google Admin console.

       When this policy is left unset or set to False, there is no data collected or uploaded.
       When this policy is set to True, the data is collected and uploaded to Google Admin console.

       For Google Chrome, this policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken.
       For Google Chrome OS, this policy is always effective.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:72-
  tags:
  - admin-sharing
  - google-sharing
  type: main

* BrowserSwitcher — Legacy Browser Support
 Configure policies to switch between browsers.

       Configured websites will automatically open in another browser than Google Chrome.

** AlternativeBrowserPath — Alternative browser to launch for configured websites.
SYNOPSIS: "${ie}"
 Setting the policy controls which command to use to open URLs in an alternative browser. The policy can be set to one of ${ie}, ${firefox}, ${safari}, ${opera}, ${edge} or a file path. When this policy is set to a file path, that file is used as an executable file. ${ie} is only available on Microsoft® Windows®. ${safari} and ${edge} are only available on Microsoft® Windows® and macOS.

       Leaving the policy unset puts a platform-specific default in use: Internet Explorer® for Microsoft® Windows®, or Safari® for macOS. On Linux®, launching an alternative browser will fail.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:71-
  type: string

** AlternativeBrowserParameters — Command-line parameters for the alternative browser.
SYNOPSIS: ["-foreground", "-new-window", "${url}", "-profile", "%HOME%\\browser_profile"]
 Setting the policy to a list of strings means each string is passed to the alternative browser as separate command-line parameters. On Microsoft® Windows®, the parameters are joined with spaces. On macOS and Linux®, a parameter can have spaces and still be treated as a single parameter.

       If an parameter contains ${url}, ${url} is replaced with the URL of the page to open. If no parameter contains ${url}, the URL is appended at the end of the command line.

       Environment variables are expanded. On Microsoft® Windows®, %ABC% is replaced with the value of the ABC environment variable. On macOS and Linux®, ${ABC} is replaced with the value of the ABC environment variable.

       Leaving the policy unset means only the URL is passed as a command-line parameter.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:71-
  type: list

** BrowserSwitcherChromeParameters — Command-line parameters for switching from the alternative browser.
SYNOPSIS: ["--force-dark-mode"]
 Setting the policy to a list of strings means the strings are joined with spaces and passed from Internet Explorer® to Google Chrome as command-line parameters. If an parameter contains ${url}, ${url} is replaced with the URL of the page to open. If no parameter contains ${url}, the URL is appended at the end of the command line.

       Environment variables are expanded. On Microsoft® Windows®, %ABC% is replaced with the value of the ABC environment variable.

       Leaving the policy unset means Internet Explorer® only passes the URL to Google Chrome as a command-line parameter.

       Note: If the Legacy Browser Support add-in for Internet Explorer® isn't installed, this policy has no effect.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.win:74-
  type: list

** BrowserSwitcherDelay — Delay before launching alternative browser (milliseconds)
SYNOPSIS: 10000
 Setting the policy to a number has Google Chrome show a message for that number of milliseconds, then it opens an alternative browser.

       Leaving the policy unset or set to 0 means navigating to a designated URL immediately opens it in an alternative browser.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: integer
  supported_on:
  - chrome.*:74-
  type: int

** BrowserSwitcherEnabled — Enable the Legacy Browser Support feature.
SYNOPSIS: true
 Setting the policy to Enabled means Google Chrome will try to launch some URLs in an alternate browser, such as Internet Explorer®. This feature is set using the policies in the Legacy Browser support group.

       Setting the policy to Disabled or leaving it unset means Google Chrome won't try to launch designated URLs in an alternate browser.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:73-
  type: main

** BrowserSwitcherExternalSitelistUrl — URL of an XML file that contains URLs to load in an alternative browser.
SYNOPSIS: "http://example.com/sitelist.xml"
 Setting the policy to a valid URL has Google Chrome download the site list from that URL and apply the rules as if they were set up with the BrowserSwitcherUrlList policy.

       Leaving it unset (or set to a invalid URL) means Google Chrome doesn't use the policy as a source of rules for switching browsers.

       Note: This policy points to an XML file in the same format as Internet Explorer®'s SiteList policy. This loads rules from an XML file, without sharing those rules with Internet Explorer®. Read more on Internet Explorer®'s SiteList policy ( https://docs.microsoft.com/internet-explorer/ie11-deploy-guide/what-is-enterprise-mode)

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:72-
  type: string

** BrowserSwitcherExternalGreylistUrl — URL of an XML file that contains URLs that should never trigger a browser switch.
SYNOPSIS: "http://example.com/greylist.xml"
 Setting the policy to a valid URL has Google Chrome download the site list from that URL and apply the rules as if they were set up with the BrowserSwitcherUrlGreylist policy. These policies prevent Google Chrome and the alternative browser from opening one another.

       Leaving it unset (or set to a invalid URL) means Google Chrome doesn't use the policy as a source of rules for not switching browsers.

       Note: This policy points to an XML file in the same format as Internet Explorer®'s SiteList policy. This loads rules from an XML file, without sharing those rules with Internet Explorer®. Read more on Internet Explorer®'s SiteList policy ( https://docs.microsoft.com/internet-explorer/ie11-deploy-guide/what-is-enterprise-mode )

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:77-
  type: string

** BrowserSwitcherKeepLastChromeTab — Keep last tab open in Chrome.
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset has Google Chrome keep at least one tab open, after switching to an alternate browser.

       Setting the policy to Disabled has Google Chrome close the tab after switching to an alternate browser, even if it was the last tab. This causes Google Chrome to exit completely.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:74-
  type: main

** BrowserSwitcherParsingMode — Sitelist parsing mode
SYNOPSIS: 1
 This policy controls how Google Chrome interprets sitelist/greylist policies for the Legacy Browser Support feature. It affects the following policies: BrowserSwitcherUrlList, BrowserSwitcherUrlGreylist, BrowserSwitcherUseIeSitelist, BrowserSwitcherExternalSitelistUrl, and BrowserSwitcherExternalGreylistUrl.

       If 'Default' (0) or unset, URL matching is less strict. Rules that do not contain "/" look for a substring anywhere in the URL's hostname. Matching the path component of a URL is case-sensitive.

       If 'IESiteListMode' (1), URL matching is more strict. Rules that do not contain "/" only match at the end of the hostname. They must also be at a domain name boundary. Matching the path component of a URL is case-insensitive. This is more compatible with Microsoft® Internet Explorer® and Microsoft® Edge®.

       For example, with the rules "example.com" and "acme.com/abc":

       "http://example.com/", "http://subdomain.example.com/" and "http://acme.com/abc" match regardless of parsing mode.

       "http://notexample.com/", "http://example.com.invalid.com/", "http://example.comabc/" only match in 'Default' mode.

       "http://acme.com/ABC" only matches in 'IESiteListMode'.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Default behavior for LBS.
    name: Default
    value: 0
  - caption: More compatible with Microsoft IE/Edge enterprise mode sitelists.
    name: IESiteListMode
    value: 1
  schema:
    type: integer
  supported_on:
  - chrome.*:95-
  type: int-enum

** BrowserSwitcherUrlList — Websites to open in alternative browser
SYNOPSIS: ["ie.com", "!open-in-chrome.ie.com", "foobar.com/ie-only/"]
 Setting the policy controls the list of websites to open in an alternative browser. Each item is treated as a rule for something to open in an alternative browser. Google Chrome uses those rules when choosing if a URL should open in an alternative browser. When the Internet Explorer® add-in is on, Internet Explorer® switches back to Google Chrome when the rules don't match. If rules contradict each other, Google Chrome uses the most specific rule.

       Leaving the policy unset adds no websites to the list.

       Note: Elements can also be added to this list through the BrowserSwitcherUseIeSitelist and BrowserSwitcherExternalSitelistUrl policies.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:71-
  type: list

** BrowserSwitcherUrlGreylist — Websites that should never trigger a browser switch.
SYNOPSIS: ["ie.com", "!open-in-chrome.ie.com", "foobar.com/ie-only/"]
 Setting the policy controls the list of websites that will never cause a browser switch. Each item is treated as a rule. Those rules that match won't open an alternative browser. Unlike the BrowserSwitcherUrlList policy, rules apply to both directions. When the Internet Explorer® add-in is on, it also controls whether Internet Explorer® should open these URLs in Google Chrome.

       Leaving the policy unset adds no websites to the list.

       Note: Elements can also be added to this list through the BrowserSwitcherExternalGreylistUrl policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:71-
  type: list

* PluginVm — PluginVm
 Configure PluginVm related policies.

** PluginVmAllowed — Allow devices to use a PluginVm on Google Chrome OS
SYNOPSIS: true
 Setting the policy to Enabled turns on PluginVm for the device, as long as other settings also allow it. PluginVmAllowed and UserPluginVmAllowed must be True, and either PluginVmLicenseKey or PluginVmUserId must be set for PluginVm to run.

       Setting the policy to Disabled or leaving it unset means PluginVm isn't on for the device.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:72-
  type: main

** PluginVmImage — PluginVm image
SYNOPSIS: {"url": "https://example.com/plugin_vm_image", "hash": "842841a4c75a55ad050d686f4ea5f77e83ae059877fe9b6946aa63d3d057ed32"}
 Setting the policy specifies the PluginVm image for a user. Specify this policy as a JSON format string, with URL stating where to download the image and hash as a SHA-256 hash used to verify the integrity of the download.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    properties:
      hash:
        description: The SHA-256 hash of the PluginVm image.
        type: string
      url:
        description: The URL from which the PluginVm image can be downloaded.
        type: string
    type: object
  supported_on:
  - chrome_os:72-
  type: dict

** PluginVmLicenseKey (DEPRECATED) — PluginVm license key
SYNOPSIS: "LICENSE_KEY"
 Setting the policy specifies the PluginVm license key for this device.

       This policy was removed in M94.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    sensitiveValue: true
    type: string
  supported_on:
  - chrome_os:73-93
  type: string

** PluginVmRequiredFreeDiskSpace — Required free disk space for PluginVm
SYNOPSIS: 20
 Free disk space (in GB) required to install PluginVm.

       If this policy is left unset, PluginVm installation fails if free disk space available on the device is less than 20 GB (default value).
       If this policy is set, PluginVm installation fails if free disk space available on the device is less than required by policy.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    maximum: 1000
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:85-
  type: int

* Signin — Sign-in settings
 Controls the behavior of the sign-in screen, where users log into their accounts. Settings include who can log in, what type of accounts are allowed, what authentication methods should be used, as well as general accessibility, input method and locale settings.

** DeviceUserWhitelist (DEPRECATED) — Login user white list
SYNOPSIS: ["madmax@managedchrome.com"]
 Defines the list of users that are allowed to login to the device. Entries are of the form user@domain, such as madmax@managedchrome.com. To allow arbitrary users on a domain, use entries of the form *@domain.

       If this policy is not configured, there are no restrictions on which users are allowed to sign in. Note that creating new users still requires the DeviceAllowNewUsers policy to be configured appropriately.

       This policy is deprecated, please use DeviceUserAllowlist instead.
      

  arc_support: This policy controls who may start a Google Chrome OS session. It does
    not prevent users from signing in to additional Google accounts within Android.
    If you want to prevent this, configure the Android-specific accountTypesWithManagementDisabled
    policy as part of ArcPolicy.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    items:
      type: string
    sensitiveValue: true
    type: array
  supported_on:
  - chrome_os:12-
  type: list

** DeviceAllowNewUsers — Allow creation of new user accounts
SYNOPSIS: true
 Controls whether Google Chrome OS allows new user accounts to be created.

       If this policy is set to false, only users present in DeviceUserAllowlist will be able to login.

       If this policy is set to true or not configured, all users will be able to login.

  arc_support: This policy controls whether new users can be added to Google Chrome
    OS. It does not prevent users from signing in to additional Google accounts within
    Android. If you want to prevent this, configure the Android-specific accountTypesWithManagementDisabled
    policy as part of ArcPolicy.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:12-
  type: main

** DeviceLoginScreenDomainAutoComplete — Enable domain name autocomplete during user sign in
SYNOPSIS: "students.school.edu"
 If this policy is set to a blank string or not configured, Google Chrome OS will not show an autocomplete option during user sign-in flow.
       If this policy is set to a string representing a domain name, Google Chrome OS will show an autocomplete option during user sign-in allowing the user to type in only their user name without the domain name extension.  The user will be able to overwrite this domain name extension.
       If the value of the policy is not a valid domain, the policy will not be applied.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: string
  supported_on:
  - chrome_os:44-
  type: string

** DeviceShowUserNamesOnSignin — Show usernames on login screen
SYNOPSIS: true
 If this policy is set to true or not configured, Google Chrome OS will show existing users on the login screen and allow to pick one.

       If this policy is set to false, Google Chrome OS will not show existing users on the login screen. The normal sign-in screen (prompting for the user email and password or phone) or the SAML interstitial screen (if enabled via the LoginAuthenticationBehavior policy) will be shown, unless a Managed Session is configured. When a Managed Session is configured, only the Managed Session accounts will be shown, allowing to pick one of them.

       Note that this policy does not affect whether the device keeps or discards the local user data.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:12-
  type: main

** LoginAuthenticationBehavior — Configure the login authentication behavior
SYNOPSIS: 0
 When this policy is set, the login authentication flow will be in one of the following ways depending on the value of the setting:

       If set to GAIA, login will be done via the normal GAIA authentication flow.

       If set to SAML_INTERSTITIAL, login will show an interstitial screen offering the user to go forward with authentication via the SAML IdP of the device's enrollment domain, or go back to the normal GAIA login flow.

  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Authentication via the default GAIA flow
    name: GAIA
    value: 0
  - caption: Redirect to SAML IdP after user confirmation
    name: SAML_INTERSTITIAL
    value: 1
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:51-
  type: int-enum

** DeviceSamlLoginAuthenticationType — SAML login authentication type
SYNOPSIS: 0
 Configures the type of authentication for SAML logins.

       When this policy is unset or set to Default (value 0), the behavior of SAML logins is determined by the browser depending on other factors. In the most basic scenario, the user authentication and the protection of the cached user data are based on passwords manually entered by users.

       When this policy is set to ClientCertificate (value 1), client certificate authentication is used for newly added users which log in via SAML. No passwords are used for such users, and their cached local data is protected using corresponding cryptographic keys. For instance, this setting allows configuring smart card based user authentication (note that smart card middleware apps have to be installed via the DeviceLoginScreenExtensions policy).

       This policy affects only users who authenticate using SAML.

  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Default configuration
    name: Default
    value: 0
  - caption: Authentication based on client certificates
    name: ClientCertificate
    value: 1
  schema:
    enum:
    - 0
    - 1
    type: integer
  tags:
  - system-security
  type: int-enum

** LoginVideoCaptureAllowedUrls — URLs that will be granted access to video capture devices on SAML login pages
SYNOPSIS: ["https://example.com"]
 Patterns in this list will be matched against the security
       origin of the requesting URL.  If a match is found, access to video
       capture devices will be granted on SAML login pages.  If no match is
       found, access will be automatically denied.  Wildcard patterns are not
       allowed.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    items:
      type: string
    type: array
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:52-
  tags:
  - website-sharing
  type: list

** DeviceLoginScreenLocales — Device sign-in screen locale
SYNOPSIS: ["en-US"]
 Configures the locale which is enforced on the Google Chrome OS sign-in screen.

       If this policy is set, the sign-in screen will always be displayed in the locale which is given by the first value of this policy (the policy is defined as a list for forward compatibility).  If this policy is not set or is set to an empty list, the sign-in screen will be displayed in the locale of the last user session.  If this policy is set to a value which is not a valid locale, the sign-in screen will be displayed in a fallback locale (currently, en-US).

  device_only: true
  features:
    dynamic_refresh: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:58-
  type: list

** DeviceLoginScreenSystemInfoEnforced — Force the sign-in screen to show or hide system information.
SYNOPSIS: true
 Specify whether the system information (e.g. Chrome OS version, device serial
       number) is always shown (or hidden) on the login screen.

       If the policy is set to true, the system information will be shown forcedly.
       If the policy is set to false, the system information will be hidden forcedly.
       If the policy is unset, default hehavior (being shown for Canary / Dev channel)
       is effective. Users can toggle the visibility by specific operations (e.g., Alt-V).

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:79-
  type: main

** DeviceLoginScreenSitePerProcess (DEPRECATED) — Enable Site Isolation for every site
SYNOPSIS: true

       This policy was removed in M77.
       This policy applies to the sign-in screen. Please see also the SitePerProcess policy which applies to the user session. It is recommended to set both policies to the same value. If the values don't match, a delay may be incurred when entering a user session while the value specified by user policy is being applied.
      

  device_only: true
  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:66-76
  tags:
  - system-security
  type: main

** DeviceShowNumericKeyboardForPassword — Show numeric keyboard for password
SYNOPSIS: true
 Setting the policy to true displays numeric keyboard by default for entering password on the login screen. Users still could switch to the normal keyboard.

       If you set the policy, users can't change it. If not set or set to false, it has no effect.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:80-
  type: main

* UserAndDeviceReporting — User and device reporting
 Controls what kind of user and device information is reported.

** EnableDeviceGranularReporting — Enable granular reporting controls
SYNOPSIS: true
 Setting the policy to enabled or leaving it unset allows for the device to recieve granular reporting controls.
       Setting the policy to Disabled means enrolled devices won't receive granular reporting controls.

  arc_support: This policy has no effect on the logging done by Android.
  default: true
  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Allow granular reporting controls
    value: true
  - caption: Do not allow granular reporting controls
    value: false
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:96-
  tags:
  - admin-sharing
  type: main

** ReportDeviceActivityTimes — Report device activity times
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset has enrolled devices report time periods when a user is active on the device.

       Setting the policy to Disabled means enrolled devices don't record or report activity times.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:18-
  tags:
  - admin-sharing
  type: main

** ReportDeviceAudioStatus — Report device audio status
SYNOPSIS: false
 Setting the policy to enabled or leaving it unset has enrolled devices report device audio volume.

       Setting the policy to Disabled means enrolled devices don't record or report audio status.

  arc_support: This policy has no effect on the logging done by Android.
  default: true
  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Report audio status
    value: true
  - caption: Do not report audio status
    value: false
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  tags:
  - admin-sharing
  type: main

** ReportDeviceLocation — Report device location
SYNOPSIS: false
 Report the geographic location of the device.

       If the policy is not set, or set to false, the location will not be reported.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  tags:
  - admin-sharing
  type: main

** ReportDeviceNetworkInterfaces — Report device network interfaces
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset has enrolled devices report the list of network interfaces with their types and hardware addresses.

       Setting the policy to Disabled means enrolled devices don't report the network interface.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:29-
  tags:
  - admin-sharing
  type: main

** ReportDeviceHardwareStatus — Report hardware status
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset has enrolled devices report hardware statistics such as CPU/RAM usage.

       Setting the policy to Disabled means enrolled devices don't report the hardware statistics.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:42-
  tags:
  - admin-sharing
  type: main

** ReportDeviceCrashReportInfo — Report information about crash reports.
SYNOPSIS: false
 Report information related to crash reports, such as remote id,
       capture timestamp and cause.

       If the policy is set to false or left unset, the crash report information
       will not be reported. If set to true, crash report information will be
       reported.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:83-
  tags:
  - admin-sharing
  type: main

** ReportDeviceBoardStatus — Report board status
SYNOPSIS: false
 Setting the policy to Enabled has enrolled devices report hardware statistics for SoC components.

       Setting the policy to Disabled or leaving it unset means enrolled devices don't report the statistics.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:73-
  tags:
  - admin-sharing
  type: main

** ReportDeviceTimezoneInfo — Report Timezone info
SYNOPSIS: false
 Report information for a device's timezone.

       If the policy is set to false or left unset, the information will not be reported.
       If set to true, the device's currently set timezone will be reported.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:83-
  tags:
  - admin-sharing
  type: main

** ReportDeviceBacklightInfo — Report backlight info
SYNOPSIS: false
 Report information about a device's backlights.

       If the policy is set to false or left unset, the information will not be reported.
       If set to true, the device's backlight information will be reported.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:83-
  tags:
  - admin-sharing
  type: main

** ReportDevicePowerStatus — Report power status
SYNOPSIS: false
 Setting the policy to Enabled has enrolled devices report hardware statistics and identifiers related to power.

       Setting the policy to Disabled or leaving it unset means enrolled devices don't report power statistics.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:73-
  tags:
  - admin-sharing
  type: main

** ReportDeviceSecurityStatus — Report device security status
SYNOPSIS: false
 Setting the policy to enabled or leaving it unset has enrolled devices report device TPM security status.

       Setting the policy to Disabled means enrolled devices don't record or report TPM security status.

  arc_support: This policy has no effect on the logging done by Android.
  default: false
  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Report security status
    value: true
  - caption: Do not report security status
    value: false
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:96-
  tags:
  - admin-sharing
  type: main

** ReportDeviceBluetoothInfo — Report Bluetooth info
SYNOPSIS: false
 Report a device's Bluetooth information.

       If the policy is set to false or left unset, the information will not be reported.
       If set to true, the device's Bluetooth information will be reported.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:85-
  tags:
  - admin-sharing
  type: main

** ReportDeviceVpdInfo — Report VPD info
SYNOPSIS: false
 Report a device's VPD information.

       If the policy is set to false or left unset, the information will not be reported.
       If set to true, the device's VPD information will be reported.
       Vital Product Data (VPD) is a collection of configuration and informational data (such as part and serial numbers) associated with the device.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:85-
  tags:
  - admin-sharing
  type: main

** ReportDevicePrintJobs — Report print jobs
SYNOPSIS: false
 Report a device's print jobs.

       If the policy is set to false or left unset, the information will not be reported.
       If set to true, the device's print jobs will be reported.

  arc_support: This policy has no effect on the logging done by Android.
  default: false
  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Report print jobs
    value: true
  - caption: Do not report print jobs
    value: false
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  tags:
  - admin-sharing
  type: main

** ReportUploadFrequency — Frequency of device status report uploads
SYNOPSIS: 10800000
 Setting the policy determines how frequently to send device status uploads, in milliseconds. The minimum allowed is 60 seconds.

       If not set, the default interval of 3 hours applies.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    minimum: 60000
    type: integer
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:42-
  tags:
  - admin-sharing
  type: int

** HeartbeatFrequency — Frequency of monitoring network packets
SYNOPSIS: 180000
 Setting the policy determines how frequently to send monitoring network packets, in milliseconds. Intervals range from 30 seconds to 24 hours. Values outside this range are clamped to this range.

       If not set, the default interval of 3 minutes applies.

  arc_support: This policy has no effect on the logging done by Android.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    minimum: 30000
    type: integer
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:43-
  type: int

** DeviceMetricsReportingEnabled — Enable metrics reporting
SYNOPSIS: true
 Setting the policy to Enabled has Google Chrome OS report usage metrics and diagnostic data, including crash reports, back to Google. Setting the policy to Disabled turns off metrics and diagnostic data reporting.

        Leaving the policy unset keeps metrics and diagnostic data reporting off on unmanaged devices and on for managed devices.

  arc_support: This policy also controls Android usage and diagnostic data collection.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:14-
  tags:
  - admin-sharing
  - google-sharing
  type: main

** ReportDeviceNetworkTelemetryCollectionRateMs — Network telemetry collection rate in milliseconds.
SYNOPSIS: 600000
 Rate at which network data is sampled and collected. The minimum allowed is 1 minute.

       If not set, the default rate of 10 minutes applies.

  arc_support: This policy has no effect on the logging done by Android.
  default: 600000
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    minimum: 60000
    type: integer
  supported_chrome_os_management:
  - google_cloud
  tags:
  - admin-sharing
  type: int

** ReportDeviceNetworkTelemetryEventCheckingRateMs — Network events checking rate in milliseconds.
SYNOPSIS: 60000
 Rate at which network data is polled and checked for events. The minimum allowed is 1 minute.

       If not set, the default rate of 1 minute applies.

  arc_support: This policy has no effect on the logging done by Android.
  default: 60000
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    minimum: 60000
    type: integer
  supported_chrome_os_management:
  - google_cloud
  tags:
  - admin-sharing
  type: int

* Network — Network settings
 Controls device-wide network configuration.

** DeviceOpenNetworkConfiguration — Device-level network configuration
SYNOPSIS: "{ \"NetworkConfigurations\": [ { \"GUID\": \"{4b224dfd-6849-7a63-5e394343244ae9c9}\", \"Name\": \"my WiFi\", \"Type\": \"WiFi\", \"WiFi\": { \"SSID\": \"my WiFi\", \"HiddenSSID\": false, \"Security\": \"None\", \"AutoConnect\": true } } ] }"
 Setting the policy allows pushing network configuration for all users of a Google Chrome OS device. The network configuration is a JSON-formatted string, as defined by the Open Network Configuration format.

  arc_support: Android apps can use the network configurations and CA certificates set
    via this policy, but do not have access to some configuration options.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: string
  supported_on:
  - chrome_os:16-
  tags:
  - full-admin-access
  type: string
  url_schema: https://chromium.googlesource.com/chromium/src/+/HEAD/components/onc/docs/onc_spec.md

** NetworkThrottlingEnabled — Enable throttling network bandwidth
SYNOPSIS: {"enabled": true, "upload_rate_kbits": 5600, "download_rate_kbits": 5600}
 Setting the policy turns network throttling on or off. This means that the system is throttled to achieve the provided upload and download rates (in kbits/s). It applies to all users and interfaces on the device.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    properties:
      download_rate_kbits:
        description: Desired download rate in kbits/s.
        type: integer
      enabled:
        description: A boolean flag indicating if throttling is enabled.
        type: boolean
      upload_rate_kbits:
        description: Desired upload rate in kbits/s.
        type: integer
    required:
    - enabled
    - upload_rate_kbits
    - download_rate_kbits
    type: object
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:56-
  type: dict

** DeviceHostnameUserConfigurable — Allow user to configure their device hostname
SYNOPSIS: true
 Determine whether a user is allowed to configure the device hostname.

       If DeviceHostnameTemplate is set, the admininistrator sets hostname and the user cannot choose regardless of what this policy is set to.
       If this policy is set to True and DeviceHostnameTemplate is not set, the admininistrator does not set hostname and the user can choose one.
       If this policy is set to False and DeviceHostnameTemplate is not set, the admininistrator does not set hostname and the user cannot choose one, hence the default name is used.

  default: false
  device_only: true
  features:
    can_be_mandatory: true
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Allow managed user to configure device hostname
    value: true
  - caption: Prevent managed user from configuring device hostname
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:97-
  type: main

** DeviceWiFiAllowed — Enable WiFi
SYNOPSIS: true
 Setting the policy to Disabled means Google Chrome OS turns off Wi-Fi, and users can't change it.

       Setting the policy to Enabled or leaving it unset lets users turn Wi-Fi on or off.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:75-
  type: main

* DeviceUpdate — Device update settings
 Controls how and when Chrome OS updates are applied.

** ChromeOsReleaseChannelDelegated — Users may configure the Chrome OS release channel
SYNOPSIS: false
 Users are only allowed to change the release channel of the device if this policy is set to True. If this policy is False or not set, users are not allowed to change the channel.

       Setting ChromeOsReleaseChannel only has an effect if ChromeOsReleaseChannelDelegated is set to False.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:19-
  type: main

** DeviceAutoUpdateDisabled — Disable Auto Update
SYNOPSIS: true
 Disables automatic updates when set to True.

       Google Chrome OS devices automatically check for updates when this setting is not configured or set to False.

       Warning: It is recommended to keep auto-updates enabled so that users receive software updates and critical security fixes. Turning off auto-updates might leave users at risk.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:19-
  tags:
  - system-security
  type: main

** DeviceAutoUpdateTimeRestrictions — Update Time Restrictions
SYNOPSIS: [{"start": {"day_of_week": "Monday", "minutes": 50, "hours": 3}, "end": {"day_of_week": "Thursday", "minutes": 30, "hours": 2}}, {"start": {"day_of_week": "Thursday", "minutes": 30, "hours": 3}, "end": {"day_of_week": "Sunday", "minutes": 10, "hours": 15}}]
 This policy controls the time frames during which the Google Chrome OS device is not allowed to check for updates automatically.
       When this policy is set to a non-empty list of time intervals:
       Devices will not be able to check for updates automatically during the specified time intervals. Devices that require an enterprise rollback or are below the minimum Google Chrome OS version will not be affected by this policy due to potential security issues. Furthermore, this policy will not block update checks requested by users or administrators.
       Starting from M88, this policy cancels an ongoing update when a restricted time interval is reached. The next auto update after the restricted time interval ends will automatically resume the update. Devices updating to a Quick Fix Build will not be affected by this policy.
       When this policy is unset or contains no time intervals:
       No automatic update checks will be blocked by this policy, but they may be blocked by other policies.
       Till M88, this feature is only enabled on Google Chrome OS devices configured as auto-launch kiosks. Other devices will not be restricted by this policy. However starting from M89, this policy is enabled on all Google Chrome OS devices.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      description: Time interval that spans at most one week. If the start time is later
        than the end time, then the interval will wrap around.
      properties:
        end:
          $ref: DisallowedTimeInterval
          description: End of the interval, exclusive.
        start:
          description: Start time of the interval, inclusive.
          id: DisallowedTimeInterval
          properties:
            day_of_week:
              description: Day of the week for the interval.
              enum:
              - Monday
              - Tuesday
              - Wednesday
              - Thursday
              - Friday
              - Saturday
              - Sunday
              type: string
            hours:
              description: Hours elapsed since the start of the day in (24 hour format).
              maximum: 23
              minimum: 0
              type: integer
            minutes:
              description: Minutes elapsed in the current hour.
              maximum: 59
              minimum: 0
              type: integer
          required:
          - day_of_week
          - minutes
          - hours
          type: object
      required:
      - start
      - end
      type: object
    type: array
  supported_on:
  - chrome_os:69-
  type: dict

** DeviceTargetVersionPrefix — Target Auto Update Version
SYNOPSIS: "1412."
 Sets a target version for Auto Updates.

       Specifies the prefix of a target version Google Chrome OS should update to. If the device is running a version that's before the specified prefix, it will update to the latest version with the given prefix. If the device is already on a later version, effects depend on the value of DeviceRollbackToTargetVersion. The prefix format works component-wise as is demonstrated in the following example:

       "" (or not configured): update to latest version available.
       "1412.": update to any minor version of 1412 (e.g. 1412.24.34 or 1412.60.2)
       "1412.2.": update to any minor version of 1412.2 (e.g. 1412.2.34 or 1412.2.2)
       "1412.24.34": update to this specific version only

       Warning: It is not recommended to configure version restrictions as they may prevent users from receiving software updates and critical security fixes. Restricting updates to a specific version prefix might leave users at risk.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: string
  supported_on:
  - chrome_os:19-
  tags:
  - system-security
  type: string

** DeviceUpdateScatterFactor — Auto update scatter factor
SYNOPSIS: 7200
 Specifies the number of seconds up to which a device may randomly delay its download of an update from the time the update was first pushed out to the server. The device may wait a portion of this time in terms of wall-clock-time and the remaining portion in terms of the number of update checks. In any case, the scatter is upper bounded to a constant amount of time so that a device does not ever get stuck waiting to download an update forever.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: integer
  supported_on:
  - chrome_os:20-
  tags:
  - system-security
  type: int

** DeviceUpdateHttpDownloadsEnabled — Allow autoupdate downloads via HTTP
SYNOPSIS: true
 Auto-update payloads on Google Chrome OS can be downloaded via HTTP instead of HTTPS. This allows transparent HTTP caching of HTTP downloads.

       If this policy is set to true, Google Chrome OS will attempt to download auto-update payloads via HTTP. If the policy is set to false or not set, HTTPS will be used for downloading auto-update payloads.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:29-
  type: main

** MinimumRequiredChromeVersion (DEPRECATED) — Configure minimum allowed Chrome version for the device.
SYNOPSIS: "61.0.3163.120"
 This policy is removed in M82, please use DeviceMinimumVersion instead.

       Configures the requirement of the minimum allowed version of Google Chrome. Versions below given are treated as obsolete and device would not allow user sign in before OS is updated.

       If current version becomes obsolete during user session, user will be forcefully signed out.

       If this policy is not set, no restrictions are applied, and user can sign regardless of Google Chrome version.

       Here "Version" can be either an exact version like '61.0.3163.120' or a version prefix, like '61.0'  

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome_os:64-81
  type: string

** DeviceRollbackAllowedMilestones — Number of milestones rollback is allowed
SYNOPSIS: 4
 Specifies the minimum number of Google Chrome OS milestones rollback should be allowed starting from the stable version at any time.

       Default is 0 for consumer, 4 (approx. half a year) for enterprise enrolled devices.

       Setting this policy prevents rollback protection to apply for at least this number of milestones.

       Setting this policy to a lower value has a permanent effect: the device MAY not be able to roll back to earlier versions even after the policy is reset to a larger value.

       Actual rollback possibilities may also depend on the board and critical vulnerability patches.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    maximum: 4
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:67-
  tags:
  - system-security
  type: int

** DeviceMinimumVersionAueMessage — Configure auto update expiration message for DeviceMinimumVersion policy
SYNOPSIS: "This device has reached auto update expiration. Kindly return it."
 This policy is only effective when the device has reached auto update expiration and does not meet the minimum allowed version of Google Chrome OS set through DeviceMinimumVersion policy.

       When this policy is set to a non-empty string :
       If the warning time mentioned in DeviceMinimumVersion policy has expired, this message is shown at the login screen when the device is blocked for any user to sign in.
       If the warning time mentioned in DeviceMinimumVersion policy has not expired, this message is shown on the Chrome management page after user sign in.

       If this policy is not set or set to empty, the default auto update expiration message is shown to the user in both of the above cases.
       The auto update expiration message must be plain text without any formatting. No markup is allowed.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome_os:86-
  type: string

** DeviceChannelDowngradeBehavior — Channel downgrade behavior
SYNOPSIS: 1
 This policy specifies channel downgrade behavior on enrolled devices. With channel downgrade we mean switching to a more stable channel, e.g. beta to stable.

       The value of this policy affects user-initiated channel downgrades as well as admin initiated channel downgrades.

       On a channel downgrade, the device can either roll back its version and reset or wait for its current (or a higher) version to become available on the channel and receive no update until then.

       If an enrolled user initiates a channel downgrade, they can decide to reset or wait, or the choice is made for them depending on this policy's value. If an admin initiates a channel downgrade via setting ChromeOsReleaseChannel, the device is rolled back on the next update check only if rollback was selected. Otherwise, the device will wait for the target channel to catch up with its current version.

       If unset or invalid, the behavior is the same as for "Wait for target channel to catch up on channel downgrade".

  default: 1
  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Wait for the target channel to catch up on channel downgrade
    name: WaitForVersionCatchUp
    value: 1
  - caption: Roll back and reset the device on channel downgrade, try to preserve enrollment
    name: Rollback
    value: 2
  - caption: User decides on channel downgrade behavior
    name: AllowUserToConfigure
    value: 3
  schema:
    enum:
    - 1
    - 2
    - 3
    type: integer
  type: int-enum

* PowerAndShutdown — Power and shutdown
 Controls settings related to power management and rebooting.

** DeviceLoginScreenPowerManagement — Power management on the login screen
SYNOPSIS: {"AC": {"IdleAction": "DoNothing"}, "Battery": {"IdleAction": "DoNothing", "Delays": {"ScreenDim": 10000, "ScreenOff": 20000, "Idle": 30000}}, "LidCloseAction": "Suspend", "UserActivityScreenDimDelayScale": 110}
 Setting the policy lets you set how Google Chrome OS behaves when there is no user activity for some amount of time while the sign-in screen appears. The policy controls multiple settings. For their individual semantics and value ranges, see the corresponding policies that control power management within a session.

       The deviations from these policies are:

       * The actions to take on idle or lid close cannot be to end the session.

       * The default action taken on idle when running on AC power is to shut down.

       Leaving the policy or any of its settings unset results in the use of the default values for the various power settings.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    properties:
      AC:
        description: Power management settings applicable only when running on AC power
        id: DeviceLoginScreenPowerSettings
        properties:
          Delays:
            properties:
              Idle:
                description: The length of time without user input after which the idle
                  action is taken, in milliseconds
                minimum: 0
                type: integer
              ScreenDim:
                description: The length of time without user input after which the screen
                  is dimmed, in milliseconds
                minimum: 0
                type: integer
              ScreenOff:
                description: The length of time without user input after which the screen
                  is turned off, in milliseconds
                minimum: 0
                type: integer
            type: object
          IdleAction:
            description: Action to take when the idle delay is reached
            enum:
            - Suspend
            - Shutdown
            - DoNothing
            type: string
        type: object
      Battery:
        $ref: DeviceLoginScreenPowerSettings
        description: Power management settings applicable only when running on battery
          power
      LidCloseAction:
        description: Action to take when the lid is closed
        enum:
        - Suspend
        - Shutdown
        - DoNothing
        type: string
      UserActivityScreenDimDelayScale:
        description: Percentage by which the screen dim delay is scaled when user activity
          is observed while the screen is dimmed or soon after the screen has been turned
          off
        minimum: 100
        type: integer
    type: object
  supported_on:
  - chrome_os:30-
  type: dict

** UptimeLimit — Limit device uptime by automatically rebooting
SYNOPSIS: 86400
 Setting the policy limits the device uptime by scheduling automatic restarts, which you can delay by up to 24 hours if a user is on the device. The policy value should be specified in seconds. Values are clamped to be at least 3,600 (one hour).

       If you set the policy, users can't change it. If not set, the device uptime isn't limited.

       Note: Automatic restarts are only on while the sign-in screen appears or during a kiosk app session.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: integer
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:29-
  type: int

** DeviceRebootOnShutdown — Automatic reboot on device shutdown
SYNOPSIS: true
 Setting the policy to Enabled means Google Chrome OS triggers a restart when users shut down the device. Google Chrome OS replaces all shutdown buttons in the UI with restart buttons. If the users shut down devices using the power button, they won't automatically restart, even if the policy is on.

       Setting the policy to Disabled or leaving it unset means Google Chrome OS lets them shut down the device.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:41-
  type: main

* Kiosk — Kiosk settings
 Controls public session and kiosk account types.

** DeviceLocalAccountAutoLoginDelay — Device-local account auto-login timer
SYNOPSIS: 180000
 Setting the policy determines the amount of time in milliseconds without user activity before automatically signing in to the device-local account specified by the DeviceLocalAccountAutoLoginId policy.

       Leaving it unset means 0 milliseconds is used as the timeout.

       If the DeviceLocalAccountAutoLoginId policy is unset, this policy has no effect.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: integer
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:26-
  type: int

** DeviceLocalAccountPromptForNetworkWhenOffline — Enable network configuration prompt when offline
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset means when a device is offline, if a device-local account is set for zero-delay, automatic sign-in, Google Chrome OS shows a network-configuration prompt.

       Setting the policy to Disabled has an error message displayed instead.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:33-
  type: main

* Other — Other
 Controls miscellaneous settings including USB, bluetooth, policy refresh, developer mode and others.

** UsbDetachableAllowlist — Allowlist of USB detachable devices
SYNOPSIS: [{"vendor_id": 1027, "product_id": 24577}, {"vendor_id": 16700, "product_id": 8453}]
 Setting the policy defines the list of USB devices users can detach from their kernel driver to use through the chrome.usb API directly inside a web app. Entries are pairs of USB Vendor Identifier and Product Identifier to identify specific hardware.

       If not set, the list of a detachable USB devices is empty.

  device_only: true
  features:
    dynamic_refresh: false
  schema:
    items:
      id: UsbDeviceIdInclusive
      properties:
        product_id:
          type: integer
        vendor_id:
          type: integer
      type: object
    type: array
  supported_on:
  - chrome_os:87-
  tags:
  - system-security
  type: list

** DeviceBlockDevmode — Block developer mode
SYNOPSIS: true
 Setting the policy to Enabled means Google Chrome OS stops the device from going into Developer mode.

        Setting the policy to Disabled or leaving it unset keeps Developer mode available for the device.

  arc_support: This policy controls Google Chrome OS developer mode only. If you want
    to prevent access to Android Developer Options, you need to set the DeveloperToolsDisabled
    policy.
  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:37-
  type: main

** PromptOnMultipleMatchingCertificates — Prompt for the client certificate when multiple certificates match.
SYNOPSIS: true
 This policy controls whether the user is prompted to select a client certificate when more than one certificate matches AutoSelectCertificateForUrls.
       If this policy is set to Enabled, the user is prompted to select a client certificate whenever the auto-selection policy matches multiple certificates.
       If this policy is set to Disabled or not set, the user may only be prompted when no certificate matches the auto-selection.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Prompt the user to select the client certificate whenever the auto-selection
      policy matches multiple certificates.
    value: true
  - caption: Only prompt the user when no certificate matches the auto-selection.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:96-
  - chrome.*:96-
  type: main

* DateAndTime — Date and time
 Controls clock and time zone settings.

** SystemTimezoneAutomaticDetection — Configure the automatic timezone detection method
SYNOPSIS: 0
 Unless the SystemTimezone policy turns off automatic time zone detection, then setting the policy outlines the automatic time zone detection method, which users can't change.

       Setting the policy to:
        * TimezoneAutomaticDetectionDisabled keeps automatic time zone detection off.
        * TimezoneAutomaticDetectionIPOnly keeps automatic time zone detection on, using the IP-only method.
        * TimezoneAutomaticDetectionSendWiFiAccessPoints keeps automatic time zone detection on, continually sending the list of visible Wi-Fi access-points to the Geolocation API server for finer-grained time zone detection.
        * TimezoneAutomaticDetectionSendAllLocationInfo keeps automatic time zone detection on, continually sending location information (such as Wi-Fi access points, reachable cell towers, GPS) to a server for the most fine-grained time zone detection.

       If not set, set to Let users decide, or set to None, then users control automatic time zone detection using normal controls in chrome://settings.

  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Let users decide
    name: TimezoneAutomaticDetectionUsersDecide
    value: 0
  - caption: Never auto-detect timezone
    name: TimezoneAutomaticDetectionDisabled
    value: 1
  - caption: Always use coarse timezone detection
    name: TimezoneAutomaticDetectionIPOnly
    value: 2
  - caption: Always send WiFi access-points to server while resolving timezone
    name: TimezoneAutomaticDetectionSendWiFiAccessPoints
    value: 3
  - caption: Always send any available location signals to the server while resolving
      timezone
    name: TimezoneAutomaticDetectionSendAllLocationInfo
    value: 4
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
  supported_on:
  - chrome_os:53-
  tags:
  - google-sharing
  type: int-enum

** SystemUse24HourClock — Use 24 hour clock by default
SYNOPSIS: true
 Setting the policy to True gives a device's sign-in screen a 24-hour clock format.

       Setting the policy to False gives a device's sign-in screen a 12-hour clock format.

       Leaving the policy unset makes a device use the format from the current locale.

       User sessions also default to the device format, but users can change an account's clock format.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:30-
  type: main

* Display — Display
 Controls display settings.

** DisplayRotationDefault — Set default display rotation, reapplied on every reboot
SYNOPSIS: 1
 Setting the policy has each display rotate to the specified orientation on every reboot and the first time it's connected after the policy value changes. Users may change the display rotation through the settings page after signing in, but it changes back at the next reboot. This policy applies to primary and secondary displays.

       If not set, the default value is 0 degrees and users are free to change it. In this case, the default value isn't reapplied at restart.

  device_only: true
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Rotate screen by 0 degrees
    name: ROTATE_0
    value: 0
  - caption: Rotate screen clockwise by 90 degrees
    name: ROTATE_90
    value: 1
  - caption: Rotate screen by 180 degrees
    name: ROTATE_180
    value: 2
  - caption: Rotate screen clockwise by 270 degrees
    name: ROTATE_270
    value: 3
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome_os:48-
  type: int-enum

* Printing — Printing
 Controls printing settings.

** PrintingEnabled — Enable printing
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset lets users print in Google Chrome, and users can't change this setting.

       Setting the policy to Disabled means users can't print from Google Chrome. Printing is off in the three dots menu, extensions, and JavaScript applications.

  arc_support: This policy has no effect on Android apps.
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable printing
    value: true
  - caption: Disable printing
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  - chrome_os:11-
  - android:39-
  - ios:88-
  type: main

** CloudPrintProxyEnabled — Enable Google Cloud Print proxy
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset lets Google Chrome act as a proxy between Google Cloud Print and legacy printers connected to the machine. Using their Google Account, users may turn on the cloud print proxy by authentication.

       Setting the policy to Disabled means users can't turn on the proxy, and the machine can't share its printers with Google Cloud Print.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable Google Cloud Print proxy
    value: true
  - caption: Disable Google Cloud Print proxy
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:17-
  type: main

** PrintingAllowedDuplexModes — Restrict printing duplex mode
SYNOPSIS: "duplex"
 Setting the policy restricts printing duplex mode.

       Leaving the policy unset or empty results in no restriction.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow all duplex modes
    name: any
    value: any
  - caption: Simplex printing only
    name: simplex
    value: simplex
  - caption: Duplex printing only
    name: duplex
    value: duplex
  schema:
    enum:
    - any
    - simplex
    - duplex
    type: string
  supported_on:
  - chrome_os:71-
  type: string-enum

** PrintingAllowedBackgroundGraphicsModes — Restrict background graphics printing mode
SYNOPSIS: "enabled"
 Restricts background graphics printing mode. Unset policy is treated as no restriction.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow printing both with and without background graphics
    name: any
    value: any
  - caption: Allow printing only with background graphics
    name: enabled
    value: enabled
  - caption: Allow printing only without background graphics
    name: disabled
    value: disabled
  schema:
    enum:
    - any
    - enabled
    - disabled
    type: string
  supported_on:
  - chrome_os:79-
  - chrome.*:80-
  type: string-enum

** PrintingDuplexDefault — Default printing duplex mode
SYNOPSIS: "long-edge"
 Setting the policy overrides the default printing duplex mode. If the mode is unavailable, this policy is ignored.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable simplex printing
    name: simplex
    value: simplex
  - caption: Enable short edge duplex printing
    name: short-edge
    value: short-edge
  - caption: Enable long edge duplex printing
    name: long-edge
    value: long-edge
  schema:
    enum:
    - simplex
    - short-edge
    - long-edge
    type: string
  supported_on:
  - chrome_os:72-
  type: string-enum

** PrintingBackgroundGraphicsDefault — Default background graphics printing mode
SYNOPSIS: "enabled"
 Overrides default background graphics printing mode.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable background graphics printing mode by default
    name: enabled
    value: enabled
  - caption: Disable background graphics printing mode by default
    name: disabled
    value: disabled
  schema:
    enum:
    - enabled
    - disabled
    type: string
  supported_on:
  - chrome_os:79-
  - chrome.*:80-
  type: string-enum

** PrintingPaperSizeDefault — Default printing page size
SYNOPSIS: {"name": "custom", "custom_size": {"width": 210000, "height": 297000}}
 Overrides default printing page size.

       name should contain one of the listed formats or 'custom' if required paper size is not in the list. If 'custom' value is provided custom_size property should be specified. It describes the desired height and width in micrometers. Otherwise custom_size property shouldn't be specified. Policy that violates these rules is ignored.

       If the page size is unavailable on the printer chosen by the user this policy is ignored.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  schema:
    properties:
      custom_size:
        properties:
          height:
            description: Height of the page in micrometers
            type: integer
          width:
            description: Width of the page in micrometers
            type: integer
        required:
        - width
        - height
        type: object
      name:
        enum:
        - custom
        - asme_f_28x40in
        - iso_2a0_1189x1682mm
        - iso_a0_841x1189mm
        - iso_a10_26x37mm
        - iso_a1_594x841mm
        - iso_a2_420x594mm
        - iso_a3_297x420mm
        - iso_a4-extra_235.5x322.3mm
        - iso_a4-tab_225x297mm
        - iso_a4_210x297mm
        - iso_a5-extra_174x235mm
        - iso_a5_148x210mm
        - iso_a6_105x148mm
        - iso_a7_74x105mm
        - iso_a8_52x74mm
        - iso_a9_37x52mm
        - iso_b0_1000x1414mm
        - iso_b10_31x44mm
        - iso_b1_707x1000mm
        - iso_b2_500x707mm
        - iso_b3_353x500mm
        - iso_b4_250x353mm
        - iso_b5-extra_201x276mm
        - iso_b5_176x250mm
        - iso_b6_125x176mm
        - iso_b6c4_125x324mm
        - iso_b7_88x125mm
        - iso_b8_62x88mm
        - iso_b9_44x62mm
        - iso_c0_917x1297mm
        - iso_c10_28x40mm
        - iso_c1_648x917mm
        - iso_c2_458x648mm
        - iso_c3_324x458mm
        - iso_c4_229x324mm
        - iso_c5_162x229mm
        - iso_c6_114x162mm
        - iso_c6c5_114x229mm
        - iso_c7_81x114mm
        - iso_c7c6_81x162mm
        - iso_c8_57x81mm
        - iso_c9_40x57mm
        - iso_dl_110x220mm
        - jis_exec_216x330mm
        - jpn_chou2_111.1x146mm
        - jpn_chou3_120x235mm
        - jpn_chou4_90x205mm
        - jpn_hagaki_100x148mm
        - jpn_kahu_240x322.1mm
        - jpn_kaku2_240x332mm
        - jpn_oufuku_148x200mm
        - jpn_you4_105x235mm
        - na_10x11_10x11in
        - na_10x13_10x13in
        - na_10x14_10x14in
        - na_10x15_10x15in
        - na_11x12_11x12in
        - na_11x15_11x15in
        - na_12x19_12x19in
        - na_5x7_5x7in
        - na_6x9_6x9in
        - na_7x9_7x9in
        - na_9x11_9x11in
        - na_a2_4.375x5.75in
        - na_arch-a_9x12in
        - na_arch-b_12x18in
        - na_arch-c_18x24in
        - na_arch-d_24x36in
        - na_arch-e_36x48in
        - na_b-plus_12x19.17in
        - na_c5_6.5x9.5in
        - na_c_17x22in
        - na_d_22x34in
        - na_e_34x44in
        - na_edp_11x14in
        - na_eur-edp_12x14in
        - na_f_44x68in
        - na_fanfold-eur_8.5x12in
        - na_fanfold-us_11x14.875in
        - na_foolscap_8.5x13in
        - na_govt-legal_8x13in
        - na_govt-letter_8x10in
        - na_index-3x5_3x5in
        - na_index-4x6-ext_6x8in
        - na_index-4x6_4x6in
        - na_index-5x8_5x8in
        - na_invoice_5.5x8.5in
        - na_ledger_11x17in
        - na_legal-extra_9.5x15in
        - na_legal_8.5x14in
        - na_letter-extra_9.5x12in
        - na_letter-plus_8.5x12.69in
        - na_letter_8.5x11in
        - na_number-10_4.125x9.5in
        - na_number-11_4.5x10.375in
        - na_number-12_4.75x11in
        - na_number-14_5x11.5in
        - na_personal_3.625x6.5in
        - na_super-a_8.94x14in
        - na_super-b_13x19in
        - na_wide-format_30x42in
        - om_dai-pa-kai_275x395mm
        - om_folio-sp_215x315mm
        - om_invite_220x220mm
        - om_italian_110x230mm
        - om_juuro-ku-kai_198x275mm
        - om_large-photo_200x300
        - om_pa-kai_267x389mm
        - om_postfix_114x229mm
        - om_small-photo_100x150mm
        - prc_10_324x458mm
        - prc_16k_146x215mm
        - prc_1_102x165mm
        - prc_2_102x176mm
        - prc_32k_97x151mm
        - prc_3_125x176mm
        - prc_4_110x208mm
        - prc_5_110x220mm
        - prc_6_120x320mm
        - prc_7_160x230mm
        - prc_8_120x309mm
        - roc_16k_7.75x10.75in
        - roc_8k_10.75x15.5in
        - jis_b0_1030x1456mm
        - jis_b1_728x1030mm
        - jis_b2_515x728mm
        - jis_b3_364x515mm
        - jis_b4_257x364mm
        - jis_b5_182x257mm
        - jis_b6_128x182mm
        - jis_b7_91x128mm
        - jis_b8_64x91mm
        - jis_b9_45x64mm
        - jis_b10_32x45mm
        type: string
    required:
    - name
    type: object
  supported_on:
  - chrome.*:84-
  type: dict

** PrintingMaxSheetsAllowed — Maximal number of sheets allowed to use for a single print job
SYNOPSIS: 10
 Specifies the maximal number of sheets user is allowed to print for a single print job.

       If not set, no limitations are applied and user can print any documents.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    minimum: 1
    type: integer
  supported_on:
  - chrome_os:84-
  type: int

** PrintingAPIExtensionsWhitelist (DEPRECATED) — Extensions allowed to skip confirmation dialog when sending print jobs via chrome.printing API
SYNOPSIS: ["abcdefghabcdefghabcdefghabcdefgh"]
 This policy specifies the allowed extensions to skip print job confirmation dialog when they use the Printing API function chrome.printing.submitJob() for sending a print job.

       If an extension is not in the list, or the list is not set, the print job confirmation dialog will be shown to the user for every chrome.printing.submitJob() function call.

       This policy is deprecated, please use PrintingAPIExtensionsAllowlist instead.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:81-
  type: list

** CloudPrintSubmitEnabled — Enable submission of documents to Google Cloud Print
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset lets users print to Google Cloud Print from the Google Chrome print dialog. Google Chrome can submit documents to Google Cloud Print for printing. This doesn't prevent users from submitting print jobs on websites.

       Setting the policy to Disabled means users can't print to Google Cloud Print from the Google Chrome print dialog.

       In order to keep Google Cloud Print destinations discoverable, this policy must be set to Enabled and cloud must not be included in the PrinterTypeDenyList policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:17-
  type: main

** DisablePrintPreview — Disable Print Preview
SYNOPSIS: false
 Setting the policy to Enabled has Google Chrome open the system print dialog instead of the built-in print preview when users request a printout.

       Setting the policy to Disabled or leaving it unset has print commands trigger the print preview screen.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:18-
  type: main

** PrintHeaderFooter — Print Headers and Footers
SYNOPSIS: false
 Setting the policy to Enabled turns headers and footers on in print preview. Setting the policy to Disabled turns them off in print preview.

       If you set the policy, users can't change it. If unset, users decides whether headers and footers appear.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:70-
  type: main

** DefaultPrinterSelection — Default printer selection rules
SYNOPSIS: "{ \"kind\": \"cloud\", \"idPattern\": \".*public\", \"namePattern\": \".*Color\" }"
 Setting the policy sets the rules for selecting the default printer in Google Chrome, overriding the default rules. Printer selection occurs the first time users try to print, when Google Chrome seeks a printer matching the specified attributes. In case of a less than perfect match, Google Chrome can be set to select any matching printer, depending on the order printers are discovered.

       Leaving the policy unset or set to attributes for which there's no match means the built-in PDF printer is the default. If there's no PDF printer, Google Chrome defaults to none.

       Printers connected to Google Cloud Print are considered "cloud", the rest of the printers are classified as "local".

       Note: Omitting a field means all values match. For example, not specifying connectivity causes Print Preview to start discovery of all kinds of printers, "local" and "cloud". Regular expression patterns must follow the JavaScript RegExp syntax, and matches are case sensistive.

  arc_support: This policy has no effect on Android apps.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:48-
  type: string
  validation_schema:
    properties:
      idPattern:
        description: Regular expression to match printer id.
        type: string
      kind:
        description: Whether to limit the search of the matching printer to a specific
          set of printers.
        enum:
        - local
        - cloud
        type: string
      namePattern:
        description: Regular expression to match printer display name.
        type: string
    type: object

** Printers — Configures a list of printers
SYNOPSIS: ["{ \"display_name\": \"Color Laser\", \"description\": \"The printer next to the water cooler.\", \"manufacturer\": \"Printer Manufacturer\", \"model\": \"Color Laser 2004\", \"uri\": \"ipps://print-server.intranet.example.com:443/ipp/cl2k4\", \"uuid\": \"1c395fdb-5d93-4904-b246-b2c046e79d12\", \"ppd_resource\": { \"effective_model\": \"Printer Manufacturer ColorLaser2k4\", \"autoconf\": false } }"]
 Setting the policy lets administrators set up a list of printers for their users. Printer selection occurs the first time users try to print.

       Using the policy:

       * Customize free-form display_name and description for ease of printer selection.

       * Help users identify printers using manufacturer and model.

       * uri should be an address reachable from a client computer, including the scheme, port, and queue.

       * Optionally provide uuid to help deduplicate zeroconf printers.

       * Either use the model name for effective_model or set autoconf to True. Printers with both or no properties get ignored.

       PPDs are downloaded after the printer is used, and frequently used PPDs are cached. This policy doesn't affect whether users can configure printers on individual devices.

       Note: For Microsoft® Active Directory® managed devices, this policy supports expansion of ${MACHINE_NAME[,pos[,count]]} to the Microsoft® Active Directory® machine name or a substring of it. For example, if the machine name is CHROMEBOOK, then ${MACHINE_NAME,6,4} gets replaced by the 4 characters starting after the 6th position, in other words, BOOK. The position is zero-based.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:86-
  type: list
  validation_schema:
    items:
      id: PrinterTypeInclusive
      properties:
        description:
          type: string
        display_name:
          type: string
        manufacturer:
          type: string
        model:
          type: string
        ppd_resource:
          id: PpdResourceInclusive
          properties:
            autoconf:
              description: Boolean flag indicating whether IPP Everywhere should be
                used to set up the printer.
              type: boolean
            effective_model:
              description: This field must match one of the strings which represent
                a Google Chrome OS supported printer. The string will be used to identify
                and install the appropriate PPD for the printer. More information can
                be found at https://support.google.com/chrome?p=noncloudprint.
              type: string
          type: object
        uri:
          type: string
        uuid:
          type: string
      type: object
    type: array

** PrintersBulkConfiguration — Enterprise printer configuration file
SYNOPSIS: {"url": "https://example.com/printerpolicy", "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"}
 Setting this policy configure enterprise printers. Its format matches the Printers dictionary, with an additional required "id" or "guid" field for each printer for allow listing or deny listing. The file size can't exceed 5MB and is in JSON format. A file with about 21,000 printers encodes as a 5MB file. The cryptographic hash helps verify download integrity. The file is downloaded, cached, and redownloaded when the URL or the hash changes. Google Chrome OS downloads the file for printer configurations and makes printers available along with PrintersBulkAccessMode, PrintersBulkAllowlist, and PrintersBulkBlocklist.

       This policy has no effect on whether users can configure printers on individual devices. It is intended to be supplementary to the configuration of printers by individual users.

       If you set the policy, users can't change it.

  features:
    dynamic_refresh: true
    per_profile: true
  max_size: 5242880
  schema:
    properties:
      hash:
        type: string
      url:
        type: string
    type: object
  supported_on:
  - chrome_os:86-
  type: external

** PrintersBulkAccessMode — Printer configuration access policy.
SYNOPSIS: 1
 Setting the policy designates which access policy applies to bulk printer configuration, controlling which printers from PrintersBulkConfiguration are available for users.

       * BlocklistRestriction (value 0) uses PrintersBulkBlocklist to restrict access to the specified printers

       * AllowlistPrintersOnly (value 1) uses PrintersBulkAllowlist to designate only those printers which are selectable

       * AllowAll (value 2) displays all printers

       Leaving the policy unset puts AllowAll in use.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: All printers are shown except those in the blocklist.
    name: BlocklistRestriction
    value: 0
  - caption: Only printers in the allowlist are shown to users
    name: AllowlistPrintersOnly
    value: 1
  - caption: Allow all printers from the configuration file.
    name: AllowAll
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome_os:86-
  type: int-enum

** PrintersBulkBlocklist — Disabled enterprise printers
SYNOPSIS: ["id1", "id2", "id3"]
 If BlocklistRestriction is chosen for PrintersBulkAccessMode, then setting PrintersBulkBlocklist specifies which printers users can't use. All printers are provided to the user, except for the IDs listed in this policy. The IDs must correspond to the "id" or "guid" fields in the file specified in PrintersBulkConfiguration.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:86-
  type: list

** PrintersBulkAllowlist — Enabled enterprise printers
SYNOPSIS: ["id1", "id2", "id3"]
 If AllowlistPrintersOnly is chosen for PrintersBulkAccessMode, then setting PRINTERS_BULK_ALLOWLIST specifies which printers users can use. Only the printers with IDs matching the values in this policy are available to the user. The IDs must correspond to the "id" or "guid" fields in the file specified in PrintersBulkConfiguration.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:86-
  type: list

** DeviceNativePrintersAccessMode (DEPRECATED) — Device printers configuration access policy.
SYNOPSIS: 1
 Setting the policy designates which access policy applies to bulk printer configuration, controlling which printers from DevicePrinters are available for users.

       * BlacklistRestriction (value 0), DevicePrintersBlocklist can restrict access to the specified printers

       * If set to WhitelistPrintersOnly (value 1), DevicePrintersAllowlist designates only those printers which are selectable

       * AllowAll (value 2), all printers are shown.

       Leaving the policy unset applies AllowAll.

       This policy is deprecated, please use DevicePrintersAccessMode instead.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: All printers are shown except those in the blacklist.
    name: BlacklistRestriction
    value: 0
  - caption: Only printers in the whitelist are shown to users
    name: WhitelistPrintersOnly
    value: 1
  - caption: Allow all printers from the configuration file.
    name: AllowAll
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome_os:73-
  type: int-enum

** DeviceNativePrintersWhitelist (DEPRECATED) — Enabled enterprise device printers
SYNOPSIS: ["id1", "id2", "id3"]
 If WhitelistPrintersOnly is chosen for DevicePrintersAccessMode, then setting DeviceNativePrintersWhitelist specifies which printers users can use. Only the printers with IDs matching the values in this policy are available to users. The IDs must correspond to the "id" or "guid" fields in the file specified in DevicePrinters.

       This policy is deprecated, please use DevicePrintersAllowlist instead.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:73-
  type: list

** DevicePrintersAccessMode — Device printers configuration access policy.
SYNOPSIS: 1
 Setting the policy designates which access policy applies to bulk printer configuration, controlling which printers from DevicePrinters are available for users.

       * BlocklistRestriction (value 0), DevicePrintersBlocklist can restrict access to the specified printers

       * AllowlistPrintersOnly (value 1), DevicePrintersAllowlist designates only those printers which are selectable

       * AllowAll (value 2), all printers are allowed.

       Leaving the policy unset applies AllowAll.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: All printers are shown except those in the blocklist.
    name: BlocklistRestriction
    value: 0
  - caption: Only printers in the allowlist are shown to users
    name: AllowlistPrintersOnly
    value: 1
  - caption: Allow all printers from the configuration file.
    name: AllowAll
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome_os:87-
  type: int-enum

** DevicePrintersAllowlist — Enabled enterprise device printers
SYNOPSIS: ["id1", "id2", "id3"]
 If AllowlistPrintersOnly is chosen for DevicePrintersAccessMode, then setting DevicePrintersAllowlist specifies which printers users can use. Only the printers with IDs matching the values in this policy are available to users. The IDs must correspond to the "id" or "guid" fields in the file specified in DevicePrinters

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:87-
  type: list

** PrintPreviewUseSystemDefaultPrinter — Use System Default Printer as Default
SYNOPSIS: false
 Setting the policy to Enabled means Google Chrome uses the OS default printer as the default destination for print preview.

       Setting the policy to Disabled or leaving it unset means Google Chrome uses the most recently used printer as the default destination for print preview.

  default: false
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Use the system default printer as the default choice in Print Preview
    value: true
  - caption: Use the most recently used printer as the default choice in Print Preview
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:61-
  type: main

** UserPrintersAllowed — Allow access to CUPS printers
SYNOPSIS: false
 Allows you to control if users can access non-enterprise printers

       If the policy is set to True, or not set at all, users will be able to add, configure, and print using their own printers.

       If the policy is set to False, users will not be able to add and configure their own printers. They will also not be able to print using any previously configured printers.
      

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:86-
  type: main

** ExternalPrintServersAllowlist — Enabled external print servers
SYNOPSIS: ["id1", "id2", "id3"]
 Specifies the subset of print servers that will be queried for server printers.

       If this policy is used, only the server printers with ids matching the values in this policy are available to the user.

       The ids must correspond to the "id" field in the file specified in ExternalPrintServers.

       If this policy is not set, filtering is omitted and all print servers are taken into account.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:86-
  type: list

** DeviceExternalPrintServers — External print servers
SYNOPSIS: {"url": "https://example.com/printserverpolicy", "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"}
 Provides configurations of available print servers.

       This policy allows you to provide configuration of external print servers to Google Chrome OS devices as JSON file.

       The size of the file must not exceed 1MB and must contain an array of records (JSON objects). Each record must contain fields "id", "url" and "display_name" with strings as values. Values of "id" fields must be unique.

       The file is downloaded and cached. The cryptographic hash is used to verify the integrity of the download. The file will be re-downloaded whenever the URL or the hash changes.

       When this policy is set to correct value, devices will try to query specified print servers for available printers using IPP protocol.

       If this policy is unset or set to incorrect value, none of the provided server printers are visible to users.

       Currently, the number of print servers is limited to 16. Only the first 16 print servers from the list will be queried.

       This policy is similar to ExternalPrintServers, except this policy is applied by device.
      

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  max_size: 1048576
  schema:
    properties:
      hash:
        description: The SHA-256 hash of the file.
        type: string
      url:
        description: URL to a JSON file with a list of print servers.
        type: string
    type: object
  type: external

** DeviceExternalPrintServersAllowlist — Enabled external print servers
SYNOPSIS: ["id1", "id2", "id3"]
 Specifies the subset of print servers that will be queried for server printers. This applies only to the DeviceExternalPrintServers policy.

       If this policy is used, only the server printers with ids matching the values in this policy are available to the user through device policy.

       The ids must correspond to the "id" field in the file specified in DeviceExternalPrintServers.

       If this policy is not set, filtering is omitted and all print servers provided by DeviceExternalPrintServers are taken into account.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      type: string
    type: array
  type: list

** PrinterTypeDenyList — Disable printer types on the deny list
SYNOPSIS: ["cloud", "privet"]
 The printers of types placed on the deny list will be disabled from being discovered or having their capabilities fetched.

       Placing all printer types on the deny list effectively disables printing, as there would be no available destinations to send a document for printing.

       Including cloud on the deny list has the same effect as setting the CloudPrintSubmitEnabled policy to false. In order to keep Google Cloud Print destinations discoverable, the CloudPrintSubmitEnabled policy must be set to true and cloud must not be on the deny list.

       If the policy is not set, or is set to an empty list, all printer types will be available for discovery.

       Extension printers are also known as print provider destinations, and include any destination that belongs to a Google Chrome extension.

       Local printers are also known as native printing destinations, and include destinations available to the local machine and shared network printers.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Zeroconf-based (mDNS + DNS-SD) protocol destinations
    name: privet
    value: privet
  - caption: Extension-based destinations
    name: extension
    value: extension
  - caption: The 'Save as PDF' destination
    name: pdf
    value: pdf
  - caption: Local printer destinations
    name: local
    value: local
  - caption: Google Cloud Print and 'Save to Google Drive' destinations
    name: cloud
    value: cloud
  schema:
    items:
      enum:
      - privet
      - extension
      - pdf
      - local
      - cloud
      type: string
    type: array
  supported_on:
  - chrome.*:80-
  type: string-enum-list

** PrintRasterizationMode — Print Rasterization Mode
SYNOPSIS: 1
 Controls how Google Chrome prints on Microsoft® Windows®.

       When printing to a non-PostScript printer on Microsoft® Windows®, sometimes print jobs need to be rasterized to print correctly.

       When this policy is set to Full, Google Chrome will do full page rasterization if necessary.

       When this policy is set to Fast, Google Chrome will avoid rasterization if possible, reducing the amount of rasterization can help reduce print job sizes and increase printing speed.

       When this policy is not set, Google Chrome will be in Full mode.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Full
    name: Full
    value: 0
  - caption: Fast
    name: Fast
    value: 1
  schema:
    enum:
    - 0
    - 1
    type: integer
  supported_on:
  - chrome.win:84-
  type: int-enum

** PrintRasterizePdfDpi — Print Rasterize PDF DPI
SYNOPSIS: 300
 Controls print image resolution when Google Chrome prints PDFs with rasterization.

       When printing a PDF using the Print to image option, it can be beneficial to specify a print resolution other than a device's printer setting or the PDF default.  A high resolution will significantly increase the processing and printing time while a low resolution can lead to poor imaging quality.

       This policy allows a particular resolution to be specified for use when rasterizing PDFs for printing.

       If this policy is set to zero or not set at all then the system default resolution will be used during rasterization of page images.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    minimum: 0
    type: integer
  supported_on:
  - chrome.*:94-
  - chrome_os:94-
  type: int

** CloudPrintWarningsSuppressed (DEPRECATED) — Suppress Google Cloud Print deprecation messages
SYNOPSIS: true
 This policy controls whether Google Cloud Print deprecation warnings are shown to users in the print preview dialog or settings pages.
       Setting this policy to True will hide the deprecation warnings.
       Setting this policy to False or leaving it unset will show the deprecation warnings.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Hide Google Cloud Print deprecation warnings
    value: true
  - caption: Show Google Cloud Print deprecation warnings
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:86-87
  type: main

** PrintPdfAsImageDefault — Print PDF as Image Default
SYNOPSIS: true
 Controls if Google Chrome makes the Print as image option default to set when printing PDFs.

       When this policy is set to Enabled, Google Chrome will default to setting the Print as image option in the Print Preview when printing a PDF.

       When this policy is set to Disabled or not set Google Chrome then the user selection for Print as image option will be initially unset.  The user will be allowed to select it for each individual PDFs print job, if the option is available.

       For Microsoft® Windows® or macOS this policy only has an effect if PrintPdfAsImageAvailability is also enabled.

  default: false
  features:
    can_be_mandatory: false
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Print as image option defaults to set for print previews of PDF documents
      when it is available.
    value: true
  - caption: Print as image option defaults to unset for print previews of PDF documents
      when it is available.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:95-
  type: main

* ActiveDirectoryManagement — Microsoft® Active Directory® management settings
 Controls settings specific to Microsoft® Active Directory® managed Google Chrome OS devices.

** DeviceUserPolicyLoopbackProcessingMode — User policy loopback processing mode
SYNOPSIS: 0
 Setting the policy specifies whether and how user policy from computer Group Policy Object (GPO) is processed.

       * Default or leaving it unset has user policy read only from user GPOs. Computer GPOs are ignored.

       * Merge will merge user policy in user GPOs with that of computer GPOs. Computer GPOs take precedence.

       * Replace will replace user policy in user GPOs with that of computer GPOs. User GPOs are ignored.

  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Default
    name: Default
    value: 0
  - caption: Merge
    name: Merge
    value: 1
  - caption: Replace
    name: Replace
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_chrome_os_management:
  - active_directory
  supported_on:
  - chrome_os:66-
  type: int-enum

** DeviceGpoCacheLifetime — GPO cache lifetime
SYNOPSIS: 0
 Setting the policy specifies in hours the Group Policy Object (GPO) cache lifetime—the maximum duration GPOs can be reused before they're redownloaded. Instead of redownloading them on every policy fetch, the system reuses cached GPOs as long as their version doesn't change.

       Setting the policy to 0 turns GPO caching off. Doing this increases server load, because GPOs are redownloaded on every policy fetch, even if they didn't change.

       Leaving the policy unset means cached GPOs can be reused for up to 25 hours.

       Note: Restarting and signing out clears the cache.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    maximum: 9999
    minimum: 0
    type: integer
  supported_chrome_os_management:
  - active_directory
  supported_on:
  - chrome_os:73-
  type: int

* Arc — Android settings
 Controls settings for the Android container (ARC) and Android apps.

** ArcPolicy — Configure ARC
SYNOPSIS: "{\"applications\":[{\"packageName\":\"com.google.android.gm\",\"installType\":\"FORCE_INSTALLED\",\"defaultPermissionPolicy\":\"PROMPT\",\"managedConfiguration\":{}},{\"packageName\":\"com.google.android.apps.docs\",\"installType\":\"PRELOAD\",\"defaultPermissionPolicy\":\"PROMPT\",\"managedConfiguration\":{}}]}"
 Setting the policy specifies a set of policies to hand over to the ARC runtime. Admins can use it to select the Android apps that autoinstall. Enter value in valid JSON format.

       To pin apps to the launcher, see PinnedLauncherApps.

  description_schema:
    properties:
      applications:
        items:
          properties:
            defaultPermissionPolicy:
              description: 'Policy for granting permission requests to apps. PERMISSION_POLICY_UNSPECIFIED:
                Policy not specified. If no policy is specified for a permission at
                any level, then the `PROMPT` behavior is used by default. PROMPT: Prompt
                the user to grant a permission. GRANT: Automatically grant a permission.
                DENY: Automatically deny a permission.'
              enum:
              - PERMISSION_POLICY_UNSPECIFIED
              - PROMPT
              - GRANT
              - DENY
              type: string
            installType:
              description: 'Specifies how an app is installed. OPTIONAL: The app is
                not installed automatically, but the user can install it. This is the
                default if this policy is not specified. PRELOAD: The app is installed
                automatically, but the user can uninstall it. FORCE_INSTALLED: The app
                is installed automatically and the user cannot uninstall it. BLOCKED:
                The app is blocked and cannot be installed. If the app was installed
                under a previous policy it will be uninstalled.'
              enum:
              - OPTIONAL
              - PRELOAD
              - FORCE_INSTALLED
              - BLOCKED
              type: string
            managedConfiguration:
              description: 'App-specific JSON configuration object with a set of key-value
                pairs, e.g. ''"managedConfiguration": { "key1": value1, "key2": value2
                }''. The keys are defined in the app manifest.'
              type: object
            packageName:
              description: Android app identifier, e.g. "com.google.android.gm" for
                Gmail
              type: string
          type: object
        type: array
    type: object
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome_os:50-
  type: string

** ArcBackupRestoreServiceEnabled — Control Android backup and restore service
SYNOPSIS: 1
 Setting the policy to BackupAndRestoreEnabled means Android backup and restore is initially on. Setting the policy to BackupAndRestoreDisabled or leaving it unset keeps backup and restore off during setup.

       Setting the policy to BackupAndRestoreUnderUserControl means users see prompts to use backup and restore. If they turn on backup and restore, Android app data is uploaded to Android backup servers and restored during reinstallations of compatible apps.

       After initial setup, users can turn backup and restore on or off.

  default_for_enterprise_users: 0
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Backup and restore disabled
    name: BackupAndRestoreDisabled
    value: 0
  - caption: User decides whether to enable backup and restore
    name: BackupAndRestoreUnderUserControl
    value: 1
  - caption: Backup and restore enabled
    name: BackupAndRestoreEnabled
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome_os:68-
  tags:
  - google-sharing
  type: int-enum

** ArcLocationServiceEnabled (DEPRECATED) — Enable Android Google Location Service
SYNOPSIS: false
 This policy was removed in Google Chrome OS 68 and replaced by ArcGoogleLocationServicesEnabled.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:57-67
  tags:
  - google-sharing
  type: main

** DeviceArcDataSnapshotHours — Intervals when ARC data snapshot update process can be started for Managed Guest Sessions
SYNOPSIS: {"intervals": [{"start": {"day_of_week": "MONDAY", "time": 12840000}, "end": {"day_of_week": "MONDAY", "time": 21720000}}, {"start": {"day_of_week": "FRIDAY", "time": 38640000}, "end": {"day_of_week": "FRIDAY", "time": 57600000}}], "timezone": "GMT"}
 If "DeviceArcDataSnapshotHours" policy is set, then the ARC data snapshotting mechanism is turned on. And the ARC data snapshot update can be started automatically during the defined time intervals. When an interval starts, ARC data snapshot update is required and no user is logged-in, the ARC data snapshot update process is started without user notification. If the user session is active, the UI notification is shown and have to be accepted in order to reboot a device and start ARC data snapshot update process. Note: a device is blocked for usage during the ARC data snapshot update process.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    properties:
      intervals:
        items:
          $ref: WeeklyTimeIntervals
        type: array
      timezone:
        type: string
    type: object
  supported_on:
  - chrome_os:88-
  type: dict

* Crostini — Linux container
 Controls settings for the Linux container (Crostini).

** CrostiniAllowed — User is enabled to run Crostini
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset lets users run Crostini, as long as VirtualMachinesAllowed and CrostiniAllowed are set to Enabled. Setting the policy to Disabled turns Crostini off for the user. Changing it to Disabled starts applying the policy to starting new Crostini containers, not those already running.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:70-
  tags:
  - system-security
  type: main

** CrostiniExportImportUIAllowed — User is enabled to export / import Crostini containers via the UI
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset makes the export-import UI available to users. Setting the policy to Disabled renders the export-import UI unavailable to users.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:74-
  tags:
  - system-security
  type: main

** CrostiniRootAccessAllowed — User is allowed to have root access to Crostini containers
SYNOPSIS: false
 Allow this user root access to Crostini containers.

       If the policy is set to true or left unset root access to Crostini containers will be granted to the user.
       If the policy is set to false, root access to both existing and new Crostini containers will not be granted to the user.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  tags:
  - system-security
  type: main

** CrostiniArcAdbSideloadingAllowed — Control usage of Android apps from untrusted sources for the user
SYNOPSIS: 1
 This policy controls the usage of Android apps from untrusted sources (other than Google Play Store) on a per-user basis.

       If the value for this policy is not set, then the functionality is treated as disallowed.

       If the user's device is managed, the availability of this functionality is additionally dependant on the corresponding device policy.

       If the user's device is not managed, the availability of this functionality is additionally dependant on whether the user is the device owner.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Prevent the user from using Android apps from untrusted sources
    name: Disallow
    value: 0
  - caption: Allow the user to use Android apps from untrusted sources
    name: Allow
    value: 1
  schema:
    enum:
    - 0
    - 1
    type: integer
  tags:
  - system-security
  type: int-enum

** DeviceCrostiniArcAdbSideloadingAllowed — Control usage of Android apps from untrusted sources for the device
SYNOPSIS: 1
 This policy controls the usage of Android apps from untrusted sources (other than Google Play Store) for a device.

       If the value for this policy is not set, then the functionality is treated as disallowed.

       The availability of this functionality is additionally dependant on the corresponding user policy.

  default: 0
  device_only: true
  features:
    dynamic_refresh: true
  items:
  - caption: Prevent users of this device from using ADB sideloading, without forcing
      a powerwash, which might leave the device in a questionable state security-wise
    name: Disallow
    value: 0
  - caption: Prevent users of this device from using ADB sideloading and force a device
      powerwash if sideloading was enabled before
    name: DisallowWithPowerwash
    value: 1
  - caption: Allow affiliated users of this device to use ADB sideloading
    name: AllowForAffiliatedUsers
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  tags:
  - system-security
  type: int-enum

* GoogleAssistant — Google Assistant
 Controls settings for Google Assistant.

** VoiceInteractionContextEnabled — Allow Google Assistant to access screen context
SYNOPSIS: true
 Setting the policy to Enabled lets Google Assistant access screen context and send that data to a server. Setting the policy to Disabled keeps Google Assistant from screen context.

       Leaving the policy unset lets users decide to turn this feature on or off.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:74-
  tags:
  - google-sharing
  type: main

** AssistantVoiceMatchEnabledDuringOobe — Enable Google Assistant voice match flow
SYNOPSIS: true
 Setting the policy to Enabled lets show Google Assistant voice match flow during initial setup. Setting the policy to Disabled keeps Google Assistant from showing voice match flow during initial setup.

       Leaving the policy unset means it is Enabled.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Show Google Assistant voice match flow during initial setup
    value: true
  - caption: Do not show Google Assistant voice match flow during initial setup
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:93-
  type: main

* QuickAnswers — Quick Answers
 Controls settings for Quick Answers.

** QuickAnswersEnabled — Enable Quick Answers
SYNOPSIS: true
 This policy gives Quick Answers permission to access selected content and send the info to the server.

       If the policy is enabled, Quick Answers will be enabled.
       If the policy is disabled, Quick Answers will be disabled.
       If the policy is not set, users can decide whether to enable or disable Quick Answers.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable Quick Answers
    value: true
  - caption: Disable Quick Answers
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:97-
  tags:
  - google-sharing
  type: main

** QuickAnswersTranslationEnabled — Enable Quick Answers Translation
SYNOPSIS: true
 This policy gives Quick Answers permission to access selected content and send the info to the server to get translation results.

       If the policy is enabled or not set, Quick Answers translation will be enabled.
       If the policy is disabled, Quick Answers translation will be disabled.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable Quick Answers Translation
    value: true
  - caption: Disable Quick Answers Translation
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:97-
  tags:
  - google-sharing
  type: main

* WilcoDtc — Wilco DTC
 Controls wilco diagnostics and telemetry controller settings.

** DeviceWilcoDtcAllowed — Allows wilco diagnostics and telemetry controller
SYNOPSIS: false
 Setting the policy to Enabled when wilco diagnostics and telemetry controller (DTC) is available on the device turns collecting, processing, and reporting of telemetry and diagnostics data on.

       Setting the policy to Disabled or leaving it unset turns DTC off. It can't collect, process, or report telemetry and diagnostics data from the device.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:74-
  type: main

* ParentalSupervision — Parental supervision settings
 Controls parental supervision policies, that are applied to child accounts only.
       These policies are not set in the admin console, but configured directly by Kids API Server.

** PerAppTimeLimitsAllowlist — Per-App Time Limits Allowlist
SYNOPSIS: {"url_list": ["chrome://*", "file://*", "https://www.support.google.com", "https://www.policies.google.com"], "app_list": [{"app_id": "pjkljhegncpnkpknbcohdijeoejaedia", "app_type": "EXTENSION"}, {"app_id": "iniodglblcgmngkgdipeiclkdjjpnlbn", "app_type": "BUILT-IN"}]}
 This policy specifies which applications and URLs should be allowed for per-app usage restrictions.
         The configured allowlist is applied to the apps installed on Google Chrome OS for the given user with per-app time limits.
         The configured allowlist can only be applied to child user accounts and take effect when PerAppTimeLimits policy is set.
         The configured allowlist is applied to applications and URLs so that they will not be blocked by per-app time limits.
         Accessing allowed URLs will not count towards the chrome time limit.
         Add url regular expressions to |url_list| to allow urls that match any of the regular expressions in the list.
         Add an application with its |app_id| and |app_type| to |app_list| to allow the application.
       

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    properties:
      app_list:
        items:
          properties:
            app_id:
              type: string
            app_type:
              enum:
              - ARC
              - BUILT-IN
              - EXTENSION
              - WEB
              - CROSTINI
              type: string
          type: object
        type: array
      url_list:
        items:
          type: string
        type: array
    type: object
  supported_on:
  - 'chrome_os: 86-'
  type: dict

** EduCoexistenceToSVersion — The valid version of Edu Coexistence Terms of Service
SYNOPSIS: "333024512"
 This policy indicates current valid version of Edu Coexistence Terms of Service.
       It is compared with the version last accepted by the parent and used to prompt parent permission renewal when needed.

       When this policy is set Terms of Service version can be validated.
       When this policy is unset it is not possible to verify validity of Edu Coexistence Terms of Service.

       This policy is only used for Family Link users.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    description: The valid version of Terms of Service derived from Google3 cl that
      introduced new Terms version.
    type: string
  supported_on:
  - chrome_os:89-
  type: string

* PrivacyScreen — Privacy screen settings
 Controls user and device policies for the privacy screen feature.

** DeviceLoginScreenPrivacyScreenEnabled — Set the state of privacy screen on the login screen
SYNOPSIS: true
 Set the state of the privacy screen feature on the login screen.

 If this policy is set to True, privacy screen will be enabled when the login screen is shown.

 If this policy is set to False, privacy screen will be disabled when the login screen is shown.

 When this policy is set, the user cannot override the value when the login screen is shown.

 If this policy is left unset, the privacy screen is disabled initially, but remains controllable by the user when the login screen is shown.

  default: null
  device_only: true
  features:
    can_be_mandatory: true
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:83-
  type: main

* CertificateManagement — Certificate management settings
 Controls user and device policies for certificate management.

** RequiredClientCertificateForDevice — Required device-wide Client Certificates
SYNOPSIS: [{"name": "Certificate Profile 1", "cert_profile_id": "cert_profile_id_1", "key_algorithm": "rsa", "renewal_period_seconds": 2592000, "policy_version": "some_hash", "enable_remote_attestation_check": true}]
 Specifies device-wide client certificates that should be enrolled using the device management protocol.

  device_only: true
  features:
    can_be_mandatory: true
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      properties:
        cert_profile_id:
          description: The identifier for this client certificate.
          type: string
        enable_remote_attestation_check:
          description: 'Enable an additional security check based on remote attestation
            (optional, default: True).'
          type: boolean
        key_algorithm:
          description: The algorithm for key pair generation.
          enum:
          - rsa
          type: string
        name:
          description: The name of the certificate profile.
          type: string
        policy_version:
          description: The client should not interpret this data and should forward
            it verbatim. The DMServer uses policy_version to verify that the policy
            view of DMServer matches the view of Chrome OS device.
          type: string
        renewal_period_seconds:
          description: Number of seconds before expiration of a certificate when renewal
            should be triggered
          type: integer
      required:
      - cert_profile_id
      - key_algorithm
      type: object
    type: array
  supported_on:
  - chrome_os:84-
  type: dict

* Gaia — Gaia user identity management settings
 Controls settings for users authenticated againts Gaia without SAML.

* SAML — Saml user identity management settings
 Controls settings for users authenticated via SAML with an extaernal IdP

** SamlInSessionPasswordChangeEnabled — Password synchronization between third-party SSO providers and Chrome devices
SYNOPSIS: true
 Enables SAML password sync between multiple Chrome devices by monitoring the value of password sync token and sending a user through the online re-authentication if password was updated and needs to be synchronized.

       Enables a page at chrome://password-change that lets SAML users change their SAML passwords while in-session, which ensures that the SAML password and the device lockscreen password are kept in-sync.

       This policy also enables notifications that warn SAML users if their SAML passwords are soon to expire so that they can deal with this immediately by doing an in-session password change.
       But, these notifications will only be shown if password expiry information is sent to the device by the SAML identity provider during the SAML login flow.

       Setting this policy to Disabled or not set, SAML password can't be changed at chrome://password-change and there won't be any notification when SAML passwords are soon to expire.

  default: false
  features:
    dynamic_refresh: true
    per_profile: false
  future: true
  items:
  - caption: Trigger authentication flows to synchronize passwords with SSO providers
    value: true
  - caption: Do not trigger authentication flows for password synchronization
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:76-
  type: main

** SAMLOfflineSigninTimeLimit — Limit the time for which a user authenticated via SAML can log in offline
SYNOPSIS: 32
 During login, Google Chrome OS can authenticate against a server (online) or using a cached password (offline).

       When this policy is set to a value of -1, the user can authenticate offline indefinitely. When this policy is set to any other value, it specifies the length of time since the last online authentication after which the user must use online authentication again.

       Leaving this policy not set will make Google Chrome OS use a default time limit of 14 days after which the user must use online authentication again.

       This policy affects only users who authenticated using SAML.

       The policy value should be specified in seconds.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    minimum: -1
    type: integer
  supported_on:
  - chrome_os:34-
  type: int

* Borealis — Borealis
 Controls policies related to the Borealis subsystem.

** UserBorealisAllowed — Allow users to use Borealis on Google Chrome OS
SYNOPSIS: true
 Controls the availability of Borealis for this user.

       If the policy is set to false, Borealis will be unavailable. Otherwise (when the policy is unset, or true) Borealis will be available if and only if no other policy or setting disables it.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Do not prevent Borealis from running for a user
    value: true
  - caption: Prevent Borealis from running for a user
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:91-
  type: main

* X-GrouplessPolicies — These policies have no group!
 FIXME

** DefaultBrowserSettingEnabled — Set Google Chrome as Default Browser
SYNOPSIS: true
 Setting the policy to True has Google Chrome always check whether it's the default browser on startup and, if possible, automatically register itself. Setting the policy to False stops Google Chrome from ever checking if it's the default and turns user controls off for this option.

       Leaving the policy unset means Google Chrome lets users control whether it's the default and, if not, whether user notifications should appear.

       Note: For Microsoft®Windows® administrators, turning this setting on only works for machines running Windows 7. For later versions, you must deploy a "default application associations" file that makes Google Chrome the handler for the https and http protocols (and, optionally, the ftp protocol and other file formats). See Chrome Help ( https://support.google.com/chrome?p=make_chrome_default_win ).

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Enable the default browser check on startup
    value: true
  - caption: Disable the default browser check on startup
    value: false
  label: Set Google Chrome as Default Browser
  schema:
    type: boolean
  supported_on:
  - chrome.linux:11-
  type: main

** AlternateErrorPagesEnabled — Enable alternate error pages
SYNOPSIS: true
 Setting the policy to True means Google Chrome uses alternate error pages built into (such as "page not found"). Setting the policy to False means Google Chrome never uses alternate error pages.

       If you set the policy, users can't change it. If not set, the policy is on, but users can change this setting.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable alternate error pages
    value: true
  - caption: Disable alternate error pages
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  - chrome_os:11-
  - android:30-
  type: main

** SearchSuggestEnabled — Enable search suggestions
SYNOPSIS: true
 Setting the policy to True turns on search suggestions in Google Chrome's address bar. Setting the policy to False turns off these search suggestions.

       If you set the policy, users can't change it. If not set, search suggestions are on at first, but users can turn them off any time.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable search suggestions
    value: true
  - caption: Disable search suggestions
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** WindowOcclusionEnabled — Enable Window Occlusion
SYNOPSIS: true
 Enables window occlusion in Google Chrome.

       If you enable this setting, to reduce CPU and power consumption Google Chrome will detect when a window is covered by other windows, and will suspend work painting pixels.

       If you disable this setting Google Chrome will not detect when a window is covered by other windows.

       If this policy is left not set, occlusion detection will be enabled.

  default: true
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Detect covered window and suspend its painting
    value: true
  - caption: Do not detect covered window
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.win:90-
  type: main

** DnsPrefetchingEnabled (DEPRECATED) — Enable network prediction
SYNOPSIS: true
 This policy is deprecated in M48 in favor of NetworkPredictionOptions, and removed in M54.

       Enables network prediction in Google Chrome and prevents users from changing this setting.

       This controls not only DNS prefetching but also TCP and SSL preconnection and prerendering of web pages. The policy name refers to DNS prefetching for historical reasons.

       If you enable or disable this setting, users cannot change or override this setting in Google Chrome.

       If this policy is left not set, this will be enabled but the user will be able to change it.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-53
  type: main

** NetworkPredictionOptions — Enable network prediction
SYNOPSIS: 1
 This policy controls network prediction in Google Chrome. It controls DNS prefetching, TCP, and SSL preconnection and prerendering of webpages.

       If you set the policy, users can't change it. Leaving it unset turns on network prediction, but the user can change it.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Predict network actions on any network connection
    name: NetworkPredictionAlways
    value: 0
  - caption: "Predict network actions on any network that is not cellular.\n       \
      \   (Deprecated in 50, removed in 52. After 52, if value 1 is set, it will be\
      \ treated as 0 - predict network actions on any network connection.)"
    name: NetworkPredictionWifiOnly
    value: 1
  - caption: Do not predict network actions on any network connection
    name: NetworkPredictionNever
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:38-
  type: int-enum

** WPADQuickCheckEnabled — Enable WPAD optimization
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset turns on WPAD (Web Proxy Auto-Discovery) optimization in Google Chrome.

       Setting the policy to Disabled turns off WPAD optimization, causing Google Chrome to wait longer for DNS-based WPAD servers.

       Whether or not this policy is set, users can't change the WPAD optimization setting.

  default: true
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Enable Web Proxy Auto-Discovery (WPAD) optimizations
    value: true
  - caption: Disable Web Proxy Auto-Discovery (WPAD) optimization
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:35-
  tags:
  - system-security
  type: main

** DisableSpdy (DEPRECATED) — Disable SPDY protocol
SYNOPSIS: true
 This policy is deprecated in M53 and removed in M54, because SPDY/3.1 support is removed.

       Disables use of the SPDY protocol in Google Chrome.

       If this policy is enabled the SPDY protocol will not be available in Google Chrome.

       Setting this policy to disabled will allow the usage of SPDY.

       If this policy is left not set, SPDY will be available.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-53
  type: main

** DisabledSchemes (DEPRECATED) — Disable URL protocol schemes
SYNOPSIS: ["file", "https"]
 This policy is deprecated, please use URLBlocklist instead.

       Disables the listed protocol schemes in Google Chrome.

       URLs using a scheme from this list will not load and can not be navigated to.

       If this policy is left not set or the list is empty all schemes will be accessible in Google Chrome.

  features:
    dynamic_refresh: true
    per_profile: true
  label: List of disabled protocol schemes
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:12-
  type: list

** GloballyScopeHTTPAuthCacheEnabled — Enable globally scoped HTTP auth cache
SYNOPSIS: false
 This policy configures a single global per profile cache with HTTP server authentication credentials.

       If this policy is unset or disabled, the browser will use the default behavior of cross-site auth, which as of version 80, will be to scope HTTP server authentication credentials by top-level site, so if two sites use resources from the same authenticating domain, credentials will need to be provided independently in the context of both sites. Cached proxy credentials will be reused across sites.

       If the policy is enabled, HTTP auth credentials entered in the context of one site will automatically be used in the context of another.

       Enabling this policy leaves sites open to some types of cross-site attacks, and allows users to be tracked across sites even without cookies by adding entries to the HTTP auth cache using credentials embedded in URLs.

       This policy is intended to give enterprises depending on the legacy behavior a chance to update their login procedures, and will be removed in the future.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable globally scoped HTTP authentication cache
    value: true
  - caption: Disable globally scoped HTTP authentication cache
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-
  type: main

** DNSInterceptionChecksEnabled — DNS interception checks enabled
SYNOPSIS: true
 This policy configures a local switch that can be used to disable DNS interception checks. The checks attempt to discover whether the browser is behind a proxy that redirects unknown host names.

       This detection may not be necessary in an enterprise environment where the network configuration is known, since it causes some amount of DNS and HTTP traffic on start-up and each DNS configuration change.

       When this policy is not set, or is enabled, the DNS interception checks are performed. When explicitly disabled, they're not.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Perform DNS interception checks
    value: true
  - caption: Do not perform DNS interception checks
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-
  type: main

** IntranetRedirectBehavior — Intranet Redirection Behavior
SYNOPSIS: 1
 This policy configures behavior for intranet redirection via DNS interception checks. The checks attempt to discover whether the browser is behind a proxy that redirects unknown host names.

       If this policy is not set, the browser will use the default behavior of DNS interception checks and intranet redirect suggestions. In M88, they are enabled by default but will be disabled by default in the future release.

       DNSInterceptionChecksEnabled is a related policy that may also disable DNS interception checks; this policy is a more flexible version which may separately control intranet redirection infobars and may be expanded in the future.
       If either DNSInterceptionChecksEnabled or this policy requests to disable interception checks, the checks will be disabled.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Use default browser behavior.
    name: Default
    value: 0
  - caption: Disable DNS interception checks and did-you-mean "http://intranetsite/"
      infobars.
    name: DisableInterceptionChecksDisableInfobar
    value: 1
  - caption: Disable DNS interception checks; allow did-you-mean "http://intranetsite/"
      infobars.
    name: DisableInterceptionChecksEnableInfobar
    value: 2
  - caption: Allow DNS interception checks and did-you-mean "http://intranetsite/" infobars.
    name: EnableInterceptionChecksEnableInfobar
    value: 3
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:88-
  type: int-enum

** Http09OnNonDefaultPortsEnabled (DEPRECATED) — Enable HTTP/0.9 support on non-default ports
SYNOPSIS: false
 This policy is deprecated, and slated for removal in Chrome 78, with no replacement.

       This policy enables HTTP/0.9 on ports other than 80 for HTTP and 443 for HTTPS.

       This policy is disabled by default, and if enabled, leaves users open to the security issue https://crbug.com/600352.

       This policy is intended to give enterprises a chance to migrate exising servers off of HTTP/0.9, and will be removed in the future.

       If this policy is not set, HTTP/0.9 will be disabled on non-default ports.

  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Enable HTTP/0.9 support on non-default ports
    value: true
  - caption: Disable HTTP/0.9 support on non-default ports
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:54-77
  type: main

** JavascriptEnabled (DEPRECATED) — Enable JavaScript
SYNOPSIS: true
 This policy is deprecated, please use DefaultJavaScriptSetting instead.

       Can be used to disabled JavaScript in Google Chrome.

       If this setting is disabled, web pages cannot use JavaScript and the user cannot change that setting.

       If this setting is enabled or not set, web pages can use JavaScript but the user can change that setting.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable JavaScript
    value: true
  - caption: Disable JavaScript
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** IncognitoEnabled (DEPRECATED) — Enable Incognito mode
SYNOPSIS: false
 This policy is deprecated. Please, use IncognitoModeAvailability instead.
       Enables Incognito mode in Google Chrome.

       If this setting is enabled or not configured, users can open web pages in incognito mode.

       If this setting is disabled, users cannot open web pages in incognito mode.

       If this policy is left not set, this will be enabled and the user will be able to use incognito mode.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable Incognito mode
    value: true
  - caption: Disable Incognito mode
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:11-
  type: main

** IncognitoModeAvailability — Incognito mode availability
SYNOPSIS: 1
 Specifies whether the user may open pages in Incognito mode in Google Chrome.

       If 'Enabled' is selected or the policy is left unset, pages may be opened in Incognito mode.

       If 'Disabled' is selected, pages may not be opened in Incognito mode.

       If 'Forced' is selected, pages may be opened ONLY in Incognito mode. Note that 'Forced' does not work for Android-on-Chrome

       Note: On iOS, if the policy is changed during a session, it will only take effect on relaunch.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Incognito mode available
    name: Enabled
    value: 0
  - caption: Incognito mode disabled
    name: Disabled
    value: 1
  - caption: Incognito mode forced
    name: Forced
    supported_on:
    - chrome.*:14-
    - chrome_os:14-
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:14-
  tags:
  - filtering
  type: int-enum

** SavingBrowserHistoryDisabled — Disable saving browser history
SYNOPSIS: true
 Setting the policy to Enabled means browsing history is not saved, tab syncing is off and users can't change this setting.

       Setting the policy to Disabled or leaving it unset saves browsing history.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Disable saving browser history
    value: true
  - caption: Enable saving browser history
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** AllowDeletingBrowserHistory — Enable deleting browser and download history
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset means browser history and download history can be deleted in Chrome, and users can't change this setting.

       Setting the policy to Disabled means browser history and download history can't be deleted. Even with this policy off, the browsing and download history are not guaranteed to be retained. Users may be able to edit or delete the history database files directly, and the browser itself may expire or archive any or all history items at any time.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable deleting browser and download history
    value: true
  - caption: Disable deleting browser and download history
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:57-
  tags:
  - local-data-access
  - admin-sharing
  type: main

** HistoryClustersVisible — Show history clusters on the Chrome history page
SYNOPSIS: false
 This policy controls the visibility of history clusters on the Chrome history page.

       If the policy is set to Enabled, history clusters will be visible at chrome://history/journeys.

       If the policy is set to Disabled, history clusters will not be visible at chrome://history/journeys.

       If the policy is left unset, history clusters will be visible at chrome://history/journeys by default and users can change the visibility of history clusters.
      

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: History clusters will be visible at chrome://history/journeys.
    value: true
  - caption: History clusters will not be visible at chrome://history/journeys.
    value: false
  - caption: History clusters will be visible at chrome://history/journeys by default
      and users can change the visibility of history clusters.
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:97-
  type: main

** AllowDinosaurEasterEgg — Allow Dinosaur Easter Egg Game
SYNOPSIS: false
 Setting the policy to True allows users to play the dinosaur game. Setting the policy to False means users can't play the dinosaur easter egg game when device is offline.

       Leaving the policy unset means users can't play the game on enrolled Google Chrome OS, but can under other circumstances.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Enable dinosaur easter egg game
    value: true
  - caption: Disable dinosaur easter egg game
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:48-
  type: main

** ForceLegacyDefaultReferrerPolicy (DEPRECATED) — Use a default referrer policy of no-referrer-when-downgrade.
SYNOPSIS: false
 This enterprise policy is for short-term adaptation and will be removed in Google Chrome version 88.

       Chrome's default referrer policy is being strengthened from its current value of no-referrer-when-downgrade to the more secure strict-origin-when-cross-origin through a gradual rollout targeting Chrome 85 stable.

       Before the rollout, this enterprise policy will have no effect. After the rollout, when this enterprise policy is enabled, Chrome's default referrer policy will be set to its previous value of no-referrer-when-downgrade.

       This enterprise policy is disabled by default.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Use a default referrer policy of no-referrer-when-downgrade
    value: true
  - caption: Do not use a default referrer policy of no-referrer-when-downgrade
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-87
  type: main

** AppCacheForceEnabled (DEPRECATED) — Allows the AppCache feature to be re-enabled even if it is off by default.
SYNOPSIS: false
 If set to true, this will force AppCache to be enabled, even when AppCache in Chrome is not available by default.

       If unset or set to false, AppCache will follow Chrome's defaults.

  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Force AppCache to be enabled
    value: true
  - caption: Use default AppCache behavior
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:84-95
  type: main

** ForceSafeSearch (DEPRECATED) — Force SafeSearch
SYNOPSIS: false
 This policy is deprecated, please use ForceGoogleSafeSearch and ForceYouTubeRestrict instead. This policy is ignored if either the ForceGoogleSafeSearch, the ForceYouTubeRestrict or the (deprecated) ForceYouTubeSafetyMode policies are set.

       Forces queries in Google Web Search to be done with SafeSearch set to active and prevents users from changing this setting. This setting also forces Moderate Restricted Mode on YouTube.

       If you enable this setting, SafeSearch in Google Search and Moderate Restricted Mode YouTube is always active.

       If you disable this setting or do not set a value, SafeSearch in Google Search and Restricted Mode in YouTube is not enforced.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Force the use of SafeSearch in Google Search and YouTube Restricted Mode
      to be at least Moderate
    value: true
  - caption: Do not enforce the use of SafeSearch in Google Search or YouTube Restricted
      Mode
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:25-
  - chrome_os:25-
  - android:30-
  tags:
  - filtering
  type: main

** ForceGoogleSafeSearch — Force Google SafeSearch
SYNOPSIS: false
 Setting the policy to Enabled means SafeSearch in Google Search is always active, and users can't change this setting.

       Setting the policy to Disabled or leaving it unset means SafeSearch in Google Search is not enforced.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Force the use of SafeSearch in Google Search
    value: true
  - caption: Do not enforce the use of SafeSearch in Google Search
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:41-
  tags:
  - filtering
  type: main

** ForceYouTubeSafetyMode (DEPRECATED) — Force YouTube Safety Mode
SYNOPSIS: false
 This policy is deprecated. Consider using ForceYouTubeRestrict, which overrides this policy and allows more fine-grained tuning.

       Forces YouTube Moderate Restricted Mode and prevents users from changing this setting.

       If this setting is enabled, Restricted Mode on YouTube is always enforced to be at least Moderate.

       If this setting is disabled or no value is set, Restricted Mode on YouTube is not enforced by Google Chrome. External policies such as YouTube policies might still enforce Restricted Mode, though.

  arc_support: This policy has no effect on the Android YouTube app. If Safety Mode
    on YouTube should be enforced, installation of the Android YouTube app should be
    disallowed.
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Force YouTube Restricted Mode to be at least Moderate
    value: true
  - caption: Do not enforce YouTube Restricted Mode
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:41-
  tags:
  - filtering
  type: main

** ForceYouTubeRestrict — Force minimum YouTube Restricted Mode
SYNOPSIS: 0
 Setting the policy enforces a minimum Restricted mode on YouTube and prevents users from picking a less restricted mode. If you set it to:

       * Strict, Strict Restricted mode on YouTube is always active.

       * Moderate, the user may only pick Moderate Restricted mode and Strict Restricted mode on YouTube, but can't turn off Restricted mode.

       * Off or if no value is set, Restricted mode on YouTube isn't enforced by Chrome. External policies such as YouTube policies might still enforce Restricted mode.

  arc_support: This policy has no effect on the Android YouTube app. If Safety Mode
    on YouTube should be enforced, installation of the Android YouTube app should be
    disallowed.
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not enforce Restricted Mode on YouTube
    name: 'Off'
    value: 0
  - caption: Enforce at least Moderate Restricted Mode on YouTube
    name: Moderate
    value: 1
  - caption: Enforce Strict Restricted Mode for YouTube
    name: Strict
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:55-
  tags:
  - filtering
  type: int-enum

** MetricsReportingEnabled — Enable reporting of usage and crash-related data
SYNOPSIS: true
 When this policy is enabled, anonymous reporting of usage and crash-related data about Chrome to Google is enabled by default. Users will still be able to change this setting in the Chrome settings.

       When this policy is disabled, anonymous reporting is disabled and no usage or crash data is sent to Google. Users won't be able to change this setting.

       When this policy isn't set, users can choose the anonymous reporting behavior at installation or first run, and can later change the setting in the Chrome settings.

       This policy is available only on Windows instances that are joined to a Microsoft® Active Directory® domain or Windows 10 Pro or Enterprise instances that are enrolled for device management, and macOS instances that are managed via MDM or joined to a domain via MCX.

       (For Chrome OS, see DeviceMetricsReportingEnabled.)

  features:
    can_be_recommended: true
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Enable reporting of usage and crash-related data
    value: true
  - caption: Disable reporting of usage and crash-related data
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  tags:
  - google-sharing
  type: main

** AutoFillEnabled (DEPRECATED) — Enable AutoFill
SYNOPSIS: false
 This policy is deprecated in M70, please use AutofillAddressEnabled and AutofillCreditCardEnabled instead.

       Enables Google Chrome's AutoFill feature and allows users to auto complete web forms using previously stored information such as address or credit card information.

       If you disable this setting, AutoFill will be inaccessible to users.

       If you enable this setting or do not set a value, AutoFill will remain under the control of the user. This will allow them to configure AutoFill profiles and to switch AutoFill on or off at their own discretion.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable AutoFill
    value: true
  - caption: Disable AutoFill
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  type: main

** AutofillAddressEnabled — Enable AutoFill for addresses
SYNOPSIS: false
 Setting the policy to True or leaving it unset gives users control of Autofill for addresses in the UI.

       Setting the policy to False means Autofill never suggests or fills address information, nor does it save additional address information that users submit while browsing the web.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable AutoFill for addresses
    value: true
  - caption: Disable AutoFill for addresses
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:69-
  type: main

** AutofillCreditCardEnabled — Enable AutoFill for credit cards
SYNOPSIS: false
 Setting the policy to True or leaving it unset means users can control autofill suggestions for credit cards in the UI.

       Setting the policy to False means autofill never suggests or fills credit card information, nor will it save additional credit card information that users might submit while browsing the web.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable AutoFill for credit cards
    value: true
  - caption: Disable AutoFill for credit cards
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:63-
  type: main

** DisabledPlugins (DEPRECATED) — Specify a list of disabled plugins
SYNOPSIS: ["Java", "Shockwave Flash", "Chrome PDF Viewer"]
 This policy is deprecated. Please use the DefaultPluginsSetting to control the availability of the Flash plugin and AlwaysOpenPdfExternally to control whether the integrated PDF viewer should be used for opening PDF files.

       Specifies a list of plugins that are disabled in Google Chrome and prevents users from changing this setting.

       The wildcard characters '*' and '?' can be used to match sequences of arbitrary characters. '*' matches an arbitrary number of characters while '?' specifies an optional single character, i.e. matches zero or one characters. The escape character is '\', so to match actual '*', '?', or '\' characters, you can put a '\' in front of them.

       If you enable this setting, the specified list of plugins is never used in Google Chrome. The plugins are marked as disabled in 'about:plugins' and users cannot enable them.

       Note that this policy can be overridden by EnabledPlugins and DisabledPluginsExceptions.

       If this policy is left not set the user can use any plugin installed on the system except for hard-coded incompatible, outdated or dangerous plugins.

  features:
    dynamic_refresh: true
    per_profile: true
  label: List of disabled plugins
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:8-87
  type: list

** EnabledPlugins (DEPRECATED) — Specify a list of enabled plugins
SYNOPSIS: ["Java", "Shockwave Flash", "Chrome PDF Viewer"]
 This policy is deprecated. Please use the DefaultPluginsSetting to control the availability of the Flash plugin and AlwaysOpenPdfExternally to control whether the integrated PDF viewer should be used for opening PDF files.

       Specifies a list of plugins that are enabled in Google Chrome and prevents users from changing this setting.

       The wildcard characters '*' and '?' can be used to match sequences of arbitrary characters. '*' matches an arbitrary number of characters while '?' specifies an optional single character, i.e. matches zero or one characters. The escape character is '\', so to match actual '*', '?', or '\' characters, you can put a '\' in front of them.

       The specified list of plugins is always used in Google Chrome if they are installed. The plugins are marked as enabled in 'about:plugins' and users cannot disable them.

       Note that this policy overrides both DisabledPlugins and DisabledPluginsExceptions.

       If this policy is left not set the user can disable any plugin installed on the system.

  features:
    dynamic_refresh: true
    per_profile: true
  label: List of enabled plugins
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-87
  tags:
  - system-security
  type: list

** DisabledPluginsExceptions (DEPRECATED) — Specify a list of plugins that the user can enable or disable
SYNOPSIS: ["Java", "Shockwave Flash", "Chrome PDF Viewer"]
 This policy is deprecated. Please use the DefaultPluginsSetting to control the availability of the Flash plugin and AlwaysOpenPdfExternally to control whether the integrated PDF viewer should be used for opening PDF files.

       Specifies a list of plugins that user can enable or disable in Google Chrome.

       The wildcard characters '*' and '?' can be used to match sequences of arbitrary characters. '*' matches an arbitrary number of characters while '?' specifies an optional single character, i.e. matches zero or one characters. The escape character is '\', so to match actual '*', '?', or '\' characters, you can put a '\' in front of them.

       If you enable this setting, the specified list of plugins can be used in Google Chrome. Users can enable or disable them in 'about:plugins', even if the plugin also matches a pattern in DisabledPlugins. Users can also enable and disable plugins that don't match any patterns in DisabledPlugins, DisabledPluginsExceptions and EnabledPlugins.

       This policy is meant to allow for strict plugin blocking where the 'DisabledPlugins' list contains wildcarded entries like disable all plugins '*' or disable all Java plugins '*Java*' but the administrator wishes to enable some particular version like 'IcedTea Java 2.3'. This particular versions can be specified in this policy.

       Note that both the plugin name and the plugin's group name have to be exempted. Each plugin group is shown in a separate section in about:plugins; each section may have one or more plugins. For example, the "Shockwave Flash" plugin belongs to the "Adobe Flash Player" group, and both names have to have a match in the exceptions list if that plugin is to be exempted from the blocklist.

       If this policy is left not set any plugin that matches the patterns in the 'DisabledPlugins' will be locked disabled and the user won't be able to enable them.

  features:
    dynamic_refresh: true
    per_profile: true
  label: List of exceptions to the list of disabled plugins
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:11-87
  type: list

** AlwaysOpenPdfExternally — Always Open PDF files externally
SYNOPSIS: true
 Setting the policy to Enabled turns the internal PDF viewer off in Google Chrome, treats PDF files as a download, and lets users open PDFs with the default application.

       Setting the policy to Disabled means that unless users turns off the PDF plugin, it will open PDF files.

       If you set the policy, users can't change it in Google Chrome. If not set, users can choose whether to open PDF externally or not.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Always open PDF files using an external PDF viewer
    value: true
  - caption: Always open PDF files using the internal PDF viewer
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:55-
  type: main

** DisablePluginFinder (DEPRECATED) — Specify whether the plugin finder should be disabled (deprecated)
SYNOPSIS: true
 This policy has been removed as of Google Chrome 64.

       Automatic search and installation of missing plugins is no longer supported.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Enable the plugin finder
    value: true
  - caption: Disable the plugin finder
    value: false
  label: Disable plugin finder (deprecated)
  schema:
    type: boolean
  supported_on:
  - chrome.*:11-64
  type: main

** SyncDisabled — Disable synchronization of data with Google
SYNOPSIS: true
 Setting the policy to Enabled turns off data synchronization in Google Chrome using Google-hosted synchronization services.
       To fully turn off Chrome Sync services, we recommend that you turn off the service in the Google Admin console.

       If the policy is set to Disabled or not set, users are allowed to choose whether to use Chrome Sync.

       Note: Do not turn on this policy when RoamingProfileSupportEnabled is Enabled, because that feature shares the same client-side functionality. The Google-hosted synchronization is off completely in this case.

  arc_support: Disabling Chrome Sync will cause Android Backup and Restore to not function
    properly.
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Disable Chrome Sync
    value: true
  - caption: Allow users to choose whether to enable Chrome Sync
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:8-
  tags:
  - filtering
  - google-sharing
  type: main

** SyncTypesListDisabled — List of types that should be excluded from synchronization
SYNOPSIS: ["bookmarks"]
 If this policy is set all specified data types will be excluded from synchronization both for Chrome Sync as well as for roaming profile synchronization. This can be beneficial to reduce the size of the roaming profile or limit the type of data uploaded to the Chrome Sync Servers.

       The current data types for this policy are: "bookmarks", "readingList", "preferences", "passwords", "autofill", "themes", "typedUrls", "extensions", "apps", "tabs", "wifiConfigurations". Those names are case sensitive!

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:79-
  tags:
  - system-security
  type: list

** RoamingProfileSupportEnabled — Enable the creation of roaming copies for Google Chrome profile data
SYNOPSIS: true
 If you enable this setting, the settings stored in Google Chrome profiles like bookmarks, autofill data, passwords, etc. will also be written to a file stored in the Roaming user profile folder or a location specified by the Administrator through the RoamingProfileLocation policy. Enabling this policy disables cloud sync.

       If this policy is disabled or left not set only the regular local profiles will be used.

  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Enable creation of roaming profiles
    value: true
  - caption: Disable creation of roaming profiles
    value: false
  label: Enable the creation of roaming copies for Google Chrome profile data.
  schema:
    type: boolean
  supported_on:
  - chrome.linux:88-
  tags:
  - local-data-access
  type: main

** RoamingProfileLocation — Set the roaming profile directory
SYNOPSIS: "${roaming_app_data}\\chrome-profile"
 Configures the directory that Google Chrome will use for storing the roaming copy of the profiles.

       If you set this policy, Google Chrome will use the provided directory to store the roaming copy of the profiles if the RoamingProfileSupportEnabled policy has been enabled. If the RoamingProfileSupportEnabled policy is disabled or left unset the value stored in this policy is not used.

       See https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables for a list of variables that can be used.

       On non-Windows platforms, this policy must be set for roaming profiles to work.

       On Windows, if this policy is left unset, the default roaming profile path will be used.

  features:
    dynamic_refresh: false
    per_profile: false
  label: Set the roaming profile directory
  schema:
    type: string
  supported_on:
  - chrome.linux:88-
  tags:
  - local-data-access
  type: string

** SigninAllowed (DEPRECATED) — Allow sign in to Google Chrome
SYNOPSIS: true
 This policy is deprecated, consider using BrowserSignin instead.

       Allows the user to sign in to Google Chrome.

       If you set this policy, you can configure whether a user is allowed to sign in to Google Chrome. Setting this policy to 'False' will prevent apps and extensions that use the chrome.identity API from functioning, so you may want to use SyncDisabled instead.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow users to sign in to Google Chrome
    value: true
  - caption: Prevent users from signing in to Google Chrome
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:27-
  type: main

** EnableDeprecatedWebBasedSignin (DEPRECATED) — Enable the old web-based signin flow
SYNOPSIS: false
 This setting was named EnableWebBasedSignin prior to Chrome 42, and support for it will be removed entirely in Chrome 43.

       This setting is useful for enterprise customers who are using SSO solutions that are not compatible with the new inline signin flow yet.
       If you enable this setting, the old web-based signin flow would be used.
       If you disable this setting or leave it not set, the new inline signin flow would be used by default. Users may still enable the old web-based signin flow through the command line flag --enable-web-based-signin.

       The experimental setting will be removed in the future when the inline signin fully supports all SSO signin flows.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:35-42
  type: main

** DiskCacheDir — Set disk cache directory
SYNOPSIS: "${user_home}/Chrome_cache"
 Setting the policy has Google Chrome use the directory you provide for storing cached files on the disk—whether or not users specify the --disk-cache-dir flag.

       If not set, Google Chrome uses the default cache directory, but users can change that setting with the --disk-cache-dir command line flag.

       Google Chrome manages the contents of a volume's root directory. So to avoid data loss or other errors, do not set this policy to the root directory or any directory used for other purposes. See the variables you can use ( https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables ).

  features:
    dynamic_refresh: false
    per_profile: false
  label: Set disk cache directory
  schema:
    type: string
  supported_on:
  - chrome.*:13-
  type: string

** DiskCacheSize — Set disk cache size in bytes
SYNOPSIS: 104857600
 Setting the policy to None has Google Chrome use the default cache size for storing cached files on the disk. Users can't change it.

       If you set the policy, Google Chrome uses the cache size you provide—whether or not users specify the --disk-cache-size flag. (Values below a few megabytes are rounded up.)

       If not set, Google Chrome uses the default size. Users can change that setting using the --disk-cache-size flag.

       Note: The value specified in this policy is used as a hint to various cache subsystems in the browser. Therefore the actual total disk consumption of all caches will be higher but within the same order of magnitude as the value specified.

  features:
    dynamic_refresh: false
    per_profile: false
  label: Set disk cache size
  schema:
    type: integer
  supported_on:
  - chrome.*:17-
  type: int

** MediaCacheSize (DEPRECATED) — Set media disk cache size in bytes
SYNOPSIS: 104857600
 Setting the policy configures the cache size that Google Chrome uses for storing cached media files on the disk, regardless of whether or not users specify the --media-cache-size flag. The value specified in this policy isn't a hard boundary, but a suggestion to the caching system. Any value below a few megabytes is rounded up.

       Setting the value of the policy to 0 uses the default cache size, and users can't change it.

       Leaving the policy unset uses the default cache size and users can change it with the --media-cache-size flag.

  features:
    dynamic_refresh: false
    per_profile: false
  label: Set media disk cache size
  schema:
    type: integer
  supported_on:
  - chrome.*:17-71
  type: int

** DownloadRestrictions — Allow download restrictions
SYNOPSIS: 4
 Setting the policy means users can't bypass download security decisions.

       There are many types of download warnings within Chrome, which roughly break down into these categories (learn more about Safe Browsing verdicts https://support.google.com/chrome/?p=ib_download_blocked):

       * Malicious, as flagged by the Safe Browsing server
       * Uncommon or unwanted, as flagged by the Safe Browsing server
       * A dangerous file type (e.g. all SWF downloads and many EXE downloads)

       Setting the policy blocks different subsets of these, depending on it's value:

       0: No special restrictions. Default.

       1: Blocks malicious files flagged by the Safe Browsing server AND Blocks all dangerous file types. Only recommended for OUs/browsers/users that have a high tolerance for False Positives.

       2: Blocks malicious files flagged by the Safe Browsing server AND Blocks uncommon or unwanted files flagged by the Safe Browsing server AND Blocks all dangerous file types. Only recommended for OUs/browsers/users that have a high tolerance for False Positives.

       3: Blocks all downloads. Not recommended, except for special use cases.

       4: Blocks malicious files flagged by the Safe Browsing server, does not block dangerous file types. Recommended.

       Note: These restrictions apply to downloads triggered from webpage content, as well as the Download link... menu option. They don't apply to the download of the currently displayed page or to saving as PDF from the printing options. Read more about Safe Browsing ( https://developers.google.com/safe-browsing ).

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: No special restrictions. Default.
    name: DefaultDownloadSecurity
    value: 0
  - caption: Block malicious downloads and dangerous file types.
    name: BlockDangerousDownloads
    value: 1
  - caption: Block malicious downloads, uncommon or unwanted downloads and dangerous
      file types.
    name: BlockPotentiallyDangerousDownloads
    value: 2
  - caption: Block all downloads.
    name: BlockAllDownloads
    value: 3
  - caption: Block malicious downloads. Recommended.
    name: BlockMaliciousDownloads
    value: 4
  label: Download restrictions
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
  supported_on:
  - chrome.*:61-
  tags:
  - local-data-access
  type: int-enum

** DownloadDirectory — Set download directory
SYNOPSIS: "/home/${user_name}/Downloads"
 Setting the policy sets up the directory Chrome uses for downloading files. It uses the provided directory, whether or not users specify one or turned on the flag to be prompted for download location every time.

       Leaving the policy unset means Chrome uses the default download directory, and users can change it.

       Note: See a list of variables you can use ( https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables ).

  arc_support: This policy has no effect on Android apps. Android apps always use the
    default downloads directory and cannot access any files downloaded by Google Chrome
    OS into a non-default downloads directory.
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Set download directory
  schema:
    type: string
  supported_on:
  - chrome.*:11-
  tags:
  - local-data-access
  type: string

** AutoOpenFileTypes — List of file types that should be automatically opened on download
SYNOPSIS: ["exe", "txt"]
 List of file types that should be automatically opened on download. The leading separator should not be included when listing the file type, so list "txt" instead of ".txt".

       Files with types that should be automatically opened will still be subject to the enabled safe browsing checks and won't be opened if they fail those checks.

       If this policy isn't set, only file types that a user has already specified to automatically be opened will do so when downloaded.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:84-
  type: list

** AutoOpenAllowedForURLs — URLs where AutoOpenFileTypes can apply
SYNOPSIS: ["example.com", "https://ssl.server.com", "hosting.com/good_path", "https://server:8080/path", ".exact.hostname.com"]
 List of URLs specifying which urls AutoOpenFileTypes will apply to. This policy has no impact on automatically open values set by users.

       If this policy is set, files will only automatically open by policy if the url is part of this set and the file type is listed in AutoOpenFileTypes. If either condition is false the download won't automatically open by policy.

       If this policy isn't set, all downloads where the file type is in AutoOpenFileTypes will automatically open.

       A URL pattern has to be formatted according to https://www.chromium.org/administrators/url-blocklist-filter-format.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:84-
  type: list

** AutoLaunchProtocolsFromOrigins — Define a list of protocols that can launch an external application from listed origins without prompting the user
SYNOPSIS: [{"protocol": "spotify", "allowed_origins": ["example.com", "http://www.example.com:8080"]}, {"protocol": "teams", "allowed_origins": ["https://example.com", "https://.mail.example.com"]}, {"protocol": "outlook", "allowed_origins": ["*"]}]
 Allows you to set a list of protocols, and for each protocol an associated list of allowed origin patterns, that can launch an external application without prompting the user. The trailing separator should not be included when listing the protocol, so list "skype" instead of "skype:" or "skype://".

       If this policy is set, a protocol will only be permitted to launch an external application without prompting by policy if the protocol is listed, and the origin of the site trying to launch the protocol matches one of the origin patterns in that protocol's allowed_origins list. If either condition is false the external protocol launch prompt will not be omitted by policy.

       If this policy is not set, no protocols can launch without a prompt by default. Users may opt out of prompts on a per-protocol/per-site basis unless the ExternalProtocolDialogShowAlwaysOpenCheckbox policy is set to Disabled. This policy has no impact on per-protocol/per-site prompt exemptions set by users.

       The origin matching patterns use a similar format to those for the 'URLBlocklist' policy, which are documented at http://www.chromium.org/administrators/url-blocklist-filter-format.

       However, origin matching patterns for this policy cannot contain "/path" or "@query" elements. Any pattern that does contain a "/path" or "@query" element will be ignored.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      properties:
        allowed_origins:
          items:
            type: string
          type: array
        protocol:
          type: string
      required:
      - protocol
      - allowed_origins
      type: object
    type: array
  supported_on:
  - chrome.*:85-
  type: dict

** ClearSiteDataOnExit (DEPRECATED) — Clear site data on browser shutdown (deprecated)
SYNOPSIS: true
 This policy has been retired as of Google Chrome version 29.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Clear site data on browser shutdown (deprecated)
  schema:
    type: boolean
  supported_on:
  - chrome.*:11-28
  - chrome_os:11-28
  type: main

** ProxySettings — Proxy settings
SYNOPSIS: {"ProxyMode": "fixed_servers", "ProxyServer": "123.123.123.123:8080", "ProxyBypassList": "https://www.example1.com,https://www.example2.com,https://internalsite/"}
 Setting the policy configures the proxy settings for Chrome and ARC-apps, which ignore all proxy-related options specified from the command line.

        Leaving the policy unset lets users choose their proxy settings.

        Setting the ProxySettings policy accepts the following fields:
          * ProxyMode, which lets you specify the proxy server Chrome uses and prevents users from changing proxy settings
          * ProxyPacUrl, a URL to a proxy .pac file
          * ProxyPacMandatory, which prevents the network stack from falling back to direct connections with invalid or unavailable PAC script
          * ProxyServer, a URL of the proxy server
          * ProxyBypassList, a list of hosts for which the proxy will be bypassed

        The ProxyServerMode field is deprecated in favor of the ProxyMode field.

         For ProxyMode, if you choose the value:
           * direct, a proxy is never used and all other fields are ignored.
           * system, the systems's proxy is used and all other fields are ignored.
           * auto_detect, all other fields are ignored.
           * fixed_servers, the ProxyServer and ProxyBypassList fields are used.
           * pac_script, the ProxyPacUrl, ProxyPacMandatory and ProxyBypassList fields are used.

       Note: For more detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).

  arc_support: Only a subset of proxy configuration options are made available to Android
    apps. Android apps may voluntarily choose to use the proxy. You cannot force them
    to use a proxy.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    properties:
      ProxyBypassList:
        type: string
      ProxyMode:
        enum:
        - direct
        - auto_detect
        - pac_script
        - fixed_servers
        - system
        type: string
      ProxyPacMandatory:
        type: boolean
      ProxyPacUrl:
        type: string
      ProxyServer:
        type: string
      ProxyServerMode:
        $ref: ProxyServerMode
    type: object
  supported_on:
  - chrome.*:18-
  tags:
  - system-security
  type: dict

** BrowserLabsEnabled — Browser experiments icon in toolbar
SYNOPSIS: false
 Setting the policy to Enabled or leaving the policy unset means that users can access browser experimental features through an icon in the toolbar

       Setting the policy to Disabled removes the browser experimental features icon from the toolbar.

       chrome://flags and any other means of turning off and on browser features will still behave as expected regardless of whether this policy is Enabled or Disabled.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable browser experimental features toolbar entrypoint
    value: true
  - caption: Disable browser experimental features toolbar entrypoint
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:89-
  tags:
  - google-sharing
  type: main

** DeveloperToolsDisabled (DEPRECATED) — Disable Developer Tools
SYNOPSIS: false
 This policy is deprecated in M68, please use DeveloperToolsAvailability instead.

       Disables the Developer Tools and the JavaScript console.

       If you enable this setting, the Developer Tools can not be accessed and web-site elements can not be inspected anymore. Any keyboard shortcuts and any menu or context menu entries to open the Developer Tools or the JavaScript Console will be disabled.

       Setting this option to disabled or leaving it not set allows the user to use the Developer Tools and the JavaScript console.

       If the policy DeveloperToolsAvailability is set, the value of the policy DeveloperToolsDisabled is ignored.

  arc_support: This policy also controls access to Android Developer Options. If you
    set this policy to true, users cannot access Developer Options. If you set this
    policy to false or leave it unset, users can access Developer Options by tapping
    seven times on the build number in the Android settings app.
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Disable Developer Tools
    value: true
  - caption: Enable Developer Tools
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:9-
  type: main

** DeveloperToolsAvailability — Control where Developer Tools can be used
SYNOPSIS: 2
 Setting the policy to 0 (the default) means you can access the developer tools and the JavaScript console, but not in the context of extensions installed by enterprise policy. Setting the policy to 1 means you can access the developer tools and the JavaScript console in all contexts, including that of extensions installed by enterprise policy. Setting the policy to 2 means you can't acess developer tools, and you can't inspect website elements.

       This setting also turns off keyboard shortcuts and menu or context menu entries to open developer tools or the JavaScript console.

  arc_support: This policy also controls access to Android Developer Options. If you
    set this policy to 'DeveloperToolsDisallowed' (value 2), users cannot access Developer
    Options. If you set this policy to another value or leave it unset, users can access
    Developer Options by tapping seven times on the build number in the Android settings
    app.
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Disallow usage of the Developer Tools on extensions installed by enterprise
      policy, allow usage of the Developer Tools in other contexts
    name: DeveloperToolsDisallowedForForceInstalledExtensions
    value: 0
  - caption: Allow usage of the Developer Tools
    name: DeveloperToolsAllowed
    value: 1
  - caption: Disallow usage of the Developer Tools
    name: DeveloperToolsDisallowed
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:68-
  type: int-enum

** RemoteDebuggingAllowed — Allow remote debugging
SYNOPSIS: true
 Controls whether users may use remote debugging.

       If this policy is set to Enabled or not set, users may use remote debugging by specifying --remote-debugging-port and --remote-debugging-pipe command line switches.

       If this policy is set to Disabled, users are not allowed to use remote debugging.

  default: true
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Allow use of the remote debugging
    value: true
  - caption: Do not allow use of the remote debugging
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:93-
  type: main

** HeadlessMode — Control use of the Headless Mode
SYNOPSIS: 2
 Setting this policy to Enabled or leaving the policy unset allows use of the headless mode. Setting this policy to Disabled denies use of the headless mode.

  default: 1
  features:
    dynamic_refresh: false
    per_profile: false
    platform_only: true
  items:
  - caption: Allow use of the Headless Mode
    name: Enabled
    value: 1
  - caption: Do not allow use of the Headless Mode
    name: Disabled
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:91-
  type: int-enum

** BlockThirdPartyCookies — Block third party cookies
SYNOPSIS: false
 Setting the policy to Enabled prevents webpage elements that aren't from the domain that's in the browser's address bar from setting cookies. Setting the policy to Disabled lets those elements set cookies and prevents users from changing this setting.

       Leaving it unset turns third-party cookies on, but users can change this setting.

  default: null
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Block 3rd party cookies
    value: true
  - caption: Allow 3rd party cookies
    value: false
  - caption: Allow 3rd party cookies, but allow the user to change this setting
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:10-
  type: main

** DefaultSearchProviderContextMenuAccessAllowed — Allow default search provider context menu search access
SYNOPSIS: true
 Enables the use of a default search provider on the context menu.

           If you set this policy to disabled the search context menu item that relies on your default search provider will not be available.

           If this policy is set to enabled or not set, the context menu item for your default search provider will be available.

           The policy value is only appled when the DefaultSearchProviderEnabled policy is enabled, and is not applicable otherwise.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable access to the default search provider context menu
    value: true
  - caption: Disable access to the default search provider context menu
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:85-
  type: main

** LensRegionSearchEnabled — Allow Google Lens region search menu item to be shown in context menu if supported.
SYNOPSIS: true
 Leaving the policy unset or setting it to Enabled allows users to view and use the Google Lens region search menu item in the context menu. Setting the policy to Disabled means users will not see the Google Lens region search menu item in the context menu when Google Lens region search is supported.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable Google Lens region search.
    value: true
  - caption: Disable Google Lens region search.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:94-
  - chrome_os:94-
  type: main

** InsecurePrivateNetworkRequestsAllowed — Specifies whether to allow insecure websites to make requests to more-private network endpoints
SYNOPSIS: false
 Controls whether insecure websites are allowed to make requests to more-private network endpoints.

           This policy relates to the Private Network Access specification. See https://wicg.github.io/private-network-access/ for more details.

           A network endpoint is more private than another if:
           1) Its IP address is localhost and the other is not.
           2) Its IP address is private and the other is public.
           In the future, depending on spec evolution, this policy might apply to all cross-origin requests directed at private IPs or localhost.

           A website is deemed secure if it meets the definition of a secure context in https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts. Otherwise, it will be treated as an insecure context.

           When this policy is either not set or set to false, the default behavior for requests from insecure contexts to more-private network endpoints will depend on the user's personal configuration for the BlockInsecurePrivateNetworkRequests feature, which may be set by a field trial or on the command line.

           When this policy is set to true, insecure websites are allowed to make requests to any network endpoint, subject to other cross-origin checks.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow insecure websites to make requests to any network endpoint
    value: true
  - caption: Use default behavior when determining if insecure websites can make requests
      to any network endpoint
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:92-
  - chrome_os:92-
  - android:92-
  - webview_android:92-
  tags:
  - system-security
  type: main

** InsecurePrivateNetworkRequestsAllowedForUrls — Allow the listed sites to make requests to more-private network endpoints from insecure contexts.
SYNOPSIS: ["http://www.example.com:8080", "[*.]example.edu"]
 List of URL patterns. Private network requests initiated from insecure websites served by matching origins are allowed.

           If unset, this policy behaves as if set to the empty list.

           For origins not covered by the patterns specified here, the global default value will be used either from the InsecurePrivateNetworkRequestsAllowed policy, if it is set, or the user's personal configuration otherwise.

           Note that this policy only affects insecure origins, so secure origins (e.g. https://example.com) included in this list will be ignored.

           For detailed information on valid URL patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:92-
  tags:
  - system-security
  type: list

** Disable3DAPIs — Disable support for 3D graphics APIs
SYNOPSIS: false
 Setting the policy to True (or setting HardwareAccelerationModeEnabled to False) prevents webpages from accessing the WebGL API, and plugins can't use the Pepper 3D API.

       Setting the policy to False or leaving it unset lets webpages use the WebGL API and plugins use the Pepper 3D API, but the browser's default settings might still require command line arguments to use these APIs.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Disable support for 3D graphics APIs
    value: true
  - caption: Enable support for 3D graphics APIs
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:9-
  type: main

** PolicyRefreshRate — Refresh rate for user policy
SYNOPSIS: 3600000
 Setting the policy specifies the period in milliseconds at which the device management service is queried for user policy information. Valid values range from 1,800,000 (30 minutes) to 86,400,000 (1 day). Values outside this range will be clamped to the respective boundary.

       Leaving the policy unset uses the default value of 3 hours.

       Note: Policy notifications force a refresh when the policy changes, making frequent refreshes unnecessary. So, if the platform supports these notifications, the refresh delay is 24 hours (ignoring defaults and the value of this policy).

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    maximum: 86400000
    minimum: 1800000
    type: integer
  supported_on:
  - chrome.*:79-
  type: int

** MaxInvalidationFetchDelay — Maximum fetch delay after a policy invalidation
SYNOPSIS: 10000
 Setting the policy specifies the maximum delay in milliseconds between receiving a policy invalidation and fetching the new policy from the device management service. Valid values range from 1,000 (1 second) to 300,000 (5 minutes). Values outside this range will be clamped to the respective boundary.

       Leaving the policy unset means Google Chrome uses the default value of 10 seconds.

  default: 10000
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    maximum: 300000
    minimum: 1000
    type: integer
  supported_on:
  - chrome.*:30-
  type: int

** ChromeOsMultiProfileUserBehavior — Control the user behavior in a multiprofile session
SYNOPSIS: "unrestricted"
 Control the user behavior in a multiprofile session on Google Chrome OS devices.

       If this policy is set to 'MultiProfileUserBehaviorUnrestricted', the user can be either primary or secondary user in a multiprofile session.

       If this policy is set to 'MultiProfileUserBehaviorMustBePrimary', the user can only be the primary user in a multiprofile session.

       If this policy is set to 'MultiProfileUserBehaviorNotAllowed', the user cannot be part of a multiprofile session.

       If you set this setting, users cannot change or override it.

       If the setting is changed while the user is signed into a multiprofile session, all users in the session will be checked against their corresponding settings. The session will be closed if any one of the users is no longer allowed to be in the session.

       If the policy is left not set, the default value 'MultiProfileUserBehaviorMustBePrimary' applies for enterprise-managed users and 'MultiProfileUserBehaviorUnrestricted' will be used for non-managed users.

  arc_support: When multiple users are logged in, only the primary user can use Android
    apps.
  default_for_enterprise_users: primary-only
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow enterprise user to be both primary and secondary  (Default behavior
      for non-managed users)
    name: MultiProfileUserBehaviorUnrestricted
    value: unrestricted
  - caption: Allow enterprise user to be primary multiprofile user only (Default behavior
      for enterprise-managed users)
    name: MultiProfileUserBehaviorMustBePrimary
    value: primary-only
  - caption: Do not allow enterprise user to be part of multiprofile (primary or secondary)
    name: MultiProfileUserBehaviorNotAllowed
    value: not-allowed
  schema:
    enum:
    - unrestricted
    - primary-only
    - not-allowed
    type: string
  supported_on:
  - chrome_os:31-
  type: string-enum

** ForceLogoutUnauthenticatedUserEnabled — Force logout the user when their account becomes unauthenticated
SYNOPSIS: false
 Force logout the user when their primary account's authentication token becomes invalid.
         This policy can protect the user from access to restricted content on Google web properties.
         If this policy is set to True, the user will be logged out as soon as their authentication token becomes invalid and attempts to restore this token fail.
         If this policy is set to False or unset, the user can continue working in an unauthenticated state.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:81-
  type: main

** SecurityTokenSessionNotificationSeconds — Duration of the notification on smart card removal for Google Chrome OS.
SYNOPSIS: 10
 This policy only takes effect when the policy SecurityTokenSessionBehavior is set to LOCK or LOGOUT, and a user who authenticates via a smart card removes that smart card. Then, this policy specifies for how many seconds a notification which informs the user of the impending action is displayed. This notification is blocking the screen. The action will only happen after this notification expires. The user can prevent the action from happening by re-inserting the smart card before the notification expires. If this policy is set to zero, no notification will be displayed and the action happens immediately.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    maximum: 9999
    minimum: 0
    type: integer
  supported_on:
  - chrome_os:90-
  type: int

** TargetBlankImpliesNoOpener — Do not set window.opener for links targeting _blank
SYNOPSIS: false
 Setting the policy to Disabled allows popups targeting _blank to access (via JavaScript) the page that requested to open the popup.

       Setting the policy to Enabled or leaving it unset causes the window.opener property to be set to null unless the anchor specifies rel="opener".

       This policy will be removed in Google Chrome version 95.

       See https://chromestatus.com/feature/6140064063029248.

  default: true
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Only allow popups opened with a target of _blank to interact with the page
      that opened the popup if the opener page explicitly opts-in to such interaction
    value: true
  - caption: 'Allow all popups opened with a target of _blank to interact the page that
      requested to open the popup unless the opener page explicitly opts-out of such
      interaction '
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:88-
  type: main

** InstantEnabled (DEPRECATED) — Enable Instant
SYNOPSIS: true
 Enables Google Chrome's Instant feature and prevents users from changing this setting.

       If you enable this setting, Google Chrome Instant is enabled.

       If you disable this setting, Google Chrome Instant is disabled.

       If you enable or disable this setting, users cannot change or override this setting.

       If this setting is left not set the user can decide to use this function or not.

       This setting has been removed from Google Chrome 29 and higher versions.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:11-28
  type: main

** TranslateEnabled — Enable Translate
SYNOPSIS: true
 Setting the policy to True provides translation functionality when it's appropriate for users by showing an integrated translate toolbar in Google Chrome and a translate option on the right-click context menu. Setting the policy to False shuts off all built-in translate features.

       If you set the policy, users can't change this function. Leaving it unset lets them change the setting.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:12-
  - chrome_os:12-
  - android:30-
  - ios:88-
  type: main

** AllowOutdatedPlugins (DEPRECATED) — Allow running plugins that are outdated
SYNOPSIS: true
 This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy to Enabled means outdated plugins are used as normal plugins. Setting the policy to Disabled means outdated plugins aren't used.

       Leaving the policy unset means users will be asked for permission to run outdated plugins.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:12-87
  tags:
  - system-security
  type: main

** AlwaysAuthorizePlugins (DEPRECATED) — Always runs plugins that require authorization (deprecated)
SYNOPSIS: true
 If you enable this setting, plugins that are not outdated always run.

       If this setting is disabled or not set, users will be asked for permission to run plugins that require authorization. These are plugins that can compromise security.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:13-64
  tags:
  - system-security
  type: main

** RunAllFlashInAllowMode (DEPRECATED) — Extend Flash content setting to all content (deprecated)
SYNOPSIS: true
 This policy has been removed since Google Chrome version 89 because Flash has been deprecated.

       Setting the policy to True runs all Flash content embedded on websites that allow Flash, including content from other origins or small content.

       Setting the policy to False or leaving it unset might block Flash content from other origins or small content.

       Note: To control which websites can run Flash, see these policies: DefaultPluginsSetting, PluginsAllowedForUrls, and PluginsBlockedForUrls.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:63-88
  tags:
  - system-security
  type: main

** BookmarkBarEnabled — Enable Bookmark Bar
SYNOPSIS: true
 Setting the policy to True displays a bookmark bar in Google Chrome. Setting the policy to False means users never see the bookmark bar.

       If you set the policy, users can't change it. If not set, users decide whether to use this function.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:12-
  type: main

** EditBookmarksEnabled — Enable or disable bookmark editing
SYNOPSIS: false
 Setting the policy to True or leaving it unset lets users add, remove, or modify bookmarks.

       Setting the policy to False means users can't add, remove, or modify bookmarks. They can still use existing bookmarks.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:12-
  type: main

** ShowAppsShortcutInBookmarkBar — Show the apps shortcut in the bookmark bar
SYNOPSIS: false
 Setting the policy to True displays the apps shortcut. Setting the policy to False means this shortcut never appears.

       If you set the policy, users can't change it. If not set, users decide to show or hide the apps shortcut from the bookmark bar context menu.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Show the apps shortcut in the bookmark bar
    value: true
  - caption: Do not show the apps shortcut in the bookmark bar
    value: false
  - caption: Allow the user to decide
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:37-
  type: main

** AllowFileSelectionDialogs — Allow invocation of file selection dialogs
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset means Chrome can display, and users can open, file selection dialogs.

       Setting the policy to Disabled means that whenever users perform actions provoking a file selection dialog, such as importing bookmarks, uploading files, and saving links, a message appears instead. The user is assumed to have clicked Cancel on the file selection dialog.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Allow file selection dialogs
    value: true
  - caption: Prevent file selection dialogs
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:12-
  type: main

** SecurityKeyPermitAttestation — URLs/domains automatically permitted direct Security Key attestation
SYNOPSIS: ["https://example.com"]
 Setting the policy specifies URLs and domains for which no prompt appears when attestation certificates from Security Keys are requested. A signal is also sent to the Security Key indicating that individual attestation may be used. Without this, when sites request attestation of Security Keys, users are prompted in Google Chrome version 65 and later.

       URLs will only match as U2F appIDs. Domains only match as webauthn RP IDs. So to cover both U2F and webauthn APIs, list the appID URL and domain for a given site.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:65-
  tags:
  - website-sharing
  type: list

** U2fSecurityKeyApiEnabled — Allow using the deprecated U2F Security Key API
SYNOPSIS: true
 If set to Enabled, the deprecated U2F Security Key API can be used and the deprecation reminder prompt shown for U2F API requests is suppressed.

       If the policy is set to Disabled or left unset, the default behavior will apply.

       The U2F Security Key API is deprecated and it will be disabled by default in Chrome 98.

       This is a temporary opt-out mechanism. The U2F API will be removed from Chrome in Chrome 104, at which point this policy will cease to be supported.

       For more information about the deprecation of the U2F Security Key API, please refer to https://groups.google.com/a/chromium.org/g/blink-dev/c/xHC3AtU_65A.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow using the U2F Security Key API.
    value: true
  - caption: Apply default settings for U2F API deprecation.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:96-103
  type: main

** GCFUserDataDir (DEPRECATED) — Set Google Chrome Frame user data directory
SYNOPSIS: "${user_home}/Chrome Frame"
 Configures the directory that Google Chrome Frame will use for storing user data.

       If you set this policy, Google Chrome Frame will use the provided directory.

       See https://support.google.com/chrome/a?p=Supported_directory_variables for a list of variables that can be used.

       If this setting is left not set the default profile directory will be used.

  features:
    dynamic_refresh: false
  label: Set user data directory
  schema:
    type: string
  supported_on:
  - chrome_frame:12-32
  type: string

** ImportBookmarks — Import bookmarks from default browser on first run
SYNOPSIS: true
 Setting the policy to Enabled imports bookmarks from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no bookmarks are imported on first run.

       Users can trigger an import dialog and the bookmarks checkbox will be checked or unchecked to match this policy's value.

  default: false
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Import bookmarks from default browser on first run
  schema:
    type: boolean
  supported_on:
  - chrome.*:15-
  tags:
  - local-data-access
  type: main

** ImportHistory — Import browsing history from default browser on first run
SYNOPSIS: true
 Setting the policy to Enabled imports browsing history from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no browsing history is imported on first run.

       Users can trigger an import dialog and the browsing history checkbox will be checked or unchecked to match this policy's value.

  default: false
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Import browsing history from default browser on first run
  schema:
    type: boolean
  supported_on:
  - chrome.*:15-
  tags:
  - local-data-access
  type: main

** ImportHomepage — Import of homepage from default browser on first run
SYNOPSIS: true
 Setting the policy to Enabled imports the homepage from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means the homepage isn't imported on first run.

       Users can trigger an import dialog and the homepage checkbox will be checked or unchecked to match this policy's value.

  features:
    dynamic_refresh: true
    per_profile: true
  label: Import of homepage from default browser on first run
  schema:
    type: boolean
  supported_on:
  - chrome.*:15-
  tags:
  - local-data-access
  type: main

** ImportSearchEngine — Import search engines from default browser on first run
SYNOPSIS: true
 Setting the policy to Enabled imports the default search engine from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means the default search engine isn't imported on first run.

       Users can trigger an import dialog and the default search engine checkbox will be checked or unchecked to match this policy's value.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Import search engines from default browser on first run
  schema:
    type: boolean
  supported_on:
  - chrome.*:15-
  tags:
  - local-data-access
  type: main

** ImportSavedPasswords — Import saved passwords from default browser on first run
SYNOPSIS: true
 Setting the policy to Enabled imports saved passwords from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no saved passwords are imported on first run.

       Users can trigger an import dialog and the saved passwords checkbox will be checked or unchecked to match this policy's value.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Import saved passwords from default browser on first run
  schema:
    type: boolean
  supported_on:
  - chrome.*:15-
  tags:
  - local-data-access
  type: main

** ImportAutofillFormData — Import autofill form data from default browser on first run
SYNOPSIS: true
 Setting the policy to Enabled imports autofill form data from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no autofill form data is imported on first run.

       Users can trigger an import dialog and the autofill form data checkbox will be checked or unchecked to match this policy's value.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  label: Import autofill form data from default browser on first run
  schema:
    type: boolean
  supported_on:
  - chrome.*:39-
  tags:
  - local-data-access
  type: main

** MaxConnectionsPerProxy — Maximal number of concurrent connections to the proxy server
SYNOPSIS: 32
 Setting the policy specifies the maximal number of simultaneous connections to the proxy server. Some proxy servers can't handle a high number of concurrent connections per client, which is solved by setting this policy to a lower value. The value should be lower than 100 and higher than 6. Some web apps are known to consume many connections with hanging GETs, so setting a value below 32 may lead to browser networking hangs if there are too many web apps with hanging connections open. Lower below the default at your own risk.

       Leaving the policy unset means a default of 32 is used.

  default: 32
  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: integer
  supported_on:
  - chrome.*:14-
  type: int

** HideWebStorePromo (DEPRECATED) — Prevent app promotions from appearing on the new tab page
SYNOPSIS: false
 When set to True, promotions for Chrome Web Store apps will not appear on the new tab page.

       Setting this option to False or leaving it not set will make the promotions for Chrome Web Store apps appear on the new tab page

  features:
    dynamic_refresh: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:15-21
  type: main

** URLBlacklist (DEPRECATED) — Block access to a list of URLs
SYNOPSIS: ["example.com", "https://ssl.server.com", "hosting.com/bad_path", "https://server:8080/path", ".exact.hostname.com", "file://*", "custom_scheme:*", "*"]
 This policy is deprecated, please use the 'URLBlocklist' policy instead.

       Setting the policy prevents webpages with prohibited URLs from loading. It provides a list of URL patterns that specify forbidden URLs. Leaving the policy unset means no URLs are prohibited in the browser. Format the URL pattern according to this format ( https://www.chromium.org/administrators/url-blocklist-filter-format ). Up to 1,000 exceptions can be defined in URLAllowlist.

       From Google Chrome version 73, you can block javascript://* URLs. However, it affects only JavaScript entered in the address bar (or, for example, bookmarklets). In-page JavaScript URLs with dynamically loaded data aren't subject to this policy. For example, if you block example.com/abc, then example.com can still load example.com/abc using XMLHTTPRequest.

       Note: Blocking internal chrome://* URLs can lead to unexpected errors.

  arc_support: Android apps may voluntarily choose to honor this list. You cannot force
    them to honor it.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:15-
  tags:
  - filtering
  type: list

** URLWhitelist (DEPRECATED) — Allow access to a list of URLs
SYNOPSIS: ["example.com", "https://ssl.server.com", "hosting.com/good_path", "https://server:8080/path", ".exact.hostname.com"]
 This policy is deprecated, please use the 'URLAllowlist' policy instead.

       Setting the policy provides access to the listed URLs, as exceptions to the URL blocklist. See that policy's description for the format of entries of this list. For example, setting URLBlocklist to * will block all requests, and you can use this policy to allow access to a limited list of URLs. Use it to open exceptions to certain schemes, subdomains of other domains, ports, or specific paths, using the format specified at ( https://www.chromium.org/administrators/url-blocklist-filter-format ). The most specific filter determines if a URL is blocked or allowed. The allowlist takes precedence over blocklist. This policy is limited to 1,000 entries.

       This policy also allows enabling the automatic invocation by the browser of external application registered as protocol handlers for the listed protocols like "tel:" or "ssh:".

       Leaving the policy unset allows no exceptions.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  arc_support: Android apps may voluntarily choose to honor this list. You cannot force
    them to honor it.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:15-
  type: list

** URLBlocklist — Block access to a list of URLs
SYNOPSIS: ["example.com", "https://ssl.server.com", "hosting.com/bad_path", "https://server:8080/path", ".exact.hostname.com", "file://*", "custom_scheme:*", "*"]
 Setting the policy prevents webpages with prohibited URLs from loading. It provides a list of URL patterns that specify forbidden URLs. Leaving the policy unset means no URLs are prohibited in the browser. Format the URL pattern according to this format ( https://www.chromium.org/administrators/url-blocklist-filter-format ). Up to 1,000 exceptions can be defined in URLAllowlist.

       From Google Chrome version 73, you can block javascript://* URLs. However, it affects only JavaScript entered in the address bar (or, for example, bookmarklets). In-page JavaScript URLs with dynamically loaded data aren't subject to this policy. For example, if you block example.com/abc, then example.com can still load example.com/abc using XMLHTTPRequest.

       From Google Chrome version 92, this policy is also supported in the headless mode.

       Note: Blocking internal chrome://* URLs can lead to unexpected errors.

  arc_support: Android apps may voluntarily choose to honor this list. You cannot force
    them to honor it.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  tags:
  - filtering
  type: list

** URLAllowlist — Allow access to a list of URLs
SYNOPSIS: ["example.com", "https://ssl.server.com", "hosting.com/good_path", "https://server:8080/path", ".exact.hostname.com"]
 Setting the policy provides access to the listed URLs, as exceptions to URLBlocklist. See that policy's description for the format of entries of this list. For example, setting URLBlocklist to * will block all requests, and you can use this policy to allow access to a limited list of URLs. Use it to open exceptions to certain schemes, subdomains of other domains, ports, or specific paths, using the format specified at ( https://www.chromium.org/administrators/url-blocklist-filter-format ). The most specific filter determines if a URL is blocked or allowed. The URLAllowlist policy takes precedence over URLBlocklist. This policy is limited to 1,000 entries.

       This policy also allows enabling the automatic invocation by the browser of external application registered as protocol handlers for the listed protocols like "tel:" or "ssh:".

       Leaving the policy unset allows no exceptions to URLBlocklist.

       From Google Chrome version 92, this policy is also supported in the headless mode.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  arc_support: Android apps may voluntarily choose to honor this list. You cannot force
    them to honor it.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** PolicyAtomicGroupsEnabled — Enables the concept of policy atomic groups
SYNOPSIS: true
 Setting the policy to Enabled means policies coming from an atomic group that don't share the source with the highest priority from that group get ignored.

       Setting the policy to Disabled means no policy is ignored because of its source. Policies are ignored only if there's a conflict, and the policy doesn't have the highest priority.

       If this policy is set from a cloud source, it can't target a specific user.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:78-
  type: main

** PolicyListMultipleSourceMergeList — Allow merging list policies from different sources
SYNOPSIS: ["ExtensionInstallAllowlist", "ExtensionInstallBlocklist"]
 Setting the policy allows merging of selected policies when they come from different sources, with the same scopes and level.

       If a policy is in the list and there's conflict between sources with:

       * The same scopes and level: The values merge into a new policy list.

       * Different scopes or level: The policy with the highest priority applies.

       If a policy isn't in the list and there's conflict between sources, scopes, or level, the policy with the highest priority applies.

  features:
    dynamic_refresh: true
    metapolicy_type: merge
    per_profile: true
  label: Allow merging list policies from different sources
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:75-
  type: list

** PolicyDictionaryMultipleSourceMergeList — Allow merging dictionary policies from different sources
SYNOPSIS: ["ExtensionSettings"]
 Setting the policy allows merging of selected policies when they come from different sources, with the same scopes and level. This merging is in the first level keys of the dictionary from each source. The key coming from the highest priority source takes precedence.

       If a policy is in the list and there's conflict between sources with:

       * The same scopes and level: The values merge into a new policy dictionary.

       * Different scopes or level: The policy with the highest priority applies.

       If a policy isn't in the list and there's conflict between sources, scopes, or level, the policy with the highest priority applies.

  features:
    dynamic_refresh: true
    metapolicy_type: merge
    per_profile: true
  items:
  - caption: Managed user manual exception URLs
    name: ContentPackManualBehaviorURLs
    value: ContentPackManualBehaviorURLs
  - caption: Power management on the login screen
    name: DeviceLoginScreenPowerManagement
    value: DeviceLoginScreenPowerManagement
  - caption: Extension management settings
    name: ExtensionSettings
    value: ExtensionSettings
  - caption: Key Permissions
    name: KeyPermissions
    value: KeyPermissions
  - caption: Power management settings when the user becomes idle
    name: PowerManagementIdleSettings
    value: PowerManagementIdleSettings
  - caption: Screen brightness percent
    name: ScreenBrightnessPercent
    value: ScreenBrightnessPercent
  - caption: Screen lock delays
    name: ScreenLockDelays
    value: ScreenLockDelays
  label: Allow merging dictionary policies from different sources
  schema:
    items:
      enum:
      - ContentPackManualBehaviorURLs
      - ExtensionSettings
      - DeviceLoginScreenPowerManagement
      - KeyPermissions
      - PowerManagementIdleSettings
      - ScreenBrightnessPercent
      - ScreenLockDelays
      type: string
    type: array
  supported_on:
  - chrome.*:76-
  type: string-enum-list

** CloudUserPolicyMerge — Enables merging of user cloud policies into machine-level policies
SYNOPSIS: true
 Setting the policy to Enabled allows policies associated with a Google Workspace account to be merged into machine-level policies.

       Only policies originating from secure users can be merged. A secure user is affiliated with the organization that manages their browser using Chrome Browser Cloud Management. All other user-level policies will always be ignored.

       Policies that need to be merged also need to be set in either PolicyListMultipleSourceMergeList or PolicyDictionaryMultipleSourceMergeList. This policy will be ignored if neither of the two aforementioned policies is configured.

       Leaving the policy unset or setting it to Disabled prevents user-level cloud policies from being merged with policies from any other sources.

  default: false
  features:
    dynamic_refresh: true
    metapolicy_type: merge
    per_profile: true
  items:
  - caption: Enable merging of user-level cloud policies.
    value: true
  - caption: Disable merging of user-level cloud policies.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:92-
  type: main

** EnableExperimentalPolicies — Enables experimental policies
SYNOPSIS: ["ExtensionInstallAllowlist", "ExtensionInstallBlocklist"]
 Allows Google Chrome to load experimental policies.

         WARNING: Experimental policies are unsupported and subject to change or be removed without notice in future version of the browser!

         An experimental policy may not be finished or still have known or unknown defects. It may be changed or even removed without any notification. By enabling experimental policies, you could lose browser data or compromise your security or privacy.

         If a policy is not in the list and it's not officially released, its value will be ignored on Beta and Stable channel.

         If a policy is in the list and it's not officially released, its value will be applied.

         This policy has no effect on already released policies.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:85-
  type: list

** EnterpriseWebStoreURL (DEPRECATED) — Enterprise web store URL (deprecated)
SYNOPSIS: "https://company-intranet/chromeapps"
 This setting has been retired as of Google Chrome version 29. The recommended way to set up organization-hosted extension/app collections is to include the site hosting the CRX packages in ExtensionInstallSources and put direct download links to the packages on a web page. A launcher for that web page can be created using the ExtensionInstallForcelist policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:17-28
  type: string

** EnterpriseWebStoreName (DEPRECATED) — Enterprise web store name (deprecated)
SYNOPSIS: "WidgCo Chrome Apps"
 This setting has been retired as of Google Chrome version 29. The recommended way to set up organization-hosted extension/app collections is to include the site hosting the CRX packages in ExtensionInstallSources and put direct download links to the packages on a web page. A launcher for that web page can be created using the ExtensionInstallForcelist policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:17-28
  type: string

** DisableSSLRecordSplitting (DEPRECATED) — Disable TLS False Start
SYNOPSIS: true
 Specifies whether the TLS False Start optimization should be disabled. For historical reasons, this policy is named DisableSSLRecordSplitting.

       If the policy is not set, or is set to false, then TLS False Start will be enabled. If it is set to true, TLS False Start will be disabled.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:18-46
  type: main

** EnableOnlineRevocationChecks — Enable online OCSP/CRL checks
SYNOPSIS: false
 Setting the policy to True means online OCSP/CRL checks are performed.

       Setting the policy to False or leaving it unset means Google Chrome won't perform online revocation checks in Google Chrome 19 and later.

       Note: OCSP/CRL checks provide no effective security benefit.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:19-
  tags:
  - website-sharing
  type: main

** RequireOnlineRevocationChecksForLocalAnchors — Require online OCSP/CRL checks for local trust anchors
SYNOPSIS: false
 Setting the policy to True means Google Chrome always performs revocation checking for successfully validated server certificates signed by locally installed CA certificates. If Google Chrome can't get revocation status information, Google Chrome treats these certificates as revoked (hard-fail).

       Setting the policy to False or leaving it unset means Google Chrome uses existing online revocation-checking settings.

  default: false
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Perform revocation checks for successfully validated server certificates
      signed by locally installed CA certificates
    value: true
  - caption: Use existing online revocation-checking settings
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:30-
  type: main

** EnableSha1ForLocalAnchors (DEPRECATED) — Allow SHA-1 signed certificates issued by local trust anchors
SYNOPSIS: false
 When this setting is enabled, Google Chrome allows SHA-1 signed certificates as long as they successfully validate and chain to a locally-installed CA certificates.

       Note that this policy depends on the operating system certificate verification stack allowing SHA-1 signatures. If an OS update changes the OS handling of SHA-1 certificates, this policy may no longer have effect.  Further, this policy is intended as a temporary workaround to give enterprises more time to move away from SHA-1.  This policy will be removed on or around January 1st 2019.

       If this policy is not set, or it is set to false, then Google Chrome follows the publicly announced SHA-1 deprecation schedule.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:54-71
  tags:
  - system-security
  type: main

** EnableCommonNameFallbackForLocalAnchors (DEPRECATED) — Allow certificates issued by local trust anchors without subjectAlternativeName extension
SYNOPSIS: false
 When this setting is enabled, Google Chrome will use the commonName of a server certificate to match a hostname if the certificate is missing a subjectAlternativeName extension, as long as it successfully validates and chains to a locally-installed CA certificates.

       Note that this is not recommended, as this may allow bypassing the nameConstraints extension that restricts the hostnames that a given certificate can be authorized for.

       If this policy is not set, or is set to false, server certificates that lack a subjectAlternativeName extension containing either a DNS name or IP address will not be trusted.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:58-65
  tags:
  - system-security
  type: main

** EnableSymantecLegacyInfrastructure (DEPRECATED) — Enable trust in Symantec Corporation's Legacy PKI Infrastructure
SYNOPSIS: false
 When this setting is enabled, Google Chrome allows certificates issued by Symantec Corporation's Legacy PKI operations to be trusted if they otherwise successfully validate and chain to a recognized CA certificate.

       Note that this policy depends on the operating system still recognizing certificates from Symantec's legacy infrastructure. If an OS update changes the OS handling of such certificates, this policy no longer has effect.  Further, this policy is intended as a temporary workaround to give enterprises more time to transition away from legacy Symantec certificates.  This policy will be removed on or around January 1st 2019.

       If this policy is not set, or it is set to false, then Google Chrome follows the publicly announced deprecation schedule.

       See https://g.co/chrome/symantecpkicerts for more details on this deprecation.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:66-75
  tags:
  - system-security
  type: main

** BuiltinCertificateVerifierEnabled — Determines whether the built-in certificate verifier will be used to verify server certificates
SYNOPSIS: false
 When this setting is enabled, Google Chrome will perform verification of server certificates using the built-in certificate verifier.
       When this setting is disabled, Google Chrome will perform verification of server certificates using the legacy certificate verifier provided by the platform.
       When this setting is not set, the built-in or the legacy certificate verifier may be used.

       This policy is planned to be removed in Google Chrome OS version 81, when support for the legacy certificate verifier on Google Chrome OS is planned to be removed.

       This policy is planned to be removed in Google Chrome for Linux version 83, when support for the legacy certificate verifier on Linux is planned to be removed.

       This policy is planned to be removed in Google Chrome for Mac OS X version 92, when support for the legacy certificate verifier on Mac OS X is planned to be removed.
      

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:79-83
  type: main

** ForceEphemeralProfiles — Ephemeral profile
SYNOPSIS: true
 If set to enabled this policy forces the profile to be switched to ephemeral mode. If this policy is specified as an OS policy (e.g. GPO on Windows) it will apply to every profile on the system; if the policy is set as a Cloud policy it will apply only to a profile signed in with a managed account.

       In this mode the profile data is persisted on disk only for the length of the user session. Features like browser history, extensions and their data, web data like cookies and web databases are not preserved after the browser is closed. However this does not prevent the user from downloading any data to disk manually, save pages or print them.

       If the user has enabled sync all this data is preserved in their sync profile just like with regular profiles. Incognito mode is also available if not explicitly disabled by policy.

       If the policy is set to disabled or left not set signing in leads to regular profiles.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:32-
  type: main

** SamlLockScreenOfflineSigninTimeLimitDays — Limit the time for which a user authenticated via SAML can log in offline at the lock screen
SYNOPSIS: 32
 While logging in through the lock screen, Google Chrome OS can authenticate against a server (online) or using a cached password (offline).

       When this policy is set to -2, it will match the value of the login screen offline signin time limit which comes from SAMLOfflineSigninTimeLimit.

       When the policy is unset or set to a value of -1, it will not enforce online authentication on the lock screen and will allow the user to use offline authentication unless a different reason than this policy enforces an online authentication.

       If the policy is set to a value of 0, online authentication will always be required.

       When this policy is set to any other value, it specifies the number of days since the last online authentication after which the user must use online authentication again in the next login through the lock screen.

       This policy affects users who authenticated using SAML.

       The policy value should be specified in days.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    maximum: 365
    minimum: -2
    type: integer
  supported_on:
  - chrome_os:92-
  type: int

** ReportCrostiniUsageEnabled — Report information about usage of Linux apps
SYNOPSIS: false
 If Linux app support is on, setting the policy to Enabled sends information about Linux apps usage back to the server.

       Setting the policy to Disabled or leaving it unset means no usage information is reported.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:70-
  tags:
  - admin-sharing
  type: main

** DeviceStartUpUrls (DEPRECATED) — Load specified urls on demo login
SYNOPSIS: ["https://google.com", "chrome-extension://aaaaaaaaaaaaaaaaaaaaaaaa/"]
 This policy is active in retail mode only.

       Determines the set of URLs to be loaded when the demo session is started. This policy will override any other mechanisms for setting the initial URL and thus can only be applied to a session not associated with a particular user.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:19-40
  type: list

** DeviceIdleLogoutWarningDuration (DEPRECATED) — Duration of the idle log-out warning message
SYNOPSIS: 15000
 This policy is active in retail mode only.

       When DeviceIdleLogoutTimeout is specified this policy defines the duration of the warning box with a count down timer that is shown to the user before the logout is executed.

       The policy value should be specified in milliseconds.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: integer
  supported_on:
  - chrome_os:19-40
  type: int

** DeviceLoginScreenSaverTimeout (DEPRECATED) — Duration of inactivity before the screen saver is shown on the sign-in screen in retail mode
SYNOPSIS: 120000
 This policy is active in retail mode only.

       Determines the duration before the screen saver is shown on the sign-in screen for devices in retail mode.

       The policy value should be specified in milliseconds.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    type: integer
  supported_on:
  - chrome_os:19-40
  type: int

** KioskCRXManifestUpdateURLIgnored — Use only policy-provided update URL when downloading and updating Kiosk Chrome apps
SYNOPSIS: true
 Setting the policy will disable in-session Kiosk Chrome apps update (which uses update URL from the extension manifest) and leaves only CRX pre-fetching as the update mechanism.

  default: false
  device_only: true
  features:
    cloud_only: true
    dynamic_refresh: true
    unlisted: true
  items:
  - caption: 'New behaviour: Kiosk Chrome Apps will be only updated using update URL
      from the policy'
    value: true
  - caption: 'Legacy behavior: Kiosk Chrome Apps will be updated by the extension system
      using update URL from the extension manifest, as well as by caching manager using
      update URL from the policy'
    value: false
  schema:
    type: boolean
  type: main

** ManagedGuestSessionPrivacyWarningsEnabled — Reduce Managed-guest session auto-launch notifications
SYNOPSIS: false
  Controls the privacy warning of the managed-guest session on Google Chrome OS.

       If this policy is set to False, the privacy warnings on the login screen and the auto-launch notification inside the managed-guest session will get deactivated.

       This policy should not be used for devices used by the general public.

       If the policy is set to True or not set, the privacy warning notification in the auto-launched managed-guest session will be pinned until the user dismisses it.

  device_only: true
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - 'chrome_os: 84-'
  type: main

** BackgroundModeEnabled — Continue running background apps when Google Chrome is closed
SYNOPSIS: true
 Setting the policy to Enabled turns background mode on. In background mode, a Google Chrome process is started on OS sign-in and keeps running when the last browser window is closed, allowing background apps and the browsing session to remain active. The background process displays an icon in the system tray and can always be closed from there.

       Setting the policy to Disabled turns background mode off.

       If you set the policy, users can't change it in the browser settings. If unset, background mode is off at first, but users can change it.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:19-
  tags:
  - system-security
  type: main

** RestrictSigninToPattern — Restrict which Google accounts are allowed to be set as browser primary accounts in Google Chrome
SYNOPSIS: ".*@example\\.com"
 Contains a regular expression which is used to determine which Google accounts can be set as browser primary accounts in Google Chrome (i.e. the account that is chosen during the Sync opt-in flow).

       An appropriate error is displayed if a user tries to set a browser primary account with a username that does not match this pattern.

       If this policy is left not set or blank, then the user can set any Google account as a browser primary account in Google Chrome.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:21-
  type: string

** DisableSafeBrowsingProceedAnyway — Disable proceeding from the Safe Browsing warning page
SYNOPSIS: true
 Setting the policy to Enabled prevents users from proceeding past the warning page the Safe Browsing service shows to the malicious site. This policy only prevents users from proceeding on Safe Browsing warnings such as malware and phishing, not for SSL certificate-related issues such as invalid or expired certificates.

       Setting the policy to Disabled or leaving it unset means users can choose to proceed to the flagged site after the warning appears.

       See more about Safe Browsing ( https://developers.google.com/safe-browsing ).

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:22-
  type: main

** SafeBrowsingExtendedReportingOptInAllowed (DEPRECATED) — Allow users to opt in to Safe Browsing extended reporting
SYNOPSIS: true
 This policy is deprecated in M82 and removed in M85, use SafeBrowsingExtendedReportingEnabled instead. Disabling SafeBrowsingExtendedReportingOptInAllowed is equivalent to disabling SafeBrowsingExtendedReportingEnabled. Enabling SafeBrowsingExtendedReportingOptInAllowed or leaving this setting unset is equivalent to leaving SafeBrowsingExtendedReportingEnabled unset.

       Setting this policy to false stops users from choosing to send some system information and page content to Google servers. If this setting is true or not configured, then users will be allowed to send some system information and page content to Safe Browsing to help detect dangerous apps and sites.

       See https://developers.google.com/safe-browsing for more info on Safe Browsing.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:44-84
  type: main

** SpellCheckServiceEnabled — Enable or disable spell checking web service
SYNOPSIS: false
 Setting the policy to Enabled puts a Google web service in use to help resolve spelling errors. This policy only controls the use of the online service. Setting the policy to Disabled means this service is never used.

       Leaving the policy unset lets users choose whether to use the spellcheck service.

       The spell check can always use a downloaded dictionary locally unless the feature is disabled by SpellcheckEnabled in which case this policy will have no effect.

  default: null
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Use a Google web service to help resolve spelling errors
    value: true
  - caption: Do not use any Google web services to help resolve spelling errors
    value: false
  - caption: Allow the user to choose if Google web services are used to resolve spelling
      errors
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:22-
  type: main

** ExternalStorageReadOnly — Treat external storage devices as read-only
SYNOPSIS: true
 Setting the policy to True prevents users from writing to external storage devices.

       Unless external storage is blocked, if you set ExternalStorageReadOnly to False or leave it unset, users can create and modify files of physically writable, external storage devices. (You can block external storage by setting ExternalStorageDisable to True.)

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:54-
  type: main

** AudioCaptureAllowed — Allow or deny audio capture
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset means that, with the exception of URLs set in the AudioCaptureAllowedUrls list, users get prompted for audio capture access.

       Setting the policy to Disabled turns off prompts, and audio capture is only available to URLs set in the AudioCaptureAllowedUrls list.

       Note: The policy affects all audio input (not just the built-in microphone).

  arc_support: For Android apps, this policy affects the microphone only. When this
    policy is set to true, the microphone is muted for all Android apps, with no exceptions.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:25-
  - chrome_os:23-
  type: main

** AudioCaptureAllowedUrls — URLs that will be granted access to audio capture devices without prompt
SYNOPSIS: ["https://www.example.com/", "https://[*.]example.edu/"]
 Setting the policy means you specify the URL list whose patterns get matched to the security origin of the requesting URL. A match grants access to audio capture devices without prompt

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:29-
  tags:
  - website-sharing
  type: list

** VideoCaptureAllowed — Allow or deny video capture
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset means that, with the exception of URLs set in the VideoCaptureAllowedUrls list, users get prompted for video capture access.

       Setting the policy to Disabled turns off prompts, and video capture is only available to URLs set in the VideoCaptureAllowedUrls list.

       Note: The policy affects all video input (not just the built-in camera).

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:25-
  type: main

** VideoCaptureAllowedUrls — URLs that will be granted access to video capture devices without prompt
SYNOPSIS: ["https://www.example.com/", "https://[*.]example.edu/"]
 Setting the policy means you specify the URL list whose patterns get matched to the security origin of the requesting URL. A match grants access to video capture devices without prompt

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:29-
  tags:
  - website-sharing
  type: list

** DisableScreenshots — Disable taking screenshots
SYNOPSIS: true
 Setting the policy to True disallows screenshots taken with keyboard shortcuts or extension APIs. Setting the policy to False allows screenshots.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:22-
  type: main

** ShowLogoutButtonInTray — Add a logout button to the system tray
SYNOPSIS: true
 Setting the policy to True displays a big, red sign-out button in the system tray during active sessions while the screen isn't locked.

       Setting the policy to False or leaving it unset means no button appears.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:25-
  type: main

** BuiltInDnsClientEnabled — Use built-in DNS client
SYNOPSIS: true
 This policy controls which software stack is used to communicate with the DNS server: the Operating System DNS client, or Google Chrome's built-in DNS client. This policy does not affect which DNS servers are used: if, for example, the operating system is configured to use an enterprise DNS server, that same server would be used by the built-in DNS client. It also does not control if DNS-over-HTTPS is used; Google Chrome will always use the built-in resolver for DNS-over-HTTPS requests. Please see the DnsOverHttpsMode policy for information on controlling DNS-over-HTTPS.

       If this policy is set to Enabled, the built-in DNS client will be used, if available.

       If this policy is set to Disabled, the built-in DNS client will only be used when DNS-over-HTTPS is in use.

       If this policy is left unset, the built-in DNS client will be enabled by default on macOS, Android (when neither Private DNS nor VPN are enabled) and Google Chrome OS.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:25-
  type: main

** DnsOverHttpsMode — Controls the mode of DNS-over-HTTPS
SYNOPSIS: "off"
 Controls the mode of the DNS-over-HTTPS resolver. Please note that this policy will only set the default mode for each query. The mode may be overridden for special types of queries such as requests to resolve a DNS-over-HTTPS server hostname.

       The "off" mode will disable DNS-over-HTTPS.

       The "automatic" mode will send DNS-over-HTTPS queries first if a DNS-over-HTTPS server is available and may fallback to sending insecure queries on error.

       The "secure" mode will only send DNS-over-HTTPS queries and will fail to resolve on error.

       On Android Pie and above, if DNS-over-TLS is active, Google Chrome will not send insecure DNS requests.

       If this policy is unset the browser may send DNS-over-HTTPS requests to a resolver associated with the user's configured system resolver.

  default_for_enterprise_users: 'off'
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Disable DNS-over-HTTPS
    name: 'off'
    value: 'off'
  - caption: Enable DNS-over-HTTPS with insecure fallback
    name: automatic
    value: automatic
  - caption: Enable DNS-over-HTTPS without insecure fallback
    name: secure
    value: secure
  schema:
    enum:
    - 'off'
    - automatic
    - secure
    type: string
  supported_on:
  - chrome.*:78-
  type: string-enum

** DnsOverHttpsTemplates — Specify URI template of desired DNS-over-HTTPS resolver
SYNOPSIS: "https://dns.example.net/dns-query{?dns}"
 The URI template of the desired DNS-over-HTTPS resolver. To specify multiple DNS-over-HTTPS resolvers, separate the corresponding URI templates with spaces.

       If the DnsOverHttpsMode is set to "secure" then this policy must be set and not empty.

       If the DnsOverHttpsMode is set to "automatic" and this policy is set then the URI templates specified will be used; if this policy is unset then hardcoded mappings will be used to attempt to upgrade the user's current DNS resolver to a DoH resolver operated by the same provider.

       If the URI template contains a dns variable, requests to the resolver will use GET; otherwise requests will use POST.

       Incorrectly formatted templates will be ignored.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:80-
  type: string

** AdditionalDnsQueryTypesEnabled — Allow DNS queries for additional DNS record types
SYNOPSIS: true
 This policy controls whether Google Chrome may query additional DNS record types when making insecure DNS requests. This policy has no effect on DNS queries made via Secure DNS, which may always query additional DNS types.

       If this policy is unset or set to Enabled, additional types such as HTTPS (DNS type 65) may be queried in addition to A (DNS type 1) and AAAA (DNS type 28).

       If this policy is set to Disabled, DNS will only be queried for A (DNS type 1) and/or AAAA (DNS type 28).

       This policy is a temporary measure and will be removed in future versions of Google Chrome. After removal of the policy, Google Chrome will always be able to query additional DNS types.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Allow additional DNS query types
    value: true
  - caption: Prevent additional DNS query types
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:92-
  type: main

** ShelfAlignment — Control the shelf position
SYNOPSIS: "Bottom"
 Control the position of the Google Chrome OS shelf.

       If this policy is set to 'Bottom', the shelf will be placed at the bottom of the screen.

       If this policy is set to 'Left', the shelf will be placed on the left side of the screen.

       If this policy is set to 'Right', the shelf will be placed on the right side of the screen.

       If you set this policy as mandatory, users cannot change or override it.

       If the policy is left not set, the shelf will be be positioned at the bottom of the screen by default and the user can change the shelf's position.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Position the shelf on the left side of the screen
    name: Left
    value: Left
  - caption: Position the shelf at the bottom of the screen
    name: Bottom
    value: Bottom
  - caption: Position the shelf on the right side of the screen
    name: Right
    value: Right
  schema:
    enum:
    - Left
    - Bottom
    - Right
    type: string
  supported_on:
  - chrome_os:79-
  type: string-enum

** SystemFeaturesDisableMode — Set the user experience of disabled features
SYNOPSIS: "blocked"
 Controls the user experience of disabled features listed in SystemFeaturesDisableList.

       If this policy is set to "blocked", the disabled features will become unusable but still visible to users.

       If this policy is set to "hidden", the disabled features will become unusable and invisible to users.

       If this policy is left unset or has an invalid value, the disable mode of system features will be "blocked".

  default: blocked
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Block the disabled features
    name: blocked
    value: blocked
  - caption: Hide and block the disabled features
    name: hidden
    value: hidden
  schema:
    enum:
    - blocked
    - hidden
    type: string
  supported_on:
  - chrome_os:91-
  type: string-enum

** UserDisplayName — Set the display name for device-local accounts
SYNOPSIS: "Policy User"
 Controls the account name Google Chrome OS shows on the login screen for the corresponding device-local account.

       If this policy is set, the login screen will use the specified string in the picture-based login chooser for the corresponding device-local account.

       If the policy is left not set, Google Chrome OS will use the device-local account's email account ID as the display name on the login screen.

       This policy is ignored for regular user accounts.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome_os:25-
  type: string

** FullscreenAllowed — Allow fullscreen mode
SYNOPSIS: true
 Setting the policy to True or leaving it unset means that, with appropriate permissions, users, apps, and extensions can enter Fullscreen mode (in which only web content appears).

       Setting the policy to False means users, apps, and extensions can't enter Fullscreen mode.

  arc_support: This policy has no effect on the Android apps. They will be able to enter
    fullscreen mode even if this policy is set to False.
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.win:31-
  - chrome.linux:31-
  - chrome_os:31-
  type: main

** TermsOfServiceURL — Set the Terms of Service for a device-local account
SYNOPSIS: "https://www.example.com/terms_of_service.txt"
 Setting the policy means Google Chrome OS downloads the Terms of Service and presents them to users whenever a device-local account session starts. Users can only sign in to the session after accepting the Terms of Service.

       Leaving the policy unset means no Terms of Service appear.

       The policy should be set to a URL from which Google Chrome OS can download the Terms of Service. The Terms of Service must be plain text, served as MIME type text/plain. No markup is allowed.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome_os:26-
  type: string

** PrimaryMouseButtonSwitch — Switch the primary mouse button to the right button
SYNOPSIS: true
 Switch the primary mouse button to the right button.

           If this policy is set to enabled, the right button of the mouse will always be the primary key.

           If this policy is set to disabled, the left button of the mouse will always be the primary key.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the left button of the mouse will be the primary key initially, but can be switched by the user anytime.

  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:81-
  type: main

** SharedClipboardEnabled — Enable the Shared Clipboard Feature
SYNOPSIS: true
 Enable the Shared Clipboard feature which allows users to send text between Chrome Desktops and an Android device when Sync is enabled and the user is Signed-in.

           If this policy is set to true, the capability of sending text, cross device, for chrome user is enabled.

           If this policy is set to false, the capability of sending text, cross device, for chrome user is disabled.

           If you set this policy, users cannot change or override it.

           If this policy is left unset, the shared clipboard feature is enabled by default.

           It is up to the admins to set policies in all platforms they care about. It's recommended to set this policy to one value in all platforms.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:79-
  - chrome_os:79-
  - android:79-
  type: main

** HideWebStoreIcon — Hide the web store from the New Tab Page and app launcher
SYNOPSIS: true
 Hide the Chrome Web Store app and footer link from the New Tab Page and Google Chrome OS app launcher.

       When this policy is set to true, the icons are hidden.

       When this policy is set to false or is not configured, the icons are visible.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:26-
  type: main

** VariationsRestrictParameter — Set the restriction on the fetching of the Variations seed
SYNOPSIS: "restricted"
 Add a parameter to the fetching of the Variations seed in Google Chrome.

       If specified, will add a query parameter called 'restrict' to the URL used to fetch the Variations seed. The value of the parameter will be the value specified in this policy.

       If not specified, will not modify the Variations seed URL.

  features:
    dynamic_refresh: false
    internal_only: true
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:27-
  - android:34-
  type: string

** ChromeVariations — Determine the availability of variations
SYNOPSIS: 1
 Configuring this policy allows to specify which variations are allowed to be applied in Google Chrome.

       Variations provide a means for offering modifications to Google Chrome without shipping a new version of the browser by selectively enabling or disabling already existing features. See https://support.google.com/chrome/a?p=Manage_the_Chrome_variations_framework for more information.

       Setting the VariationsEnabled (value 0), or leaving the policy not set allows all variations to be applied to the browser.

       Setting the CriticalFixesOnly (value 1), allows only variations considered critical security or stability fixes to be applied to Google Chrome.

       Setting the VariationsDisabled (value 2), prevent all variations from being applied to the browser. Please note that this mode can potentially prevent the Google Chrome developers from providing critical security fixes in a timely manner and is thus not recommended.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Enable all variations
    name: VariationsEnabled
    value: 0
  - caption: Enable variations concerning critical fixes only
    name: CriticalFixesOnly
    value: 1
  - caption: Disable all variations
    name: VariationsDisabled
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:83-
  - ios:88-
  type: int-enum

** SuppressChromeFrameTurndownPrompt (DEPRECATED) — Suppress the Google Chrome Frame turndown prompt
SYNOPSIS: true
 Suppresses the turndown prompt that appears when a site is rendered by Google Chrome Frame.

  features:
    dynamic_refresh: false
  schema:
    type: boolean
  supported_on:
  - chrome_frame:29-32
  type: main

** ManagedBookmarks — Managed Bookmarks
SYNOPSIS: [{"toplevel_name": "My managed bookmarks folder"}, {"name": "Google", "url": "google.com"}, {"name": "Youtube", "url": "youtube.com"}, {"name": "Chrome links", "children": [{"name": "Chromium", "url": "chromium.org"}, {"name": "Chromium Developers", "url": "dev.chromium.org"}]}]
 Setting the policy sets up a list of bookmarks where each one is a dictionary with the keys "name" and "url". These keys hold the bookmark's name and target. Admins can set up a subfolder by defining a bookmark without a "url" key, but with an additional "children" key. This key also has a list of bookmarks, some of which can also be folders. Chrome amends incomplete URLs as if they were submitted through the address bar. For example, "google.com" becomes "https://google.com/".

       Users can't change the folders the bookmarks are placed in (though they can hide it from the bookmark bar). The default folder name for managed bookmarks is "Managed bookmarks" but it can be changed by adding a new sub-dictionary to the policy with a single key named "toplevel_name" with the desired folder name as its value. Managed bookmarks are not synced to the user account and extensions can't modify them.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      id: BookmarkType
      properties:
        children:
          items:
            $ref: BookmarkType
          type: array
        name:
          type: string
        toplevel_name:
          type: string
        url:
          type: string
      type: object
    type: array
  supported_on:
  - android:30-
  - chrome.*:37-
  - chrome_os:37-
  - ios:88-
  type: dict

** UserAvatarImage — User avatar image
SYNOPSIS: {"url": "https://example.com/avatar.jpg", "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"}
 This policy allows you to configure the avatar image representing the user on the login screen. The policy is set by specifying the URL from which Google Chrome OS can download the avatar image and a cryptographic hash used to verify the integrity of the download. The image must be in JPEG format, its size must not exceed 512kB. The URL must be accessible without any authentication.

       The avatar image is downloaded and cached. It will be re-downloaded whenever the URL or the hash changes.

       If this policy is set, Google Chrome OS will download and use the avatar image.

       If you set this policy, users cannot change or override it.

       If the policy is left not set, the user can choose the avatar image representing them on the login screen.

  features:
    dynamic_refresh: true
    per_profile: true
  max_size: 524288
  schema:
    properties:
      hash:
        description: The SHA-256 hash of the avatar image.
        type: string
      url:
        description: The URL from which the avatar image can be downloaded.
        type: string
    type: object
  supported_on:
  - chrome_os:34-
  type: external

** EnableDeprecatedWebPlatformFeatures (DEPRECATED) — Enable deprecated web platform features for a limited time
SYNOPSIS: ["ExampleDeprecatedFeature_EffectiveUntil20080902"]
 Specify a list of deprecated web platform features to re-enable temporarily.

       This policy gives administrators the ability to re-enable deprecated web platform features for a limited time. Features are identified by a string tag and the features corresponding to the tags included in the list specified by this policy will get re-enabled.

       If this policy is left not set, or the list is empty or does not match one of the supported string tags, all deprecated web platform features will remain disabled.

       While the policy itself is supported on the above platforms, the feature it is enabling may be available on fewer platforms. Not all deprecated Web Platform features can be re-enabled. Only the ones explicitly listed below can be for a limited period of time, which is different per feature. The general format of the string tag will be [DeprecatedFeatureName]_EffectiveUntil[yyyymmdd]. As reference, you can find the intent behind the Web Platform feature changes at https://bit.ly/blinkintents.
      

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable ExampleDeprecatedFeature API through 2008/09/02
    name: ExampleDeprecatedFeature
    value: ExampleDeprecatedFeature_EffectiveUntil20080902
  schema:
    items:
      enum:
      - ExampleDeprecatedFeature_EffectiveUntil20080902
      type: string
    type: array
  supported_on:
  - chrome.*:37-87
  - chrome_os:37-87
  - android:37-87
  tags:
  - system-security
  type: string-enum-list

** EasyUnlockAllowed — Allow Smart Lock to be used
SYNOPSIS: true
 If you enable this setting, users will be allowed to use Smart Lock if the requirements for the feature are satisfied.

       If you disable this setting, users will not be allowed to use Smart Lock.

       If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:38-
  type: main

** BrowserGuestModeEnabled — Enable guest mode in browser
SYNOPSIS: true
 If this policy is set to true or not configured, Google Chrome will enable guest logins. Guest logins are Google Chrome profiles where all windows are in incognito mode.

       If this policy is set to false, Google Chrome will not allow guest profiles to be started.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:38-
  type: main

** BrowserGuestModeEnforced — Enforce browser guest mode
SYNOPSIS: true
 Setting the policy to Enabled means Google Chrome enforces guest sessions and prevents profile sign-ins. Guest sign-ins are Google Chrome profiles where windows are in Incognito mode.

       Setting the policy to Disabled, leaving it unset, or disabling browser Guest mode (through BrowserGuestModeEnabled) allows the use of new and existing profiles.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:77-
  type: main

** BrowserAddPersonEnabled — Enable add person in user manager
SYNOPSIS: true
 If this policy is set to true or not configured, Google Chrome will allow Add Person from the user manager.

       If this policy is set to false, Google Chrome will not allow creation of new profiles from the user manager.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:39-
  type: main

** BrowserSignin — Browser sign in settings
SYNOPSIS: 2
 This policy controls the sign-in behavior of the browser. It allows you to specify if the user can sign in to Google Chrome with their account and use account related services like Google Chrome Sync.

       If the policy is set to "Disable browser sign-in" then the user cannot sign in to the browser and use account-based services. In this case browser-level features like Google Chrome Sync cannot be used and will be unavailable. On iOS, if the user was signed in and the policy is set to "Disabled" they will be signed out immediately. On other platforms, they will be signed out the next time they run Google Chrome. On all platforms, their local profile data like bookmarks, passwords etc. will be preserved and still usable. The user will still be able to sign into and use Google web services like Gmail.

       If the policy is set to "Enable browser sign-in," then the user is allowed to sign in to the browser. On all platforms except iOS, the user is automatically signed in to the browser when signed in to Google web services like Gmail. Being signed in to the browser means the user's account information will be kept by the browser. However, it does not mean that Google Chrome Sync will be turned on by default; the user must separately opt-in to use this feature. Enabling this policy will prevent the user from turning off the setting that allows browser sign-in. To control the availability of Google Chrome Sync, use the SyncDisabled policy.

       If the policy is set to "Force browser sign-in" the user is presented with an account selection dialog and has to choose and sign in to an account to use the browser. This ensures that for managed accounts the policies associated with the account are applied and enforced. The default value of BrowserGuestModeEnabled will be set to disabled. Note that existing unsigned profiles will be locked and inaccessible after enabling this policy. For more information, see help center article: https://support.google.com/chrome/a/answer/7572556 . This option is not supported on Linux, Android or iOS. It will fall back to "Enable browser sign-in" if used.

       If this policy is not set then the user can decide if they want to enable browser sign-in in the Google Chrome settings and use it as they see fit.

  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Disable browser sign-in
    name: Disable
    value: 0
  - caption: Enable browser sign-in
    name: Enable
    value: 1
  - caption: Force users to sign-in to use the browser
    name: Force
    supported_on:
    - chrome.win:70-
    - chrome.mac:70-
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:70-
  - android:70-
  - ios:90-
  type: int-enum

** SSLVersionMin — Minimum SSL version enabled
SYNOPSIS: "tls1.2"
 Setting the policy to a valid value means Google Chrome won't use SSL/TLS versions less than the specified version. Unrecognized values are ignored.

       If this policy is not set, then Google Chrome will show an error for TLS 1.0 and TLS 1.1, but the user will be able to bypass it.

       If this policy is set to "tls1.2", the user will not be able to bypass this error.

       Support for setting this policy to "tls1" or "tls1.1" was removed in version 91. Suppressing the TLS 1.0/1.1 warning is no longer supported.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: TLS 1.0
    name: TLSv1
    supported_on:
    - chrome.*:66-90
    - chrome_os:66-90
    - android:66-90
    value: tls1
  - caption: TLS 1.1
    name: TLSv1.1
    supported_on:
    - chrome.*:66-90
    - chrome_os:66-90
    - android:66-90
    value: tls1.1
  - caption: TLS 1.2
    name: TLSv1.2
    value: tls1.2
  schema:
    enum:
    - tls1
    - tls1.1
    - tls1.2
    type: string
  supported_on:
  - chrome.*:66-
  type: string-enum

** SSLVersionFallbackMin (DEPRECATED) — Minimum TLS version to fallback to
SYNOPSIS: "tls1.1"
 Warning: The TLS version fallback will be removed from Google Chrome after version 52 (around September 2016) and this policy will stop working then.

       When a TLS handshake fails, Google Chrome would previously retry the connection with a lesser version of TLS in order to work around bugs in HTTPS servers. This setting configures the version at which this fallback process will stop. If a server performs version negotiation correctly (i.e. without breaking the connection) then this setting doesn't apply. Regardless, the resulting connection must still comply with SSLVersionMin.

       If this policy is not configured or if it is set to "tls1.2" then Google Chrome no longer performs this fallback. Note this does not disable support for older TLS versions, only whether Google Chrome will work around buggy servers which cannot negotiate versions correctly.

       Otherwise, if compatibility with a buggy server must be maintained, this policy may be set to "tls1.1". This is a stopgap measure and the server should be rapidly fixed.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: TLS 1.1
    name: TLSv1.1
    value: tls1.1
  - caption: TLS 1.2
    name: TLSv1.2
    value: tls1.2
  schema:
    enum:
    - tls1.1
    - tls1.2
    type: string
  supported_on:
  - chrome.*:50-52
  tags:
  - system-security
  type: string-enum

** SSLVersionMax (DEPRECATED) — Maximum SSL version enabled
SYNOPSIS: "tls1.2"
 Warning: The max TLS version policy will be entirely removed from Google Chrome around version 75 (around June 2019).

       If this policy is not configured then Google Chrome uses the default maximum version.

       Otherwise it may be set to one of the following values: "tls1.2" or "tls1.3". When set, Google Chrome will not use SSL/TLS versions greater than the specified version. An unrecognized value will be ignored.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: TLS 1.2
    name: TLSv1.2
    value: tls1.2
  - caption: TLS 1.3
    name: TLSv1.3
    value: tls1.3
  schema:
    enum:
    - tls1.2
    - tls1.3
    type: string
  supported_on:
  - chrome.*:58-74
  tags:
  - system-security
  type: string-enum

** CECPQ2Enabled — CECPQ2 post-quantum key-agreement enabled for TLS
SYNOPSIS: true
 If this policy is not configured, or is set to enabled, then Google Chrome will follow the default rollout process for CECPQ2, a post-quantum key-agreement algorithm in TLS.

       CECPQ2 results in larger TLS messages which, in very rare cases, can trigger bugs in some networking hardware. This policy can be set to False to disable CECPQ2 while networking issues are resolved.

       This policy is a temporary measure and will be removed in future versions of Google Chrome.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Enable default CECPQ2 rollout process
    value: true
  - caption: Disable CECPQ2
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:91-
  tags:
  - system-security
  type: main

** CertificateTransparencyEnforcementDisabledForUrls — Disable Certificate Transparency enforcement for a list of URLs
SYNOPSIS: ["example.com", ".example.com"]
 Setting the policy turns off Certificate Transparency disclosure requirements for the hostnames in the specified URLs. While making it harder to detect misissued certificates, hosts can keep using certificates that otherwise wouldn't be trusted (because they weren't properly publicly disclosed).

       Leaving the policy unset means that if certificates requiring disclosure through Certificate Transparency aren't disclosed, then Google Chrome doesn't trust those certificates.

       A URL pattern follows this format ( https://www.chromium.org/administrators/url-blocklist-filter-format ). However, because the validity of certificates for a given hostname is independent of the scheme, port, or path, Google Chrome only considers the hostname portion of the URL. Wildcard hosts aren't supported.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:53-
  tags:
  - system-security
  type: list

** CertificateTransparencyEnforcementDisabledForCas — Disable Certificate Transparency enforcement for a list of subjectPublicKeyInfo hashes
SYNOPSIS: ["sha256/AAAAAAAAAAAAAAAAAAAAAA==", "sha256//////////////////////w=="]
 Setting the policy turns off enforcement of Certificate Transparency disclosure requirements for a list of subjectPublicKeyInfo hashes. Enterprise hosts can keep using certificates that otherwise wouldn't be trusted (because they weren't properly publicly disclosed). To turn off enforcement, the hash must meet one of these conditions:

       * It's of the server certificate's subjectPublicKeyInfo.

       * It's of a subjectPublicKeyInfo that appears in a Certificate Authority (CA) certificate in the certificate chain. That CA certificate is constrained through the X.509v3 nameConstraints extension, one or more directoryName nameConstraints are present in the permittedSubtrees, and the directoryName has an organizationName attribute.

       * It's of a subjectPublicKeyInfo that appears in a CA certificate in the certificate chain, the CA certificate has one or more organizationName attributes in the certificate Subject, and the server's certificate has the same number of organizationName attributes, in the same order, and with byte-for-byte identical values.

       Specify a subjectPublicKeyInfo hash by linking the hash algorithm name, a slash, and the Base64 encoding of that hash algorithm applied to the DER-encoded subjectPublicKeyInfo of the specified certificate. Base64 encoding format matches that of an SPKI Fingerprint. The only recognized hash algorithm is sha256; others are ignored.

       Leaving the policy unset means that if certificates requiring disclosure through Certificate Transparency aren't disclosed, then Google Chrome doesn't trust those certificates.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:67-
  tags:
  - system-security
  type: list

** CertificateTransparencyEnforcementDisabledForLegacyCas — Disable Certificate Transparency enforcement for a list of Legacy Certificate Authorities
SYNOPSIS: ["sha256/AAAAAAAAAAAAAAAAAAAAAA==", "sha256//////////////////////w=="]
 Setting the policy turns off enforcement of Certificate Transparency disclosure requirements for a list of Legacy Certificate Authorities (CA) for certificate chains with a specified subjectPublicKeyInfo hash. Enterprise hosts can keep using certificates that otherwise wouldn't be trusted (because they weren't properly publicly disclosed). To turn off enforcement, the subjectPublicKeyInfo hash must appear in a CA certificate recognized as a Legacy CA. A Legacy CA is publicly trusted by one or more operating systems supported by Google Chrome, but not Android Open Source Project or Google Chrome OS.

       Specify a subjectPublicKeyInfo hash by linking the hash algorithm name, a slash and the Base64 encoding of that hash algorithm applied to the DER-encoded subjectPublicKeyInfo of the specified certificate. Base64 encoding format matches that of an SPKI Fingerprint. The only recognized hash algorithm is sha256; others are ignored.

       Leaving the policy unset means that if certificates requiring disclosure through Certificate Transparency aren't disclosed, then Google Chrome doesn't trust those certificates.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:67-
  tags:
  - system-security
  type: list

** RC4Enabled (DEPRECATED) — Enable RC4 cipher suites in TLS
SYNOPSIS: false
 Warning: RC4 will be completely removed from Google Chrome after version 52 (around September 2016) and this policy will stop working then.

       If the policy is not set, or is set to false, then RC4 cipher suites in TLS will not be enabled. Otherwise it may be set to true to retain compatibility with an outdated server. This is a stopgap measure and the server should be reconfigured.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:48-52
  tags:
  - system-security
  type: main

** DHEEnabled (DEPRECATED) — Enable DHE cipher suites in TLS
SYNOPSIS: false
 Warning: DHE will be completely removed from Google Chrome after version 57 (around March 2017) and this policy will stop working then.

       If the policy is not set, or is set to false, then DHE cipher suites in TLS will not be enabled. Otherwise it may be set to true to enable DHE cipher suites and retain compatibility with an outdated server. This is a stopgap measure and the server should be reconfigured.

       Servers are encouraged to migrated to ECDHE cipher suites. If these are unavailable, ensure a cipher suite using RSA key exchange is enabled.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:53-57
  tags:
  - system-security
  type: main

** SSLErrorOverrideAllowed — Allow proceeding from the SSL warning page
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset lets users click through warning pages Google Chrome shows when users navigate to sites that have SSL errors.

       Setting the policy to Disabled prevent users from clicking through any warning pages.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:44-
  - chrome_os:44-
  - android:44-
  type: main

** SSLErrorOverrideAllowedForOrigins — Allow proceeding from the SSL warning page on specific origins
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 If SSLErrorOverrideAllowed is Disabled, setting the policy lets you set a list of origin patterns that specify the sites where a user can click through warning pages Google Chrome shows when users navigate to sites that have SSL errors. Users will not be able to click through SSL warning pages on origins that are not on this list.

       If SSLErrorOverrideAllowed is Enabled or unset, this policy does nothing.

       Leaving the policy unset means SSLErrorOverrideAllowed applies for all sites.

       For detailed information on valid input patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy. This policy only matches based on origin, so any path in the URL pattern is ignored.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:90-
  type: list

** QuicAllowed — Allow QUIC protocol
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset allows the use of QUIC protocol in Google Chrome.

       Setting the policy to Disabled disallows the use of QUIC protocol.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:43-
  - chrome_os:43-
  type: main

** WelcomePageOnOSUpgradeEnabled (DEPRECATED) — Enable showing the welcome page on the first browser launch following OS upgrade
SYNOPSIS: false
 If this policy is set to true or not configured, the browser will re-show the welcome page on the first launch following an OS upgrade.

       If this policy is set to false, the browser will not re-show the welcome page on the first launch following an OS upgrade.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.win:45-62
  type: main

** HardwareAccelerationModeEnabled — Use hardware acceleration when available
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset turns on hardware acceleration, if available.

       Setting the policy to Disabled turns off hardware acceleration.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:46-
  type: main

** SuppressUnsupportedOSWarning — Suppress the unsupported OS warning
SYNOPSIS: true
 Setting the policy to Enabled suppresses the warning that appears when Google Chrome is running on an unsupported computer or operating system.

       Setting the policy to Disabled or leaving it unset means the warnings appear on unsupported systems.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:49-
  - chrome_os:49-
  tags:
  - system-security
  type: main

** TaskManagerEndProcessEnabled — Enable ending processes in Task Manager
SYNOPSIS: true
 Setting the policy to Disabled prevents users from ending processes in the Task Manager.

       Setting the policy to Enabled or leaving it unset lets users end processes in the Task Manager.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:52-
  type: main

** AllowScreenLock — Permit locking the screen
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset lets users who authenticate with a password lock the screen.

       Setting the policy to Disabled means users can't lock the screen. (They can only sign out from the user session.)

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:52-
  type: main

** AllowedDomainsForApps — Define domains allowed to access Google Workspace
SYNOPSIS: "managedchrome.com,example.com"
 Setting the policy turns on Chrome's restricted sign-in feature in Google Workspace and prevents users from changing this setting. Users can only access Google tools using accounts from the specified domains (to allow gmail or googlemail accounts, add consumer_accounts to the list of domains). This setting prevents users from signing in and adding a Secondary Account on a managed device that requires Google authentication, if that account doesn't belong to one of the explicitly allowed domains.

       Leaving this setting empty or unset means users can access Google Workspace with any account.

       Users cannot change or override this setting.

       Note: This policy causes the X-GoogApps-Allowed-Domains header to be appended to all HTTP and HTTPS requests to all google.com domains, as described in https://support.google.com/a/answer/1668854.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:51-
  - chrome_os:51-
  - android:51-
  tags:
  - filtering
  type: string

** PacHttpsUrlStrippingEnabled (DEPRECATED) — Enable PAC URL stripping (for https://)
SYNOPSIS: true
 Strips privacy and security sensitive parts of https:// URLs before passing them on to PAC scripts (Proxy Auto Config) used by Google Chrome during proxy resolution.

       When True, the security feature is enabled, and https:// URLs are
       stripped before submitting them to a PAC script. In this manner the PAC
       script is not able to view data that is ordinarily protected by an
       encrypted channel (such as the URL's path and query).

       When False, the security feature is disabled, and PAC scripts are
       implicitly granted the ability to view all components of an https://
       URL. This applies to all PAC scripts regardless of origin (including
       those fetched over an insecure transport, or discovered insecurely
       through WPAD).

       This defaults to True (security feature enabled).

       It is recommended that this be set to True. The only reason to set it to
       False is if it causes a compatibility problem with existing PAC scripts.

       The policy will be removed in M75.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:52-74
  tags:
  - system-security
  type: main

** MediaRouterCastAllowAllIPs — Allow Google Cast to connect to Cast devices on all IP addresses.
SYNOPSIS: false
 Unless EnableMediaRouter is set to Disabled, setting MediaRouterCastAllowAllIPs to Enabled connects Google Cast to Cast devices on all IP addresses, not just RFC1918/RFC4193 private addresses.

       Setting the policy to Disabled connects Google Cast to Cast devices only on RFC1918/RFC4193.

       Leaving the policy unset connects Google Cast to Cast devices only on RFC1918/RFC4193, unless the CastAllowAllIPs feature is turned on.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:67-
  type: main

** NTPCustomBackgroundEnabled — Allow users to customize the background on the New Tab page
SYNOPSIS: true
 If the policy is set to false, the New Tab page won't allow users to customize the background. Any existing custom background will be permanently removed even if the policy is set to true later.

       If the policy is set to true or unset, users can customize the background on the New Tab page.

  default: true
  default_for_enterprise_users: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Users can customize the New Tab page background
    value: true
  - caption: Users can not customize the New Tab page background
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-
  - chrome_os:80-
  type: main

** NTPCardsVisible — Show cards on the New Tab Page
SYNOPSIS: true
 This policy controls the visibility of cards on the New Tab Page. Cards surface entry points to launch common user journeys based on the user's browsing behavior.

       If the policy is set to Enabled, the New Tab Page will show cards if content is available.

       If the policy is set to Disabled, the New Tab Page won't show cards.

       If the policy is not set, the user can control the card visibility. The default is visible.
      

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: New Tab Page will show cards if content is available
    value: true
  - caption: New Tab Page will not show cards
    value: false
  - caption: New Tab Page will show cards if content is available, but allow the user
      to change this setting
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:88-
  type: main

** WebRtcUdpPortRange — Restrict the range of local UDP ports used by WebRTC
SYNOPSIS: "10000-11999"
 If the policy is set, the UDP port range used by WebRTC is restricted to the specified port interval (endpoints included).

       If the policy is not set, or if it is set to the empty string or an invalid port range, WebRTC is allowed to use any available local UDP port.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:54-
  type: string

** WebRtcLocalIpsAllowedUrls — URLs for which local IPs are exposed in WebRTC ICE candidates
SYNOPSIS: ["https://www.example.com", "*example.com*"]
 Patterns in this list will be matched against the security origin of the requesting URL.
       If a match is found or chrome://flags/#enable-webrtc-hide-local-ips-with-mdns is Disabled, the local IP addresses are shown in WebRTC ICE candidates.
       Otherwise, local IP addresses are concealed with mDNS hostnames.
       Please note that this policy weakens the protection of local IPs if needed by administrators.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:79-
  type: list

** WebRestrictionsAuthority — Set an external source of URL restrictions
SYNOPSIS: "com.android.chrome.SupervisedUserProvider"
 When this policy is set to a non-empty string the WebView will read URL restrictions from the content provider with the given authority name.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: string
  tags:
  - filtering
  - admin-sharing
  type: string

** ComponentUpdatesEnabled — Enable component updates in Google Chrome
SYNOPSIS: true
 Enables component updates for all components in Google Chrome when not set or set to enabled.

       If set to disabled, updates to components are disabled. However, some components are exempt from this policy: updates to any component that does not contain executable code, or does not significantly alter the behavior of the browser, or is critical for its security will not be disabled.
       Examples of such components include the certificate revocation lists and Safe Browsing data.
       See https://developers.google.com/safe-browsing for more info on Safe Browsing.
       Please note that setting this policy to disabled can potentially prevent the Google Chrome developers from providing critical security fixes in a timely manner and is thus not recommended.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:54-
  type: main

** WifiSyncAndroidAllowed — Allow Wi-Fi network configurations to be synced across Google Chrome OS devices and a connected Android phone.
SYNOPSIS: true
 If this setting is enabled, users will be allowed to sync Wi-Fi network configurations between their Google Chrome OS device(s) and a connected Android phone. Before Wi-Fi network configurations can sync, users must explicitly opt in to this feature by completing a setup flow.

       If this setting is disabled, users will not be allowed to sync Wi-Fi network configurations.

       This feature depends on the wifiConfigurations datatype in Chrome Sync being enabled. If wifiConfigurations is disabled in the SyncTypesListDisabled policy, or Chrome Sync is disabled in the SyncDisabled policy this feature will not be enabled.

       If this policy is left not set, the default is not allowed for managed users.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:89-
  tags:
  - local-data-access
  - google-sharing
  type: main

** InstantTetheringAllowed — Allow Instant Tethering to be used.
SYNOPSIS: true
 If this setting is enabled, users will be allowed to use Instant Tethering, which allows their Google phone to share its mobile data with their device.

       If this setting is disabled, users will not be allowed to use Instant Tethering.

       If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:60-
  tags:
  - local-data-access
  - google-sharing
  type: main

** PhoneHubNotificationsAllowed — Allow Phone Hub notifications to be enabled.
SYNOPSIS: true
 If this setting is enabled, users who have already opted in to Phone Hub, will be able to send/receive their phone's notifications on Chrome OS.

       If this setting is disabled, users will not be allowed to use this feature. If the PhoneHubAllowed policy is disabled, users also will not be allowed to use this feature.

       If this policy is left not set, the default is allowed for both enterprise-managed users and non-managed users.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:89-
  tags:
  - local-data-access
  - google-sharing
  type: main

** NearbyShareAllowed — Allow Nearby Share to be enabled.
SYNOPSIS: true
 If this setting is enabled, users will be allowed to opt in to Nearby Share, which allows them to send and receive files from people closeby.

       If this setting is disabled, users will not be allowed to opt in to Nearby Share.

       If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:91-
  tags:
  - local-data-access
  - google-sharing
  type: main

** BrowserNetworkTimeQueriesEnabled — Allow queries to a Google time service
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset means Google Chrome send occasional queries to a Google server to retrieve an accurate timestamp.

       Setting the policy to Disabled stops Google Chrome from sending these queries.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow queries to a Google server to retrieve an accurate timestamp
    value: true
  - caption: Do not allow queries to Google servers to retrieve timestamps
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:60-
  type: main

** EcryptfsMigrationStrategy (DEPRECATED) — Migration strategy for ecryptfs
SYNOPSIS: 2
 This policy was removed in M87 and home directories will automatically migrate to ext4 at sign-in.
       Setting the policy specifies the action to take when the user's home directory was created with ecryptfs encryption. Unless ecryptfs-encrypted home directories migrate to ext4-encryption, Android apps might stop running.

       Setting the policy to:

       * Migrate (or an unsupported option such as AskUser or AskForEcryptfsArcUsers) means directories automatically migrate to ext4 at sign-in, without asking for user consent.

       * Wipe or MinimalMigrate means that, at sign-in, new ext4-encrypted home directories replace old ecryptfs-encrypted directories. To help the user avoid repeated sign-ins, MinimalMigrate tries to preserve sign-in tokens.

       * DisallowArc or leaving it unset prevents migration, and the user's Android apps stop running.

       This policy doesn't apply to kiosk users.

       Warning: Wipe and MinimalMigrate remove local data.

  device_only: false
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Disallow data migration and ARC.
    name: DisallowArc
    value: 0
  - caption: "Migrate automatically, don\u2019t ask for user consent."
    name: Migrate
    value: 1
  - caption: "Wipe the user\u2019s ecryptfs home directory and start with a fresh ext4-encrypted\
      \ home directory."
    name: Wipe
    value: 2
  - caption: Similar to Wipe (value 2), but tries to preserve login tokens so the user
      does not have to sign in again.
    name: MinimalMigrate
    value: 4
  schema:
    enum:
    - 0
    - 1
    - 2
    - 4
    type: integer
  supported_on:
  - chrome_os:61-87
  type: int-enum

** NoteTakingAppsLockScreenWhitelist (DEPRECATED) — Whitelist note-taking apps allowed on the Google Chrome OS lock screen
SYNOPSIS: ["abcdefghabcdefghabcdefghabcdefgh"]
 This policy is deprecated, please use NoteTakingAppsLockScreenAllowlist instead.

       Setting the policy specifies the apps that users can turn on as a note-taking app on the Google Chrome OS lock screen.

       If the preferred app is on the lock screen, a UI element for launching the preferred note-taking app appears on the screen. When launched, the app can create a window on top of the lock screen and create notes in this context. The app can import created notes to the primary user session, when the session is unlocked. Only Google Chrome note-taking apps are supported on the lock screen.

       Setting the policy means users can turn on an app on the lock screen if the app's extension ID is in the policy list value. So, setting it to an empty list will turn off note-taking on the lock screen. The policy with an app ID doesn't necessarily mean that users can turn the app on as a note-taking app on the lock screen. For example, on Google Chrome 61, the set of available apps is also restricted by the platform.

       Leaving the policy unset amounts to no restrictions on the set of apps users can enable on the lock screen imposed by the policy.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:61-
  type: list

** CloudPolicyOverridesPlatformPolicy — Google Chrome cloud policy overrides Platform policy.
SYNOPSIS: false
 Setting the policy to Enabled means cloud policy takes precedence if it conflicts with platform policy.

       Setting the policy to Disabled or leaving it unset means platform policy takes precedence if it conflicts with cloud policy.

       This mandatory policy affects machine scope cloud policies.

  features:
    dynamic_refresh: true
    metapolicy_type: precedence
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:75-
  - ios:88-
  - android:97-
  type: main

** CloudUserPolicyOverridesCloudMachinePolicy — Allow user cloud policies to override Chrome Browser Cloud Management policies.
SYNOPSIS: false
 Setting the policy to Enabled allows policies associated with a Google Workspace account to take precedence if they conflict with Chrome Browser Cloud Management policies.

       Only policies originating from secure users can be merged. A secure user is affiliated with the organization that manages their browser using Chrome Browser Cloud Management. All other user-level policies will have default precedence.

       The policy can be combined with CloudPolicyOverridesPlatformPolicy. If both policies are enabled, user cloud policies will also take precedence over conflicting platform policies.

       Leaving the policy unset or setting it to disabled causes user-level cloud policies to have default priority.

  default: false
  features:
    dynamic_refresh: true
    metapolicy_type: precedence
    per_profile: false
  items:
  - caption: Allow user cloud policies to override machine cloud policies.
    value: true
  - caption: Prevent user cloud policies from overriding machine cloud policies.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:96-
  type: main

** PromptForDownloadLocation — Ask where to save each file before downloading
SYNOPSIS: false
 Setting the policy to Enabled means users are asked where to save each file before downloading. Setting the policy to Disabled has downloads start immediately, and users aren't asked where to save the file.

       Leaving the policy unset lets users change this setting.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:64-
  type: main

** IsolateOrigins — Enable Site Isolation for specified origins
SYNOPSIS: "https://a.example.com/,https://othersite.org/,https://[*.]corp.example.com"
 Setting the policy means each of the named origins in a comma-separated list runs in a dedicated process. Each named origin's process will only be allowed to contain documents from that origin and its subdomains. For example, specifying https://a1.example.com/ allows https://a2.a1.example.com/ in the same process, but not https://example.com or https://b.example.com.

       Since Google Chrome 77, you can also specify a range of origins to isolate using a wildcard. For example, specifying https://[*.]corp.example.com will give every origin underneath https://corp.example.com its own dedicated process, including https://corp.example.com itself, https://a1.corp.example.com, and https://a2.a1.corp.example.com.

       Note that all sites (i.e., scheme plus eTLD+1, such as https://example.com) are already isolated by default on Desktop platforms, as noted in the SitePerProcess policy. This IsolateOrigins policy is useful to isolate specific origins at a finer granularity (e.g., https://a.example.com).

       Also note that origins isolated by this policy will be unable to script other origins in the same site, which is otherwise possible if two same-site documents modify their document.domain values to match. Administrators should confirm this uncommon behavior is not used on an origin before isolating it.

       Setting the policy to off or leaving it unset lets users change this setting.

       Note: For Android, use the IsolateOriginsAndroid policy instead.

  device_only: false
  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: string
  supported_on:
  - chrome.*:63-
  tags:
  - system-security
  type: string

** SitePerProcess — Require Site Isolation for every site
SYNOPSIS: true
 Since Google Chrome 67, site isolation has been enabled by default on all Desktop platforms, causing every site to run in its own process. A site is a scheme plus eTLD+1 (e.g., https://example.com). Setting this policy to Enabled does not change that behavior; it only prevents users from opting out (for example, using Disable site isolation in chrome://flags). Since Google Chrome 76, setting the policy to Disabled or leaving it unset doesn't turn off site isolation, but instead allows users to opt out.

       IsolateOrigins might also be useful for isolating specific origins at a finer granularity than site (e.g., https://a.example.com).

       On Google Chrome OS version 76 and earlier, set the DeviceLoginScreenSitePerProcess device policy to the same value. (If the values don't match, a delay can occur when entering a user session.)

       Note: For Android, use the SitePerProcessAndroid policy instead.

  device_only: false
  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:63-
  tags:
  - system-security
  type: main

** SitePerProcessAndroid — Enable Site Isolation for every site
SYNOPSIS: true
 Setting the policy to Enabled isolates all sites on Android, such that each site runs in its own process, and it prevents users from opting out. A site is a scheme plus eTLD+1 (e.g., https://example.com). Note that Android isolates certain sensitive sites by default starting in Google Chrome version 77, and this policy extends that default site isolation mode to apply to all sites.

       Setting the policy to Disabled turns off any form of site isolation, including isolation of sensitive sites and field trials of IsolateOriginsAndroid, SitePerProcessAndroid, and other site isolation modes. Users can still turn the policy on manually.

       Leaving the policy unset means users can change this setting.

       IsolateOriginsAndroid might also be useful for isolating specific origins at a finer granularity than site (e.g., https://a.example.com).

       Note: Support for isolating every site on Android will improve, but currently it may cause performance problems, especially on low-end devices. This policy applies only to Chrome on Android running on devices with strictly more than 1 GB of RAM. To isolate specific sites while limiting performance impact for users, use IsolateOriginsAndroid with a list of the sites you want to isolate.  To apply the policy on non-Android platforms, use SitePerProcess.

  device_only: false
  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - android:68-
  tags:
  - system-security
  type: main

** SharedArrayBufferUnrestrictedAccessAllowed — Specifies whether SharedArrayBuffers can be used in a non cross-origin-isolated context
SYNOPSIS: false

       Specifies whether SharedArrayBuffers can be used in a non cross-origin-isolated context. Google Chrome will require cross-origin isolation when using SharedArrayBuffers from Google Chrome 91 onward (2021-05-25) for Web Compatibility reasons. Additional details can be found on: https://developer.chrome.com/blog/enabling-shared-array-buffer/.

       When set to Enabled, sites can use SharedArrayBuffer with no restrictions.

       When set to Disabled or not set, sites can only use SharedArrayBuffers when cross-origin isolated.

  default: false
  device_only: false
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Allow sites to use SharedArrayBuffers
    value: true
  - caption: Prevent sites from using SharedArrayBuffers
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:91-
  tags:
  - system-security
  type: main

** SandboxExternalProtocolBlocked — Allow Chrome to block navigations toward external protocols in sandboxed iframes
SYNOPSIS: true
 Chrome will block navigations toward external protocols inside
       sandboxed iframe. See https://chromestatus.com/features/5680742077038592.

       When True, this lets Chrome blocks those navigations.

       When False, this prevents Chrome from blocking those navigations.

       This defaults to True: security feature enabled.

       This can be used by administrators who need more time to update their internal website affected by this new restriction. This Enterprise policy is temporary; it's intended to be removed after Google Chrome version 104.
      

  default: true
  device_only: false
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Allow Chrome to block navigations to external protocols inside sandboxed
      iframe
    value: true
  - caption: Prevent Chrome to block navigations to external protocols inside sandboxed
      iframe
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:96-
  tags:
  - system-security
  type: main

** CrossOriginWebAssemblyModuleSharingEnabled — Specifies whether WebAssembly modules can be sent cross-origin
SYNOPSIS: true

       Specifies whether WebAssembly modules can be sent to another window or worker cross-origin. Cross-origin WebAssembly module sharing will be deprecated as part of the efforts to deprecate document.domain, see https://github.com/mikewest/deprecating-document-domain. This policy allows to re-enable cross-origin WebAssembly module sharing to offer a longer transition period in the deprecation process.

       When set to True, sites can send WebAssembly modules also cross-origin without restrictions.

       When set to False or not set, sites can only send WebAssembly modules to windows and workers in the same origin.

  default: false
  device_only: false
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Allow WebAssembly modules to be sent cross-origin
    value: true
  - caption: Prevent WebAssembly modules to be sent cross-origin
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:94-
  tags:
  - system-security
  type: main

** DisplayCapturePermissionsPolicyEnabled — Specifies whether the display-capture permissions-policy is checked or skipped.
SYNOPSIS: true

       The display-capture permissions-policy gates access to getDisplayMedia(), as per this spec: https://www.w3.org/TR/screen-capture/#feature-policy-integration. However, if this policy is Disabled, this requirement is not enforced, and getDisplayMedia() is allowed from contexts that would otherwise be forbidden. This Enterprise policy is temporary; it's intended to be removed after Google Chrome version 100. It is intended to unblock Enterprise users whose application is non-spec compliant, but needs time to be fixed.

       When enabled or not set, sites can only call getDisplayMedia() from contexts which are allowlisted by the display-capture permissions-policy.

       When disabled, sites can call getDisplayMedia() even from contexts which are not allowlisted by the display-capture permissions policy. Note that other restrictions may still apply.

  default: true
  device_only: false
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: "\n          Calls to getDisplayMedia originating from non-allowlisted\
      \ contexts\n          are denied."
    value: true
  - caption: "\n          Calls are not denied on account of originating from non-allowlisted\n\
      \          contexts. (Calls may still be denied for other reasons.)"
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:94-
  tags:
  - system-security
  type: main

** WebDriverOverridesIncompatiblePolicies (DEPRECATED) — Allow WebDriver to Override Incompatible Policies
SYNOPSIS: true

       This policy was removed in M80, because it is not necessary anymore as
       WebDriver is now compatible with all existing policies.

       This policy allows users of the WebDriver feature to override policies which can interfere with its operation.

       Currently this policy disables SitePerProcess and IsolateOrigins policies.

       If the policy is enabled, WebDriver will be able to override incomaptible policies.

       If the policy is disabled or not configured, WebDriver will not be allowed to override incompatible policies.

  device_only: false
  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:65-79
  tags:
  - system-security
  type: main

** UnsafelyTreatInsecureOriginAsSecure (DEPRECATED) — Origins or hostname patterns for which restrictions on insecure origins should not apply
SYNOPSIS: ["http://testserver.example.com/", "*.example.org"]
 Deprecated in M69. Use
       OverrideSecurityRestrictionsOnInsecureOrigin instead.

       The policy specifies a list of origins (URLs) or hostname patterns (such as "*.example.com") for which security restrictions on insecure origins will not apply.

       The intent is to allow organizations to allow origins for legacy applications that cannot deploy TLS, or to set up a staging server for internal web development so that their developers can test out features requiring secure contexts without having to deploy TLS on the staging server. This policy will also prevent the origin from being labeled "Not Secure" in the omnibox.

       Setting a list of URLs in this policy has the same effect as setting the command-line flag '--unsafely-treat-insecure-origin-as-secure' to a comma-separated list of the same URLs. If the policy is set, it will override the command-line flag.

       This policy is deprecated in M69 in favor of OverrideSecurityRestrictionsOnInsecureOrigin. If both policies are present, OverrideSecurityRestrictionsOnInsecureOrigin will override this policy.

       For more information on secure contexts, see https://www.w3.org/TR/secure-contexts/
      

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:65-
  tags:
  - system-security
  type: list

** DefaultDownloadDirectory — Set default download directory
SYNOPSIS: "/home/${user_name}/Downloads"
 Setting the policy changes the default directory that Chrome downloads files to, but users can change the directory.

       Leaving the policy unset means Chrome uses its platform-specific default directory.

       Note: See a list of variables you can use ( https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables ).

  features:
    can_be_mandatory: false
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: string
  supported_on:
  - chrome.*:64-
  tags:
  - local-data-access
  type: string

** AbusiveExperienceInterventionEnforce — Abusive Experience Intervention Enforce
SYNOPSIS: true
 If SafeBrowsingEnabled is not Disabled, then setting AbusiveExperienceInterventionEnforce to Enabled or leaving it unset prevents sites with abusive experiences from opening new windows or tabs.

        Setting SafeBrowsingEnabled to Disabled or AbusiveExperienceInterventionEnforce to Disabled lets sites with abusive experiences open new windows or tabs.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Prevent sites with abusive experiences from opening new windows or tabs
    value: true
  - caption: Allow sites with abusive experiences to open new windows or tabs
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:65-
  type: main

** SpellcheckLanguage — Force enable spellcheck languages
SYNOPSIS: ["fr", "es"]
 Force-enables spellcheck languages. Unrecognized languages in the list will be ignored.

       If you enable this policy, spellcheck will be enabled for the languages specified, in addition to the languages for which the user has enabled spellcheck.

       If you do not set this policy, or disable it, there will be no change to the user's spellcheck preferences.

       If the SpellcheckEnabled policy is set to false, this policy will have no effect.

       If a language is included in both this policy and the SpellcheckLanguageBlocklist policy, this policy is prioritized and the spellcheck language is enabled.

       The currently supported languages are: af, bg, ca, cs, da, de, el, en-AU, en-CA, en-GB, en-US, es, es-419, es-AR, es-ES, es-MX, es-US, et, fa, fo, fr, he, hi, hr, hu, id, it, ko, lt, lv, nb, nl, pl, pt-BR, pt-PT, ro, ru, sh, sk, sl, sq, sr, sv, ta, tg, tr, uk, vi.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.linux:65-
  type: list

** SpellcheckLanguageBlacklist (DEPRECATED) — Force disable spellcheck languages
SYNOPSIS: ["fr", "es"]
 This policy is deprecated, please use SpellcheckLanguageBlocklist instead.

       Force-disables spellcheck languages. Unrecognized languages in that list will be ignored.

       If you enable this policy, spellcheck will be disabled for the languages specified. The user can still enable or disable spellcheck for languages not in the list.

       If you do not set this policy, or disable it, there will be no change to the user's spellcheck preferences.

       If the SpellcheckEnabled policy is set to false, this policy will have no effect.

       If a language is included in both this policy and the SpellcheckLanguage policy, the latter is prioritized and the spellcheck language will be enabled.

       The currently supported languages are: af, bg, ca, cs, da, de, el, en-AU, en-CA, en-GB, en-US, es, es-419, es-AR, es-ES, es-MX, es-US, et, fa, fo, fr, he, hi, hr, hu, id, it, ko, lt, lv, nb, nl, pl, pt-BR, pt-PT, ro, ru, sh, sk, sl, sq, sr, sv, ta, tg, tr, uk, vi.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.linux:75-
  type: list

** SpellcheckLanguageBlocklist — Force disable spellcheck languages
SYNOPSIS: ["fr", "es"]
 Force-disables spellcheck languages. Unrecognized languages in that list will be ignored.

       If you enable this policy, spellcheck will be disabled for the languages specified. The user can still enable or disable spellcheck for languages not in the list.

       If you do not set this policy, or disable it, there will be no change to the user's spellcheck preferences.

       If the SpellcheckEnabled policy is set to false, this policy will have no effect.

       If a language is included in both this policy and the SpellcheckLanguage policy, the latter is prioritized and the spellcheck language will be enabled.

       The currently supported languages are: af, bg, ca, cs, da, de, el, en-AU, en-CA, en-GB, en-US, es, es-419, es-AR, es-ES, es-MX, es-US, et, fa, fo, fr, he, hi, hr, hu, id, it, ko, lt, lv, nb, nl, pl, pt-BR, pt-PT, ro, ru, sh, sk, sl, sq, sr, sv, ta, tg, tr, uk, vi.

  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.linux:86-
  type: list

** SpellcheckEnabled — Enable spellcheck
SYNOPSIS: false
 Setting the policy to Enabled turns spellcheck on, and users can't turn it off. On Microsoft® Windows®, Google Chrome OS and Linux®, spellcheck languages can be switched on or off individually, so users can still turn spellcheck off by switching off every spellcheck language. To avoid that, use the SpellcheckLanguage to force-enable specific spellcheck languages.

       Setting the policy to Disabled turns off spellcheck from all sources, and users can't turn it on. The SpellCheckServiceEnabled, SpellcheckLanguage and SpellcheckLanguageBlocklist policies have no effect when this policy is set to False.

       Leaving the policy unset lets users turn spellcheck on or off in the language settings. 

  default: null
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable spellcheck
    value: true
  - caption: Disable spellcheck
    value: false
  - caption: Allow the user to enable or disable spellcheck
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:65-
  - chrome_os:65-
  type: main

** AdsSettingForIntrusiveAdsSites — Ads setting for sites with intrusive ads
SYNOPSIS: 1
 Unless SafeBrowsingEnabled is set to False, then setting AdsSettingForIntrusiveAdsSites to 1 or leaving it unset allows ads on all sites.

       Setting the policy to 2 blocks ads on sites with intrusive ads.

  default: 1
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow ads on all sites
    name: AllowAds
    value: 1
  - caption: Do not allow ads on sites with intrusive ads
    name: BlockAds
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:65-
  type: int-enum

** RelaunchNotification — Notify a user that a browser relaunch or device restart is recommended or required
SYNOPSIS: 1
 Notify users that Google Chrome must be relaunched or Google Chrome OS must be restarted to apply a pending update.

       This policy setting enables notifications to inform the user that a browser relaunch or device restart is recommended or required. If not set, Google Chrome indicates to the user that a relaunch is needed via subtle changes to its menu, while Google Chrome OS indicates such via a notification in the system tray. If set to 'Recommended', a recurring warning will be shown to the user that a relaunch is recommended. The user can dismiss this warning to defer the relaunch. If set to 'Required', a recurring warning will be shown to the user indicating that a browser relaunch will be forced once the notification period passes. The default period is seven days for Google Chrome and four days for Google Chrome OS, and may be configured via the RelaunchNotificationPeriod policy setting.

       The user's session is restored following the relaunch/restart.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Show a recurring prompt to the user indicating that a relaunch is recommended
    name: Recommended
    value: 1
  - caption: Show a recurring prompt to the user indicating that a relaunch is required
    name: Required
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:66-
  type: int-enum

** RelaunchNotificationPeriod — Set the time period for update notifications
SYNOPSIS: 604800000
 Allows you to set the time period, in milliseconds, over which users are notified that Google Chrome must be relaunched or that a Google Chrome OS device must be restarted to apply a pending update.

       Over this time period, the user will be repeatedly informed of the need for an update. For Google Chrome OS devices, a restart notification appears in the system tray according to the RelaunchHeadsUpPeriod policy. For Google Chrome browsers, the app menu changes to indicate that a relaunch is needed once one third of the notification period passes. This notification changes color once two thirds of the notification period passes, and again once the full notification period has passed. The additional notifications enabled by the RelaunchNotification policy follow this same schedule.

       If not set, the default period of 604800000 milliseconds (one week) is used.

  features:
    dynamic_refresh: true
    per_profile: false
  label: Time period (milliseconds)
  schema:
    minimum: 3600000
    type: integer
  supported_on:
  - chrome.*:67-
  type: int

** RelaunchWindow — Set the time interval for relaunch
SYNOPSIS: {"entries": [{"start": {"hour": 2, "minute": 15}, "duration_mins": 240}]}
 Specify a target time window for the end of the relaunch notification period.

       Users are notified of the need for a browser relaunch or device restart based on the RelaunchNotification and RelaunchNotificationPeriod policy settings. Browsers and devices are forcibly restarted at the end of the notification period when the RelaunchNotification policy is set to 'Required'. This RelaunchWindow policy can be used to defer the end of the notification period so that it falls within a specific time window.

       If this policy is not set, the default target time window for Google Chrome OS is between 2 AM and 4 AM. The default target time window for Google Chrome is the whole day (i.e., the end of the notification period is never deferred).

       Note: Though the policy can accept multiple items in entries, all but the first item are ignored.
       Warning: Setting this policy may delay application of software updates.

  features:
    dynamic_refresh: true
    per_profile: false
  label: Relaunch time window
  schema:
    properties:
      entries:
        items:
          properties:
            duration_mins:
              description: Time period (minutes) that specifies the length of the relaunch
                window.
              maximum: 1440
              minimum: 1
              type: integer
            start:
              description: Time interpreted in local wall-clock 24h format.
              id: Time
              properties:
                hour:
                  maximum: 23
                  minimum: 0
                  type: integer
                minute:
                  maximum: 59
                  minimum: 0
                  type: integer
              required:
              - hour
              - minute
              type: object
          required:
          - start
          - duration_mins
          type: object
        type: array
    type: object
  supported_on:
  - chrome.*:93-
  - chrome_os:93-
  type: dict

** MachineLevelUserCloudPolicyEnrollmentToken (DEPRECATED) — The enrollment token of cloud policy on desktop
SYNOPSIS: "37185d02-e055-11e7-80c1-9a214cf093ae"

         This policy is deprecated in M72. Please use CloudManagementEnrollmentToken instead.
        

  features:
    dynamic_refresh: false
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:66-80
  type: string

** CloudManagementEnrollmentToken — The enrollment token of cloud policy on desktop
SYNOPSIS: "37185d02-e055-11e7-80c1-9a214cf093ae"
 Setting the policy means Google Chrome tries to register itself with Chrome Browser Cloud Management. The value of this policy is an enrollment token you can retrieve from the Google Admin console.

       See https://support.google.com/chrome/a/answer/9301891?ref_topic=9301744 for details.

  features:
    dynamic_refresh: false
    per_profile: false
    platform_only: true
  schema:
    type: string
  supported_on:
  - chrome.*:72-
  type: string

** CloudManagementEnrollmentMandatory — Enable mandatory cloud management enrollment
SYNOPSIS: true
 Setting the policy to Enabled mandates Chrome Browser Cloud Management enrollment and blocks Google Chrome launch process if failed.

       Setting the policy to Disabled or leaving it unset renders Chrome Browser Cloud Management optional and doesn't block Google Chrome launch process if failed.

       Machine scope cloud policy enrollment on desktop uses this policy. See https://support.google.com/chrome/a/answer/9301891?ref_topic=9301744 for details.

  features:
    dynamic_refresh: false
    per_profile: false
    platform_only: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:72-
  type: main

** AutoplayAllowed — Allow media autoplay
SYNOPSIS: true
 Setting the policy to True lets Google Chrome autoplay media. Setting the policy to False stops Google Chrome from autoplaying media.

        By default, Google Chrome doesn't autoplay media. But, for certain URL patterns, you can use the AutoplayAllowlist policy to change this setting.

       If this policy changes while Google Chrome is running, it only applies to newly opened tabs.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.linux:66-
  type: main

** AutoplayWhitelist (DEPRECATED) — Allow media autoplay on a whitelist of URL patterns
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 This policy is deprecated, please use the 'AutoplayAllowlist' policy instead.

       Setting the policy lets videos play automatically (without user consent) with audio content in Google Chrome. If AutoplayAllowed policy is set to True, then this policy has no effect. If AutoplayAllowed is set to False, then any URL patterns set in this policy can still play. If this policy changes while Google Chrome is running, it only applies to newly opened tabs.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:66-
  type: list

** AutoplayAllowlist — Allow media autoplay on a allowlist of URL patterns
SYNOPSIS: ["https://www.example.com", "[*.]example.edu"]
 Setting the policy lets videos play automatically (without user consent) with audio content in Google Chrome. If AutoplayAllowed policy is set to True, then this policy has no effect. If AutoplayAllowed is set to False, then any URL patterns set in this policy can still play. If this policy changes while Google Chrome is running, it only applies to newly opened tabs.

       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  type: list

** TabUnderAllowed (DEPRECATED) — Allow sites to simultaneously navigate and open pop-ups
SYNOPSIS: true
 Deprecated in M68. Use DefaultPopupsSetting instead.

       For a full explanation, see https://www.chromestatus.com/feature/5675755719622656.
       If this policy is enabled, sites will be allowed to simultaneously navigate and open new windows/tabs.
       If this policy is disabled or not set, sites will be disallowed from simultaneously navigating and opening a new window/tab.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:67-67
  type: main

** ChromeCleanupReportingEnabled — Control how Chrome Cleanup reports data to Google
SYNOPSIS: true
 Setting the policy to Enabled means if Chrome Cleanup detects unwanted software, it may, in line with policy set by SafeBrowsingExtendedReportingEnabled, report about the scan to Google. Chrome Cleanup asks users if they want the cleanup. It sends results to Google.

       Setting the policy to Disabled means if Chrome Cleanup detects unwanted software, it won't report about the scan to Google, regardless of the value of SafeBrowsingExtendedReportingEnabled. Chrome Cleanup asks users if they want the cleanup. The results aren't reported to Google.

       Leaving the policy unset means Chrome Cleanup may, in line with policy set by SafeBrowsingExtendedReportingEnabled, report about scans for detecting unwanted software to Google. Chrome Cleanup asks users if they want the cleanup and to share the results with Google to help with future unwanted software detection. These results have file metadata, automatically installed extensions, and registry keys, as described by the Chrome Privacy Whitepaper.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.win:68-
  tags:
  - system-security
  type: main

** AllowedInputMethods — Configure the allowed input methods in a user session
SYNOPSIS: ["xkb:us::eng"]
 Setting the policy lets users choose one of the input methods for Google Chrome OS sessions that you specify.

        If you leave it unset or set to an empty list, users can select all supported input methods.

       Note: If the current input method is unsupported, it switches to the hardware keyboard layout (if allowed) or the first valid entry in this list. Invalid or unsupported methods are ignored.

  device_only: false
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome_os:69-
  type: list

** ExtensionInstallEventLoggingEnabled — Log events for policy based extension installs
SYNOPSIS: true
 Setting the policy to True sends reports of key, policy-triggered extension installation events to Google. Setting the policy to False means no events are captured. If the policy is unset, default value is set to True.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_chrome_os_management:
  - google_cloud
  supported_on:
  - chrome_os:85-
  tags:
  - google-sharing
  type: main

** EnableSyncConsent — Enable displaying Sync Consent during sign-in
SYNOPSIS: false
 This policy controls if Sync Consent can be shown to the user during first sign-in. It should be set to false if Sync Consent is never needed for the user.
       If set to false, Sync Consent will not be displayed.
       If set to true or unset, Sync Consent can be displayed.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:66-
  type: main

** PromotionalTabsEnabled — Enable showing full-tab promotional content
SYNOPSIS: false
 Setting the policy to True or leaving it unset lets Google Chrome show users product information as full-tab content.

       Setting the policy to False prevents Google Chrome from showing product information as full-tab content.

       Setting the policy controls the presentation of the welcome pages that help users sign in to Google Chrome, set Google Chrome as users' default browser, or otherwise inform them of product features.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:69-
  type: main

** SafeSitesFilterBehavior — Control SafeSites adult content filtering.
SYNOPSIS: 0
 Setting the policy controls the SafeSites URL filter, which uses the Google Safe Search API to classify URLs as pornographic or not.

       When this policy is set to:

       * Do not filter sites for adult content, or not set, sites aren't filtered

       * Filter top level sites for adult content, pornographic sites are filtered

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Do not filter sites for adult content
    name: SafeSitesFilterDisabled
    value: 0
  - caption: Filter top level sites (but not embedded iframes) for adult content
    name: SafeSitesFilterEnabled
    value: 1
  schema:
    enum:
    - 0
    - 1
    type: integer
  supported_on:
  - chrome.*:69-
  tags:
  - filtering
  - google-sharing
  type: int-enum

** OverrideSecurityRestrictionsOnInsecureOrigin — Origins or hostname patterns for which restrictions on insecure origins should not apply
SYNOPSIS: ["http://testserver.example.com/", "*.example.org"]
 Setting the policy specifies a list of origins (URLs) or hostname patterns (such as *.example.com) for which security restrictions on insecure origins won't apply. Organizations can specify origins for legacy applications that can't deploy TLS or set up a staging server for internal web development, so developers can test out features requiring secure contexts without having to deploy TLS on the staging server. This policy also prevents the origin from being labeled "Not Secure" in the address bar.

       Setting a list of URLs in this policy amounts to setting the command-line flag --unsafely-treat-insecure-origin-as-secure to a comma-separated list of the same URLs. The policy overrides the command-line flag and UnsafelyTreatInsecureOriginAsSecure, if present.

       For more information on secure contexts, see Secure Contexts ( https://www.w3.org/TR/secure-contexts ).

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:69-
  tags:
  - system-security
  type: list

** TabFreezingEnabled (DEPRECATED) — Allow background tabs freeze
SYNOPSIS: false
 Controls whether Google Chrome can freeze tabs that have been in the background for at least 5 minutes.

       If the policy is set to true, tabs that have been in the background for at least 5 minutes may be frozen. Tab freezing reduces CPU, battery and memory usage. Google Chrome uses heuristics to avoid freezing tabs that do useful work in the background (e.g. display notifications, play sound, stream video). Web developers can also opt-out their site from freezing (https://chromium.googlesource.com/chromium/src/+/HEAD/chrome/browser/performance_manager/docs/freezing_opt_out_opt_in.md).

       If the policy is set to false, no tabs will be frozen.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:79-79
  - chrome_os:79-79
  type: main

** UrlKeyedAnonymizedDataCollectionEnabled — Enable URL-keyed anonymized data collection
SYNOPSIS: true
 Setting the policy to Enabled means URL-keyed anonymized data collection, which sends URLs of pages the user visits to Google to make searches and browsing better, is always active.

       Setting the policy to Disabled results in no URL-keyed anonymized data collection.

       If you set the policy, users can't change. If not set, then URL-keyed anonymized data collection at first, but users can change it.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:69-
  tags:
  - google-sharing
  type: main

** WebRtcEventLogCollectionAllowed — Allow collection of WebRTC event logs from Google services
SYNOPSIS: true
 Setting the policy to Enabled means Google Chrome can collect WebRTC event logs from Google services such as Hangouts Meet and upload them to Google. These logs have diagnostic information for debugging issues with audio or video meetings in Google Chrome, such as the time and size of RTP packets, feedback about congestion on the network, and metadata about time and quality of audio and video frames. These logs have no audio or video content from the meeting. To make debugging easier, Google might associate these logs, by means of a session ID, with other logs collected by the Google service itself.

       Setting the policy to Disabled results in no collection or uploading of such logs.

       Leaving the policy unset on versions up to and including M76 means Google Chrome defaults to not being able to collect and upload these logs. Starting at M77, Google Chrome defaults to being able to collect and upload these logs from most profiles affected by cloud-based, user-level enterprise policies. From M77 up to and including M80, Google Chrome can also collect and upload these logs by default from profiles affected by Google Chrome on-premise management.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:70-
  - chrome_os:70-
  tags:
  - google-sharing
  type: main

** CoalesceH2ConnectionsWithClientCertificatesForHosts — Allow coalescing of HTTP/2 connections for these hosts even when client certificates are used
SYNOPSIS: ["example.com"]
 This policy allows HTTP/2 connection coalescing when client certificates are in use. In order to coalesce, both the hostname of the potential new connection and the hostname of an existing connection must match one or more patterns described by this policy. The policy is a list of hosts using the URLBlocklist filter format: "example.com" matches "example.com" and all subdomains (e.g. "sub.example.com"), while ".example.net" matches exactly "example.net".

       Coalescing requests to different hosts over connections that use client certificates can create security and privacy issues, as the ambient authority will be conveyed to all requests, even if the user did not explicitly authorize this. This policy is temporary and will be removed in a future release. See https://crbug.com/855690.

       If this policy is left unset, then the default behavior of not allowing any HTTP/2 connection coalescing on connections using client certificates will be used.

  features:
    dynamic_refresh: true
    internal_only: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:70-
  - android:70-
  - chrome_os:70-
  type: list

** ManagedConfigurationPerOrigin — Sets managed configuration values to websites to specific origins
SYNOPSIS: [{"origin": "https://www.google.com", "managed_configuration_url": "https://gstatic.google.com/configuration.json", "managed_configuration_hash": "asd891jedasd12ue9h"}, {"origin": "https://www.example.com", "managed_configuration_url": "https://gstatic.google.com/configuration2.json", "managed_configuration_hash": "djio12easd89u12aws"}]
 Setting the policy defines the return value of Managed Configuration API for given origin.

       Managed configuration API is a key-value configuration that can be accessed via navigator.managed.getManagedConfiguration() javascript call. This API is only available to origins which correspond to force-installed web applications via WebAppInstallForceList.
     

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      properties:
        managed_configuration_hash:
          type: string
        managed_configuration_url:
          type: string
        origin:
          type: string
      required:
      - origin
      - managed_configuration_url
      - managed_configuration_hash
      type: object
    type: array
  supported_on:
  - chrome.*:89-
  - chrome_os:89-
  type: dict

** WebAppInstallForceList — Configure list of force-installed Web Apps
SYNOPSIS: [{"url": "https://www.google.com/maps", "default_launch_container": "window", "create_desktop_shortcut": true}, {"url": "https://docs.google.com", "default_launch_container": "tab"}, {"url": "https://docs.google.com/editor", "default_launch_container": "window", "fallback_app_name": "Editor"}, {"url": "https://docs.google.com/sheets", "default_launch_container": "window", "custom_name": "Spreadsheets"}, {"url": "https://weather.example.com", "custom_icon": {"url": "https://mydomain.example.com/sunny_icon.png", "hash": "c28f469c450e9ab2b86ea47038d2b324c6ad3b1e9a4bd8960da13214afd0ca38"}}]
 Setting the policy specifies a list of web apps that install silently, without user interaction, and which users can't uninstall or turn off.

       Each list item of the policy is an object with a mandatory member:
       url (the URL of the web app to install)

       and 5 optional members:
       - default_launch_container
       (for how the web app opens—a new tab is the default)

       - create_desktop_shortcut
       (True if you want to create Linux and
       Microsoft® Windows® desktop shortcuts).

       - fallback_app_name
       (Starting with Google Chrome version 90,
       allows you to override the app name if it is not a
       Progressive Web App (PWA), or the app name that is temporarily
       installed if it is a PWA but authentication is required before the
       installation can be completed. If both
       custom_name and
       fallback_app_name are provided,
       the latter will be ignored.)

       - custom_name
       (Starting with Google Chrome
       version 96, allows you to permanently override the app name for all web
       apps and PWAs. Currently only supported on
       Google Chrome OS.)

       - custom_icon
       (Starting with Google Chrome
       version 96, allows you to override the app icon of installed apps. The
       icons have to be square, maximal 1 MB in size, and in one of the following
       formats: jpeg, png, gif, webp, ico. The hash value has to be the SHA256
       hash of the icon file. Currently only supported on
       Google Chrome OS.)

       See PinnedLauncherApps for pinning apps to the Google Chrome OS shelf.

  features:
    dynamic_refresh: true
    per_profile: true
  label: URLs for Web Apps to be silently installed.
  max_size: 1048576
  schema:
    items:
      properties:
        create_desktop_shortcut:
          type: boolean
        custom_icon:
          properties:
            hash:
              type: string
            url:
              type: string
          required:
          - url
          - hash
          type: object
        custom_name:
          type: string
        default_launch_container:
          enum:
          - tab
          - window
          type: string
        fallback_app_name:
          type: string
        url:
          type: string
      required:
      - url
      type: object
    type: array
  supported_on:
  - chrome.*:75-
  type: dict

** EnterpriseHardwarePlatformAPIEnabled — Enables managed extensions to use the Enterprise Hardware Platform API
SYNOPSIS: true
 Setting the policy to True lets extensions installed by enterprise policy use the Enterprise Hardware Platform API.

       Setting the policy to False or leaving it unset prevents extensions from using this API.

       Note: This policy also applies to component extensions, such as the Hangout Services extension.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:71-
  type: main

** ClientCertificateManagementAllowed — Allow users to manage installed client certificates.
SYNOPSIS: 1
 Setting the policy to 'All' (value 0) or leaving it unset lets users manage certificates. Setting the policy to 'None' (value 2) means users can only view (not manage) certificates.

       Setting the policy to 'UserOnly' (value 1) lets users manage user certificates, but not device-wide certificates.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow users to manage all certificates
    name: All
    value: 0
  - caption: Allow users to manage user certificates
    name: UserOnly
    value: 1
  - caption: Disallow users from managing certificates
    name: None
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome_os:74-
  type: int-enum

** ForceNetworkInProcess (DEPRECATED) — Force networking code to run in the browser process
SYNOPSIS: false
 This policy is deprecated.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.win:72-83
  type: main

** AllowPopupsDuringPageUnload (DEPRECATED) — Allows a page to show popups during its unloading
SYNOPSIS: false
 Setting the policy to True allows pages to show pop-ups while the pages unload.

       Setting the policy to False or leaving it unset prevents pages from showing pop-ups while the pages unload.

       This policy was removed in Chrome 88 and is ignored if set.

       See https://www.chromestatus.com/feature/5989473649164288.

  default_for_enterprise_users: false
  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:74-87
  type: main

** SignedHTTPExchangeEnabled — Enable Signed HTTP Exchange (SXG) support
SYNOPSIS: true
 Setting the policy to True or leaving it unset means Google Chrome will accept web contents served as Signed HTTP Exchanges.

       Setting the policy to False prevents Signed HTTP Exchanges from loading.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Accept web contents served as Signed HTTP Exchanges
    value: true
  - caption: Prevent Signed HTTP Exchanges from loading
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:75-
  tags:
  - filtering
  type: main

** ContextAwareAccessSignalsAllowlist — Enable attestation flow for a list of URLs
SYNOPSIS: ["https://example1.com", "https://[*.]example2.com", "https://foo.example3.com/path"]
 Enable Chrome Enterprise Platform Identity Connector for a list of URLs.

       Setting this policy specifies which URLs should be allowed to be part of the attestation flow to get the set of signals from the machine.

       Leaving this policy unset or empty means that no endpoint will be able to start the attestation flow nor get signals from the machine.

       URLs must have HTTPS scheme, e.g. "https://example.com".

       Note: Wildcards, *, are allowed.

       For ChromeOS, this policy is related to remote attestation where a certificate is automatically generated and uploaded to the Device Management Server.

       For detailed information on valid URL patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:95-
  type: list

** UserFeedbackAllowed — Allow user feedback
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset lets users send feedback to Google through Menu > Help > Report an Issue or key combination.

       Setting the policy to Disabled means users can't send feedback to Google.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow users to file feedback
    value: true
  - caption: Prevent users from filing feedback
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:77-
  - chrome_os:77-
  type: main

** DeviceScheduledReboot — Set custom schedule to reboot kiosk devices
SYNOPSIS: {"reboot_time": {"hour": 22, "minute": 30}, "frequency": "WEEKLY", "day_of_week": "TUESDAY", "day_of_month": 11}
 Allows setting a custom schedule to reboot devices. The policy currently applies only to devices which have enabled auto-launch app in the Kiosk session. Once set to True, the device will reboot to the schedule. The policy must be removed to cancel any more scheduled reboots.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    properties:
      day_of_month:
        description: Day of month [1-31] when the reboot should happen, interpreted
          in the device's local time zone. Only used when 'frequency' is 'MONTHLY'.
          If this is more than the maximum number of days in a given month then the
          last day of the month will be chosen.
        maximum: 31
        minimum: 1
        type: integer
      day_of_week:
        $ref: WeekDay
        description: Day of week when the reboot should happen, interpreted in the device's
          local time zone. Only used when 'frequency' is 'WEEKLY'.
      frequency:
        description: Frequency at which the reboot should recur.
        enum:
        - DAILY
        - WEEKLY
        - MONTHLY
        type: string
      reboot_time:
        $ref: Time
        description: Time when the reboot should happen, interpreted in the device's
          local time zone.
    required:
    - reboot_time
    - frequency
    type: object
  supported_on:
  - chrome_os:94-
  type: dict

** CommandLineFlagSecurityWarningsEnabled — Enable security warnings for command-line flags
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset means security warnings appear when potentially dangerous command-line flags are used to launch Chrome.

       Setting the policy to Disabled prevents security warnings from appearing when Chrome is launched with potentially dangerous command-line flags.

       On Microsoft® Windows®, this functionality is only available on instances that are joined to a Microsoft® Active Directory® domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.

  default: true
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Show security warnings when potentially dangerous command-line flags are
      used
    value: true
  - caption: Hide security warnings when potentially dangerous command-line flags are
      used
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:76-
  tags:
  - system-security
  type: main

** DevicePowerwashAllowed — Allow the device to request powerwash
SYNOPSIS: true
 Setting the policy to Enabled or leaving it unset lets a device trigger powerwash.

       Setting the policy to Disabled doesn't let a device trigger powerwash. An exception to still allow a powerwash can occur if TPMFirmwareUpdateSettings is set to a value that lets the TPM firmware update, but it hasn't updated yet.

  device_only: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:77-
  type: main

** CACertificateManagementAllowed — Allow users to manage installed CA certificates.
SYNOPSIS: 1
 Setting the policy to All (0) or leaving it unset lets users edit trust settings for all CA certificates, remove user-imported certificates, and import certificates using Certificate Manager. Setting the policy to UserOnly (1) lets users manage only user-imported certificates, but not change trust settings of built-in certificates. Setting it to None (2) lets users view (not manage) CA certificates.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow users to manage all certificates
    name: All
    value: 0
  - caption: Allow users to manage user certificates
    name: UserOnly
    value: 1
  - caption: Disallow users from managing certificates
    name: None
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome_os:78-
  type: int-enum

** OnFileDownloadedEnterpriseConnector — Configuration policy for the OnFileDownloaded Chrome Enterprise Connector
SYNOPSIS: [{"service_provider": "Google", "enable": [{"url_list": ["*"], "tags": ["malware"]}, {"url_list": ["*.them.com", "*.others.com"], "tags": ["dlp"]}], "disable": [{"url_list": ["*.us.com"], "tags": ["malware"]}], "block_until_verdict": 1, "block_password_protected": false, "block_large_files": true, "require_justification_tags": ["malware", "dlp"], "custom_messages": [{"message": "Custom message for potential sensitive data leaks.", "learn_more_url": "moreinfo.example.com", "language": "default", "tag": "dlp"}, {"message": "Custom message for potential malware file transfer.", "learn_more_url": "moreinfo.example.com/en", "language": "en-US", "tag": "malware"}, {"message": "Message pour le transfert de logiciel malveillant.", "learn_more_url": "moreinfo.example.com/fr", "language": "fr-CA", "tag": "malware"}]}]
 List of Chrome Enterprise Connectors services settings to be applied to the OnFileDownloaded Enterprise Connector, which triggers when a file is downloaded in Chrome.

       The url_list, tags, enable and disable fields are used to determine if the connector should send a file for analysis when it is downloaded from a specific page and what tags to include in the analysis request for that file. A tag corresponding to an 'enable' pattern will be included in the analysis request if the page URL matches a pattern associated to that tag as long as no 'disable' pattern with that same tag matches the page URL. The analysis occurs if at least 1 tag is to be included in the request.

       The service_provider field identifies which analysis service provider the settings correspond to.

       The block_until_verdict field being set to 1 means Chrome will wait to get a response from the analysis service before giving the user access to the downloaded file. Any other integer value means Chrome gives the user access to the file immediately.

       The block_password_protected field controls whether Chrome blocks or allows files that are password protected.

       The block_large_files fields controls whether Chrome blocks or allows files that are too large to be analyzed (50+ MB).

       The require_justification_tags field is used to determine for which tags the connector should require the user to enter a justification to bypass a scan that results in a bypassable warning. If the field is not set, it's assumed that a justification is not required.

       The custom_messages, message, learn_more_url, language and tag fields are used to configure a message to show the user when a warning is shown after a scan had a non-clean verdict. The message field contains the text to show the user and should have at most 200 characters. The learn_more_url field contains an admin-provided URL that will be clickable by the user to get more customer-provided information about why the action was blocked. The language field is optional and contains the language of the message. An empty language field or a value of 'default' indicates a message to be used when the user's language doesn't have a message. The tag field specifies for which type of scans the message is displayed. The custom_messages list can have zero or more entries, where each entry is required to have non-empty message and tag fields.

       This policy can only be set from the Google Admin console.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future: true
  schema:
    items:
      properties:
        block_large_files:
          type: boolean
        block_password_protected:
          type: boolean
        block_until_verdict:
          type: integer
        custom_messages:
          items:
            properties:
              language:
                type: string
              learn_more_url:
                type: string
              message:
                type: string
              tag:
                type: string
            type: object
          type: array
        disable:
          items:
            properties:
              tags:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        enable:
          items:
            properties:
              tags:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        require_justification_tags:
          items:
            type: string
          type: array
        service_provider:
          type: string
      type: object
    type: array
  supported_on:
  - chrome.*:84-
  - chrome_os:84-
  type: dict

** OnFileAttachedEnterpriseConnector — Configuration policy for the OnFileAttached Chrome Enterprise Connector
SYNOPSIS: [{"service_provider": "Google", "enable": [{"url_list": ["*"], "tags": ["malware"]}, {"url_list": ["*.them.com", "*.others.com"], "tags": ["dlp"]}], "disable": [{"url_list": ["*.us.com"], "tags": ["malware"]}], "block_until_verdict": 0, "block_password_protected": true, "block_large_files": false, "require_justification_tags": ["malware", "dlp"], "custom_messages": [{"message": "Custom message for potential sensitive data leaks.", "learn_more_url": "moreinfo.example.com", "language": "default", "tag": "dlp"}, {"message": "Custom message for potential malware file transfer.", "learn_more_url": "moreinfo.example.com/en", "language": "en-US", "tag": "malware"}, {"message": "Message pour le transfert de logiciel malveillant.", "learn_more_url": "moreinfo.example.com/fr", "language": "fr-CA", "tag": "malware"}]}]
 List of Chrome Enterprise Connectors services settings to be applied to the OnFileAttached Enterprise Connector, which triggers when a file is attached to Chrome.

       The url_list, tags, enable and disable fields are used to determine if the connector should send a file for analysis when it is attached to a specific page and what tags to include in the analysis request for that file. A tag corresponding to an 'enable' pattern will be included in the analysis request if the page URL matches a pattern associated to that tag as long as no 'disable' pattern with that same tag matches the page URL. The analysis occurs if at least 1 tag is to be included in the request.

       The service_provider field identifies which analysis service provider the settings correspond to.

       The block_until_verdict field being set to 1 means Chrome will wait to get a response from the analysis service before giving the page access to the file. Any other integer value means Chrome gives the page access to the file immediately.

       The block_password_protected field controls whether Chrome blocks or allows files that are password protected.

       The block_large_files fields controls whether Chrome blocks or allows files that are too large to be analyzed (50+ MB).

       The require_justification_tags field is used to determine for which tags the connector should require the user to enter a justification to bypass a scan that results in a bypassable warning. If the field is not set, it's assumed that a justification is not required.

       The custom_messages, message, learn_more_url, language and tag fields are used to configure a message to show the user when a warning is shown after a scan had a non-clean verdict. The message field contains the text to show the user and should have at most 200 characters. The learn_more_url field contains an admin-provided URL that will be clickable by the user to get more customer-provided information about why the action was blocked. The language field is optional and contains the language of the message. An empty language field or a value of 'default' indicates a message to be used when the user's language doesn't have a message. The tag field specifies for which type of scans the message is displayed. The custom_messages list can have zero or more entries, where each entry is required to have non-empty message and tag fields.

       This policy can only be set from the Google Admin console.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future: true
  schema:
    items:
      properties:
        block_large_files:
          type: boolean
        block_password_protected:
          type: boolean
        block_until_verdict:
          type: integer
        custom_messages:
          items:
            properties:
              language:
                type: string
              learn_more_url:
                type: string
              message:
                type: string
              tag:
                type: string
            type: object
          type: array
        disable:
          items:
            properties:
              tags:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        enable:
          items:
            properties:
              tags:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        require_justification_tags:
          items:
            type: string
          type: array
        service_provider:
          type: string
      type: object
    type: array
  supported_on:
  - chrome.*:84-
  type: dict

** OnBulkDataEntryEnterpriseConnector — Configuration policy for the OnBulkDataEntry Chrome Enterprise Connector
SYNOPSIS: [{"service_provider": "Google", "enable": [{"url_list": ["*"], "tags": ["malware"]}, {"url_list": ["*.them.com", "*.others.com"], "tags": ["dlp"]}], "disable": [{"url_list": ["*.us.com"], "tags": ["malware"]}], "block_until_verdict": 0, "minimum_data_size": 100, "require_justification_tags": ["malware", "dlp"], "custom_messages": [{"message": "Custom message for potential sensitive data leaks.", "learn_more_url": "moreinfo.example.com", "language": "default", "tag": "dlp"}, {"message": "Custom message for potential malware file transfer.", "learn_more_url": "moreinfo.example.com/en", "language": "en-US", "tag": "malware"}, {"message": "Message pour le transfert de logiciel malveillant.", "learn_more_url": "moreinfo.example.com/fr", "language": "fr-CA", "tag": "malware"}]}]
 List of Chrome Enterprise Connectors services settings to be applied to the OnBulkDataEntry Enterprise Connector, which triggers when data is entered in Chrome from the clipboard or by drag and dropping web content.

       The url_list, tags, enable and disable fields are used to determine if the connector should send data for analysis when it is entered in a specific page and what tags to include in the analysis request for that data. A tag corresponding to an 'enable' pattern will be included in the analysis request if the page URL matches a pattern associated to that tag as long as no 'disable' pattern with that same tag matches the page URL. The analysis occurs if at least 1 tag is to be included in the request.

       The service_provider field identifies which analysis service provider the settings correspond to.

       The block_until_verdict field being set to 1 means Chrome will wait to get a response from the analysis service before giving the page access to the data. Any other integer value means Chrome gives the page access to the data immediately.

       The minimum_data_size field indicates the minimum size (in bytes) data entered in Chrome must equal or surpass to be scanned. The default value is 100 bytes if the field is unset.

       The require_justification_tags field is used to determine for which tags the connector should require the user to enter a justification to bypass a scan that results in a bypassable warning. If the field is not set, it's assumed that a justification is not required.

       The custom_messages, message, learn_more_url, language and tag fields are used to configure a message to show the user when a warning is shown after a scan had a non-clean verdict. The message field contains the text to show the user and should have at most 200 characters. The learn_more_url field contains an admin-provided URL that will be clickable by the user to get more customer-provided information about why the action was blocked. The language field is optional and contains the language of the message. An empty language field or a value of 'default' indicates a message to be used when the user's language doesn't have a message. The tag field specifies for which type of scans the message is displayed. The custom_messages list can have zero or more entries, where each entry is required to have non-empty message and tag fields.

       This policy can only be set from the Google Admin console.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future: true
  schema:
    items:
      properties:
        block_until_verdict:
          type: integer
        custom_messages:
          items:
            properties:
              language:
                type: string
              learn_more_url:
                type: string
              message:
                type: string
              tag:
                type: string
            type: object
          type: array
        disable:
          items:
            properties:
              tags:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        enable:
          items:
            properties:
              tags:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        minimum_data_size:
          minimum: 0
          type: integer
        require_justification_tags:
          items:
            type: string
          type: array
        service_provider:
          type: string
      type: object
    type: array
  supported_on:
  - chrome.*:84-
  type: dict

** OnSecurityEventEnterpriseConnector — Configuration policy for the OnSecurityEvent Chrome Enterprise Connector
SYNOPSIS: [{"service_provider": "Google", "enabled_event_names": ["passwordChangedEvent", "sensitiveDataEvent"]}]
 List of Chrome Enterprise Connectors services settings to be applied to the OnSecurityEvent Enterprise Connector, which triggers when a security event occurs in Chrome. This includes negative verdicts from analysis Enterprise Connectors, password reuse, navigations to unsafe pages and other security sensitive user actions.

       The service_provider field identifies which reporting service provider the settings correspond to and the enabled_event_names field identifies which events are enabled for this provider.

       This policy can only be set from the Google Admin console.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future: true
  schema:
    items:
      properties:
        enabled_event_names:
          items:
            type: string
          type: array
        service_provider:
          type: string
      type: object
    type: array
  supported_on:
  - chrome.*:84-
  type: dict

** EnterpriseRealTimeUrlCheckMode — Check Safe Browsing status of URLs in real time
SYNOPSIS: 1
 This policy controls checking URLs in real time to identify unsafe URLs.

       If this policy is left not set or set to ‘Disabled’, the consumer Safe Browsing checks will be applied. Consumer Safe Browsing checks can still include real time lookups, depending on the value of the “Make searches and browsing better” setting and the value of the UrlKeyedAnonymizedDataCollectionEnabled policy.

       If this policy is set to ‘Enabled’, URLs will be sent to be scanned in real time under enterprise ToS. It will result in Chrome sending URLs to Google Cloud or third parties of your choosing to check them in real time. The consumer version of Safe Browsing real time lookup will be switched off.

       This policy can only be set from the Google Admin console.

  default: 0
  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Real time URL check is disabled.
    name: Disabled
    value: 0
  - caption: Real time check for main frame URLs is enabled.
    name: Enabled
    value: 1
  schema:
    enum:
    - 0
    - 1
    type: integer
  supported_on:
  - chrome.*:86-
  type: int-enum

** BrowserLegacyExtensionPointsBlocked — Block Browser Legacy Extension Points
SYNOPSIS: false
 Setting the policy to Enabled or leaving it unset will enable ProcessExtensionPointDisablePolicy to block legacy extension points in the Browser process.

       Setting the policy to Disabled has a detrimental effect on Google Chrome's security and stability as unknown and potentially hostile code can load inside Google Chrome's browser process. Only turn off the policy if there are compatibility issues with third-party software that must run inside Google Chrome's browser process.

       Note: Read more about Process mitigation policies ( https://chromium.googlesource.com/chromium/src/+/HEAD/docs/design/sandbox.md#Process-mitigation-policies ).

  default: true
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Block legacy extension points in the Browser process
    value: true
  - caption: Do not block legacy extension points in the Browser process
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.win:95-
  tags:
  - system-security
  type: main

** HSTSPolicyBypassList — List of names that will bypass the HSTS policy check
SYNOPSIS: ["meet"]
 Setting the policy specifies a list of hostnames that bypass preloaded HSTS upgrades from http to https.

       Only single-label hostnames are allowed in this policy, and this policy only applies to "static" HSTS-preloaded entries (for instance, "app", "new", "search", "play"). This policy does not prevent HSTS upgrades for servers that have "dynamically" requested HSTS upgrades using a Strict-Transport-Security response header.

       Supplied hostnames must be canonicalized: Any IDNs must be converted to their A-label format, and all ASCII letters must be lowercase. This policy only applies to the specific single-label hostnames specified, not to subdomains of those names.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    items:
      pattern: ^[a-z0-9-]*$
      type: string
    type: array
  supported_on:
  - chrome.*:78-
  tags:
  - system-security
  type: list

** AllowSyncXHRInPageDismissal — Allows a page to perform synchronous XHR requests during page dismissal.
SYNOPSIS: false
 This policy allows an admin to specify that a page may send synchronous XHR requests during page dismissal.

       When the policy is set to enabled, pages are allowed to send synchronous XHR requests during page dismissal.

       When the policy is set to disabled or not set, pages are not allowed to send synchronous XHR requests during page dismissal.

       This policy will be removed in Chrome 93.

       See https://www.chromestatus.com/feature/4664843055398912 .

  default_for_enterprise_users: true
  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:78-
  type: main

** TLS13HardeningForLocalAnchorsEnabled (DEPRECATED) — Enable a TLS 1.3 security feature for local trust anchors.
SYNOPSIS: true
 This policy controls a security feature in TLS 1.3 which protects connections against downgrade attacks. It is backwards-compatible and will not affect connections to compliant TLS 1.2 servers or proxies. However, older versions of some TLS-intercepting proxies have an implementation flaw which causes them to be incompatible.

       If this policy is set to True or not set, Google Chrome will enable these security protections for all connections.

       If this policy is set to False, Google Chrome will disable these security protections for connections authenticated with locally-installed CA certificates. These protections are always enabled for connections authenticated with publicly-trusted CA certificates.

       The default value for this policy was changed in Google Chrome 81 from false to true. Affected proxies are expected to fail connections with an error code of ERR_TLS13_DOWNGRADE_DETECTED. Administrators who need more time to upgrade affected proxies may use this policy to temporarily disable this security feature. This policy was removed in version 86.
      

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:79-85
  - chrome_os:79-85
  - android:79-85
  tags:
  - system-security
  type: main

** AudioSandboxEnabled — Allow the audio sandbox to run
SYNOPSIS: true
 This policy controls the audio process sandbox.
       If this policy is enabled, the audio process will run sandboxed.
       If this policy is disabled, the audio process will run unsandboxed and the WebRTC audio-processing module will run in the renderer process.
       This leaves users open to security risks related to running the audio subsystem unsandboxed.
       If this policy is not set, the default configuration for the audio sandbox will be used, which may differ per platform.
       This policy is intended to give enterprises flexibility to disable the audio sandbox if they use security software setups that interfere with the sandbox.

  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:79-
  tags:
  - system-security
  type: main

** CorsMitigationList (DEPRECATED) — Enable CORS check mitigations in the new CORS implementation
SYNOPSIS: ["x-googapps-allowed-domains", "youtube-restrict"]
 Enable CORS check mitigations in the new CORS implementation, allowing Extensions to keep compatible behavior, and allowing Google Chrome to send specified headers without CORS checks.

       If this list is set to empty, Google Chrome tries to run Extensions in compatible manners, and does not introduce API changes for Google Chrome 79 as explained at https://developer.chrome.com/extensions/webRequest.

       If this list is set to have HTTP request header names, CORS inspection will ignore the listed headers in addition to enable the mitigation for Extensions.

       If this list is not set, both mitigations explained above are not applied.

       For details on CORS, visit: https://www.chromestatus.com/feature/5768642492891136.

       Note that this policy was announced to be removed in Google Chrome version 82, but removed in version 84.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:79-83
  type: list

** CorsLegacyModeEnabled (DEPRECATED) — Use the legacy CORS implementation rather than new CORS
SYNOPSIS: false
 Use the legacy CORS implementation rather than new CORS.

       If this setting is set to True, the legacy implementation is used that should be compatible with previous versions.

       If this setting is set to False, or is not set, the new implementation is used that might cause enterprise specific compatibility issues potentially.

       This policy will be removed after a couple of milestones.

       For details on CORS, visit: https://www.chromestatus.com/feature/5768642492891136.

       Note that this policy was announced to be removed in Google Chrome version 82, but removed in version 84.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:79-83
  type: main

** ExternalProtocolDialogShowAlwaysOpenCheckbox — Show an "Always open" checkbox in external protocol dialog.
SYNOPSIS: true
  This policy controls whether or not the "Always open" checkbox is shown on external protocol launch confirmation prompts.

       If this policy is set to True or not set, when an external protocol confirmation is shown, the user can select "Always allow" to skip all future confirmation prompts for the protocol on this site.

       If this policy is set to False, the "Always allow" checkbox is not displayed and the user will be prompted each time an external protocol is invoked.

  default: true
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Allow users to select "Always allow" when an external protocol dialog is
      shown to skip future confirmation prompts
    value: true
  - caption: Always require users to confrim external protocol prompts
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:79-
  type: main

** WebComponentsV0Enabled (DEPRECATED) — Re-enable Web Components v0 API until M84.
SYNOPSIS: true
  The Web Components v0 APIs (Shadow DOM v0, Custom Elements v0, and HTML Imports) were deprecated in 2018, and have been disabled by default starting in M80. This policy allows these features to be selectively re-enabled until M84.

       If this policy is set to True, the Web Components v0 features will be enabled for all sites.

       If this policy is set to False or not set, the Web Components v0 features will be disabled by default, starting in M80.

       This policy will be removed after Chrome 84.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-84
  - chrome_os:80-84
  - android:80-84
  - webview_android:80-84
  type: main

** UseLegacyFormControls (DEPRECATED) — Use Legacy Form Controls until M84.
SYNOPSIS: true
  Starting in M81, the standard form control elements (e.g. <select>, <button>, <input type=date>) were given a refreshed look and feel, with improved accessibility and better platform uniformity. This policy restores the old "legacy" form control elements until M84.

       If this policy is set to True, the "legacy" form control elements will be used for all sites.

       If this policy is set to False or not set, the form control elements will be enabled as they are launched in M81, M82, and M83.

       This policy will be removed after Chrome 84.

  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:81-84
  type: main

** ClickToCallEnabled — Enable the Click to Call Feature
SYNOPSIS: true
 Enable the Click to Call feature which allows users to send phone numbers from Chrome Desktops to an Android device when the user is Signed-in. For more information, see help center article: https://support.google.com/chrome/answer/9430554?hl=en.

       If this policy is set to enabled, the capability of sending phone numbers to Android devices will be enabled for the Chrome user.

       If this policy is set to disabled, the capability of sending phone numbers to Android devices will be disabled for the Chrome user.

       If you set this policy, users cannot change or override it.

       If this policy is left unset, the Click to Call feature is enabled by default.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:79-
  type: main

** UserDataSnapshotRetentionLimit — Limits the number of user data snapshots retained for use in case of emergency rollback.
SYNOPSIS: 3
 Following each major version update, Chrome will create a snapshot of certain portions of the user's browsing data for use in case of a later emergency version rollback. If an emergency rollback is performed to a version for which a user has a corresponding snapshot, the data in the snapshot is restored. This allows users to retain such settings as bookmarks and autofill data.

       If this policy is not set, the default value of 3 is used

       If the policy is set, old snapshots are deleted as needed to respect the limit. If the policy is set to 0, no snapshots will be taken

  default: 3
  features:
    dynamic_refresh: false
    per_profile: false
  schema:
    minimum: 0
    type: integer
  supported_on:
  - chrome.*:83-
  type: int

** AmbientAuthenticationInPrivateModesEnabled — Enable Ambient Authentication for profile types.
SYNOPSIS: 0
 Configuring this policy will allow/disallow ambient authentication for Incognito and Guest profiles in Google Chrome.

       Ambient Authentication is http authentication with default credentials if explicit credentials are not provided via NTLM/Kerberos/Negotiate challenge/response schemes.

       Setting the RegularOnly (value 0), allows ambient authentication for Regular sessions only. Incognito and Guest sessions wouldn't be allowed to ambiently authenticate.

       Setting the IncognitoAndRegular (value 1), allows ambient authentication for Incognito and Regular sessions. Guest sessions wouldn't be allowed to ambiently authenticate.

       Setting the GuestAndRegular (value 2), allows ambient authentication for Guest and Regular sessions. Incognito sessions wouldn't be allowed to ambiently authenticate.

       Setting the  All (value 3), allows ambient authentication for all sessions.

       Note that, ambient authentication is always allowed on regular profiles.

       In Google Chrome version 81 and later, if the policy is left not set, ambient authentication will be enabled in regular sessions only.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Enable ambient authentication in regular sessions only.
    name: RegularOnly
    value: 0
  - caption: Enable ambient authentication in incognito and regular sessions.
    name: IncognitoAndRegular
    value: 1
  - caption: Enable ambient authentication in guest and regular sessions.
    name: GuestAndRegular
    value: 2
  - caption: Enable ambient authentication in regular, incognito and guest sessions.
    name: All
    value: 3
  schema:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
  supported_on:
  - chrome.*:80-
  - chrome_os:80-
  type: int-enum

** PaymentMethodQueryEnabled — Allow websites to query for available payment methods.
SYNOPSIS: true
 Allows you to set whether websites are allowed to check if the user has payment methods saved.

       If this policy is set to disabled, websites that use PaymentRequest.canMakePayment or PaymentRequest.hasEnrolledInstrument API will be informed that no payment methods are available.

       If the setting is enabled or not set then websites are allowed to check if the user has payment methods saved.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-
  type: main

** StricterMixedContentTreatmentEnabled (DEPRECATED) — Enable stricter treatment for mixed content
SYNOPSIS: true
 This policy has been removed as of M85, please use InsecureContentAllowedForUrls to allow insecure content on a per-site basis instead.
        This policy controls the treatment for mixed content (HTTP content in HTTPS sites) in the browser.
        If the policy is set to true or unset, audio and video mixed content will be autoupgraded to HTTPS (i.e. the URL will be rewritten as HTTPS, without a fallback if the resource is not available over HTTPS) and a 'Not Secure' warning will be shown in the URL bar for image mixed content.
        If the policy is set to false, autoupgrades will be disabled for audio and video, and no warning will be shown for images.
        This policy does not affect other types of mixed content other than audio, video, and images.
        This policy will no longer take effect starting in Google Chrome 84.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:80-
  type: main

** LocalDiscoveryEnabled (DEPRECATED) — Enable chrome://devices
SYNOPSIS: true
 This policy controls access to controllable features in the local discovery UI (chrome://devices) which shows discoverable devices near the user as well as cloud devices registered to them. On all operating systems except for Google Chrome OS, the local discovery UI also allows users to add classic printers connected to their computers to Google Cloud Print.

       Setting the policy to Enabled or not set allow local device discovery.

       Setting the policy to Disabled prevents local device discovery.
      

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow local device discovery
    value: true
  - caption: Prevent local device discovery
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:81-87
  type: main

** AdvancedProtectionDeepScanningEnabled (DEPRECATED) — Enable sending downloads to Google for deep scanning for users enrolled in the Advanced Protection program
SYNOPSIS: true
 This policy is deprecated, and has been replaced with AdvancedProtectionAllowed.

       This policy controls whether users enrolled in the Advanced Protection program are allowed to send their downloads to Google for malware scanning. If set to True or not set, enrolled users will be be prompted to send their files to Google for deep scanning. If the user selects 'Scan', their download will be sent to Google. If set to False, users will not be prompted and their downloads will not be sent to Google.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:81-81
  type: main

** AllowNativeNotifications (DEPRECATED) — Allows native notifications
SYNOPSIS: true
 This policy is deprecated, please use the 'AllowSystemNotifications' policy instead.

 Configures whether Google Chrome on Linux will use native notifications.

 If set to True or not set, Google Chrome is allowed to use native notifications.

 If set to False, Google Chrome will not use native notifications. Google Chrome's Message Center will be used as a fallback.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.linux:83-
  type: main

** AllowSystemNotifications — Allows system notifications
SYNOPSIS: true
 Configures whether Google Chrome on Linux will use system notifications.

 If set to True or not set, Google Chrome is allowed to use system notifications.

 If set to False, Google Chrome will not use system notifications. Google Chrome's Message Center will be used as a fallback.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow system notifications to be used
    value: true
  - caption: Do not allow system notifications to be used
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:90-
  type: main

** AdvancedProtectionAllowed — Enable additional protections for users enrolled in the Advanced Protection program
SYNOPSIS: true
 This policy controls whether users enrolled in the Advanced Protection program receive extra protections. Some of these features may involve the sharing of data with Google (for example, Advanced Protection users will be able to send their downloads to Google for malware scanning). If set to True or not set, enrolled users will receive extra protections. If set to False, Advanced Protection users will receive only the standard consumer features.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:83-
  type: main

** ScrollToTextFragmentEnabled — Enable scrolling to text specified in URL fragments
SYNOPSIS: false
 This feature allows for hyperlinks and address bar URL navigations to target specific text within a web page, which will be scrolled to once the loading of the web page is complete.

 If you enable or don't configure this policy, web page scrolling to specific text fragments via URL will be enabled.

 If you disable this policy, web page scrolling to specific text fragments via URL will be disabled.

  default: true
  features:
    dynamic_refresh: false
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:83-
  type: main

** AccessibilityImageLabelsEnabled — Enable Get Image Descriptions from Google.
SYNOPSIS: false
 The Get Image Descriptions from Google
           accessibility feature enables visually-impaired screen reader users to
           get descriptions of unlabeled images on the web. Users who choose to enable it
           will have the option of using an anonymous Google service to provide
           automatic descriptions for unlabeled images they encounter on the web.

           If this feature is enabled, the content of images will be sent to Google
           servers in order to generate a description. No cookies or other user
           data is sent, and Google does not save or log any image content.

           If this policy is set to Enabled, the
           Get Image Descriptions from Google
           feature will be enabled, though it will only affect users who are using a
           screen reader or other similar assistive technology.

           If this policy is set to Disabled, users will not have the option of enabling
           the feature.

           If this policy is not set, user can choose to use this feature or not.
          

  default: null
  features:
    can_be_recommended: false
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Use an anonymous Google service to provide automatic descriptions for unlabeled
      images
    value: true
  - caption: Do not use Google services to provide automatic image descriptions
    value: false
  - caption: Let users choose to use an anonymous Google service to provide automatic
      descriptions for unlabeled images
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome_os:84-
  - chrome.*:84-
  tags:
  - google-sharing
  type: main

** IntensiveWakeUpThrottlingEnabled — Control the IntensiveWakeUpThrottling feature.
SYNOPSIS: true
 When enabled the IntensiveWakeUpThrottling feature causes Javascript timers in background tabs to be aggressively throttled and coalesced, running no more than once per minute after a page has been backgrounded for 5 minutes or more.

           This is a web standards compliant feature, but it may break functionality
           on some websites by causing certain actions to be delayed by up to a
           minute. However, it results in significant CPU and battery savings when
           enabled. See https://bit.ly/30b1XR4 for more details.

           If this policy is set to enabled then the feature will be force enabled, and
           users will not be able to override this.

           If this policy is set to disabled then the feature will be force disabled, and
           users will not be able to override this.

           If this policy is left unset then the feature will be controlled by its
           own internal logic, which can be manually configured by users.

           Note that the policy is applied per renderer process, with the most recent
           value of the policy setting in force when a renderer process starts. A full
           restart is required to ensure that all loaded tabs receive a consistent
           policy setting. It is harmless for processes to be running with different
           values of this policy.
          

  default: null
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:85-
  type: main

** UserAgentClientHintsEnabled (DEPRECATED) — Control the User-Agent Client Hints feature.
SYNOPSIS: true
 Note that this policy was removed in M94.  This policy was intended for short-term adaptation purposes only.

       When enabled the User-Agent Client Hints feature sends granular request headers providing information about the user browser and environment.
       This is an additive feature, but the new headers may break some websites that restrict the characters that requests may contain.
       If this policy is enabled or not set the User-Agent Client Hints feature is enabled. If the policy is disabled the feature is unavailable.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:84-93
  - chrome.*:84-93
  - android:84-93
  type: main

** UserAgentClientHintsGREASEUpdateEnabled — Control the User-Agent Client Hints GREASE Update feature.
SYNOPSIS: true
 When enabled the User-Agent Client Hints GREASE Update feature aligns the User-Agent GREASE algorithm with the latest spec.
       The updated spec may break some websites that restrict the characters that requests may contain. See the spec for more information: https://wicg.github.io/ua-client-hints/#grease
       If this policy is enabled or not set the User-Agent Client Hints GREASE Update feature is enabled. If the policy is disabled the prior User-Agent GREASE algorithm is used.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  future_on:
  - chrome.*
  items:
  - caption: Allow the updated User-Agent GREASE algorithm to be run.
    value: true
  - caption: Force the prior User-Agent GREASE algorithm to be used.
    value: false
  schema:
    type: boolean
  type: main

** ShowFullUrlsInAddressBar — Show Full URLs
SYNOPSIS: false
 This feature enables display of the full URL in the address bar.
       If this policy is set to True, then the full URL will be shown in the address bar, including schemes and subdomains.
       If this policy is set to False, then the default URL display will apply.
       If this policy is left unset, then the default URL display will apply and the user will be able to toggle between default and full URL display with a context menu option.
      

  default: null
  default_for_enterprise_users: false
  features:
    can_be_recommended: true
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome_os:86-
  - chrome.*:86-
  type: main

** InsecureFormsWarningsEnabled — Enable warnings for insecure forms
SYNOPSIS: true
 This policy controls the treatment for insecure forms (forms that submit over HTTP) embedded in secure (HTTPS) sites in the browser.
        If the policy is enabled or unset, a full page warning will be shown when an insecure form is submitted. Additionally, a warning bubble will be shown next to the form fields when they are focused, and autofill will be disabled for those forms.
        If the policy is disabled, warnings will not be shown for insecure forms, and autofill will work normally.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    type: boolean
  supported_on:
  - chrome.*:86-
  type: main

** LookalikeWarningAllowlistDomains — Suppress lookalike domain warnings on domains
SYNOPSIS: ["foo.example.com", "example.org"]
 This policy prevents the display of lookalike URL warnings on the sites listed. These warnings are typically shown on sites that Google Chrome believes might be trying to spoof another site the user is familiar with.

        If the policy is enabled and set to one or more domains, no lookalike warnings pages will be shown when the user visits pages on that domain.

        If the policy is not set, or set to an empty list, warnings may appear on any site the user visits.

        A hostname can be allowed with a complete host match, or any domain match. For example, a URL like "https://foo.example.com/bar" may have warnings suppressed if this list includes either "foo.example.com" or "example.com".

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:86-
  tags:
  - system-security
  - website-sharing
  type: list

** TosDialogBehavior — Configuring the ToS behavior during first-run for CCT
SYNOPSIS: 2
 By default the Terms of Service are shown when CCT is first-run. Setting this policy to SkipTosDialog will cause the Terms of Service dialog to not appear during the first-run-experience or subsequent runs. Setting this policy to StandardTosDialog or leaving it unset will cause the Terms of Service dialog to appear during the first-run-experience. The other caveats are:

       - This policy only works on fully managed Android devices that can be configured by Unified Endpoint Management vendors.

       - If this policy is SkipTosDialog the BrowserSignin policy will have no effect.

       - If this policy is SkipTosDialog metrics​ will not be sent to the server.

       - If this policy is SkipTosDialog the browser will have limited functionality.

       - If this policy is SkipTosDialog admins must communicate this to end users of the device.

  default: 1
  features:
    dynamic_refresh: false
    per_profile: false
    platform_only: true
  items:
  - caption: Use default browser behavior, shows the ToS and waits for the user to accept.
    name: StandardTosDialog
    value: 1
  - caption: Automatically skips ToS and loads the browser.
    name: SkipTosDialog
    value: 2
  schema:
    enum:
    - 1
    - 2
    type: integer
  supported_on:
  - android:87-
  type: int-enum

** EnableDeprecatedPrivetPrinting (DEPRECATED) — Enable deprecated privet printing
SYNOPSIS: true
 This policy controls whether any available privet printers are shown to users in the print preview dialog.
       Setting this policy to Enabled will show available privet printers.
       Setting this policy to Disabled or leaving it unset will result in privet printers not appearing in print preview, as this printing method is deprecated.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable deprecated privet printing
    value: true
  - caption: Disable deprecated privet printing
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:89-93
  type: main

** DataLeakPreventionReportingEnabled — Enable data leak prevention reporting
SYNOPSIS: true
 This policy is a general switch for all rules defined in the DataLeakPreventionRulesList policy.
       Setting this policy to True will switch on real-time reporting of data leak prevention events.
       Setting this policy to False or leaving it unset will switch off the reporting.
       Rules defined with ALLOW level restrictions in DataLeakPreventionRulesList will not report events in both cases.

  default: false
  features:
    can_be_recommended: false
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Enable reporting of data leak prevention events
    value: true
  - caption: Disable reporting of data leak prevention events
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:92-
  type: main

** WebRtcAllowLegacyTLSProtocols — Allow legacy TLS/DTLS downgrade in WebRTC
SYNOPSIS: false
 If enabled, WebRTC peer connections can downgrade to obsolete
       versions of the TLS/DTLS (DTLS 1.0, TLS 1.0 and TLS 1.1) protocols.
       When this policy is disabled or not set, these TLS/DTLS versions are
       disabled.

       This policy is temporary and will be removed in a future version
       of Google Chrome.

  default: false
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Allow WebRTC to use obsolete versions of the TLD/DTLS protocol
    value: true
  - caption: Prevent WebRTC from using obsolete versions of TLS/DTLS
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:87-
  - chrome_os:87-
  type: main

** MediaRecommendationsEnabled — Enable Media Recommendations
SYNOPSIS: true
 By default the browser will show media recommendations that are personalized to the user. Setting this policy to Disabled will result in these recommendations being hidden from the user. Setting this policy to Enabled or leaving it unset will result in the media recommendations being shown to the user.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Show media recommendations to the user
    value: true
  - caption: Hide media recommendations from the user
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:87-
  type: main

** BrowsingDataLifetime — Browsing Data Lifetime Settings
SYNOPSIS: [{"time_to_live_in_hours": 24, "data_types": ["browsing_history"]}, {"time_to_live_in_hours": 12, "data_types": ["password_signin", "autofill"]}]
 Configures browsing data lifetime settings for Google Chrome. This policy allows admins to configure (per data-type) when data is deleted by the browser. This is useful for customers that work with sensitive customer data. The policy will only take effect if SyncDisabled is set to true.

       The available data types are 'browsing_history', 'download_history', 'cookies_and_other_site_data', 'cached_images_and_files', 'password_signin', 'autofill', 'site_settings' and 'hosted_app_data'.

       The browser will automatically remove data of selected types that is older than 'time_to_live_in_hours'. The minimum value that can be set is 1 hour.

       The deletion of expired data will happen 15 seconds after the browser starts then every hour while the browser is running.

  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      properties:
        data_types:
          items:
            enum:
            - browsing_history
            - download_history
            - cookies_and_other_site_data
            - cached_images_and_files
            - password_signin
            - autofill
            - site_settings
            - hosted_app_data
            type: string
          type: array
        time_to_live_in_hours:
          minimum: 1
          type: integer
      type: object
    type: array
  supported_on:
  - chrome.*:89-
  type: dict

** LacrosSecondaryProfilesAllowed — Allow users to create and use secondary profiles, and use guest mode in the Lacros browser
SYNOPSIS: true
 This setting allows users to create and use secondary profiles, and use guest mode in the Lacros browser.

       Similar to both BrowserAddPersonEnabled and BrowserGuestModeEnabled, if this policy is set to false or unset, the user cannot create or use secondary profiles, and use guest mode. Previously created secondary profiles, if any, will be unavailable.

       If this policy is set to true, the user can create and use secondary profiles, and use guest mode.

       Note, that if this policy is set to true but BrowserAddPersonEnabled is set to false, the user cannot create secondary profiles. The same for BrowserGuestModeEnabled and guest mode.

  default: true
  default_for_enterprise_users: false
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Allow users to create and use secondary profiles, and use guest mode in
      the Lacros browser
    value: true
  - caption: Prevent users from creating and using secondary profiles, and from using
      guest mode in the Lacros browser
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:91-92
  - chrome_os:91-
  type: main

** ClearBrowsingDataOnExitList — Clear Browsing Data on Exit
SYNOPSIS: ["browsing_history", "download_history", "cookies_and_other_site_data", "cached_images_and_files", "password_signin", "autofill", "site_settings", "hosted_app_data"]
 Configures a list of browsing data types that should be deleted when the user closes all browser windows. The available data types are browsing history (browsing_history), download history (download_history), cookies (cookies_and_other_site_data), cache(cached_images_and_files), autofill (autofill), passwords (password_signin), site settings (site_settings) and hosted apps data (hosted_app_data). This policy does not take precedence over AllowDeletingBrowserHistory.

       This policy requires the SyncDisabled policy to be set to true, otherwise it will be ignored. If this policy is set at platform level, Sync should be disabled at platform level. If this policy is set at user level, Sync should be disabled for that user in order for this policy to take effect.

       If Google Chrome does not exit cleanly (for example, if the browser or the OS crashes), the browsing data will be cleared the next time the profile is loaded.

  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Browsing history
    name: browsing_history
    value: browsing_history
  - caption: Download history
    name: download_history
    value: download_history
  - caption: Cookies and other site data
    name: cookies_and_other_site_data
    value: cookies_and_other_site_data
  - caption: Cached images and files
    name: cached_images_and_files
    value: cached_images_and_files
  - caption: Password signin
    name: password_signin
    value: password_signin
  - caption: Autofill
    name: autofill
    value: autofill
  - caption: Site settings
    name: site_settings
    value: site_settings
  - caption: Hosted apps data
    name: hosted_app_data
    value: hosted_app_data
  schema:
    items:
      enum:
      - browsing_history
      - download_history
      - cookies_and_other_site_data
      - cached_images_and_files
      - password_signin
      - autofill
      - site_settings
      - hosted_app_data
      type: string
    type: array
  supported_on:
  - chrome.*:89-
  type: string-enum-list

** ProfilePickerOnStartupAvailability — Profile picker availability on startup
SYNOPSIS: 0
 Specifies whether the profile picker is enabled, disabled or forced at the browser startup.

       By default the profile picker is not shown if the browser starts in guest or incognito mode, a profile directory and/or urls are specified by command line, an app is explicitly requested to open, the browser was launched by a native notification, there is only one profile available or the policy ForceBrowserSignin is set to true.

       If 'Enabled' (0) is selected or the policy is left unset, the profile picker will be shown at startup by default, but users will be able to enable/disable it.

       If 'Disabled' (1) is selected, the profile picker will never be shown, and users will not be able to change the setting.

       If 'Forced' (2) is selected, the profile picker cannot be suppressed by the user. The profile picker will be shown even if there is only one profile available.

  default: 0
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Profile picker available at startup
    name: Enabled
    value: 0
  - caption: Profile picker disabled at startup
    name: Disabled
    value: 1
  - caption: Profile picker forced at startup
    name: Forced
    value: 2
  schema:
    enum:
    - 0
    - 1
    - 2
    type: integer
  supported_on:
  - chrome.*:89-
  type: int-enum

** SigninInterceptionEnabled — Enable signin interception
SYNOPSIS: true
 This settings enables or disables signin interception.

       When this policy not set or is set to True, the signin interception dialog triggers when a Google account is added on the web, and the user may benefit from moving this account to another (new or existing) profile.

       When this is set to False, the signin interception dialog does not trigger.

  default: null
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Enable signin interception
    value: true
  - caption: Disable signin interception
    value: false
  - caption: Enable signin interception
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:89-
  type: main

** SendDownloadToCloudEnterpriseConnector — Configuration policy for the File System Enterprise Connector handling of downloaded files
SYNOPSIS: [{"service_provider": "Google", "enterprise_id": "1234567890", "domain": "example.com", "enable": [{"url_list": ["*"], "mime_types": ["text/plain"]}, {"url_list": ["*.them.com", "*.others.com"], "mime_types": ["image/png"]}], "disable": [{"url_list": ["*.us.com"], "mime_types": ["application/zip"]}]}]
 List of settings to be applied to the File System Enterprise Connector, which triggers when a file is downloaded.

       The url_list, mime_types, enable and disable fields are used to determine if the connector should send a file to the service provider when downloading from a web page. The web page URL must match a pattern associated to an 'enable' pattern and not associated to a 'disable' pattern.  The file's MIME type must also match a pattern associated to an 'enable' pattern and not associated to a 'disable' pattern.

       The service_provider field identifies which analysis service provider the settings correspond to.

       The enterprise_id field is a unique ID for a partner service provider that identifies the customer's account with the service provider. When the user is asked to sign in as part of setting up the File System Enterprise Connector, only user accounts associated with this customer's service provider account are permitted.

       This policy can only be set from the Google Admin console.

  features:
    cloud_only: true
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  schema:
    items:
      properties:
        disable:
          items:
            properties:
              mime_types:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        domain:
          type: string
        enable:
          items:
            properties:
              mime_types:
                items:
                  type: string
                type: array
              url_list:
                items:
                  type: string
                type: array
            type: object
          type: array
        enterprise_id:
          type: string
        service_provider:
          type: string
      type: object
    type: array
  type: dict

** WebAppSettings — Web App management settings
SYNOPSIS: {"https://foo.example": {"run_on_os_login": "allowed"}, "https://bar.example": {"run_on_os_login": "blocked"}, "https://foobar.example": {"run_on_os_login": "run_windowed"}, "*": {"run_on_os_login": "blocked"}}
 Setting the policy controls web app management settings for Google Chrome.

       This policy allows an admin to specify settings for web apps installed through WebAppInstallForceList. A default configuration can be set using the special ID "*", which applies to all web apps without a custom configuration in this policy.

       The "run_on_os_login" field specifies if a web app can be run during OS login. If this field is set to "blocked", the web app will not run during OS login and the user will not be able to enable this later. If this field is set to "run_windowed", the web app will run during OS login and the user will not be able to disable this later. If this field is set to "allowed", the user will be able to configure the web app to run at OS login. The default configuration only allows the "allowed" and "blocked" values.
      

  features:
    dynamic_refresh: true
    per_profile: false
  future_on:
  - chrome.*
  schema:
    patternProperties:
      ^.+$:
        properties:
          run_on_os_login:
            enum:
            - allowed
            - blocked
            - run_windowed
            type: string
        type: object
    properties:
      '*':
        properties:
          run_on_os_login:
            enum:
            - allowed
            - blocked
            type: string
        type: object
    type: object
  type: dict

** FetchKeepaliveDurationSecondsOnShutdown — Fetch keepalive duration on Shutdown
SYNOPSIS: 1
 Controls the duration (in seconds) allowed for keepalive requests on browser shutdown.

       When specified, browser shutdown can be blocked up to the specified seconds,
       to process keepalive (https://fetch.spec.whatwg.org/#request-keepalive-flag) requests.

       The default value (0) means this feature is disabled.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    maximum: 5
    minimum: 0
    type: integer
  supported_on:
  - chrome.*:90-
  type: int

** SuppressDifferentOriginSubframeDialogs — Suppress JavaScript Dialogs triggered from different origin subframes
SYNOPSIS: true
 As described in https://www.chromestatus.com/feature/5148698084376576 , JavaScript modal dialogs, triggered by window.alert, window.confirm, and window.prompt, will be blocked in Google Chrome if triggered from a subframe whose origin is different from the main frame origin.
        This policy allows overriding that change.
        If the policy is set to enabled or unset, JavaScript dialogs triggered from a different origin subframe will be blocked.
        If the policy is set to disabled, JavaScript dialogs triggered from a different origin subframe will not be blocked.

        This policy will be removed in Google Chrome version 95.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Block JavaScript dialogs triggered from a different origin subframe.
    value: true
  - caption: Allow JavaScript dialogs triggered from a different origin subframe.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:91-
  type: main

** ForcedLanguages — Configure the content and order of preferred languages
SYNOPSIS: ["en-US"]
 This policy allows admins to configure the order of the preferred languages in Google Chrome's settings.

       The order of the list will appear in the same order under the "Order languages based on your preference" section in chrome://settings/languages. Users won't be able to remove or reorder languages set by the policy, but will be able to add languages underneath those set by the policy. Users will also have full control over the browser's UI language and translation/spell check settings, unless enforced by other policies.

       Leaving the policy unset lets users manipulate the entire list of preferred languages.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    items:
      type: string
    type: array
  supported_on:
  - chrome.*:91-
  type: list

** BrowserThemeColor — Configure the color of the browser's theme
SYNOPSIS: "#FFFFFF"
 This policy allows admins to configure the color of Google Chrome's theme. The input string should be a valid hex color string matching the format "#RRGGBB".

       Setting the policy to a valid hex color causes a theme based on that color to be automatically generated and applied to the browser. Users won't be able to change the theme set by the policy.

       Leaving the policy unset lets users change their browser's theme as preferred.

  default: null
  features:
    dynamic_refresh: true
    per_profile: true
  schema:
    description: Hex color which will be used to generate and apply a theme to the browser.
    type: string
  supported_on:
  - chrome.*:91-
  type: string

** WebRtcIPHandling — The IP handling policy of WebRTC
SYNOPSIS: "default"
 This policy allows restricting which IP addresses and interfaces WebRTC uses when attempting to find the best available connection. See RFC 8828 section 5.2 (https://tools.ietf.org/html/rfc8828.html#section-5.2). When unset, defaults to using all available interfaces.

  default: default
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: WebRTC will use all available interfaces when searching for the best path.
    name: default
    value: default
  - caption: WebRTC will only use the interface connecting to the public Internet, but
      may connect using private IP addresses.
    name: default_public_and_private_interfaces
    value: default_public_and_private_interfaces
  - caption: WebRTC will only use the interface connecting to the public Internet, and
      will not connect using private IP addresses.
    name: default_public_interface_only
    value: default_public_interface_only
  - caption: WebRTC will use TCP on the public-facing interface, and will only use UDP
      if supported by a configured proxy.
    name: disable_non_proxied_udp
    value: disable_non_proxied_udp
  schema:
    enum:
    - default
    - default_public_and_private_interfaces
    - default_public_interface_only
    - disable_non_proxied_udp
    type: string
  supported_on:
  - chrome.*:91-
  type: string-enum

** DeviceAllowedBluetoothServices — Only allow connection to the Bluetooth services in the list
SYNOPSIS: ["0x111E", "0x110B", "0x1203", "0x1108", "0x110C", "0x110E", "0x110F", "0x1200"]
 This policy allows admins to configure Bluetooth services that Google Chrome OS is allowed to connect to.

 When this policy is set, Google Chrome OS only allows users to connect to the specified Bluetooth services with an exception when the list is empty which means any service is allowed to use. UUIDs reserved by the Bluetooth SIG can be represented as '0xABCD' or 'ABCD'. Custom UUIDs can be represented as 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'. UUIDs are case insensitive. Leaving this policy unset lets users connect to any Bluetooth service.

  device_only: true
  features:
    dynamic_refresh: true
  schema:
    items:
      pattern: ^((0x)?[0-9A-Fa-f]{4})|((0x)?[0-9A-Fa-f]{8})|([0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12})$
      type: string
    type: array
  supported_on:
  - chrome_os:91-
  type: list

** ExplicitlyAllowedNetworkPorts — Explicitly allowed network ports
SYNOPSIS: ["10080"]
 There is a list of restricted ports built into Google Chrome. Connections to these ports will fail. This setting permits bypassing that list. The value is a comma-separated list of zero or more ports that outgoing connections will be permitted on.

       Ports are restricted to prevent Google Chrome being used as a vector to exploit various network vulnerabilities. Setting this policy may expose your network to attacks. This policy is intended as a temporary workaround for errors with code "ERR_UNSAFE_PORT" while migrating a service running on a blocked port to a standard port (ie. port 80 or 443).

       Malicious websites can easily detect that this policy is set, and for what ports, and use that information to target attacks.

       Each port here is labelled with a date that it can be unblocked until. After that date the port will be restricted regardless of this setting.

       Leaving the value empty or unset means that all restricted ports will be blocked. If there is a mixture of valid and invalid values, the valid ones will be applied.

       This policy overrides the "--explicitly-allowed-ports" command-line option.

  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: port 554 (can be unblocked until 2021/10/15)
    name: '554'
    supported_on:
    - chrome.*:91-95
    - android:91-95
    - chrome_os:91-95
    - webview_android:91-95
    value: '554'
  - caption: port 10080 (can be unblocked until 2022/04/01)
    name: '10080'
    supported_on:
    - chrome.*:91-99
    - android:91-99
    - chrome_os:91-99
    - webview_android:91-99
    value: '10080'
  - caption: port 6566 (can be unblocked until 2021/10/15)
    name: '6566'
    supported_on:
    - chrome.*:91-94
    - android:91-94
    - chrome_os:91-94
    - webview_android:91-94
    value: '6566'
  - caption: port 989 (can be unblocked until 2022/02/01)
    name: '989'
    supported_on:
    - chrome.*:93-100
    - android:93-100
    - chrome_os:93-100
    - webview_android:93-100
    value: '989'
  - caption: port 990 (can be unblocked until 2022/02/01)
    name: '990'
    supported_on:
    - chrome.*:93-100
    - android:93-100
    - chrome_os:93-100
    - webview_android:93-100
    value: '990'
  schema:
    items:
      enum:
      - '554'
      - '10080'
      - '6566'
      - '989'
      - '990'
      type: string
    type: array
  supported_on:
  - chrome.*:91-
  tags:
  - system-security
  - website-sharing
  - local-data-access
  type: string-enum-list

** SuggestLogoutAfterClosingLastWindow — Display the logout confirmation dialog
SYNOPSIS: true
 The policy only applies to managed guest sessions.
       Setting the policy to True or leaving it unset will show a dialog asking the user to confirm or deny logout when the last window is closed.
       Setting the policy to False will prevent the dialog from being displayed and therefore also disables auto-logout after closing the last window.

  default: true
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: Show logout dialog on last window closed.
    value: true
  - caption: Suppress showing logout dialog on last window closed.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:92-
  type: main

** TripleDESEnabled (DEPRECATED) — Enable 3DES cipher suites in TLS
SYNOPSIS: false
 Warning: 3DES will be completely removed from Google Chrome in version 95 (around October 2021) and this policy will stop working then.

       If the policy is set to true, then 3DES cipher suites in TLS will be enabled. If it is set to false, they will be disabled. If the policy is unset, 3DES cipher suites are disabled by default. This policy may be used to temporarily retain compatibility with an outdated server. This is a stopgap measure and the server should be reconfigured.
      

  default: null
  features:
    dynamic_refresh: true
    per_profile: false
  items:
  - caption: 3DES cipher suites will be enabled in TLS
    value: true
  - caption: 3DES cipher suites will be disabled in TLS
    value: false
  - caption: Use the default setting for 3DES cipher suites in TLS
    value: null
  schema:
    type: boolean
  supported_on:
  - chrome.*:92-96
  tags:
  - system-security
  type: main

** ManagedAccountsSigninRestriction — Add restrictions on managed accounts
SYNOPSIS: "primary_account"

       This policy requires SigninInterceptionEnabled to be set to True to take effect.

       If this policy is set to 'primary_account' at the machine level, all managed accounts will be forced to be primary.
       If this policy is set to 'primary_account' on an account, that account will always be a primary account, but may have secondary accounts in its profile.

       If this policy is set to 'primary_account_strict' at the machine level, all managed accounts will be forced to be primary.
       If this policy is set to 'primary_account_strict' on an account, that account will always be a primary account and will not have any secondary accounts in its profile.

       If this policy is set to 'none' or not set, managed accounts have no restrictions. This may result in a managed account being a secondary account, which disables its ability to receive policies set on the account by the admin.
    

  default: none
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: A Managed account must be a primary account
    name: PrimaryAccount
    value: primary_account
  - caption: A Managed account must be a primary account and have no secondary accounts
    name: PrimaryAccountStrict
    value: primary_account_strict
  - caption: No restrictions on managed accounts
    name: None
    value: none
  schema:
    enum:
    - primary_account
    - primary_account_strict
    - affiliated_device
    - none
    type: string
  supported_on:
  - chrome.*:94-
  type: string-enum

** LockIconInAddressBarEnabled — Enable lock icon in the omnibox for secure connections
SYNOPSIS: true
 This policy controls the treatment for lock icon in the omnibox.
        From Chrome M93, there is a new omnibox icon for secure connections.
        If the policy is Enabled, Chrome will use the existing lock icon for secure connections.
        If the policy is Disabled or not set, Chrome will use the default icon for secure connections.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Use lock icon for secure connections
    value: true
  - caption: Use default icons for secure connections
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:93-
  type: main

** HttpsOnlyMode — Allow HTTPS-Only Mode to be enabled
SYNOPSIS: "disallowed"
 This policy controls whether users can enable HTTPS-Only Mode in Settings. HTTPS-Only Mode upgrades all navigations to HTTPS.
       If this setting is not set or set to allowed, users will be allowed to enable HTTPS-Only Mode.
       If this setting is set to disallowed, users will not be allowed to enable HTTPS-Only Mode.
       Force enabling HTTPS-Only Mode is not currently supported.

  default: allowed
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow users to enable HTTPS-Only Mode
    name: allowed
    value: allowed
  - caption: Do not allow users to enable HTTPS-Only Mode
    name: disallowed
    value: disallowed
  - caption: Force enable HTTPS-Only Mode (not supported yet)
    name: force_enabled
    value: force_enabled
  schema:
    enum:
    - allowed
    - disallowed
    - force_enabled
    type: string
  supported_on:
  - chrome.*:94-
  type: string-enum

** DesktopSharingHubEnabled — Enable desktop sharing in the omnibox and 3-dot menu
SYNOPSIS: true
 Setting the policy to True or leaving it unset lets users share or save the current webpage using actions provided by the desktop sharing hub. The sharing hub is accessed through either an omnibox icon or the 3-dot menu.

        Setting the policy to False removes the sharing icon from the omnibox and the entry from the 3-dot menu.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Enable desktop sharing hub
    value: true
  - caption: Disable desktop sharing hub
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.linux:93-
  type: main

** RestrictedManagedGuestSessionExtensionCleanupExemptList — Configure the list of extension IDs exempt from the restricted managed guest session clean-up procedure
SYNOPSIS: ["abcdefghijklmnopabcdefghijklmnop", "bcdefghijklmnopabcdefghijklmnopa"]
 The policy only applies to managed guest sessions.
       Setting the policy specifies a list of extension IDs that are exempt from the restricted managed guest session clean-up procedure (see DeviceRestrictedManagedGuestSessionEnabled).
       Leaving the policy unset means no extensions are exempt from the reset procedure.

  features:
    dynamic_refresh: true
    per_profile: false
  schema:
    items:
      pattern: ^[a-p]{32}$
      type: string
    type: array
  supported_on:
  - chrome_os:96-
  type: list

** ChromeAppsEnabled — Extend support for Chrome Apps on Windows, Mac, and Linux.
SYNOPSIS: true
 Chrome Apps are deprecated on Windows, Mac, and Linux.
       If this policy is enabled, Google Chrome will continue to allow Chrome Apps to be run on these platforms until the final date when Chrome Apps support is removed on all platforms, June 2022.
       If this policy is disabled or unset, Chrome Apps may not be allowed to run, depending on the status of the deprecation rollout.
       In either case, Chrome Apps that are force installed by policy will continue to be allowed.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.linux
  items:
  - caption: Chrome Apps will be allowed to run on these platforms.
    value: true
  - caption: Chrome Apps may not be allowed to run, depending on the status of the deprecation
      rollout.
    value: false
  schema:
    type: boolean
  type: main

** GhostWindowEnabled — Enable the ghost window feature
SYNOPSIS: true
 Setting the policy to enable the ghost window feature.
       If this policy is true, ARC ghost windows will be created before ARC boots after a crash or reboot based on the restore app setting.
       If this policy is false, there is no ghost window created before ARC boots. Arc apps are restored after ARC boots

  default: true
  features:
    dynamic_refresh: false
    per_profile: true
  items:
  - caption: Enable the ghost window feature.
    value: true
  - caption: Disable the ghost window feature.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome_os:96-
  type: main

** WebSQLInThirdPartyContextEnabled — Force WebSQL in third-party contexts to be re-enabled.
SYNOPSIS: true
 WebSQL in third-party contexts (e.g., cross-site iframes) is off by default as of M97 and will be fully removed in M101.
           If this policy is set to false or unset, WebSQL in third party contexts will remain off.
           If this policy is set to true, WebSQL in third-party contexts will be re-enabled.

  default: false
  features:
    dynamic_refresh: false
    per_profile: false
  items:
  - caption: Force WebSQL in third-party contexts to be re-enabled.
    value: true
  - caption: Allow WebSQL in third-party contexts to be disabled by default.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:96-100
  type: main

** AccessCodeCastEnabled — Allow users to select cast devices with an access code or QR code from within the Google Cast menu.
SYNOPSIS: true
 This policy controls whether a user will be presented with an option, within the Google Cast menu which allows them to cast to cast devices that do not appear in the Google Cast menu, using either the access code or QR code displayed on the cast devices's screen.
       By default, a user must reenter the access code or rescan the QR code in order to initiate a subsequent casting session, but if the AccessCodeCastDeviceDuration policy has been set to a non-zero value (the default is zero), then the cast device will remain in the list of available cast devices until the specified period of time has expired.
       When this policy is set to Enabled, users will be presented with the option to select cast devices by using an access code or by scanning a QR code.
       When this policy is set to Disabled or not set, users will not be given the option to select cast devices by using an access code or by scanning a QR code.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  items:
  - caption: User will be given the option in the Google Cast menu to select cast devices
      by using an access code or by scanning a QR code.
    value: true
  - caption: User will not be given the option in the Google Cast menu to select cast
      devices by using an access code or by scanning a QR code.
    value: false
  schema:
    type: boolean
  type: main

** AccessCodeCastDeviceDuration — Specifies how long (in seconds) a cast device selected with an access code or QR code stays in the Google Cast menu's list of cast devices.
SYNOPSIS: 60
 This policy specifies how long (in seconds) a cast device that was previously selected via an access code or QR code can be seen within the Google Cast menu of cast devices.
       The lifetime of an entry starts at the time the access code was first entered or the QR code was first scanned.
       During this period the cast device will appear in the Google Cast menu's list of cast devices.
       After this period, in order to use the cast device again the access code must be reentered or the QR code must be rescanned.
       By default, the period is zero seconds, so cast devices will not stay in the Google Cast menu, and so the access code must be reentered, or the QR code rescanned, in order to initiate a new casting session.
       Note that this policy only affects how long a cast devices appears in the Google Cast menu, and has no effect on any ongoing cast session which will continue even if the period expires.
       This policy has no effect unless the AccessCodeCastEnabled policy is Enabled.

  default: 0
  features:
    dynamic_refresh: true
    per_profile: true
  future_on:
  - chrome.*
  schema:
    minimum: 0
    type: integer
  type: int

** DeskTemplatesEnabled — Allow users to select a desk template layout to load
SYNOPSIS: true
 Setting the policy to Enabled allows users to use desktop layout templates.  Setting the policy to Disabled or unset means these templates will be unavailable.

  default: false
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Allow users to use desk templates
    value: true
  - caption: Do not allow users to use desk templates
    value: false
  schema:
    type: boolean
  type: main

** PreconfiguredDeskTemplates — Allow users to select a preconfigured desktop layout to load
SYNOPSIS: {"url": "https://example.com/a.json", "hash": "842841a4c75a55ad050d686f4ea5f77e83ae059877fe9b6946aa63d3d057ed32"}
 If set, this policy contains information to download a desk template file.  The file contains a desk template to be provisioned for the current user.
       If not set, no preconfigured desk template will be included in the list of desk templates.  If the DeskTemplatesEnabled
       policy is not set to true, this policy has no effect.

  features:
    dynamic_refresh: true
    per_profile: true
  max_size: 1048576
  schema:
    properties:
      hash:
        description: The SHA-256 hash of the desk template.
        type: string
      url:
        description: The URL from which the desk template can be downloaded.
        type: string
    type: object
  type: external

** FastPairEnabled — Enable Fast Pair (fast Bluetooth pairing)
SYNOPSIS: true
 Setting this policy will force Fast Pair to be enabled or disabled.
       Fast Pair is a new Bluetooth pairing flow that links paired peripherals with a GAIA account.
       This allows other Chrome OS (and Android) devices signed in with the same GAIA account to pair automatically.
       If unset, Fast Pair will follow Chrome OS's default, which is enabled.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Force Fast Pair (fast Bluetooth pairing) to be enabled.
    value: true
  - caption: Force Fast Pair (fast Bluetooth pairing) to be disabled.
    value: false
  schema:
    type: boolean
  type: main

** CORSNonWildcardRequestHeadersSupport — CORS non-wildcard request headers support
SYNOPSIS: true
 Configures support of CORS non-wildcard request headers.

       Google Chrome version 97 introduces support for CORS non-wildcard request headers. When scripts make a cross-origin network request via fetch() and XMLHttpRequest with a script-added Authorization header, the header must be explicitly allowed by the Access-Control-Allow-Headers header in the CORS preflight response. "Explicitly" here means that the wild card symbol "*" doesn't cover the Authorization header. See https://www.chromest atus.com/feature/5768642492891136 for more detail.

       If this policy is not set, or set to True, Google Chrome will support the CORS non-wildcard request headers and behave as described above.

       When this policy is set to False, chrome will allow the wildcard symbol ("*") in the Access-Control-Allow-Headers header in the CORS preflight response to cover the Authorization header.

       This Enterprise policy is temporary; it's intended to be removed after Google Chrome version 103.

  default: true
  features:
    dynamic_refresh: true
    per_profile: true
  items:
  - caption: Support CORS non-wildcard request headers.
    value: true
  - caption: Do not support CORS non-wildcard request headers.
    value: false
  schema:
    type: boolean
  supported_on:
  - chrome.*:97-103
  type: main

