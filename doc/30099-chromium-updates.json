{
    "policy_definitions": [
        {
            "caption": "Startup, Home page and New Tab page",
            "desc": "Configure the pages to load on startup, the default home page and the default new tab page in Google Chrome and prevents users from changing them.\n\n      The user's home page settings are only completely locked down if you either select the home page to be the new tab page, or set it to be a URL and specify a home page URL. If you don't specify the home page URL, then the user is still able to set the home page to the new tab page by specifying 'chrome://newtab'.\n\n      The policy 'URLs to open on startup' is ignored unless you select 'Open a list of URLs' in 'Action on startup'.",
            "name": "Startup",
            "policies": [
                "ShowHomeButton",
                "HomepageLocation",
                "HomepageIsNewTabPage",
                "NewTabPageLocation",
                "RestoreOnStartup",
                "RestoreOnStartupURLs"
            ],
            "type": "group"
        },
        {
            "caption": "Remote access",
            "desc": "Configure remote access options in Chrome Remote Desktop host.\n\n      Chrome Remote Desktop host is a native service that runs on the target machine that a user can connect to using Chrome Remote Desktop application.  The native service is packaged and executed separately from the Google Chrome browser.\n\n      These policies are ignored unless the\n      Chrome Remote Desktop host is installed.",
            "name": "RemoteAccess",
            "policies": [
                "RemoteAccessClientFirewallTraversal",
                "RemoteAccessHostClientDomain",
                "RemoteAccessHostClientDomainList",
                "RemoteAccessHostFirewallTraversal",
                "RemoteAccessHostDomain",
                "RemoteAccessHostDomainList",
                "RemoteAccessHostRequireTwoFactor",
                "RemoteAccessHostTalkGadgetPrefix",
                "RemoteAccessHostRequireCurtain",
                "RemoteAccessHostAllowClientPairing",
                "RemoteAccessHostAllowGnubbyAuth",
                "RemoteAccessHostAllowRelayedConnection",
                "RemoteAccessHostUdpPortRange",
                "RemoteAccessHostMatchUsername",
                "RemoteAccessHostTokenUrl",
                "RemoteAccessHostTokenValidationUrl",
                "RemoteAccessHostTokenValidationCertificateIssuer",
                "RemoteAccessHostDebugOverridePolicies",
                "RemoteAccessHostAllowUiAccessForRemoteAssistance",
                "RemoteAccessHostAllowFileTransfer",
                "RemoteAccessHostEnableUserInterface",
                "RemoteAccessHostAllowRemoteAccessConnections",
                "RemoteAccessHostMaximumSessionDurationMinutes",
                "RemoteAccessHostClipboardSizeBytes",
                "RemoteAccessHostAllowRemoteSupportConnections"
            ],
            "type": "group"
        },
        {
            "caption": "Password manager",
            "desc": "Configures the password manager.",
            "name": "PasswordManager",
            "policies": [
                "PasswordManagerEnabled",
                "PasswordManagerAllowShowPasswords",
                "PasswordLeakDetectionEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Proxy server",
            "desc": "Allows you to specify the proxy server used by Google Chrome and prevents users from changing proxy settings.\n\n      If you choose to never use a proxy server and always connect directly, all other options are ignored.\n\n      If you choose to auto detect the proxy server, all other options are ignored.\n\n      For detailed examples, visit:\n      https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett.\n\n      If you enable this setting, Google Chrome and ARC-apps ignore all proxy-related options specified from the command line.\n\n      Leaving these policies not set will allow the users to choose the proxy settings on their own.",
            "name": "Proxy",
            "policies": [
                "ProxyMode",
                "ProxyServerMode",
                "ProxyServer",
                "ProxyPacUrl",
                "ProxyBypassList"
            ],
            "type": "group"
        },
        {
            "caption": "HTTP authentication",
            "desc": "Policies related to integrated HTTP authentication.",
            "name": "HTTPAuthentication",
            "policies": [
                "AuthSchemes",
                "DisableAuthNegotiateCnameLookup",
                "EnableAuthNegotiatePort",
                "BasicAuthOverHttpEnabled",
                "AuthServerAllowlist",
                "AuthServerWhitelist",
                "AuthNegotiateDelegateAllowlist",
                "AuthNegotiateDelegateWhitelist",
                "AuthNegotiateDelegateByKdcPolicy",
                "GSSAPILibraryName",
                "AuthAndroidNegotiateAccountType",
                "AllowCrossOriginAuthPrompt",
                "NtlmV2Enabled",
                "IntegratedWebAuthenticationAllowed"
            ],
            "type": "group"
        },
        {
            "caption": "Kerberos",
            "desc": "Policies related to Kerberos authentication.",
            "name": "Kerberos",
            "policies": [
                "KerberosEnabled",
                "KerberosRememberPasswordEnabled",
                "KerberosAddAccountsAllowed",
                "KerberosAccounts"
            ],
            "type": "group"
        },
        {
            "caption": "Extensions",
            "desc": "Configures extension-related policies. The user is not allowed to install blocked extensions unless they are whitelisted. You can also force Google Chrome to automatically install extensions by specifying them in ExtensionInstallForcelist. Force-installed extensions are installed regardless whether they are present in the blocklist.",
            "name": "Extensions",
            "policies": [
                "ExtensionInstallAllowlist",
                "ExtensionInstallBlocklist",
                "ExtensionInstallBlacklist",
                "ExtensionInstallWhitelist",
                "ExtensionInstallForcelist",
                "ExtensionInstallSources",
                "ExtensionAllowedTypes",
                "ExtensionAllowInsecureUpdates",
                "ExtensionSettings",
                "BlockExternalExtensions"
            ],
            "type": "group"
        },
        {
            "caption": "Default search provider",
            "desc": "Configures the default search provider. You can specify the default search provider that the user will use or choose to disable default search.",
            "name": "DefaultSearchProvider",
            "policies": [
                "DefaultSearchProviderEnabled",
                "DefaultSearchProviderName",
                "DefaultSearchProviderKeyword",
                "DefaultSearchProviderSearchURL",
                "DefaultSearchProviderSuggestURL",
                "DefaultSearchProviderInstantURL",
                "DefaultSearchProviderIconURL",
                "DefaultSearchProviderEncodings",
                "DefaultSearchProviderAlternateURLs",
                "DefaultSearchProviderSearchTermsReplacementKey",
                "DefaultSearchProviderImageURL",
                "DefaultSearchProviderNewTabURL",
                "DefaultSearchProviderSearchURLPostParams",
                "DefaultSearchProviderSuggestURLPostParams",
                "DefaultSearchProviderInstantURLPostParams",
                "DefaultSearchProviderImageURLPostParams"
            ],
            "type": "group"
        },
        {
            "caption": "Content settings",
            "desc": "Content settings allow you to specify how contents of a specific type (for example Cookies, Images or JavaScript) is handled.",
            "name": "ContentSettings",
            "policies": [
                "DefaultCookiesSetting",
                "DefaultFileHandlingGuardSetting",
                "DefaultFileSystemReadGuardSetting",
                "DefaultFileSystemWriteGuardSetting",
                "DefaultImagesSetting",
                "DefaultInsecureContentSetting",
                "DefaultJavaScriptSetting",
                "DefaultJavaScriptJitSetting",
                "DefaultPluginsSetting",
                "DefaultPopupsSetting",
                "DefaultNotificationsSetting",
                "DefaultGeolocationSetting",
                "DefaultMediaStreamSetting",
                "DefaultSensorsSetting",
                "DefaultWebBluetoothGuardSetting",
                "DefaultKeygenSetting",
                "DefaultWebUsbGuardSetting",
                "DefaultSerialGuardSetting",
                "AutoSelectCertificateForUrls",
                "CookiesAllowedForUrls",
                "CookiesBlockedForUrls",
                "CookiesSessionOnlyForUrls",
                "FileHandlingAllowedForUrls",
                "FileHandlingBlockedForUrls",
                "FileSystemReadAskForUrls",
                "FileSystemReadBlockedForUrls",
                "FileSystemWriteAskForUrls",
                "FileSystemWriteBlockedForUrls",
                "ImagesAllowedForUrls",
                "ImagesBlockedForUrls",
                "InsecureContentAllowedForUrls",
                "InsecureContentBlockedForUrls",
                "JavaScriptAllowedForUrls",
                "JavaScriptBlockedForUrls",
                "JavaScriptJitAllowedForSites",
                "JavaScriptJitBlockedForSites",
                "KeygenAllowedForUrls",
                "KeygenBlockedForUrls",
                "LegacySameSiteCookieBehaviorEnabled",
                "LegacySameSiteCookieBehaviorEnabledForDomainList",
                "PluginsAllowedForUrls",
                "PluginsBlockedForUrls",
                "PopupsAllowedForUrls",
                "RegisteredProtocolHandlers",
                "PopupsBlockedForUrls",
                "NotificationsAllowedForUrls",
                "NotificationsBlockedForUrls",
                "SensorsAllowedForUrls",
                "SensorsBlockedForUrls",
                "WebUsbAllowDevicesForUrls",
                "WebUsbAskForUrls",
                "WebUsbBlockedForUrls",
                "SerialAskForUrls",
                "SerialBlockedForUrls",
                "SerialAllowAllPortsForUrls",
                "SerialAllowUsbDevicesForUrls"
            ],
            "type": "group"
        },
        {
            "caption": "Native Messaging",
            "desc": "Configures policies for Native Messaging. Blocked native messaging hosts won't be allowed unless they are whitelisted.",
            "name": "NativeMessaging",
            "policies": [
                "NativeMessagingBlacklist",
                "NativeMessagingBlocklist",
                "NativeMessagingAllowlist",
                "NativeMessagingWhitelist",
                "NativeMessagingUserLevelHosts"
            ],
            "type": "group"
        },
        {
            "caption": "Default HTML renderer for Google Chrome Frame",
            "desc": "Allows you to configure the default HTML renderer when Google Chrome Frame is installed.\n      The default setting is to allow the host browser do the rendering, but you can optionally override this and have Google Chrome Frame render HTML pages by default.",
            "name": "ChromeFrameRendererSettings",
            "owners": [
                "tommi@chromium.org"
            ],
            "policies": [
                "ChromeFrameRendererSettings",
                "RenderInChromeFrameList",
                "RenderInHostList",
                "AdditionalLaunchParameters",
                "SkipMetadataCheck"
            ],
            "type": "group"
        },
        {
            "caption": "Allow Google Chrome Frame to handle the following content types",
            "desc": "Allow Google Chrome Frame to handle the following content types.",
            "name": "ChromeFrameContentTypes",
            "owners": [
                "tommi@chromium.org"
            ],
            "policies": [
                "ChromeFrameContentTypes"
            ],
            "type": "group"
        },
        {
            "caption": "Google Drive",
            "desc": "Configure Google Drive in Google Chrome OS.",
            "name": "Drive",
            "policies": [
                "DriveDisabled",
                "DriveDisabledOverCellular"
            ],
            "type": "group"
        },
        {
            "caption": "Power management",
            "desc": "Configure power management in Google Chrome OS.\n\n      These policies let you configure how Google Chrome OS behaves when the user remains idle for some amount of time.",
            "name": "PowerManagement",
            "policies": [
                "ScreenDimDelayAC",
                "ScreenOffDelayAC",
                "ScreenLockDelayAC",
                "IdleWarningDelayAC",
                "IdleDelayAC",
                "ScreenDimDelayBattery",
                "ScreenOffDelayBattery",
                "ScreenLockDelayBattery",
                "IdleWarningDelayBattery",
                "IdleDelayBattery",
                "IdleAction",
                "IdleActionAC",
                "IdleActionBattery",
                "LidCloseAction",
                "PowerManagementUsesAudioActivity",
                "PowerManagementUsesVideoActivity",
                "PresentationIdleDelayScale",
                "PresentationScreenDimDelayScale",
                "AllowWakeLocks",
                "AllowScreenWakeLocks",
                "UserActivityScreenDimDelayScale",
                "WaitForInitialUserActivity",
                "PowerManagementIdleSettings",
                "ScreenLockDelays",
                "PowerSmartDimEnabled",
                "ScreenBrightnessPercent",
                "DevicePowerPeakShiftBatteryThreshold",
                "DevicePowerPeakShiftDayConfig",
                "DevicePowerPeakShiftEnabled",
                "DeviceBootOnAcEnabled",
                "DeviceAdvancedBatteryChargeModeEnabled",
                "DeviceAdvancedBatteryChargeModeDayConfig",
                "DeviceBatteryChargeMode",
                "DeviceBatteryChargeCustomStartCharging",
                "DeviceBatteryChargeCustomStopCharging",
                "DeviceUsbPowerShareEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Accessibility settings",
            "desc": "Configure Google Chrome OS accessibility features.",
            "name": "Accessibility",
            "policies": [
                "ShowAccessibilityOptionsInSystemTrayMenu",
                "LargeCursorEnabled",
                "SpokenFeedbackEnabled",
                "HighContrastEnabled",
                "VirtualKeyboardEnabled",
                "VirtualKeyboardFeatures",
                "StickyKeysEnabled",
                "KeyboardDefaultToFunctionKeys",
                "ScreenMagnifierType",
                "DictationEnabled",
                "SelectToSpeakEnabled",
                "KeyboardFocusHighlightEnabled",
                "CursorHighlightEnabled",
                "CaretHighlightEnabled",
                "MonoAudioEnabled",
                "AccessibilityShortcutsEnabled",
                "AutoclickEnabled",
                "DeviceLoginScreenDefaultLargeCursorEnabled",
                "DeviceLoginScreenDefaultSpokenFeedbackEnabled",
                "DeviceLoginScreenDefaultHighContrastEnabled",
                "DeviceLoginScreenDefaultVirtualKeyboardEnabled",
                "DeviceLoginScreenDefaultScreenMagnifierType",
                "DeviceLoginScreenLargeCursorEnabled",
                "DeviceLoginScreenSpokenFeedbackEnabled",
                "DeviceLoginScreenHighContrastEnabled",
                "DeviceLoginScreenVirtualKeyboardEnabled",
                "DeviceLoginScreenDictationEnabled",
                "DeviceLoginScreenSelectToSpeakEnabled",
                "DeviceLoginScreenCursorHighlightEnabled",
                "DeviceLoginScreenCaretHighlightEnabled",
                "DeviceLoginScreenMonoAudioEnabled",
                "DeviceLoginScreenAutoclickEnabled",
                "DeviceLoginScreenStickyKeysEnabled",
                "DeviceLoginScreenKeyboardFocusHighlightEnabled",
                "DeviceLoginScreenScreenMagnifierType",
                "DeviceLoginScreenShowOptionsInSystemTrayMenu",
                "DeviceLoginScreenAccessibilityShortcutsEnabled",
                "FloatingAccessibilityMenuEnabled",
                "EnhancedNetworkVoicesInSelectToSpeakAllowed"
            ],
            "type": "group"
        },
        {
            "caption": "Remote attestation",
            "desc": "Configure the remote attestation with TPM mechanism.",
            "name": "Attestation",
            "policies": [
                "AttestationEnabledForDevice",
                "AttestationEnabledForUser",
                "AttestationExtensionAllowlist",
                "AttestationExtensionWhitelist",
                "AttestationForContentProtectionEnabled",
                "DeviceWebBasedAttestationAllowedUrls"
            ],
            "type": "group"
        },
        {
            "caption": "Locally managed users settings",
            "desc": "Configure settings for managed users.",
            "name": "LocallyManagedUsers",
            "policies": [
                "SupervisedUsersEnabled",
                "SupervisedUserCreationEnabled",
                "SupervisedUserContentProviderEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Google Cast",
            "desc": "Configure policies for Google Cast, a feature that allows users to send the contents of tabs, sites or the desktop from the browser to remote displays and sound systems.",
            "name": "GoogleCast",
            "policies": [
                "EnableMediaRouter",
                "ShowCastIconInToolbar"
            ],
            "type": "group"
        },
        {
            "caption": "Allow or deny screen capture",
            "desc": "Configure policies to control the level of screen-share APIs (e.g., getDisplayMedia() or the Desktop Capture extension API)\n      that a site may capture (e.g. tab, window or desktop capture).",
            "name": "ScreenCapture",
            "policies": [
                "ScreenCaptureAllowed",
                "ScreenCaptureAllowedByOrigins",
                "WindowCaptureAllowedByOrigins",
                "TabCaptureAllowedByOrigins",
                "SameOriginTabCaptureAllowedByOrigins"
            ],
            "type": "group"
        },
        {
            "caption": "Quick unlock",
            "desc": "Configures quick unlock related policies.",
            "name": "QuickUnlock",
            "policies": [
                "QuickUnlockModeAllowlist",
                "QuickUnlockModeWhitelist",
                "QuickUnlockTimeout",
                "PinUnlockMinimumLength",
                "PinUnlockMaximumLength",
                "PinUnlockWeakPinsAllowed",
                "PinUnlockAutosubmitEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Cast Receiver",
            "desc": "Configure the Cast Receiver in Google Chrome OS.",
            "name": "CastReceiver",
            "policies": [
                "CastReceiverEnabled",
                "CastReceiverName"
            ],
            "type": "group"
        },
        {
            "caption": "Safe Browsing settings",
            "desc": "Configure Safe Browsing related policies.",
            "name": "SafeBrowsing",
            "policies": [
                "SafeBrowsingEnabled",
                "SafeBrowsingExtendedReportingEnabled",
                "SafeBrowsingProtectionLevel",
                "SafeBrowsingWhitelistDomains",
                "SafeBrowsingAllowlistDomains",
                "PasswordProtectionWarningTrigger",
                "PasswordProtectionLoginURLs",
                "PasswordProtectionChangePasswordURL"
            ],
            "type": "group"
        },
        {
            "caption": "Network File Shares settings",
            "desc": "Configure Network File Share related policies.",
            "name": "NetworkFileShares",
            "policies": [
                "NetworkFileSharesAllowed",
                "NetBiosShareDiscoveryEnabled",
                "NTLMShareAuthenticationEnabled",
                "NetworkFileSharesPreconfiguredShares"
            ],
            "type": "group"
        },
        {
            "caption": "Cloud Reporting",
            "desc": "Configure cloud reporting policies.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, these policies will be ignored.\n\n      These policies are only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.\n      These policies are always effective for Google Chrome OS.",
            "name": "CloudReporting",
            "policies": [
                "ReportVersionData",
                "ReportPolicyData",
                "ReportMachineIDData",
                "ReportUserIDData",
                "ReportExtensionsAndPluginsData",
                "ReportSafeBrowsingData",
                "CloudExtensionRequestEnabled",
                "CloudReportingEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Legacy Browser Support",
            "desc": "Configure policies to switch between browsers.\n\n      Configured websites will automatically open in another browser than Google Chrome.",
            "name": "BrowserSwitcher",
            "policies": [
                "AlternativeBrowserPath",
                "AlternativeBrowserParameters",
                "BrowserSwitcherChromePath",
                "BrowserSwitcherChromeParameters",
                "BrowserSwitcherDelay",
                "BrowserSwitcherEnabled",
                "BrowserSwitcherExternalSitelistUrl",
                "BrowserSwitcherExternalGreylistUrl",
                "BrowserSwitcherKeepLastChromeTab",
                "BrowserSwitcherParsingMode",
                "BrowserSwitcherUrlList",
                "BrowserSwitcherUrlGreylist",
                "BrowserSwitcherUseIeSitelist"
            ],
            "type": "group"
        },
        {
            "caption": "PluginVm",
            "desc": "Configure PluginVm related policies.",
            "name": "PluginVm",
            "policies": [
                "PluginVmAllowed",
                "PluginVmDataCollectionAllowed",
                "PluginVmImage",
                "PluginVmLicenseKey",
                "PluginVmRequiredFreeDiskSpace",
                "PluginVmUserId",
                "UserPluginVmAllowed"
            ],
            "type": "group"
        },
        {
            "caption": "Sign-in settings",
            "desc": "Controls the behavior of the sign-in screen, where users log into their accounts. Settings include who can log in, what type of accounts are allowed, what authentication methods should be used, as well as general accessibility, input method and locale settings.",
            "name": "Signin",
            "policies": [
                "DeviceGuestModeEnabled",
                "DeviceUserWhitelist",
                "DeviceUserAllowlist",
                "DeviceAllowNewUsers",
                "DeviceLoginScreenDomainAutoComplete",
                "DeviceShowUserNamesOnSignin",
                "DeviceWallpaperImage",
                "DeviceEphemeralUsersEnabled",
                "LoginAuthenticationBehavior",
                "DeviceSamlLoginAuthenticationType",
                "DeviceTransferSAMLCookies",
                "LoginVideoCaptureAllowedUrls",
                "DeviceStartUpFlags",
                "DeviceLoginScreenExtensions",
                "DeviceLoginScreenLocales",
                "DeviceLoginScreenInputMethods",
                "DeviceLoginScreenSystemInfoEnforced",
                "DeviceSecondFactorAuthentication",
                "DeviceLoginScreenIsolateOrigins",
                "DeviceLoginScreenSitePerProcess",
                "DeviceLoginScreenAutoSelectCertificateForUrls",
                "DeviceShowNumericKeyboardForPassword",
                "DeviceFamilyLinkAccountsAllowed",
                "DeviceLoginScreenPromptOnMultipleMatchingCertificates"
            ],
            "type": "group"
        },
        {
            "caption": "User and device reporting",
            "desc": "Controls what kind of user and device information is reported.",
            "name": "UserAndDeviceReporting",
            "policies": [
                "EnableDeviceGranularReporting",
                "ReportDeviceVersionInfo",
                "ReportDeviceBootMode",
                "ReportDeviceUsers",
                "ReportDeviceActivityTimes",
                "ReportDeviceAudioStatus",
                "ReportDeviceLocation",
                "ReportDeviceNetworkConfiguration",
                "ReportDeviceNetworkInterfaces",
                "ReportDeviceNetworkStatus",
                "ReportDeviceHardwareStatus",
                "ReportDeviceSessionStatus",
                "ReportDeviceGraphicsStatus",
                "ReportDeviceCrashReportInfo",
                "ReportDeviceOsUpdateStatus",
                "ReportDeviceBoardStatus",
                "ReportDeviceCpuInfo",
                "ReportDeviceTimezoneInfo",
                "ReportDeviceMemoryInfo",
                "ReportDeviceBacklightInfo",
                "ReportDevicePowerStatus",
                "ReportDeviceSecurityStatus",
                "ReportDeviceStorageStatus",
                "ReportDeviceAppInfo",
                "ReportDeviceBluetoothInfo",
                "ReportDeviceFanInfo",
                "ReportDeviceVpdInfo",
                "ReportDeviceSystemInfo",
                "ReportDevicePrintJobs",
                "ReportDeviceLoginLogout",
                "ReportUploadFrequency",
                "ReportArcStatusEnabled",
                "HeartbeatEnabled",
                "HeartbeatFrequency",
                "LogUploadEnabled",
                "DeviceMetricsReportingEnabled",
                "ReportDeviceNetworkTelemetryCollectionRateMs",
                "ReportDeviceNetworkTelemetryEventCheckingRateMs"
            ],
            "type": "group"
        },
        {
            "caption": "Network settings",
            "desc": "Controls device-wide network configuration.",
            "name": "Network",
            "policies": [
                "DeviceOpenNetworkConfiguration",
                "DeviceDataRoamingEnabled",
                "NetworkThrottlingEnabled",
                "DeviceHostnameTemplate",
                "DeviceHostnameUserConfigurable",
                "DeviceWiFiFastTransitionEnabled",
                "DeviceWiFiAllowed",
                "DeviceDockMacAddressSource"
            ],
            "type": "group"
        },
        {
            "caption": "Device update settings",
            "desc": "Controls how and when Chrome OS updates are applied.",
            "name": "DeviceUpdate",
            "policies": [
                "ChromeOsReleaseChannel",
                "ChromeOsReleaseChannelDelegated",
                "DeviceAutoUpdateDisabled",
                "DeviceAutoUpdateP2PEnabled",
                "DeviceAutoUpdateTimeRestrictions",
                "DeviceTargetVersionPrefix",
                "DeviceTargetVersionSelector",
                "DeviceUpdateStagingSchedule",
                "DeviceUpdateScatterFactor",
                "DeviceUpdateAllowedConnectionTypes",
                "DeviceUpdateHttpDownloadsEnabled",
                "RebootAfterUpdate",
                "MinimumRequiredChromeVersion",
                "DeviceRollbackToTargetVersion",
                "DeviceRollbackAllowedMilestones",
                "DeviceQuickFixBuildToken",
                "DeviceMinimumVersion",
                "DeviceMinimumVersionAueMessage",
                "DeviceChannelDowngradeBehavior"
            ],
            "type": "group"
        },
        {
            "caption": "Power and shutdown",
            "desc": "Controls settings related to power management and rebooting.",
            "name": "PowerAndShutdown",
            "policies": [
                "DeviceLoginScreenPowerManagement",
                "UptimeLimit",
                "DeviceRebootOnShutdown"
            ],
            "type": "group"
        },
        {
            "caption": "Kiosk settings",
            "desc": "Controls public session and kiosk account types.",
            "name": "Kiosk",
            "policies": [
                "DeviceLocalAccounts",
                "DeviceLocalAccountAutoLoginId",
                "DeviceLocalAccountAutoLoginDelay",
                "DeviceLocalAccountAutoLoginBailoutEnabled",
                "DeviceLocalAccountPromptForNetworkWhenOffline",
                "AllowKioskAppControlChromeVersion"
            ],
            "type": "group"
        },
        {
            "caption": "Other",
            "desc": "Controls miscellaneous settings including USB, bluetooth, policy refresh, developer mode and others.",
            "name": "Other",
            "policies": [
                "UsbDetachableWhitelist",
                "UsbDetachableAllowlist",
                "DeviceAllowBluetooth",
                "TPMFirmwareUpdateSettings",
                "DeviceEcryptfsMigrationStrategy",
                "DevicePolicyRefreshRate",
                "DeviceBlockDevmode",
                "DeviceAllowRedeemChromeOsRegistrationOffers",
                "DeviceQuirksDownloadEnabled",
                "ExtensionCacheSize",
                "DeviceOffHours",
                "SuggestedContentEnabled",
                "DeviceShowLowDiskSpaceNotification",
                "WebXRImmersiveArEnabled",
                "PromptOnMultipleMatchingCertificates"
            ],
            "type": "group"
        },
        {
            "caption": "Date and time",
            "desc": "Controls clock and time zone settings.",
            "name": "DateAndTime",
            "policies": [
                "SystemTimezone",
                "SystemTimezoneAutomaticDetection",
                "SystemUse24HourClock"
            ],
            "type": "group"
        },
        {
            "caption": "Display",
            "desc": "Controls display settings.",
            "name": "Display",
            "policies": [
                "DeviceDisplayResolution",
                "DisplayRotationDefault"
            ],
            "type": "group"
        },
        {
            "caption": "Printing",
            "desc": "Controls printing settings.",
            "name": "Printing",
            "policies": [
                "PrintingEnabled",
                "CloudPrintProxyEnabled",
                "PrintingAllowedColorModes",
                "PrintingAllowedDuplexModes",
                "PrintingAllowedPinModes",
                "PrintingAllowedBackgroundGraphicsModes",
                "PrintingColorDefault",
                "PrintingDuplexDefault",
                "PrintingPinDefault",
                "PrintingBackgroundGraphicsDefault",
                "PrintingPaperSizeDefault",
                "PrintingSendUsernameAndFilenameEnabled",
                "PrintingMaxSheetsAllowed",
                "PrintJobHistoryExpirationPeriod",
                "PrintingAPIExtensionsWhitelist",
                "PrintingAPIExtensionsAllowlist",
                "CloudPrintSubmitEnabled",
                "DisablePrintPreview",
                "PrintHeaderFooter",
                "DefaultPrinterSelection",
                "NativePrinters",
                "NativePrintersBulkConfiguration",
                "NativePrintersBulkAccessMode",
                "NativePrintersBulkBlacklist",
                "NativePrintersBulkWhitelist",
                "Printers",
                "PrintersBulkConfiguration",
                "PrintersBulkAccessMode",
                "PrintersBulkBlocklist",
                "PrintersBulkAllowlist",
                "DeviceNativePrinters",
                "DeviceNativePrintersAccessMode",
                "DeviceNativePrintersBlacklist",
                "DeviceNativePrintersWhitelist",
                "DevicePrinters",
                "DevicePrintersAccessMode",
                "DevicePrintersBlocklist",
                "DevicePrintersAllowlist",
                "PrintPreviewUseSystemDefaultPrinter",
                "UserNativePrintersAllowed",
                "UserPrintersAllowed",
                "ExternalPrintServers",
                "ExternalPrintServersWhitelist",
                "ExternalPrintServersAllowlist",
                "DeviceExternalPrintServers",
                "DeviceExternalPrintServersAllowlist",
                "PrinterTypeDenyList",
                "PrintRasterizationMode",
                "PrintPdfAsImageAvailability",
                "PrintRasterizePdfDpi",
                "DeletePrintJobHistoryAllowed",
                "CloudPrintWarningsSuppressed",
                "PrintPostScriptMode",
                "PrintPdfAsImageDefault"
            ],
            "type": "group"
        },
        {
            "caption": "Microsoft\u00ae Active Directory\u00ae management settings",
            "desc": "Controls settings specific to Microsoft\u00ae Active Directory\u00ae managed Google Chrome OS devices.",
            "name": "ActiveDirectoryManagement",
            "policies": [
                "DeviceMachinePasswordChangeRate",
                "DeviceUserPolicyLoopbackProcessingMode",
                "DeviceKerberosEncryptionTypes",
                "DeviceGpoCacheLifetime",
                "DeviceAuthDataCacheLifetime"
            ],
            "type": "group"
        },
        {
            "caption": "Android settings",
            "desc": "Controls settings for the Android container (ARC) and Android apps.",
            "name": "Arc",
            "policies": [
                "ArcEnabled",
                "UnaffiliatedArcAllowed",
                "ArcPolicy",
                "ArcAppInstallEventLoggingEnabled",
                "ArcBackupRestoreServiceEnabled",
                "ArcGoogleLocationServicesEnabled",
                "ArcCertificatesSyncMode",
                "ArcBackupRestoreEnabled",
                "ArcLocationServiceEnabled",
                "AppRecommendationZeroStateEnabled",
                "DeviceArcDataSnapshotHours",
                "ArcAppToWebAppSharingEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Linux container",
            "desc": "Controls settings for the Linux container (Crostini).",
            "name": "Crostini",
            "policies": [
                "VirtualMachinesAllowed",
                "CrostiniAllowed",
                "DeviceUnaffiliatedCrostiniAllowed",
                "CrostiniExportImportUIAllowed",
                "CrostiniRootAccessAllowed",
                "CrostiniAnsiblePlaybook",
                "CrostiniArcAdbSideloadingAllowed",
                "DeviceCrostiniArcAdbSideloadingAllowed",
                "CrostiniPortForwardingAllowed"
            ],
            "type": "group"
        },
        {
            "caption": "Google Assistant",
            "desc": "Controls settings for Google Assistant.",
            "name": "GoogleAssistant",
            "policies": [
                "AssistantOnboardingMode",
                "VoiceInteractionContextEnabled",
                "VoiceInteractionHotwordEnabled",
                "AssistantVoiceMatchEnabledDuringOobe",
                "VoiceInteractionQuickAnswersEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Quick Answers",
            "desc": "Controls settings for Quick Answers.",
            "name": "QuickAnswers",
            "policies": [
                "QuickAnswersEnabled",
                "QuickAnswersDefinitionEnabled",
                "QuickAnswersTranslationEnabled",
                "QuickAnswersUnitConverstionEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Wilco DTC",
            "desc": "Controls wilco diagnostics and telemetry controller settings.",
            "name": "WilcoDtc",
            "policies": [
                "DeviceWilcoDtcAllowed",
                "DeviceWilcoDtcConfiguration"
            ],
            "type": "group"
        },
        {
            "caption": "Parental supervision settings",
            "desc": "Controls parental supervision policies, that are applied to child accounts only.\n      These policies are not set in the admin console, but configured directly by Kids API Server.",
            "name": "ParentalSupervision",
            "policies": [
                "ParentAccessCodeConfig",
                "PerAppTimeLimits",
                "PerAppTimeLimitsWhitelist",
                "PerAppTimeLimitsAllowlist",
                "UsageTimeLimit",
                "EduCoexistenceToSVersion"
            ],
            "type": "group"
        },
        {
            "caption": "Privacy screen settings",
            "desc": "Controls user and device policies for the privacy screen feature.",
            "name": "PrivacyScreen",
            "policies": [
                "DeviceLoginScreenPrivacyScreenEnabled",
                "PrivacyScreenEnabled"
            ],
            "type": "group"
        },
        {
            "caption": "Certificate management settings",
            "desc": "Controls user and device policies for certificate management.",
            "name": "CertificateManagement",
            "policies": [
                "RequiredClientCertificateForDevice",
                "RequiredClientCertificateForUser"
            ],
            "type": "group"
        },
        {
            "caption": "Gaia user identity management settings",
            "desc": "Controls settings for users authenticated againts Gaia without SAML.",
            "name": "Gaia",
            "policies": [
                "GaiaOfflineSigninTimeLimitDays"
            ],
            "type": "group"
        },
        {
            "caption": "Saml user identity management settings",
            "desc": "Controls settings for users authenticated via SAML with an extaernal IdP",
            "name": "SAML",
            "policies": [
                "SamlInSessionPasswordChangeEnabled",
                "SamlPasswordExpirationAdvanceWarningDays",
                "LockScreenReauthenticationEnabled",
                "SAMLOfflineSigninTimeLimit"
            ],
            "type": "group"
        },
        {
            "caption": "Borealis",
            "desc": "Controls policies related to the Borealis subsystem.",
            "name": "Borealis",
            "policies": [
                "DeviceBorealisAllowed",
                "UserBorealisAllowed"
            ],
            "type": "group"
        },
        {
            "caption": "Configure the home page URL",
            "desc": "Setting the policy sets the default homepage URL in Google Chrome. You open the homepage using the Home button. On desktop, the RestoreOnStartup policies control the pages that open on startup.\n\n      If the homepage is set to the New Tab Page, by the user or HomepageIsNewTabPage, this policy has no effect.\n\n       The URL needs a standard scheme, such as http://example.com or https://example.com. When this policy is set, users can't change their homepage URL in Google Chrome.\n\n      Leaving both HomepageLocation and HomepageIsNewTabPage unset lets users choose their homepage.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": "https://www.chromium.org",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 1,
            "label": "Home page URL",
            "name": "HomepageLocation",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:81-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Use New Tab Page as homepage",
            "desc": "Setting the policy to Enabled makes the New Tab page the user's homepage, ignoring any homepage URL location. Setting the policy to Disabled means that their homepage is never the New Tab page, unless the user's homepage URL is set to chrome://newtab.\n\n      If you set the policy, users can't change their homepage type in Google Chrome. If not set, the user decides whether or not the New Tab page is their homepage.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 2,
            "items": [
                {
                    "caption": "Use New Tab Page as homepage",
                    "value": true
                },
                {
                    "caption": "Do not use New Tab Page as homepage",
                    "value": false
                }
            ],
            "name": "HomepageIsNewTabPage",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure the New Tab page URL",
            "desc": "Setting the policy configures the default New Tab page URL and prevents users from changing it.\n\n      The New Tab page opens with new tabs and windows.\n\n      This policy doesn't decide which pages open on start up. Those are controlled by the RestoreOnStartup policies. This policy does affect the homepage, if that's set to open the New Tab page, as well as the startup page if it's set to open the New Tab page.\n\n      It is a best practice to provide fully canonicalized URL, if the URL is not fully canonicalized Google Chrome will default to https://.\n\n      Leaving the policy unset or empty puts the default New Tab page in use.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": "https://www.chromium.org",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 360,
            "label": "New Tab page URL",
            "name": "NewTabPageLocation",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "okalitova@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:58-",
                "chrome_os:58-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Set Google Chrome as Default Browser",
            "desc": "Setting the policy to True has Google Chrome always check whether it's the default browser on startup and, if possible, automatically register itself. Setting the policy to False stops Google Chrome from ever checking if it's the default and turns user controls off for this option.\n\n      Leaving the policy unset means Google Chrome lets users control whether it's the default and, if not, whether user notifications should appear.\n\n      Note: For Microsoft\u00aeWindows\u00ae administrators, turning this setting on only works for machines running Windows 7. For later versions, you must deploy a \"default application associations\" file that makes Google Chrome the handler for the https and http protocols (and, optionally, the ftp protocol and other file formats). See Chrome Help ( https://support.google.com/chrome?p=make_chrome_default_win ).",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 3,
            "items": [
                {
                    "caption": "Enable the default browser check on startup",
                    "value": true
                },
                {
                    "caption": "Disable the default browser check on startup",
                    "value": false
                }
            ],
            "label": "Set Google Chrome as Default Browser",
            "name": "DefaultBrowserSettingEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win7:11-",
                "chrome.mac:11-",
                "chrome.linux:11-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Application locale",
            "desc": "Setting the policy specifies the locale Google Chrome uses.\n\n      Turning it off or leaving it unset means the locale will be the first valid locale from:\n      1) The user specified locale (if configured).\n      2) The system locale.\n      3) The fallback locale (en-US).",
            "example_value": "en",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 4,
            "label": "Application locale",
            "name": "ApplicationLocaleValue",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.win:8-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Enable alternate error pages",
            "desc": "Setting the policy to True means Google Chrome uses alternate error pages built into (such as \"page not found\"). Setting the policy to False means Google Chrome never uses alternate error pages.\n\n      If you set the policy, users can't change it. If not set, the policy is on, but users can change this setting.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 5,
            "items": [
                {
                    "caption": "Enable alternate error pages",
                    "value": true
                },
                {
                    "caption": "Disable alternate error pages",
                    "value": false
                }
            ],
            "name": "AlternateErrorPagesEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable search suggestions",
            "desc": "Setting the policy to True turns on search suggestions in Google Chrome's address bar. Setting the policy to False turns off these search suggestions.\n\n      If you set the policy, users can't change it. If not set, search suggestions are on at first, but users can turn them off any time.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 6,
            "items": [
                {
                    "caption": "Enable search suggestions",
                    "value": true
                },
                {
                    "caption": "Disable search suggestions",
                    "value": false
                }
            ],
            "name": "SearchSuggestEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Native Window Occlusion",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'WindowOcclusionEnabled' policy instead.\n\n      Enables native window occlusion in Google Chrome.\n\n      If you enable this setting, to reduce CPU and power consumption Google Chrome will detect when a window is covered by other windows, and will suspend work painting pixels.\n\n      If you disable this setting Google Chrome will not detect when a window is covered by other windows.\n\n      If this policy is left not set, occlusion detection will be enabled.",
            "example_value": true,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 675,
            "items": [
                {
                    "caption": "Detect covered window and suspend its painting",
                    "value": true
                },
                {
                    "caption": "Do not detect covered window",
                    "value": false
                }
            ],
            "name": "NativeWindowOcclusionEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:84-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Window Occlusion",
            "default": true,
            "desc": "Enables window occlusion in Google Chrome.\n\n      If you enable this setting, to reduce CPU and power consumption Google Chrome will detect when a window is covered by other windows, and will suspend work painting pixels.\n\n      If you disable this setting Google Chrome will not detect when a window is covered by other windows.\n\n      If this policy is left not set, occlusion detection will be enabled.",
            "example_value": true,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 817,
            "items": [
                {
                    "caption": "Detect covered window and suspend its painting",
                    "value": true
                },
                {
                    "caption": "Do not detect covered window",
                    "value": false
                }
            ],
            "name": "WindowOcclusionEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:90-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable network prediction",
            "deprecated": true,
            "desc": "This policy is deprecated in M48 in favor of NetworkPredictionOptions, and removed in M54.\n\n      Enables network prediction in Google Chrome and prevents users from changing this setting.\n\n      This controls not only DNS prefetching but also TCP and SSL preconnection and prerendering of web pages. The policy name refers to DNS prefetching for historical reasons.\n\n      If you enable or disable this setting, users cannot change or override this setting in Google Chrome.\n\n      If this policy is left not set, this will be enabled but the user will be able to change it.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 7,
            "name": "DnsPrefetchingEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-53",
                "chrome_os:11-53",
                "android:30-53"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable network prediction",
            "desc": "This policy controls network prediction in Google Chrome. It controls DNS prefetching, TCP, and SSL preconnection and prerendering of webpages.\n\n      If you set the policy, users can't change it. Leaving it unset turns on network prediction, but the user can change it.",
            "example_value": 1,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 273,
            "items": [
                {
                    "caption": "Predict network actions on any network connection",
                    "name": "NetworkPredictionAlways",
                    "value": 0
                },
                {
                    "caption": "Predict network actions on any network that is not cellular.\n          (Deprecated in 50, removed in 52. After 52, if value 1 is set, it will be treated as 0 - predict network actions on any network connection.)",
                    "name": "NetworkPredictionWifiOnly",
                    "value": 1
                },
                {
                    "caption": "Do not predict network actions on any network connection",
                    "name": "NetworkPredictionNever",
                    "value": 2
                }
            ],
            "name": "NetworkPredictionOptions",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:38-",
                "chrome_os:38-",
                "android:38-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Enable WPAD optimization",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset turns on WPAD (Web Proxy Auto-Discovery) optimization in Google Chrome.\n\n      Setting the policy to Disabled turns off WPAD optimization, causing Google Chrome to wait longer for DNS-based WPAD servers.\n\n      Whether or not this policy is set, users can't change the WPAD optimization setting.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 261,
            "items": [
                {
                    "caption": "Enable Web Proxy Auto-Discovery (WPAD) optimizations",
                    "value": true
                },
                {
                    "caption": "Disable Web Proxy Auto-Discovery (WPAD) optimization",
                    "value": false
                }
            ],
            "name": "WPADQuickCheckEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:35-",
                "chrome_os:35-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Disable SPDY protocol",
            "deprecated": true,
            "desc": "This policy is deprecated in M53 and removed in M54, because SPDY/3.1 support is removed.\n\n      Disables use of the SPDY protocol in Google Chrome.\n\n      If this policy is enabled the SPDY protocol will not be available in Google Chrome.\n\n      Setting this policy to disabled will allow the usage of SPDY.\n\n      If this policy is left not set, SPDY will be available.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 8,
            "name": "DisableSpdy",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bnc@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-53",
                "chrome_os:11-53",
                "android:30-53"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Disable URL protocol schemes",
            "deprecated": true,
            "desc": "This policy is deprecated, please use URLBlocklist instead.\n\n      Disables the listed protocol schemes in Google Chrome.\n\n      URLs using a scheme from this list will not load and can not be navigated to.\n\n      If this policy is left not set or the list is empty all schemes will be accessible in Google Chrome.",
            "example_value": [
                "file",
                "https"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 85,
            "label": "List of disabled protocol schemes",
            "name": "DisabledSchemes",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:12-",
                "chrome_os:12-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable globally scoped HTTP auth cache",
            "desc": "This policy configures a single global per profile cache with HTTP server authentication credentials.\n\n      If this policy is unset or disabled, the browser will use the default behavior of cross-site auth, which as of version 80, will be to scope HTTP server authentication credentials by top-level site, so if two sites use resources from the same authenticating domain, credentials will need to be provided independently in the context of both sites. Cached proxy credentials will be reused across sites.\n\n      If the policy is enabled, HTTP auth credentials entered in the context of one site will automatically be used in the context of another.\n\n      Enabling this policy leaves sites open to some types of cross-site attacks, and allows users to be tracked across sites even without cookies by adding entries to the HTTP auth cache using credentials embedded in URLs.\n\n      This policy is intended to give enterprises depending on the legacy behavior a chance to update their login procedures, and will be removed in the future.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 643,
            "items": [
                {
                    "caption": "Enable globally scoped HTTP authentication cache",
                    "value": true
                },
                {
                    "caption": "Disable globally scoped HTTP authentication cache",
                    "value": false
                }
            ],
            "name": "GloballyScopeHTTPAuthCacheEnabled",
            "owners": [
                "file://net/OWNERS",
                "mmenke@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-",
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "DNS interception checks enabled",
            "default": true,
            "desc": "This policy configures a local switch that can be used to disable DNS interception checks. The checks attempt to discover whether the browser is behind a proxy that redirects unknown host names.\n\n      This detection may not be necessary in an enterprise environment where the network configuration is known, since it causes some amount of DNS and HTTP traffic on start-up and each DNS configuration change.\n\n      When this policy is not set, or is enabled, the DNS interception checks are performed. When explicitly disabled, they're not.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 654,
            "items": [
                {
                    "caption": "Perform DNS interception checks",
                    "value": true
                },
                {
                    "caption": "Do not perform DNS interception checks",
                    "value": false
                }
            ],
            "name": "DNSInterceptionChecksEnabled",
            "owners": [
                "krb@chromium.org",
                "jdonnelly@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-",
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Intranet Redirection Behavior",
            "default": 0,
            "desc": "This policy configures behavior for intranet redirection via DNS interception checks. The checks attempt to discover whether the browser is behind a proxy that redirects unknown host names.\n\n      If this policy is not set, the browser will use the default behavior of DNS interception checks and intranet redirect suggestions. In M88, they are enabled by default but will be disabled by default in the future release.\n\n      DNSInterceptionChecksEnabled is a related policy that may also disable DNS interception checks; this policy is a more flexible version which may separately control intranet redirection infobars and may be expanded in the future.\n      If either DNSInterceptionChecksEnabled or this policy requests to disable interception checks, the checks will be disabled.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 792,
            "items": [
                {
                    "caption": "Use default browser behavior.",
                    "name": "Default",
                    "value": 0
                },
                {
                    "caption": "Disable DNS interception checks and did-you-mean \"http://intranetsite/\" infobars.",
                    "name": "DisableInterceptionChecksDisableInfobar",
                    "value": 1
                },
                {
                    "caption": "Disable DNS interception checks; allow did-you-mean \"http://intranetsite/\" infobars.",
                    "name": "DisableInterceptionChecksEnableInfobar",
                    "value": 2
                },
                {
                    "caption": "Allow DNS interception checks and did-you-mean \"http://intranetsite/\" infobars.",
                    "name": "EnableInterceptionChecksEnableInfobar",
                    "value": 3
                }
            ],
            "name": "IntranetRedirectBehavior",
            "owners": [
                "jdonnelly@chromium.org",
                "tommycli@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:88-",
                "chrome_os:88-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Enable HTTP/0.9 support on non-default ports",
            "deprecated": true,
            "desc": "This policy is deprecated, and slated for removal in Chrome 78, with no replacement.\n\n      This policy enables HTTP/0.9 on ports other than 80 for HTTP and 443 for HTTPS.\n\n      This policy is disabled by default, and if enabled, leaves users open to the security issue https://crbug.com/600352.\n\n      This policy is intended to give enterprises a chance to migrate exising servers off of HTTP/0.9, and will be removed in the future.\n\n      If this policy is not set, HTTP/0.9 will be disabled on non-default ports.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 345,
            "items": [
                {
                    "caption": "Enable HTTP/0.9 support on non-default ports",
                    "value": true
                },
                {
                    "caption": "Disable HTTP/0.9 support on non-default ports",
                    "value": false
                }
            ],
            "name": "Http09OnNonDefaultPortsEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:54-77",
                "chrome_os:54-77"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable JavaScript",
            "deprecated": true,
            "desc": "This policy is deprecated, please use DefaultJavaScriptSetting instead.\n\n      Can be used to disabled JavaScript in Google Chrome.\n\n      If this setting is disabled, web pages cannot use JavaScript and the user cannot change that setting.\n\n      If this setting is enabled or not set, web pages can use JavaScript but the user can change that setting.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 9,
            "items": [
                {
                    "caption": "Enable JavaScript",
                    "value": true
                },
                {
                    "caption": "Disable JavaScript",
                    "value": false
                }
            ],
            "name": "JavascriptEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Incognito mode",
            "deprecated": true,
            "desc": "This policy is deprecated. Please, use IncognitoModeAvailability instead.\n      Enables Incognito mode in Google Chrome.\n\n      If this setting is enabled or not configured, users can open web pages in incognito mode.\n\n      If this setting is disabled, users cannot open web pages in incognito mode.\n\n      If this policy is left not set, this will be enabled and the user will be able to use incognito mode.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 10,
            "items": [
                {
                    "caption": "Enable Incognito mode",
                    "value": true
                },
                {
                    "caption": "Disable Incognito mode",
                    "value": false
                }
            ],
            "name": "IncognitoEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Incognito mode availability",
            "desc": "Specifies whether the user may open pages in Incognito mode in Google Chrome.\n\n      If 'Enabled' is selected or the policy is left unset, pages may be opened in Incognito mode.\n\n      If 'Disabled' is selected, pages may not be opened in Incognito mode.\n\n      If 'Forced' is selected, pages may be opened ONLY in Incognito mode. Note that 'Forced' does not work for Android-on-Chrome\n\n      Note: On iOS, if the policy is changed during a session, it will only take effect on relaunch.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 93,
            "items": [
                {
                    "caption": "Incognito mode available",
                    "name": "Enabled",
                    "value": 0
                },
                {
                    "caption": "Incognito mode disabled",
                    "name": "Disabled",
                    "value": 1
                },
                {
                    "caption": "Incognito mode forced",
                    "name": "Forced",
                    "supported_on": [
                        "chrome.*:14-",
                        "chrome_os:14-"
                    ],
                    "value": 2
                }
            ],
            "name": "IncognitoModeAvailability",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:14-",
                "chrome_os:14-",
                "android:30-",
                "ios:90-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Disable saving browser history",
            "desc": "Setting the policy to Enabled means browsing history is not saved, tab syncing is off and users can't change this setting.\n\n      Setting the policy to Disabled or leaving it unset saves browsing history.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 11,
            "items": [
                {
                    "caption": "Disable saving browser history",
                    "value": true
                },
                {
                    "caption": "Enable saving browser history",
                    "value": false
                }
            ],
            "name": "SavingBrowserHistoryDisabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable deleting browser and download history",
            "desc": "Setting the policy to Enabled or leaving it unset means browser history and download history can be deleted in Chrome, and users can't change this setting.\n\n      Setting the policy to Disabled means browser history and download history can't be deleted. Even with this policy off, the browsing and download history are not guaranteed to be retained. Users may be able to edit or delete the history database files directly, and the browser itself may expire or archive any or all history items at any time.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 187,
            "items": [
                {
                    "caption": "Enable deleting browser and download history",
                    "value": true
                },
                {
                    "caption": "Disable deleting browser and download history",
                    "value": false
                }
            ],
            "name": "AllowDeletingBrowserHistory",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:57-",
                "chrome_os:57-"
            ],
            "tags": [
                "local-data-access",
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Show history clusters on the Chrome history page",
            "default": null,
            "desc": "This policy controls the visibility of history clusters on the Chrome history page.\n\n      If the policy is set to Enabled, history clusters will be visible at chrome://history/journeys.\n\n      If the policy is set to Disabled, history clusters will not be visible at chrome://history/journeys.\n\n      If the policy is left unset, history clusters will be visible at chrome://history/journeys by default and users can change the visibility of history clusters.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 926,
            "items": [
                {
                    "caption": "History clusters will be visible at chrome://history/journeys.",
                    "value": true
                },
                {
                    "caption": "History clusters will not be visible at chrome://history/journeys.",
                    "value": false
                },
                {
                    "caption": "History clusters will be visible at chrome://history/journeys by default and users can change the visibility of history clusters.",
                    "value": null
                }
            ],
            "name": "HistoryClustersVisible",
            "owners": [
                "file://components/history_clusters/OWNERS",
                "mahmadi@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:97-",
                "chrome_os:97-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Dinosaur Easter Egg Game",
            "default_for_enterprise_users": false,
            "desc": "Setting the policy to True allows users to play the dinosaur game. Setting the policy to False means users can't play the dinosaur easter egg game when device is offline.\n\n      Leaving the policy unset means users can't play the game on enrolled Google Chrome OS, but can under other circumstances.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 309,
            "items": [
                {
                    "caption": "Enable dinosaur easter egg game",
                    "value": true
                },
                {
                    "caption": "Disable dinosaur easter egg game",
                    "value": false
                }
            ],
            "name": "AllowDinosaurEasterEgg",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:48-",
                "chrome.*:48-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Use a default referrer policy of no-referrer-when-downgrade.",
            "deprecated": true,
            "desc": "This enterprise policy is for short-term adaptation and will be removed in Google Chrome version 88.\n\n      Chrome's default referrer policy is being strengthened from its current value of no-referrer-when-downgrade to the more secure strict-origin-when-cross-origin through a gradual rollout targeting Chrome 85 stable.\n\n      Before the rollout, this enterprise policy will have no effect. After the rollout, when this enterprise policy is enabled, Chrome's default referrer policy will be set to its previous value of no-referrer-when-downgrade.\n\n      This enterprise policy is disabled by default.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 648,
            "items": [
                {
                    "caption": "Use a default referrer policy of no-referrer-when-downgrade",
                    "value": true
                },
                {
                    "caption": "Do not use a default referrer policy of no-referrer-when-downgrade",
                    "value": false
                }
            ],
            "name": "ForceLegacyDefaultReferrerPolicy",
            "owners": [
                "kaustubhag@chromium.org",
                "chrome-network-stack@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-87",
                "chrome_os:80-87"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable firewall traversal from remote access client",
            "deprecated": true,
            "desc": "This policy is no longer supported.\n          Enables usage of STUN and relay servers when connecting to a remote client.\n\n          If this setting is enabled, then this machine can discover and connect to remote host machines even if they are separated by a firewall.\n\n          If this setting is disabled and outgoing UDP connections are filtered by the firewall, then this machine can only connect to host machines within the local network.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "platform_only": true
            },
            "id": 94,
            "name": "RemoteAccessClientFirewallTraversal",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "garykac@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:14-16",
                "chrome_os:14-16"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure the required domain name for remote access clients",
            "deprecated": true,
            "desc": "This policy is deprecated. Please use RemoteAccessHostClientDomainList instead.",
            "example_value": "my-awesome-domain.com",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 316,
            "name": "RemoteAccessHostClientDomain",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "joedow@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:22-",
                "chrome_os:41-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Configure the required domain names for remote access clients",
            "desc": "Setting the policy specifies the client domain names that are imposed on remote access clients, and users can't change them. Only clients from one of the specified domains can connect to the host.\n\n      Setting the policy to an empty list or leaving it unset applies the default policy for the connection type. For remote assistance, this allows clients from any domain to connect to the host. For anytime remote access, only the host owner can connect.\n\n      See also RemoteAccessHostDomainList.\n\n      Note: This setting overrides RemoteAccessHostClientDomain, if present.",
            "example_value": [
                "my-awesome-domain.com",
                "my-auxiliary-domain.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 369,
            "name": "RemoteAccessHostClientDomainList",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "garykac@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:60-",
                "chrome_os:60-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable firewall traversal from remote access host",
            "desc": "Setting the policy to Enabled or leaving it unset allows the usage of STUN servers, letting remote clients discover and connect to this machine, even if separated by a firewall.\n\n      Setting the policy to Disabled when outgoing UDP connections are filtered by the firewall means the machine only allows connections from client machines within the local network.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 95,
            "items": [
                {
                    "caption": "Enable firewall traversal from remote access host",
                    "value": true
                },
                {
                    "caption": "Disable firewall traversal from remote access host",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostFirewallTraversal",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:14-",
                "chrome_os:41-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure the required domain name for remote access hosts",
            "deprecated": true,
            "desc": "This policy is deprecated. Please use RemoteAccessHostDomainList instead.",
            "example_value": "my-awesome-domain.com",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 154,
            "name": "RemoteAccessHostDomain",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "yuweih@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:22-",
                "chrome_os:41-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Configure the required domain names for remote access hosts",
            "desc": "Setting the policy specifies the host domain names that are imposed on remote access hosts, and users can't change them. Hosts can be shared only using accounts registered on one of the specified domain names.\n\n      Setting the policy to an empty list or leaving it unset means hosts can be shared using any account.\n\n      See also RemoteAccessHostClientDomainList.\n\n      Note: This setting will override RemoteAccessHostDomain, if present.",
            "example_value": [
                "my-awesome-domain.com",
                "my-auxiliary-domain.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 368,
            "name": "RemoteAccessHostDomainList",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "yuweih@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:60-",
                "chrome_os:60-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable two-factor authentication for remote access hosts",
            "deprecated": true,
            "desc": "Enables two-factor authentication for remote access hosts instead of a user-specified PIN.\n\n          If this setting is enabled, then users must provide a valid two-factor code when accessing a host.\n\n          If this setting is disabled or not set, then two-factor will not be enabled and the default behavior of having a user-defined PIN will be used.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 155,
            "name": "RemoteAccessHostRequireTwoFactor",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "lambroslambrou@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:22-22"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure the TalkGadget prefix for remote access hosts",
            "deprecated": true,
            "desc": "Configures the TalkGadget prefix that will be used by remote access hosts and prevents users from changing it.\n\n          If specified, this prefix is prepended to the base TalkGadget name to create a full domain name for the TalkGadget. The base TalkGadget domain name is '.talkgadget.google.com'.\n\n          If this setting is enabled, then hosts will use the custom domain name when accessing the TalkGadget instead of the default domain name.\n\n          If this setting is disabled or not set, then the default TalkGadget domain name ('chromoting-host.talkgadget.google.com') will be used for all hosts.\n\n          Remote access clients are not affected by this policy setting. They will always use 'chromoting-client.talkgadget.google.com' to access the TalkGadget.",
            "example_value": "chromoting-host",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 156,
            "name": "RemoteAccessHostTalkGadgetPrefix",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "joedow@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:22-75",
                "chrome_os:41-75"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Enable curtaining of remote access hosts",
            "desc": "Setting the policy to Enabled turns off remote access hosts' physical input and output devices during a remote connection.\n\n      Setting the policy to Disabled or leaving it unset lets both local and remote users interact with the host while it's shared.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 157,
            "items": [
                {
                    "caption": "Enable curtaining of the remote access host",
                    "value": true
                },
                {
                    "caption": "Disable curtaining of the remote access host",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostRequireCurtain",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "garykac@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:23-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable or disable PIN-less authentication for remote access hosts",
            "desc": "Setting the policy to Enabled or leaving it unset lets users pair clients and hosts at connection time, eliminating the need to enter a PIN every time.\n\n      Setting the policy to Disabled makes this feature unavailable.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 234,
            "items": [
                {
                    "caption": "Enable PIN-less authentication for the remote access host",
                    "value": true
                },
                {
                    "caption": "Disable PIN-less authentication for the remote access host",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostAllowClientPairing",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:30-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow gnubby authentication for remote access hosts",
            "desc": "Setting the policy to Enabled means gnubby authentication requests will be proxied across a remote host connection.\n\n      Setting the policy to Disabled or leaving it unset means gnubby authentication requests won't be proxied.\n\n      Note that this feature requires additional components which are not available outside of the Google network environment in order to work properly.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "internal_only": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 257,
            "items": [
                {
                    "caption": "Enable gnubby authentication for the remote access host",
                    "value": true
                },
                {
                    "caption": "Disable gnubby authentication for the remote access host",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostAllowGnubbyAuth",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "lambroslambrou@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:35-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the use of relay servers by the remote access host",
            "desc": "If RemoteAccessHostFirewallTraversal is set to Enabled, setting RemoteAccessHostAllowRelayedConnection to Enabled or leaving it unset allows the use of remote clients to use relay servers to connect to this machine when a direct connection is not available, for example, because of firewall restrictions.\n\n      Setting the policy to Disabled doesn't turn remote access off, but only allows connections from the same network (not NAT traversal or relay).",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 263,
            "items": [
                {
                    "caption": "Enable the use of relay servers by the remote access host",
                    "value": true
                },
                {
                    "caption": "Disable the use of relay servers by the remote access host",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostAllowRelayedConnection",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "garykac@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:36-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Restrict the UDP port range used by the remote access host",
            "desc": "Setting the policy restricts the UDP port range used by the remote access host in this machine.\n\n      Leaving the policy unset or set to an empty string means the remote access host can use any available port.\n\n      Note: If RemoteAccessHostFirewallTraversal is Disabled, the remote access host will use UDP ports in the 12400-12409 range.",
            "example_value": "12400-12409",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 264,
            "name": "RemoteAccessHostUdpPortRange",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "yuweih@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:36-",
                "chrome_os:41-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Require that the name of the local user and the remote access host owner match",
            "desc": "Setting the policy to Enabled has the remote access host compare the name of the local user the host is associated with and the name of the Google Account registered as the host owner (\"johndoe,\" if the host is owned by \"johndoe@example.com\"). This host won't start if the host owner's name differs from the name of the local user that the host is associated with. To enforce that the owner's Google Account is associated with a specific domain, use the policy with RemoteAccessHostDomain.\n\n      Setting the policy to Disabled or leaving it unset means the remote access host can be associated with any local user.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 285,
            "items": [
                {
                    "caption": "Require matching local user and remote access host owner",
                    "value": true
                },
                {
                    "caption": "Do not require matching local user and remote access host owner",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostMatchUsername",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.linux:25-",
                "chrome.mac:25-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "URL where remote access clients should obtain their authentication token",
            "desc": "Setting the policy means the remote access host requires authenticating clients to get an authentication token from this URL to connect.\n\n      This feature is disabled if empty or not set.\n\n      Note: This policy must be used with RemoteAccessHostTokenValidationUrl.",
            "example_value": "https://example.com/issue",
            "features": {
                "dynamic_refresh": true,
                "internal_only": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 286,
            "name": "RemoteAccessHostTokenUrl",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:28-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "string"
        },
        {
            "caption": "URL for validating remote access client authentication token",
            "desc": "Setting the policy means the remote access host uses this URL to validate authentication tokens from remote access clients to accept connections. This feature is disabled if empty or not set.\n\n      Note: Use the policy with RemoteAccessHostTokenUrl.",
            "example_value": "https://example.com/validate",
            "features": {
                "dynamic_refresh": true,
                "internal_only": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 287,
            "name": "RemoteAccessHostTokenValidationUrl",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "garykac@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:28-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "string"
        },
        {
            "caption": "Client certificate for connecting to RemoteAccessHostTokenValidationUrl",
            "desc": "Setting the policy means the remote access host uses a client certificate with the given issuer CN to authenticate to RemoteAccessHostTokenValidationUrl. To use any available client certificate, set it to *. This feature is disabled if empty or not set.",
            "example_value": "Example Certificate Authority",
            "features": {
                "dynamic_refresh": true,
                "internal_only": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 288,
            "name": "RemoteAccessHostTokenValidationCertificateIssuer",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:28-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Policy overrides for Debug builds of the remote access host",
            "deprecated": true,
            "desc": "Overrides policies on Debug builds of the remote access host.\n\n          The value is parsed as a JSON dictionary of policy name to policy value mappings.",
            "example_value": "{ \"RemoteAccessHostMatchUsername\": true }",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 289,
            "name": "RemoteAccessHostDebugOverridePolicies",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:25-47",
                "chrome_os:42-47"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Allow remote users to interact with elevated windows in remote assistance sessions",
            "default": false,
            "desc": "Setting the policy to Enabled means the remote assistance host runs in a process with uiAccess permissions. This lets remote users interact with elevated windows on the local user's desktop.\n\n      Setting the policy to Disabled or leaving it unset means the remote assistance host runs in the user's context, and remote users can't interact with elevated windows on the desktop.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 344,
            "items": [
                {
                    "caption": "Enable remote user interaction with elevated windows in remote assistance sessions",
                    "value": true
                },
                {
                    "caption": "Disable remote user interaction with elevated windows in remote assistance sessions",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostAllowUiAccessForRemoteAssistance",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "lambroslambrou@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:55-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow remote access users to transfer files to/from the host",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset allows users connected to a remote access host to transfer files between the client and the host. This doesn't apply to remote assistance connections, which don't support file transfer.\n\n      Setting the policy to Disabled disallows file transfer.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 534,
            "items": [
                {
                    "caption": "Enable remote access users to transfer files to and from the remote host",
                    "value": true
                },
                {
                    "caption": "Disable remote access users from transferring files to and from the remote host",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostAllowFileTransfer",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:74-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable connection-related UI on the host desktop when a connection is active",
            "default": true,
            "desc": "If this policy is disabled, connection related UI (e.g. the disconnect window) will not be shown for non-curtained remote access connections. Curtained remote access sessions and remote support sessions are not affected by this policy.\n\n          This policy has no effect if it is set to true, left empty, or is not set.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "internal_only": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 803,
            "items": [
                {
                    "caption": "Enable connection-related UI on the remote host desktop when a connection is active",
                    "value": true
                },
                {
                    "caption": "Disable connection-related UI on the remote host desktop when a connection is active",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostEnableUserInterface",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "joedow@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow remote access connections to this machine",
            "default": true,
            "desc": "If this policy is Disabled, the remote access host service cannot be started or configured to accept incoming connections.  This policy does not affect remote support scenarios.\n\n          This policy has no effect if it is set to Enabled, left empty, or is not set.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 812,
            "items": [
                {
                    "caption": "Allow remote access connections to this machine",
                    "value": true
                },
                {
                    "caption": "Prevent remote access connections to this machine",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostAllowRemoteAccessConnections",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "joedow@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:89-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Maximum session duration allowed for remote access connections",
            "default": null,
            "desc": "If this policy is set, remote access connections will automatically disconnect after the number of minutes defined in the policy have elapsed. This does not prevent the client from reconnecting after the maximum session duration has been reached. Setting the policy to a value that is not within the min/max range may prevent the host from starting. This policy does not affect remote support scenarios.\n\n          This policy has no effect if it is not set. In this case, remote access connections will have no maximum duration on this machine.",
            "example_value": 1200,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 814,
            "name": "RemoteAccessHostMaximumSessionDurationMinutes",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "joedow@chromium.org"
            ],
            "schema": {
                "maximum": 10080,
                "minimum": 30,
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:89-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "The maximum size, in bytes, that can be transferred between client and host via clipboard synchronization",
            "default": null,
            "desc": "If this policy is set, clipboard data sent to and from the host will be truncated to the limit set by this policy.\n\n          If a value of 0 is set, then clipboard sync is disabled.\n\n          This policy affects both remote access and remote support scenarios.\n\n          This policy has no effect if it is not set.\n\n          Setting the policy to a value that is not within the min/max range may prevent the host from starting.\n\n          Please note that the actual upper bound for the clipboard size is based on the maximum WebRTC data channel message size which this policy does not control.",
            "example_value": 1048576,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 922,
            "name": "RemoteAccessHostClipboardSizeBytes",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "joedow@chromium.org"
            ],
            "schema": {
                "maximum": 2147483647,
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:97-",
                "chrome_os:97-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Allow remote support connections to this machine",
            "default": true,
            "desc": "If this policy is disabled, the remote support host cannot be started or configured to accept incoming connections.\n\n          This policy does not affect remote access scenarios.\n\n          This policy does not prevent enterprise admins from connecting to managed Chrome OS devices.\n\n          This policy has no effect if enabled, left empty, or is not set.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "platform_only": true
            },
            "id": 923,
            "items": [
                {
                    "caption": "Allow remote support connections to this machine",
                    "value": true
                },
                {
                    "caption": "Prevent remote support connections to this machine",
                    "value": false
                }
            ],
            "name": "RemoteAccessHostAllowRemoteSupportConnections",
            "owners": [
                "file://remoting/OWNERS",
                "jamiewalch@chromium.org",
                "joedow@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:97-",
                "chrome_os:97-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Managed guest session to persist display properties",
            "default": false,
            "desc": "If this policy is disabled or unset, all display settings that were set in Managed guest session will be reset as soon as the session finishes. If this policy is set to True, display properties will persist after exiting the managed guest session.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 818,
            "items": [
                {
                    "caption": "Managed Guest Session users can store device-wide display settings",
                    "value": true
                },
                {
                    "caption": "Managed Guest Session users cannot store device-wide display settings",
                    "value": false
                }
            ],
            "name": "DeviceAllowMGSToStoreDisplayProperties",
            "owners": [
                "file://chrome/browser/ash/app_mode/OWNERS",
                "apotapchuk@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:90-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on Android apps.",
            "caption": "Enable printing",
            "desc": "Setting the policy to Enabled or leaving it unset lets users print in Google Chrome, and users can't change this setting.\n\n      Setting the policy to Disabled means users can't print from Google Chrome. Printing is off in the three dots menu, extensions, and JavaScript applications.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 12,
            "items": [
                {
                    "caption": "Enable printing",
                    "value": true
                },
                {
                    "caption": "Disable printing",
                    "value": false
                }
            ],
            "name": "PrintingEnabled",
            "owners": [
                "file://printing/OWNERS",
                "thestig@chromium.org",
                "rbpotter@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:39-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Google Cloud Print proxy",
            "desc": "Setting the policy to Enabled or leaving it unset lets Google Chrome act as a proxy between Google Cloud Print and legacy printers connected to the machine. Using their Google Account, users may turn on the cloud print proxy by authentication.\n\n      Setting the policy to Disabled means users can't turn on the proxy, and the machine can't share its printers with Google Cloud Print.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 13,
            "items": [
                {
                    "caption": "Enable Google Cloud Print proxy",
                    "value": true
                },
                {
                    "caption": "Disable Google Cloud Print proxy",
                    "value": false
                }
            ],
            "name": "CloudPrintProxyEnabled",
            "owners": [
                "file://printing/OWNERS",
                "rbpotter@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:17-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Restrict printing color mode",
            "desc": "Setting the policy sets printing to color only, monochrome only, or no color mode restriction. Leaving the policy unset results in no restriction.",
            "example_value": "monochrome",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 474,
            "items": [
                {
                    "caption": "Allow all color modes",
                    "name": "any",
                    "value": "any"
                },
                {
                    "caption": "Color printing only",
                    "name": "color",
                    "value": "color"
                },
                {
                    "caption": "Monochrome printing only",
                    "name": "monochrome",
                    "value": "monochrome"
                }
            ],
            "name": "PrintingAllowedColorModes",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "any",
                    "color",
                    "monochrome"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:71-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Restrict printing duplex mode",
            "desc": "Setting the policy restricts printing duplex mode.\n\n      Leaving the policy unset or empty results in no restriction.",
            "example_value": "duplex",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 475,
            "items": [
                {
                    "caption": "Allow all duplex modes",
                    "name": "any",
                    "value": "any"
                },
                {
                    "caption": "Simplex printing only",
                    "name": "simplex",
                    "value": "simplex"
                },
                {
                    "caption": "Duplex printing only",
                    "name": "duplex",
                    "value": "duplex"
                }
            ],
            "name": "PrintingAllowedDuplexModes",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "any",
                    "simplex",
                    "duplex"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:71-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Restrict PIN printing mode",
            "desc": "Restricts PIN printing mode. Unset policy is treated as no restriction. If the mode is unavailable this policy is ignored. Note that PIN printing feature is enabled only for printers that use one of IPPS, HTTPS, USB or IPP-over-USB protocols.",
            "example_value": "pin",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 525,
            "items": [
                {
                    "caption": "Allow printing both with and without PIN",
                    "name": "any",
                    "value": "any"
                },
                {
                    "caption": "Allow printing only with PIN",
                    "name": "pin",
                    "value": "pin"
                },
                {
                    "caption": "Allow printing only without PIN",
                    "name": "no_pin",
                    "value": "no_pin"
                }
            ],
            "name": "PrintingAllowedPinModes",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "any",
                    "pin",
                    "no_pin"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Restrict background graphics printing mode",
            "desc": "Restricts background graphics printing mode. Unset policy is treated as no restriction.",
            "example_value": "enabled",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 621,
            "items": [
                {
                    "caption": "Allow printing both with and without background graphics",
                    "name": "any",
                    "value": "any"
                },
                {
                    "caption": "Allow printing only with background graphics",
                    "name": "enabled",
                    "value": "enabled"
                },
                {
                    "caption": "Allow printing only without background graphics",
                    "name": "disabled",
                    "value": "disabled"
                }
            ],
            "name": "PrintingAllowedBackgroundGraphicsModes",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "any",
                    "enabled",
                    "disabled"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:79-",
                "chrome.*:80-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Default printing color mode",
            "desc": "Setting the policy overrides the default printing color mode. If the mode is unavailable, this policy is ignored.",
            "example_value": "monochrome",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 477,
            "items": [
                {
                    "caption": "Enable color printing",
                    "name": "color",
                    "value": "color"
                },
                {
                    "caption": "Enable monochrome printing",
                    "name": "monochrome",
                    "value": "monochrome"
                }
            ],
            "name": "PrintingColorDefault",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "color",
                    "monochrome"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Default printing duplex mode",
            "desc": "Setting the policy overrides the default printing duplex mode. If the mode is unavailable, this policy is ignored.",
            "example_value": "long-edge",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 478,
            "items": [
                {
                    "caption": "Enable simplex printing",
                    "name": "simplex",
                    "value": "simplex"
                },
                {
                    "caption": "Enable short edge duplex printing",
                    "name": "short-edge",
                    "value": "short-edge"
                },
                {
                    "caption": "Enable long edge duplex printing",
                    "name": "long-edge",
                    "value": "long-edge"
                }
            ],
            "name": "PrintingDuplexDefault",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "simplex",
                    "short-edge",
                    "long-edge"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Default PIN printing mode",
            "desc": "Overrides default PIN printing mode. If the mode is unavailable this policy is ignored.",
            "example_value": "pin",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 526,
            "items": [
                {
                    "caption": "Enable PIN printing by default",
                    "name": "pin",
                    "value": "pin"
                },
                {
                    "caption": "Disable PIN printing by default",
                    "name": "no_pin",
                    "value": "no_pin"
                }
            ],
            "name": "PrintingPinDefault",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "pin",
                    "no_pin"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Default background graphics printing mode",
            "desc": "Overrides default background graphics printing mode.",
            "example_value": "enabled",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 622,
            "items": [
                {
                    "caption": "Enable background graphics printing mode by default",
                    "name": "enabled",
                    "value": "enabled"
                },
                {
                    "caption": "Disable background graphics printing mode by default",
                    "name": "disabled",
                    "value": "disabled"
                }
            ],
            "name": "PrintingBackgroundGraphicsDefault",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    "enabled",
                    "disabled"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:79-",
                "chrome.*:80-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Default printing page size",
            "desc": "Overrides default printing page size.\n\n      name should contain one of the listed formats or 'custom' if required paper size is not in the list. If 'custom' value is provided custom_size property should be specified. It describes the desired height and width in micrometers. Otherwise custom_size property shouldn't be specified. Policy that violates these rules is ignored.\n\n      If the page size is unavailable on the printer chosen by the user this policy is ignored.",
            "example_value": {
                "name": "custom",
                "custom_size": {
                    "width": 210000,
                    "height": 297000
                }
            },
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 479,
            "name": "PrintingPaperSizeDefault",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "properties": {
                    "custom_size": {
                        "properties": {
                            "height": {
                                "description": "Height of the page in micrometers",
                                "type": "integer"
                            },
                            "width": {
                                "description": "Width of the page in micrometers",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "width",
                            "height"
                        ],
                        "type": "object"
                    },
                    "name": {
                        "enum": [
                            "custom",
                            "asme_f_28x40in",
                            "iso_2a0_1189x1682mm",
                            "iso_a0_841x1189mm",
                            "iso_a10_26x37mm",
                            "iso_a1_594x841mm",
                            "iso_a2_420x594mm",
                            "iso_a3_297x420mm",
                            "iso_a4-extra_235.5x322.3mm",
                            "iso_a4-tab_225x297mm",
                            "iso_a4_210x297mm",
                            "iso_a5-extra_174x235mm",
                            "iso_a5_148x210mm",
                            "iso_a6_105x148mm",
                            "iso_a7_74x105mm",
                            "iso_a8_52x74mm",
                            "iso_a9_37x52mm",
                            "iso_b0_1000x1414mm",
                            "iso_b10_31x44mm",
                            "iso_b1_707x1000mm",
                            "iso_b2_500x707mm",
                            "iso_b3_353x500mm",
                            "iso_b4_250x353mm",
                            "iso_b5-extra_201x276mm",
                            "iso_b5_176x250mm",
                            "iso_b6_125x176mm",
                            "iso_b6c4_125x324mm",
                            "iso_b7_88x125mm",
                            "iso_b8_62x88mm",
                            "iso_b9_44x62mm",
                            "iso_c0_917x1297mm",
                            "iso_c10_28x40mm",
                            "iso_c1_648x917mm",
                            "iso_c2_458x648mm",
                            "iso_c3_324x458mm",
                            "iso_c4_229x324mm",
                            "iso_c5_162x229mm",
                            "iso_c6_114x162mm",
                            "iso_c6c5_114x229mm",
                            "iso_c7_81x114mm",
                            "iso_c7c6_81x162mm",
                            "iso_c8_57x81mm",
                            "iso_c9_40x57mm",
                            "iso_dl_110x220mm",
                            "jis_exec_216x330mm",
                            "jpn_chou2_111.1x146mm",
                            "jpn_chou3_120x235mm",
                            "jpn_chou4_90x205mm",
                            "jpn_hagaki_100x148mm",
                            "jpn_kahu_240x322.1mm",
                            "jpn_kaku2_240x332mm",
                            "jpn_oufuku_148x200mm",
                            "jpn_you4_105x235mm",
                            "na_10x11_10x11in",
                            "na_10x13_10x13in",
                            "na_10x14_10x14in",
                            "na_10x15_10x15in",
                            "na_11x12_11x12in",
                            "na_11x15_11x15in",
                            "na_12x19_12x19in",
                            "na_5x7_5x7in",
                            "na_6x9_6x9in",
                            "na_7x9_7x9in",
                            "na_9x11_9x11in",
                            "na_a2_4.375x5.75in",
                            "na_arch-a_9x12in",
                            "na_arch-b_12x18in",
                            "na_arch-c_18x24in",
                            "na_arch-d_24x36in",
                            "na_arch-e_36x48in",
                            "na_b-plus_12x19.17in",
                            "na_c5_6.5x9.5in",
                            "na_c_17x22in",
                            "na_d_22x34in",
                            "na_e_34x44in",
                            "na_edp_11x14in",
                            "na_eur-edp_12x14in",
                            "na_f_44x68in",
                            "na_fanfold-eur_8.5x12in",
                            "na_fanfold-us_11x14.875in",
                            "na_foolscap_8.5x13in",
                            "na_govt-legal_8x13in",
                            "na_govt-letter_8x10in",
                            "na_index-3x5_3x5in",
                            "na_index-4x6-ext_6x8in",
                            "na_index-4x6_4x6in",
                            "na_index-5x8_5x8in",
                            "na_invoice_5.5x8.5in",
                            "na_ledger_11x17in",
                            "na_legal-extra_9.5x15in",
                            "na_legal_8.5x14in",
                            "na_letter-extra_9.5x12in",
                            "na_letter-plus_8.5x12.69in",
                            "na_letter_8.5x11in",
                            "na_number-10_4.125x9.5in",
                            "na_number-11_4.5x10.375in",
                            "na_number-12_4.75x11in",
                            "na_number-14_5x11.5in",
                            "na_personal_3.625x6.5in",
                            "na_super-a_8.94x14in",
                            "na_super-b_13x19in",
                            "na_wide-format_30x42in",
                            "om_dai-pa-kai_275x395mm",
                            "om_folio-sp_215x315mm",
                            "om_invite_220x220mm",
                            "om_italian_110x230mm",
                            "om_juuro-ku-kai_198x275mm",
                            "om_large-photo_200x300",
                            "om_pa-kai_267x389mm",
                            "om_postfix_114x229mm",
                            "om_small-photo_100x150mm",
                            "prc_10_324x458mm",
                            "prc_16k_146x215mm",
                            "prc_1_102x165mm",
                            "prc_2_102x176mm",
                            "prc_32k_97x151mm",
                            "prc_3_125x176mm",
                            "prc_4_110x208mm",
                            "prc_5_110x220mm",
                            "prc_6_120x320mm",
                            "prc_7_160x230mm",
                            "prc_8_120x309mm",
                            "roc_16k_7.75x10.75in",
                            "roc_8k_10.75x15.5in",
                            "jis_b0_1030x1456mm",
                            "jis_b1_728x1030mm",
                            "jis_b2_515x728mm",
                            "jis_b3_364x515mm",
                            "jis_b4_257x364mm",
                            "jis_b5_182x257mm",
                            "jis_b6_128x182mm",
                            "jis_b7_91x128mm",
                            "jis_b8_64x91mm",
                            "jis_b9_45x64mm",
                            "jis_b10_32x45mm"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "supported_on": [
                "chrome.*:84-",
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Send username and filename to native printers",
            "desc": "Send username and filename to native printers server with every print job. The default is not to send.\n\n      Setting this policy to true also disables printers that use protocols other than IPPS, USB, or IPP-over-USB since username and filename shouldn't be sent over the network openly.",
            "example_value": true,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 506,
            "items": [
                {
                    "caption": "Enable sending username and filename to native printers",
                    "value": true
                },
                {
                    "caption": "Disable sending username and filename to native printers",
                    "value": false
                }
            ],
            "name": "PrintingSendUsernameAndFilenameEnabled",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Maximal number of sheets allowed to use for a single print job",
            "desc": "Specifies the maximal number of sheets user is allowed to print for a single print job.\n\n      If not set, no limitations are applied and user can print any documents.",
            "example_value": 10,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 692,
            "name": "PrintingMaxSheetsAllowed",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "minimum": 1,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Allows the AppCache feature to be re-enabled even if it is off by default.",
            "deprecated": true,
            "desc": "If set to true, this will force AppCache to be enabled, even when AppCache in Chrome is not available by default.\n\n      If unset or set to false, AppCache will follow Chrome's defaults.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 704,
            "items": [
                {
                    "caption": "Force AppCache to be enabled",
                    "value": true
                },
                {
                    "caption": "Use default AppCache behavior",
                    "value": false
                }
            ],
            "name": "AppCacheForceEnabled",
            "owners": [
                "enne@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:84-95",
                "chrome_os:84-95",
                "android:84-95",
                "webview_android:84-95"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the time period in days for storing print jobs metadata",
            "desc": "This policy controls how long print jobs metadata is stored on the device, in days.\n\n      When this policy is set to a value of -1, the print jobs metadata is stored indefinitely. When this policy is set to a value of 0, the print jobs metadata is not stored at all. When this policy is set to any other value, it specifies the period of time during which the metadata of completed print jobs is stored on the device.\n\n      If not set, the default period of 90 days is used for Google Chrome OS devices.\n\n      The policy value should be specified in days.",
            "example_value": 90,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 625,
            "name": "PrintJobHistoryExpirationPeriod",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "minimum": -1,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Extensions allowed to skip confirmation dialog when sending print jobs via chrome.printing API",
            "deprecated": true,
            "desc": "This policy specifies the allowed extensions to skip print job confirmation dialog when they use the Printing API function chrome.printing.submitJob() for sending a print job.\n\n      If an extension is not in the list, or the list is not set, the print job confirmation dialog will be shown to the user for every chrome.printing.submitJob() function call.\n\n      This policy is deprecated, please use PrintingAPIExtensionsAllowlist instead.",
            "example_value": [
                "abcdefghabcdefghabcdefghabcdefgh"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 664,
            "name": "PrintingAPIExtensionsWhitelist",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Extensions allowed to skip confirmation dialog when sending print jobs via chrome.printing API",
            "desc": "This policy specifies the allowed extensions to skip print job confirmation dialog when they use the Printing API function chrome.printing.submitJob() for sending a print job.\n\n      If an extension is not in the list, or the list is not set, the print job confirmation dialog will be shown to the user for every chrome.printing.submitJob() function call.",
            "example_value": [
                "abcdefghabcdefghabcdefghabcdefgh"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 783,
            "name": "PrintingAPIExtensionsAllowlist",
            "owners": [
                "bmalcolm@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Force SafeSearch",
            "deprecated": true,
            "desc": "This policy is deprecated, please use ForceGoogleSafeSearch and ForceYouTubeRestrict instead. This policy is ignored if either the ForceGoogleSafeSearch, the ForceYouTubeRestrict or the (deprecated) ForceYouTubeSafetyMode policies are set.\n\n      Forces queries in Google Web Search to be done with SafeSearch set to active and prevents users from changing this setting. This setting also forces Moderate Restricted Mode on YouTube.\n\n      If you enable this setting, SafeSearch in Google Search and Moderate Restricted Mode YouTube is always active.\n\n      If you disable this setting or do not set a value, SafeSearch in Google Search and Restricted Mode in YouTube is not enforced.",
            "example_value": false,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 162,
            "items": [
                {
                    "caption": "Force the use of SafeSearch in Google Search and YouTube Restricted Mode to be at least Moderate",
                    "value": true
                },
                {
                    "caption": "Do not enforce the use of SafeSearch in Google Search or YouTube Restricted Mode",
                    "value": false
                }
            ],
            "name": "ForceSafeSearch",
            "owners": [
                "sergiu@chromium.org",
                "igorcov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:25-",
                "chrome_os:25-",
                "android:30-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "main"
        },
        {
            "caption": "Force Google SafeSearch",
            "desc": "Setting the policy to Enabled means SafeSearch in Google Search is always active, and users can't change this setting.\n\n      Setting the policy to Disabled or leaving it unset means SafeSearch in Google Search is not enforced.",
            "example_value": false,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 282,
            "items": [
                {
                    "caption": "Force the use of SafeSearch in Google Search",
                    "value": true
                },
                {
                    "caption": "Do not enforce the use of SafeSearch in Google Search",
                    "value": false
                }
            ],
            "name": "ForceGoogleSafeSearch",
            "owners": [
                "treib@chromium.org",
                "igorcov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:41-",
                "chrome_os:41-",
                "android:41-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the Android YouTube app. If Safety Mode on YouTube should be enforced, installation of the Android YouTube app should be disallowed.",
            "caption": "Force YouTube Safety Mode",
            "deprecated": true,
            "desc": "This policy is deprecated. Consider using ForceYouTubeRestrict, which overrides this policy and allows more fine-grained tuning.\n\n      Forces YouTube Moderate Restricted Mode and prevents users from changing this setting.\n\n      If this setting is enabled, Restricted Mode on YouTube is always enforced to be at least Moderate.\n\n      If this setting is disabled or no value is set, Restricted Mode on YouTube is not enforced by Google Chrome. External policies such as YouTube policies might still enforce Restricted Mode, though.",
            "example_value": false,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 283,
            "items": [
                {
                    "caption": "Force YouTube Restricted Mode to be at least Moderate",
                    "value": true
                },
                {
                    "caption": "Do not enforce YouTube Restricted Mode",
                    "value": false
                }
            ],
            "name": "ForceYouTubeSafetyMode",
            "owners": [
                "treib@chromium.org",
                "igorcov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:41-",
                "chrome_os:41-",
                "android:41-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the Android YouTube app. If Safety Mode on YouTube should be enforced, installation of the Android YouTube app should be disallowed.",
            "caption": "Force minimum YouTube Restricted Mode",
            "desc": "Setting the policy enforces a minimum Restricted mode on YouTube and prevents users from picking a less restricted mode. If you set it to:\n\n      * Strict, Strict Restricted mode on YouTube is always active.\n\n      * Moderate, the user may only pick Moderate Restricted mode and Strict Restricted mode on YouTube, but can't turn off Restricted mode.\n\n      * Off or if no value is set, Restricted mode on YouTube isn't enforced by Chrome. External policies such as YouTube policies might still enforce Restricted mode.",
            "example_value": 0,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 348,
            "items": [
                {
                    "caption": "Do not enforce Restricted Mode on YouTube",
                    "name": "Off",
                    "value": 0
                },
                {
                    "caption": "Enforce at least Moderate Restricted Mode on YouTube",
                    "name": "Moderate",
                    "value": 1
                },
                {
                    "caption": "Enforce Strict Restricted Mode for YouTube",
                    "name": "Strict",
                    "value": 2
                }
            ],
            "name": "ForceYouTubeRestrict",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:55-",
                "chrome_os:55-",
                "android:55-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Enable Safe Browsing",
            "deprecated": true,
            "desc": "This policy is deprecated in Google Chrome 83, please use SafeBrowsingProtectionLevel instead.\n\n      Setting the policy to Enabled keeps Chrome's Safe Browsing feature on. Setting the policy to Disabled keeps Safe Browsing off.\n\n      If you set this policy, users can't change it or override the \"Enable phishing and malware protection\" setting in Chrome. If not set, \"Enable phishing and malware protection\" is set to True, but the user can change it.\n\n      See more about Safe Browsing ( https://developers.google.com/safe-browsing ).\n\n      If the policy SafeBrowsingProtectionLevel is set, the value of the policy SafeBrowsingEnabled is ignored.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 14,
            "items": [
                {
                    "caption": "Enable Safe Browsing",
                    "value": true
                },
                {
                    "caption": "Disable Safe Browsing",
                    "value": false
                }
            ],
            "name": "SafeBrowsingEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy is not supported within Arc.",
            "caption": "Safe Browsing Protection Level",
            "desc": "Allows you to control whether Google Chrome's Safe Browsing feature is enabled and the mode it operates in.\n\n      If this policy is set to 'NoProtection' (value 0), Safe Browsing is never active.\n\n      If this policy is set to 'StandardProtection' (value 1, which is the default), Safe Browsing is always active in the standard mode.\n\n      If this policy is set to 'EnhancedProtection' (value 2), Safe Browsing is always active in the enhanced mode, which provides better security, but requires sharing more browsing information with Google.\n\n      If you set this policy as mandatory, users cannot change or override the Safe Browsing setting in Google Chrome.\n\n      If this policy is left not set, Safe Browsing will operate in Standard Protection mode but users can change this setting.\n\n      See https://developers.google.com/safe-browsing for more info on Safe Browsing.",
            "example_value": 2,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 684,
            "items": [
                {
                    "caption": "Safe Browsing is never active.",
                    "name": "NoProtection",
                    "value": 0
                },
                {
                    "caption": "Safe Browsing is active in the standard mode.",
                    "name": "StandardProtection",
                    "value": 1
                },
                {
                    "caption": "Safe Browsing is active in the enhanced mode. This mode provides better security, but requires sharing more browsing information with Google.",
                    "name": "EnhancedProtection",
                    "value": 2
                }
            ],
            "name": "SafeBrowsingProtectionLevel",
            "owners": [
                "vakh@chromium.org",
                "file://components/safe_browsing/OWNERS"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:83-",
                "chrome_os:83-",
                "android:87-",
                "ios:88-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Enable reporting of usage and crash-related data",
            "desc": "When this policy is enabled, anonymous reporting of usage and crash-related data about Chrome to Google is enabled by default. Users will still be able to change this setting in the Chrome settings.\n\n      When this policy is disabled, anonymous reporting is disabled and no usage or crash data is sent to Google. Users won't be able to change this setting.\n\n      When this policy isn't set, users can choose the anonymous reporting behavior at installation or first run, and can later change the setting in the Chrome settings.\n\n      This policy is available only on Windows instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain or Windows 10 Pro or Enterprise instances that are enrolled for device management, and macOS instances that are managed via MDM or joined to a domain via MCX.\n\n      (For Chrome OS, see DeviceMetricsReportingEnabled.)",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 15,
            "items": [
                {
                    "caption": "Enable reporting of usage and crash-related data",
                    "value": true
                },
                {
                    "caption": "Disable reporting of usage and crash-related data",
                    "value": false
                }
            ],
            "name": "MetricsReportingEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "ios:88-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on Android apps.",
            "caption": "Enable saving passwords to the password manager",
            "desc": "Setting the policy to Enabled means users have Google Chrome remember passwords and provide them the next time they sign in to a site.\n\n      Setting the policy to Disabled means users can't save new passwords, but previously saved passwords will still work.\n\n      If the policy is set, users can't change it in Google Chrome. If not set, the user can turn off password saving.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 16,
            "items": [
                {
                    "caption": "Enable saving passwords using the password manager",
                    "value": true
                },
                {
                    "caption": "Disable saving passwords using the password manager",
                    "value": false
                }
            ],
            "name": "PasswordManagerEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to show passwords in Password Manager (deprecated)",
            "deprecated": true,
            "desc": "The associated setting was used before reauthentication on viewing passwords was introduced. Since then, the setting and hence this policy had no effect on the behavior of Chrome. The current behavior of Chrome is now the same as if the policy was set to disable showing passwords in clear text in the password manager settings page. That means that the settings page contains just a placeholder, and only upon the user clicking \"Show\" (and reauthenticating, if applicable) Chrome shows the password. Original description of the policy follows below.\n\n          Controls whether the user may show passwords in clear text in the password manager.\n\n          If you disable this setting, the password manager does not allow showing stored passwords in clear text in the password manager window.\n\n          If you enable or do not set this policy, users can view their passwords in clear text in the password manager.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 17,
            "name": "PasswordManagerAllowShowPasswords",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-50",
                "chrome_os:11-50"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable leak detection for entered credentials",
            "desc": "Setting the policy to Enabled lets users have Google Chrome check whether usernames and passwords entered were part of a leak.\n\n      If the policy is set, users can't change it in Google Chrome. If not set, credential leak checking is allowed, but the user can turn it off.\u00a0\n\n      This behavior will not trigger if Safe Browsing is disabled (either by policy or by the user). In order to force Safe Browsing on, use the SafeBrowsingEnabled policy or the SafeBrowsingProtectionLevel policy.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 580,
            "items": [
                {
                    "caption": "Enable password leak detection",
                    "value": true
                },
                {
                    "caption": "Disable password leak detection",
                    "value": false
                }
            ],
            "name": "PasswordLeakDetectionEnabled",
            "owners": [
                "file://components/password_manager/OWNERS",
                "mamir@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-",
                "android:79-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable AutoFill",
            "deprecated": true,
            "desc": "This policy is deprecated in M70, please use AutofillAddressEnabled and AutofillCreditCardEnabled instead.\n\n      Enables Google Chrome's AutoFill feature and allows users to auto complete web forms using previously stored information such as address or credit card information.\n\n      If you disable this setting, AutoFill will be inaccessible to users.\n\n      If you enable this setting or do not set a value, AutoFill will remain under the control of the user. This will allow them to configure AutoFill profiles and to switch AutoFill on or off at their own discretion.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 18,
            "items": [
                {
                    "caption": "Enable AutoFill",
                    "value": true
                },
                {
                    "caption": "Disable AutoFill",
                    "value": false
                }
            ],
            "name": "AutoFillEnabled",
            "owners": [
                "file://components/autofill/OWNERS",
                "sebsg@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable AutoFill for addresses",
            "desc": "Setting the policy to True or leaving it unset gives users control of Autofill for addresses in the UI.\n\n      Setting the policy to False means Autofill never suggests or fills address information, nor does it save additional address information that users submit while browsing the web.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 459,
            "items": [
                {
                    "caption": "Enable AutoFill for addresses",
                    "value": true
                },
                {
                    "caption": "Disable AutoFill for addresses",
                    "value": false
                }
            ],
            "name": "AutofillAddressEnabled",
            "owners": [
                "file://components/autofill/OWNERS",
                "sebsg@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:69-",
                "android:69-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable AutoFill for credit cards",
            "desc": "Setting the policy to True or leaving it unset means users can control autofill suggestions for credit cards in the UI.\n\n      Setting the policy to False means autofill never suggests or fills credit card information, nor will it save additional credit card information that users might submit while browsing the web.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 392,
            "items": [
                {
                    "caption": "Enable AutoFill for credit cards",
                    "value": true
                },
                {
                    "caption": "Disable AutoFill for credit cards",
                    "value": false
                }
            ],
            "name": "AutofillCreditCardEnabled",
            "owners": [
                "caitkp@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:63-",
                "chrome_os:63-",
                "android:63-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Specify a list of disabled plugins",
            "deprecated": true,
            "desc": "This policy is deprecated. Please use the DefaultPluginsSetting to control the availability of the Flash plugin and AlwaysOpenPdfExternally to control whether the integrated PDF viewer should be used for opening PDF files.\n\n      Specifies a list of plugins that are disabled in Google Chrome and prevents users from changing this setting.\n\n      The wildcard characters '*' and '?' can be used to match sequences of arbitrary characters. '*' matches an arbitrary number of characters while '?' specifies an optional single character, i.e. matches zero or one characters. The escape character is '\\', so to match actual '*', '?', or '\\' characters, you can put a '\\' in front of them.\n\n      If you enable this setting, the specified list of plugins is never used in Google Chrome. The plugins are marked as disabled in 'about:plugins' and users cannot enable them.\n\n      Note that this policy can be overridden by EnabledPlugins and DisabledPluginsExceptions.\n\n      If this policy is left not set the user can use any plugin installed on the system except for hard-coded incompatible, outdated or dangerous plugins.",
            "example_value": [
                "Java",
                "Shockwave Flash",
                "Chrome PDF Viewer"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 19,
            "label": "List of disabled plugins",
            "name": "DisabledPlugins",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:8-87",
                "chrome_os:11-87"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Specify a list of enabled plugins",
            "deprecated": true,
            "desc": "This policy is deprecated. Please use the DefaultPluginsSetting to control the availability of the Flash plugin and AlwaysOpenPdfExternally to control whether the integrated PDF viewer should be used for opening PDF files.\n\n      Specifies a list of plugins that are enabled in Google Chrome and prevents users from changing this setting.\n\n      The wildcard characters '*' and '?' can be used to match sequences of arbitrary characters. '*' matches an arbitrary number of characters while '?' specifies an optional single character, i.e. matches zero or one characters. The escape character is '\\', so to match actual '*', '?', or '\\' characters, you can put a '\\' in front of them.\n\n      The specified list of plugins is always used in Google Chrome if they are installed. The plugins are marked as enabled in 'about:plugins' and users cannot disable them.\n\n      Note that this policy overrides both DisabledPlugins and DisabledPluginsExceptions.\n\n      If this policy is left not set the user can disable any plugin installed on the system.",
            "example_value": [
                "Java",
                "Shockwave Flash",
                "Chrome PDF Viewer"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 78,
            "label": "List of enabled plugins",
            "name": "EnabledPlugins",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-87",
                "chrome_os:11-87"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Specify a list of plugins that the user can enable or disable",
            "deprecated": true,
            "desc": "This policy is deprecated. Please use the DefaultPluginsSetting to control the availability of the Flash plugin and AlwaysOpenPdfExternally to control whether the integrated PDF viewer should be used for opening PDF files.\n\n      Specifies a list of plugins that user can enable or disable in Google Chrome.\n\n      The wildcard characters '*' and '?' can be used to match sequences of arbitrary characters. '*' matches an arbitrary number of characters while '?' specifies an optional single character, i.e. matches zero or one characters. The escape character is '\\', so to match actual '*', '?', or '\\' characters, you can put a '\\' in front of them.\n\n      If you enable this setting, the specified list of plugins can be used in Google Chrome. Users can enable or disable them in 'about:plugins', even if the plugin also matches a pattern in DisabledPlugins. Users can also enable and disable plugins that don't match any patterns in DisabledPlugins, DisabledPluginsExceptions and EnabledPlugins.\n\n      This policy is meant to allow for strict plugin blocking where the 'DisabledPlugins' list contains wildcarded entries like disable all plugins '*' or disable all Java plugins '*Java*' but the administrator wishes to enable some particular version like 'IcedTea Java 2.3'. This particular versions can be specified in this policy.\n\n      Note that both the plugin name and the plugin's group name have to be exempted. Each plugin group is shown in a separate section in about:plugins; each section may have one or more plugins. For example, the \"Shockwave Flash\" plugin belongs to the \"Adobe Flash Player\" group, and both names have to have a match in the exceptions list if that plugin is to be exempted from the blocklist.\n\n      If this policy is left not set any plugin that matches the patterns in the 'DisabledPlugins' will be locked disabled and the user won't be able to enable them.",
            "example_value": [
                "Java",
                "Shockwave Flash",
                "Chrome PDF Viewer"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 79,
            "label": "List of exceptions to the list of disabled plugins",
            "name": "DisabledPluginsExceptions",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-87",
                "chrome_os:11-87"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Always Open PDF files externally",
            "desc": "Setting the policy to Enabled turns the internal PDF viewer off in Google Chrome, treats PDF files as a download, and lets users open PDFs with the default application.\n\n      Setting the policy to Disabled means that unless users turns off the PDF plugin, it will open PDF files.\n\n      If you set the policy, users can't change it in Google Chrome. If not set, users can choose whether to open PDF externally or not.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 347,
            "items": [
                {
                    "caption": "Always open PDF files using an external PDF viewer",
                    "value": true
                },
                {
                    "caption": "Always open PDF files using the internal PDF viewer",
                    "value": false
                }
            ],
            "name": "AlwaysOpenPdfExternally",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:55-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Specify whether the plugin finder should be disabled (deprecated)",
            "deprecated": true,
            "desc": "This policy has been removed as of Google Chrome 64.\n\n      Automatic search and installation of missing plugins is no longer supported.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 66,
            "items": [
                {
                    "caption": "Enable the plugin finder",
                    "value": true
                },
                {
                    "caption": "Disable the plugin finder",
                    "value": false
                }
            ],
            "label": "Disable plugin finder (deprecated)",
            "name": "DisablePluginFinder",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:11-64",
                "chrome_os:11-64"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "Disabling Chrome Sync will cause Android Backup and Restore to not function properly.",
            "caption": "Disable synchronization of data with Google",
            "desc": "Setting the policy to Enabled turns off data synchronization in Google Chrome using Google-hosted synchronization services.\n      To fully turn off Chrome Sync services, we recommend that you turn off the service in the Google Admin console.\n\n      If the policy is set to Disabled or not set, users are allowed to choose whether to use Chrome Sync.\n\n      Note: Do not turn on this policy when RoamingProfileSupportEnabled is Enabled, because that feature shares the same client-side functionality. The Google-hosted synchronization is off completely in this case.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "android"
            ],
            "id": 20,
            "items": [
                {
                    "caption": "Disable Chrome Sync",
                    "value": true
                },
                {
                    "caption": "Allow users to choose whether to enable Chrome Sync",
                    "value": false
                }
            ],
            "name": "SyncDisabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "ios:96-"
            ],
            "tags": [
                "filtering",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "List of types that should be excluded from synchronization",
            "desc": "If this policy is set all specified data types will be excluded from synchronization both for Chrome Sync as well as for roaming profile synchronization. This can be beneficial to reduce the size of the roaming profile or limit the type of data uploaded to the Chrome Sync Servers.\n\n      The current data types for this policy are: \"bookmarks\", \"readingList\", \"preferences\", \"passwords\", \"autofill\", \"themes\", \"typedUrls\", \"extensions\", \"apps\", \"tabs\", \"wifiConfigurations\". Those names are case sensitive!",
            "example_value": [
                "bookmarks"
            ],
            "features": {
                "per_profile": true,
                "dynamic_refresh": false
            },
            "future_on": [
                "ios"
            ],
            "id": 649,
            "name": "SyncTypesListDisabled",
            "owners": [
                "pastarmovj@chromium.org",
                "mastiz@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:79-",
                "android:79-",
                "chrome_os:79-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Enable the creation of roaming copies for Google Chrome profile data",
            "desc": "If you enable this setting, the settings stored in Google Chrome profiles like bookmarks, autofill data, passwords, etc. will also be written to a file stored in the Roaming user profile folder or a location specified by the Administrator through the RoamingProfileLocation policy. Enabling this policy disables cloud sync.\n\n      If this policy is disabled or left not set only the regular local profiles will be used.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 358,
            "items": [
                {
                    "caption": "Enable creation of roaming profiles",
                    "value": true
                },
                {
                    "caption": "Disable creation of roaming profiles",
                    "value": false
                }
            ],
            "label": "Enable the creation of roaming copies for Google Chrome profile data.",
            "name": "RoamingProfileSupportEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:57-",
                "chrome.mac:88-",
                "chrome.linux:88-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Set the roaming profile directory",
            "desc": "Configures the directory that Google Chrome will use for storing the roaming copy of the profiles.\n\n      If you set this policy, Google Chrome will use the provided directory to store the roaming copy of the profiles if the RoamingProfileSupportEnabled policy has been enabled. If the RoamingProfileSupportEnabled policy is disabled or left unset the value stored in this policy is not used.\n\n      See https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables for a list of variables that can be used.\n\n      On non-Windows platforms, this policy must be set for roaming profiles to work.\n\n      On Windows, if this policy is left unset, the default roaming profile path will be used.",
            "example_value": "${roaming_app_data}\\chrome-profile",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 359,
            "label": "Set the roaming profile directory",
            "name": "RoamingProfileLocation",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.win:57-",
                "chrome.mac:88-",
                "chrome.linux:88-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "string"
        },
        {
            "caption": "Allow sign in to Google Chrome",
            "deprecated": true,
            "desc": "This policy is deprecated, consider using BrowserSignin instead.\n\n      Allows the user to sign in to Google Chrome.\n\n      If you set this policy, you can configure whether a user is allowed to sign in to Google Chrome. Setting this policy to 'False' will prevent apps and extensions that use the chrome.identity API from functioning, so you may want to use SyncDisabled instead.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 190,
            "items": [
                {
                    "caption": "Allow users to sign in to Google Chrome",
                    "value": true
                },
                {
                    "caption": "Prevent users from signing in to Google Chrome",
                    "value": false
                }
            ],
            "name": "SigninAllowed",
            "owners": [
                "akuegel@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:27-",
                "android:38-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the old web-based signin flow",
            "deprecated": true,
            "desc": "This setting was named EnableWebBasedSignin prior to Chrome 42, and support for it will be removed entirely in Chrome 43.\n\n      This setting is useful for enterprise customers who are using SSO solutions that are not compatible with the new inline signin flow yet.\n      If you enable this setting, the old web-based signin flow would be used.\n      If you disable this setting or leave it not set, the new inline signin flow would be used by default. Users may still enable the old web-based signin flow through the command line flag --enable-web-based-signin.\n\n      The experimental setting will be removed in the future when the inline signin fully supports all SSO signin flows.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 265,
            "name": "EnableDeprecatedWebBasedSignin",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:35-42"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set user data directory",
            "desc": "Configures the directory that Google Chrome will use for storing user data.\n\n      If you set this policy, Google Chrome will use the provided directory regardless whether the user has specified the '--user-data-dir' flag or not. To avoid data loss or other unexpected errors this policy should not be set to a directory used for other purposes, because Google Chrome manages its contents.\n\n      See https://support.google.com/chrome/a?p=Supported_directory_variables for a list of variables that can be used.\n\n      If this policy is left not set the default profile path will be used and the user will be able to override it with the '--user-data-dir' command line flag.",
            "example_value": "${users}/${user_name}/Chrome",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 63,
            "label": "Set user data directory",
            "name": "UserDataDir",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.win:11-",
                "chrome.mac:11-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "string"
        },
        {
            "caption": "Set disk cache directory",
            "desc": "Setting the policy has Google Chrome use the directory you provide for storing cached files on the disk\u2014whether or not users specify the --disk-cache-dir flag.\n\n      If not set, Google Chrome uses the default cache directory, but users can change that setting with the --disk-cache-dir command line flag.\n\n      Google Chrome manages the contents of a volume's root directory. So to avoid data loss or other errors, do not set this policy to the root directory or any directory used for other purposes. See the variables you can use ( https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables ).",
            "example_value": "${user_home}/Chrome_cache",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 88,
            "label": "Set disk cache directory",
            "name": "DiskCacheDir",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:13-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Set disk cache size in bytes",
            "desc": "Setting the policy to None has Google Chrome use the default cache size for storing cached files on the disk. Users can't change it.\n\n      If you set the policy, Google Chrome uses the cache size you provide\u2014whether or not users specify the --disk-cache-size flag. (Values below a few megabytes are rounded up.)\n\n      If not set, Google Chrome uses the default size. Users can change that setting using the --disk-cache-size flag.\n\n      Note: The value specified in this policy is used as a hint to various cache subsystems in the browser. Therefore the actual total disk consumption of all caches will be higher but within the same order of magnitude as the value specified.",
            "example_value": 104857600,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 110,
            "label": "Set disk cache size",
            "name": "DiskCacheSize",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:17-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Set media disk cache size in bytes",
            "deprecated": true,
            "desc": "Setting the policy configures the cache size that Google Chrome uses for storing cached media files on the disk, regardless of whether or not users specify the --media-cache-size flag. The value specified in this policy isn't a hard boundary, but a suggestion to the caching system. Any value below a few megabytes is rounded up.\n\n      Setting the value of the policy to 0 uses the default cache size, and users can't change it.\n\n      Leaving the policy unset uses the default cache size and users can change it with the --media-cache-size flag.",
            "example_value": 104857600,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 111,
            "label": "Set media disk cache size",
            "name": "MediaCacheSize",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:17-71"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Allow download restrictions",
            "desc": "Setting the policy means users can't bypass download security decisions.\n\n      There are many types of download warnings within Chrome, which roughly break down into these categories (learn more about Safe Browsing verdicts https://support.google.com/chrome/?p=ib_download_blocked):\n\n      * Malicious, as flagged by the Safe Browsing server\n      * Uncommon or unwanted, as flagged by the Safe Browsing server\n      * A dangerous file type (e.g. all SWF downloads and many EXE downloads)\n\n      Setting the policy blocks different subsets of these, depending on it's value:\n\n      0: No special restrictions. Default.\n\n      1: Blocks malicious files flagged by the Safe Browsing server AND Blocks all dangerous file types. Only recommended for OUs/browsers/users that have a high tolerance for False Positives.\n\n      2: Blocks malicious files flagged by the Safe Browsing server AND Blocks uncommon or unwanted files flagged by the Safe Browsing server AND Blocks all dangerous file types. Only recommended for OUs/browsers/users that have a high tolerance for False Positives.\n\n      3: Blocks all downloads. Not recommended, except for special use cases.\n\n      4: Blocks malicious files flagged by the Safe Browsing server, does not block dangerous file types. Recommended.\n\n      Note: These restrictions apply to downloads triggered from webpage content, as well as the Download link... menu option. They don't apply to the download of the currently displayed page or to saving as PDF from the printing options. Read more about Safe Browsing ( https://developers.google.com/safe-browsing ).",
            "example_value": 4,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 371,
            "items": [
                {
                    "caption": "No special restrictions. Default.",
                    "name": "DefaultDownloadSecurity",
                    "value": 0
                },
                {
                    "caption": "Block malicious downloads and dangerous file types.",
                    "name": "BlockDangerousDownloads",
                    "value": 1
                },
                {
                    "caption": "Block malicious downloads, uncommon or unwanted downloads and dangerous file types.",
                    "name": "BlockPotentiallyDangerousDownloads",
                    "value": 2
                },
                {
                    "caption": "Block all downloads.",
                    "name": "BlockAllDownloads",
                    "value": 3
                },
                {
                    "caption": "Block malicious downloads. Recommended.",
                    "name": "BlockMaliciousDownloads",
                    "value": 4
                }
            ],
            "label": "Download restrictions",
            "name": "DownloadRestrictions",
            "owners": [
                "mad@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:61-",
                "chrome_os:61-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "int-enum"
        },
        {
            "arc_support": "This policy has no effect on Android apps. Android apps always use the default downloads directory and cannot access any files downloaded by Google Chrome OS into a non-default downloads directory.",
            "caption": "Set download directory",
            "desc": "Setting the policy sets up the directory Chrome uses for downloading files. It uses the provided directory, whether or not users specify one or turned on the flag to be prompted for download location every time.\n\n      Leaving the policy unset means Chrome uses the default download directory, and users can change it.\n\n      Note: See a list of variables you can use ( https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables ).",
            "example_value": "/home/${user_name}/Downloads",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 64,
            "label": "Set download directory",
            "name": "DownloadDirectory",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:35-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "string"
        },
        {
            "caption": "List of file types that should be automatically opened on download",
            "desc": "List of file types that should be automatically opened on download. The leading separator should not be included when listing the file type, so list \"txt\" instead of \".txt\".\n\n      Files with types that should be automatically opened will still be subject to the enabled safe browsing checks and won't be opened if they fail those checks.\n\n      If this policy isn't set, only file types that a user has already specified to automatically be opened will do so when downloaded.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": [
                "exe",
                "txt"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 700,
            "name": "AutoOpenFileTypes",
            "owners": [
                "csharp@chromium.org",
                "qinmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:84-",
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "URLs where AutoOpenFileTypes can apply",
            "desc": "List of URLs specifying which urls AutoOpenFileTypes will apply to. This policy has no impact on automatically open values set by users.\n\n      If this policy is set, files will only automatically open by policy if the url is part of this set and the file type is listed in AutoOpenFileTypes. If either condition is false the download won't automatically open by policy.\n\n      If this policy isn't set, all downloads where the file type is in AutoOpenFileTypes will automatically open.\n\n      A URL pattern has to be formatted according to https://www.chromium.org/administrators/url-blocklist-filter-format.",
            "example_value": [
                "example.com",
                "https://ssl.server.com",
                "hosting.com/good_path",
                "https://server:8080/path",
                ".exact.hostname.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 707,
            "name": "AutoOpenAllowedForURLs",
            "owners": [
                "csharp@chromium.org",
                "qinmin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:84-",
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Define a list of protocols that can launch an external application from listed origins without prompting the user",
            "desc": "Allows you to set a list of protocols, and for each protocol an associated list of allowed origin patterns, that can launch an external application without prompting the user. The trailing separator should not be included when listing the protocol, so list \"skype\" instead of \"skype:\" or \"skype://\".\n\n      If this policy is set, a protocol will only be permitted to launch an external application without prompting by policy if the protocol is listed, and the origin of the site trying to launch the protocol matches one of the origin patterns in that protocol's allowed_origins list. If either condition is false the external protocol launch prompt will not be omitted by policy.\n\n      If this policy is not set, no protocols can launch without a prompt by default. Users may opt out of prompts on a per-protocol/per-site basis unless the ExternalProtocolDialogShowAlwaysOpenCheckbox policy is set to Disabled. This policy has no impact on per-protocol/per-site prompt exemptions set by users.\n\n      The origin matching patterns use a similar format to those for the 'URLBlocklist' policy, which are documented at http://www.chromium.org/administrators/url-blocklist-filter-format.\n\n      However, origin matching patterns for this policy cannot contain \"/path\" or \"@query\" elements. Any pattern that does contain a \"/path\" or \"@query\" element will be ignored.",
            "example_value": [
                {
                    "protocol": "spotify",
                    "allowed_origins": [
                        "example.com",
                        "http://www.example.com:8080"
                    ]
                },
                {
                    "protocol": "teams",
                    "allowed_origins": [
                        "https://example.com",
                        "https://.mail.example.com"
                    ]
                },
                {
                    "protocol": "outlook",
                    "allowed_origins": [
                        "*"
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 722,
            "name": "AutoLaunchProtocolsFromOrigins",
            "owners": [
                "csharp@chromium.org",
                "engedy@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "allowed_origins": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "protocol": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "protocol",
                        "allowed_origins"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:85-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable Safe Browsing for trusted sources",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset means downloaded files are sent to be analyzed by Safe Browsing, even when it's from a trusted source.\n\n      Setting the policy to Disabled means downloaded files won't be sent to be analyzed by Safe Browsing when it's from a trusted source.\n\n      These restrictions apply to downloads triggered from webpage content, as well as the Download link menu option. These restrictions don't apply to the save or download of the currently displayed page or to saving as PDF from the printing options.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 375,
            "items": [
                {
                    "caption": "Perform Safe Browsing checks on all downloaded files",
                    "value": true
                },
                {
                    "caption": "Skip Safe Browsing checks for files download from trusted sources",
                    "value": false
                }
            ],
            "label": "Safe Browsing enable state for trusted sources",
            "name": "SafeBrowsingForTrustedSourcesEnabled",
            "owners": [
                "mad@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:61-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Clear site data on browser shutdown (deprecated)",
            "deprecated": true,
            "desc": "This policy has been retired as of Google Chrome version 29.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 65,
            "label": "Clear site data on browser shutdown (deprecated)",
            "name": "ClearSiteDataOnExit",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:11-28",
                "chrome_os:11-28"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Captive portal authentication ignores proxy",
            "default_for_enterprise_users": false,
            "desc": "Setting the policy to Enabled lets Google Chrome OS bypass any proxy for captive portal authentication. These authentication webpages, starting from the captive portal sign-in page until Chrome detects a successful internet connection, open in a separate window, ignoring all policy settings and restrictions for the current user. This policy only takes effect if a proxy is set up (by policy, extension, or the user in chrome://settings).\n\n      Setting the policy to Disabled or leaving it unset means any captive portal authentication pages are shown in a (regular) new browser tab, using the current user's proxy settings.",
            "example_value": true,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 295,
            "items": [
                {
                    "caption": "Allow captive portal authentication to ignore proxy settings",
                    "value": true
                },
                {
                    "caption": "Prevent captive portal authentication from ignoring proxy settings",
                    "value": false
                }
            ],
            "name": "CaptivePortalAuthenticationIgnoresProxy",
            "owners": [
                "ultrotter@google.com",
                "rsorokin@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:41-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Choose how to specify proxy server settings",
            "deprecated": true,
            "desc": "This policy is deprecated, please use ProxySettings instead.\n\n       Setting the policy to Enabled lets you specify the proxy server Chrome uses and prevents users from changing proxy settings. Chrome and ARC-apps ignore all proxy-related options specified from the command line. The policy only takes effect if the ProxySettings policy isn't specified.\n\n       Other options are ignored if you choose:\n         * direct = Never use a proxy server and always connect directly\n         * system = Use system proxy settings\n         * auto_detect = Auto detect the proxy server\n\n       If you choose to use:\n         * fixed_servers = Fixed proxy servers. You can specify further options with ProxyServer and ProxyBypassList. Only the HTTP proxy server with the highest priority is available for ARC-apps.\n         * pac_script =  A .pac proxy script. Use ProxyPacUrl to set the URL to a proxy .pac file.\n\n      Leaving the policy unset lets users choose the proxy settings.\n\n      Note: For detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).",
            "example_value": "direct",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 21,
            "items": [
                {
                    "caption": "Never use a proxy",
                    "name": "ProxyDisabled",
                    "value": "direct"
                },
                {
                    "caption": "Auto detect proxy settings",
                    "name": "ProxyAutoDetect",
                    "value": "auto_detect"
                },
                {
                    "caption": "Use a .pac proxy script",
                    "name": "ProxyPacScript",
                    "value": "pac_script"
                },
                {
                    "caption": "Use fixed proxy servers",
                    "name": "ProxyFixedServers",
                    "value": "fixed_servers"
                },
                {
                    "caption": "Use system proxy settings",
                    "name": "ProxyUseSystem",
                    "value": "system"
                }
            ],
            "name": "ProxyMode",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    "direct",
                    "auto_detect",
                    "pac_script",
                    "fixed_servers",
                    "system"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "arc_support": "You cannot force Android apps to use a proxy. A subset of proxy settings is made available to Android apps, which they may voluntarily choose to honor. See the ProxyMode policy for more details.",
            "caption": "Choose how to specify proxy server settings",
            "deprecated": true,
            "desc": "This policy is deprecated, use ProxyMode instead.\n\n          Allows you to specify the proxy server used by Google Chrome and prevents users from changing proxy settings.\n\n          This policy only takes effect  if the ProxySettings policy has not been specified.\n\n          If you choose to never use a proxy server and always connect directly, all other options are ignored.\n\n          If you choose to use system proxy settings or auto detect the proxy server, all other options are ignored.\n\n          If you choose manual proxy settings, you can specify further options in 'Address or URL of proxy server', 'URL to a proxy .pac file' and 'Comma-separated list of proxy bypass rules'. Only the HTTP proxy server with the highest priority is available for ARC-apps.\n\n          For detailed examples, visit:\n          https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett.\n\n          If you enable this setting, Google Chrome ignores all proxy-related options specified from the command line.\n\n          Leaving this policy not set will allow the users to choose the proxy settings on their own.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 22,
            "items": [
                {
                    "caption": "Never use a proxy",
                    "name": "ProxyServerDisabled",
                    "value": 0
                },
                {
                    "caption": "Auto detect proxy settings",
                    "name": "ProxyServerAutoDetect",
                    "value": 1
                },
                {
                    "caption": "Manually specify proxy settings",
                    "name": "ProxyServerManual",
                    "value": 2
                },
                {
                    "caption": "Use system proxy settings",
                    "name": "ProxyServerUseSystem",
                    "value": 3
                }
            ],
            "name": "ProxyServerMode",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "id": "ProxyServerMode",
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "arc_support": "You cannot force Android apps to use a proxy. A subset of proxy settings is made available to Android apps, which they may voluntarily choose to honor. See the ProxyMode policy for more details.",
            "caption": "Address or URL of proxy server",
            "deprecated": true,
            "desc": "This policy is deprecated, please use ProxySettings instead.\n\n       Setting the policy lets you specify the URL of the proxy server. This policy only takes effect if the ProxySettings policy isn't specified and you selected fixed_servers with ProxyMode.\n\n       Leave this policy unset if you selected any other mode for setting proxy policies.\n\n      Note: For detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).",
            "example_value": "123.123.123.123:8080",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 23,
            "name": "ProxyServer",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "arc_support": "You cannot force Android apps to use a proxy. A subset of proxy settings is made available to Android apps, which they may voluntarily choose to honor. See the ProxyMode policy for more details.",
            "caption": "URL to a proxy .pac file",
            "deprecated": true,
            "desc": "This policy is deprecated, please use ProxySettings instead.\n\n       Setting the policy lets you specify a URL to a proxy .pac file. This policy only takes effect if the ProxySettings policy isn't specified and you selected pac_script with ProxyMode.\n\n       Leave this policy unset if you selected any other mode for setting proxy policies.\n\n       Note: For detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).",
            "example_value": "https://internal.site/example.pac",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 24,
            "name": "ProxyPacUrl",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "arc_support": "You cannot force Android apps to use a proxy. A subset of proxy settings is made available to Android apps, which they may voluntarily choose to honor. See the ProxyMode policy for more details.",
            "caption": "Proxy bypass rules",
            "deprecated": true,
            "desc": "This policy is deprecated, please use ProxySettings instead.\n\n       Setting the policy means Google Chrome bypasses any proxy for the list of hosts given here. This policy only takes effect if the ProxySettings policy isn't specified and you specified either fixed_servers or pac_script for ProxyMode.\n\n       Leave this policy unset if you selected any other mode for setting proxy policies.\n\n       Note: For more detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).",
            "example_value": "https://www.example1.com,https://www.example2.com,https://internalsite/",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 25,
            "label": "Comma-separated list of proxy bypass rules",
            "name": "ProxyBypassList",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "arc_support": "Only a subset of proxy configuration options are made available to Android apps. Android apps may voluntarily choose to use the proxy. You cannot force them to use a proxy.",
            "caption": "Proxy settings",
            "desc": "Setting the policy configures the proxy settings for Chrome and ARC-apps, which ignore all proxy-related options specified from the command line.\n\n       Leaving the policy unset lets users choose their proxy settings.\n\n       Setting the ProxySettings policy accepts the following fields:\n         * ProxyMode, which lets you specify the proxy server Chrome uses and prevents users from changing proxy settings\n         * ProxyPacUrl, a URL to a proxy .pac file\n         * ProxyPacMandatory, which prevents the network stack from falling back to direct connections with invalid or unavailable PAC script\n         * ProxyServer, a URL of the proxy server\n         * ProxyBypassList, a list of hosts for which the proxy will be bypassed\n\n       The ProxyServerMode field is deprecated in favor of the ProxyMode field.\n\n        For ProxyMode, if you choose the value:\n          * direct, a proxy is never used and all other fields are ignored.\n          * system, the systems's proxy is used and all other fields are ignored.\n          * auto_detect, all other fields are ignored.\n          * fixed_servers, the ProxyServer and ProxyBypassList fields are used.\n          * pac_script, the ProxyPacUrl, ProxyPacMandatory and ProxyBypassList fields are used.\n\n      Note: For more detailed examples, visit The Chromium Projects ( https://www.chromium.org/developers/design-documents/network-settings#TOC-Command-line-options-for-proxy-sett ).",
            "example_value": {
                "ProxyMode": "fixed_servers",
                "ProxyServer": "123.123.123.123:8080",
                "ProxyBypassList": "https://www.example1.com,https://www.example2.com,https://internalsite/"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 116,
            "name": "ProxySettings",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "properties": {
                    "ProxyBypassList": {
                        "type": "string"
                    },
                    "ProxyMode": {
                        "enum": [
                            "direct",
                            "auto_detect",
                            "pac_script",
                            "fixed_servers",
                            "system"
                        ],
                        "type": "string"
                    },
                    "ProxyPacMandatory": {
                        "type": "boolean"
                    },
                    "ProxyPacUrl": {
                        "type": "string"
                    },
                    "ProxyServer": {
                        "type": "string"
                    },
                    "ProxyServerMode": {
                        "$ref": "ProxyServerMode"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome.*:18-",
                "chrome_os:18-",
                "android:30-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "dict"
        },
        {
            "caption": "Supported authentication schemes",
            "desc": "Setting the policy specifies which HTTP authentication schemes Google Chrome supports.\n\n      Leaving the policy unset employs all 4 schemes.\n\n      Valid values:\n\n      * basic\n\n      * digest\n\n      * ntlm\n\n      * negotiate\n\n      Note: Separate multiple values with commas.",
            "example_value": "basic,digest,ntlm,negotiate",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 26,
            "name": "AuthSchemes",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:9-",
                "android:46-",
                "chrome_os:62-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Disable CNAME lookup when negotiating Kerberos authentication",
            "desc": "Setting the policy to Enabled skips CNAME lookup. The server name is used as entered when generating the Kerberos SPN.\n\n      Setting the policy to Disabled or leaving it unset means CNAME lookup determines the canonical name of the server when generating the Kerberos SPN.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 27,
            "items": [
                {
                    "caption": "Disable CNAME lookup during Kerberos authentication",
                    "value": true
                },
                {
                    "caption": "Use CNAME lookup during Kerberos authentication",
                    "value": false
                }
            ],
            "name": "DisableAuthNegotiateCnameLookup",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:9-",
                "android:46-",
                "chrome_os:62-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Include non-standard port in Kerberos SPN",
            "desc": "Setting the policy to Enabled and entering a nonstandard port (in other words, a port other than 80 or 443) includes it in the generated Kerberos SPN.\n\n      Setting the policy to Disabled or leaving it unset means the generated Kerberos SPN won't include a port.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 28,
            "items": [
                {
                    "caption": "Include non-standard port in generated Kerberos SPN",
                    "value": true
                },
                {
                    "caption": "Do not include port in generated Kerberos SPN",
                    "value": false
                }
            ],
            "name": "EnableAuthNegotiatePort",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:9-",
                "chrome_os:62-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Basic authentication for HTTP",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset will allow Basic authentication challenges received over non-secure HTTP.\n\n      Setting the policy to Disabled forbids non-secure HTTP requests from using the Basic authentication scheme; only secure HTTPS is allowed.\n\n      This policy setting is ignored (and Basic is always forbidden) if the AuthSchemes policy is set and does not include Basic.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 806,
            "items": [
                {
                    "caption": "Basic authentication is allowed on HTTP connections",
                    "value": true
                },
                {
                    "caption": "Non-secure HTTP connections are not permitted to use Basic authentication; HTTPS is required",
                    "value": false
                }
            ],
            "name": "BasicAuthOverHttpEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:88-",
                "chrome_os:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Authentication server whitelist",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'AuthServerAllowlist' policy instead.\n\n      Setting the policy specifies which servers should be allowed for integrated authentication. Integrated authentication is only on when Google Chrome gets an authentication challenge from a proxy or from a server in this permitted list.\n\n      Leaving the policy unset means Google Chrome tries to detect if a server is on the intranet. Only then will it respond to IWA requests. If a server is detected as internet, then Google Chrome ignores IWA requests from it.\n\n      Note: Separate multiple server names with commas. Wildcards, *, are allowed.",
            "example_value": "*.example.com,example.com",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 29,
            "name": "AuthServerWhitelist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:9-",
                "android:46-",
                "webview_android:49-",
                "chrome_os:62-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Authentication server allowlist",
            "desc": "Setting the policy specifies which servers should be allowed for integrated authentication. Integrated authentication is only on when Google Chrome gets an authentication challenge from a proxy or from a server in this permitted list.\n\n      Leaving the policy unset means Google Chrome tries to detect if a server is on the intranet. Only then will it respond to IWA requests. If a server is detected as internet, then Google Chrome ignores IWA requests from it.\n\n      Note: Separate multiple server names with commas. Wildcards, *, are allowed.",
            "example_value": "*.example.com,example.com",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 747,
            "name": "AuthServerAllowlist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:86-",
                "android:86-",
                "webview_android:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Kerberos delegation server whitelist",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'AuthNegotiateDelegateAllowlist' policy instead.\n\n      Setting the policy assigns servers that Google Chrome may delegate to. Separate multiple server names with commas. Wildcards, *, are allowed.\n\n      Leaving the policy unset means Google Chrome won't delegate user credentials, even if a server is detected as intranet.",
            "example_value": "foobar.example.com",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 30,
            "name": "AuthNegotiateDelegateWhitelist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:9-",
                "android:46-",
                "chrome_os:62-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Kerberos delegation server allowlist",
            "desc": "Setting the policy assigns servers that Google Chrome may delegate to. Separate multiple server names with commas. Wildcards, *, are allowed.\n\n      Leaving the policy unset means Google Chrome won't delegate user credentials, even if a server is detected as intranet.",
            "example_value": "foobar.example.com",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 746,
            "name": "AuthNegotiateDelegateAllowlist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:86-",
                "android:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Use KDC policy to delegate credentials.",
            "desc": "Setting the policy to Enabled means HTTP authentication respects approval by KDC policy. In other words, Google Chrome delegates user credentials to the service being accessed if the KDC sets OK-AS-DELEGATE on the service ticket. See RFC 5896 ( https://tools.ietf.org/html/rfc5896.html ). The service should also be allowed by AuthNegotiateDelegateAllowlist.\n\n      Setting the policy to Disabled or leaving it unset means KDC policy is ignored on supported platforms and only AuthNegotiateDelegateAllowlist is respected.\n\n      On Microsoft\u00ae Windows\u00ae, KDC policy is always respected.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 528,
            "items": [
                {
                    "caption": "Use KDC policy approval during HTTP authentication",
                    "value": true
                },
                {
                    "caption": "Ignore KDC policy approval during HTTP authentication",
                    "value": false
                }
            ],
            "name": "AuthNegotiateDelegateByKdcPolicy",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.linux:74-",
                "chrome.mac:74-",
                "chrome_os:74-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Browser experiments icon in toolbar",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving the policy unset means that users can access browser experimental features through an icon in the toolbar\n\n      Setting the policy to Disabled removes the browser experimental features icon from the toolbar.\n\n      chrome://flags and any other means of turning off and on browser features will still behave as expected regardless of whether this policy is Enabled or Disabled.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 816,
            "items": [
                {
                    "caption": "Enable browser experimental features toolbar entrypoint",
                    "value": true
                },
                {
                    "caption": "Disable browser experimental features toolbar entrypoint",
                    "value": false
                }
            ],
            "name": "BrowserLabsEnabled",
            "owners": [
                "elainechien@chromium.org",
                "labs-on-chrome@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:89-",
                "chrome_os:93-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "GSSAPI library name",
            "desc": "Setting the policy specifies which GSSAPI library to use for HTTP authentication. Set the policy to either a library name or a full path.\n\n      Leaving the policy unset means Google Chrome uses a default library name.",
            "example_value": "libgssapi_krb5.so.2",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 31,
            "name": "GSSAPILibraryName",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.linux:9-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Account type for HTTP Negotiate authentication",
            "desc": "Setting the policy specifies the type of accounts provided by the Android authentication app that supports HTTP Negotiate authentication (such as Kerberos authentication). This information should be available from the supplier of the authentication app. For details, see The Chromium Projects ( https://goo.gl/hajyfN )\n\n      Leaving the policy unset turns off HTTP Negotiate authentication on Android.",
            "example_value": "com.example.spnego",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 305,
            "name": "AuthAndroidNegotiateAccountType",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "android:46-",
                "webview_android:49-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Cross-origin HTTP Authentication prompts",
            "desc": "Setting the policy to Enabled allows third-party images on a page to show an authentication prompt.\n\n       Setting the policy to Disabled or leaving it unset renders third-party images unable to show an authentication prompt.\n\n      Typically, this policy is Disabled as a phishing defense.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 89,
            "items": [
                {
                    "caption": "Allow third-party images to show an authentication prompt",
                    "value": true
                },
                {
                    "caption": "Prevent third-party images from showing an authentication prompt",
                    "value": false
                }
            ],
            "name": "AllowCrossOriginAuthPrompt",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:13-",
                "chrome_os:62-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable NTLMv2 authentication.",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset turns NTLMv2 on.\n\n      Setting the policy to Disabled turns NTLMv2 off.\n\n      All recent versions of Samba and Microsoft\u00ae Windows\u00ae servers support NTLMv2. This should only be turned off for backward compatibility as it reduces the security of authentication.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 393,
            "items": [
                {
                    "caption": "Turn NTLMv2 on",
                    "value": true
                },
                {
                    "caption": "Turn NTLMv2 off",
                    "value": false
                }
            ],
            "name": "NtlmV2Enabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.linux:63-",
                "chrome.mac:63-",
                "chrome_os:63-",
                "android:63-",
                "webview_android:63-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Configure extension installation blacklist",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'ExtensionInstallBlocklist' policy instead.\n\n       Setting the policy specifies which extensions users can't install. Extensions already installed are turned off, if prohibited, without a way for users to turn them on. If a prohibited extension gets removed from the blocked list, it's automatically re-enabled. Use a value of * to prohibit all extensions, except those explicitly allowed.\n\n      If the policy is unset, users can install any extension in Google Chrome.",
            "example_value": [
                "extension_id1",
                "extension_id2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 32,
            "label": "Extension IDs the user should be prevented from installing (or * for all)",
            "name": "ExtensionInstallBlacklist",
            "owners": [
                "lazyboy@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure extension installation blocklist",
            "desc": "Allows you to specify which extensions the users can NOT install. Extensions already installed will be disabled if blocked, without a way for the user to enable them. Once an extension disabled due to the blocklist is removed from it, it will automatically get re-enabled.\n\n          A blocklist value of '*' means all extensions are blocked unless they are explicitly listed in the allowlist.\n\n          If this policy is left not set the user can install any extension in Google Chrome.",
            "example_value": [
                "extension_id1",
                "extension_id2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 740,
            "label": "Extension IDs the user should be prevented from installing (or * for all)",
            "name": "ExtensionInstallBlocklist",
            "owners": [
                "lazyboy@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure extension installation allow list",
            "desc": "Setting the policy specifies which extensions are not subject to the blocklist.\n\n       A blocklist value of * means all extensions are blocked and users can only install extensions listed in the allow list.\n\n       By default, all extensions are allowed. But, if you prohibited extensions by policy, use the list of allowed extensions to change that policy.",
            "example_value": [
                "extension_id1",
                "extension_id2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 738,
            "label": "Extension IDs to exempt from the blocklist",
            "name": "ExtensionInstallAllowlist",
            "owners": [
                "rdevlin.cronin@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure extension installation whitelist",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'ExtensionInstallAllowlist' policy instead.\n\n      Setting the policy specifies which extensions are exempt from the list of prohibited extensions. Use a value of * for ExtensionInstallBlacklist to prohibit all extensions, and users can only install explicitly allowed extensions. By default, all extensions are allowed. But, if you prohibited extensions by policy, use the list of allowed extensions to change that policy.",
            "example_value": [
                "extension_id1",
                "extension_id2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 33,
            "label": "Extension IDs to exempt from the blacklist",
            "name": "ExtensionInstallWhitelist",
            "owners": [
                "rdevlin.cronin@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "arc_support": "Android apps can be force-installed from the Google Admin console using Google Play. They do not use this policy.",
            "caption": "Configure the list of force-installed apps and extensions",
            "desc": "Setting the policy specifies a list of apps and extensions that install silently, without user interaction, and which users can't uninstall or turn off. Permissions are granted implicitly, including for the enterprise.deviceAttributes and enterprise.platformKeys extension APIs. (These 2 APIs aren't available to apps and extensions that aren't force-installed.)\n\n      Leaving the policy unset means no apps or extensions are autoinstalled, and users can uninstall any app or extension in Google Chrome.\n\n      This policy superseeds ExtensionInstallBlocklist policy. If a previously force-installed app or extension is removed from this list, Google Chrome automatically uninstalls it.\n\n      On Microsoft\u00ae Windows\u00ae instances, apps and extensions from outside the Chrome Web Store can only be forced installed if the instance is joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management.\n\n      On macOS instances, apps and extensions from outside the Chrome Web Store can only be force installed if the instance is managed via MDM, or joined to a domain via MCX.\n\n      The source code of any extension may be altered by users through developer tools, potentially rendering the extension dysfunctional. If this is a concern, set the DeveloperToolsDisabled policy.\n\n      Each list item of the policy is a string that contains an extension ID and, optionally, an \"update\" URL separated by a semicolon (;). The extension ID is the 32-letter string found, for example, on chrome://extensions when in Developer mode. If specified, the \"update\" URL should point to an Update Manifest XML document ( https://developer.chrome.com/extensions/autoupdate ). By default, the Chrome Web Store's update URL is used. The \"update\" URL set in this policy is only used for the initial installation; subsequent updates of the extension use the update URL in the extension's manifest.\n\n       Note: This policy doesn't apply to Incognito mode. Read about hosting extensions ( https://developer.chrome.com/extensions/hosting ).",
            "example_value": [
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;https://clients2.google.com/service/update2/crx",
                "abcdefghijklmnopabcdefghijklmnop"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 34,
            "label": "Extension/App IDs and update URLs to be silently installed",
            "name": "ExtensionInstallForcelist",
            "owners": [
                "karandeepb@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:9-",
                "chrome_os:11-"
            ],
            "tags": [
                "full-admin-access"
            ],
            "type": "list"
        },
        {
            "caption": "Configure extension, app, and user script install sources",
            "desc": "Setting the policy specifies which URLs may install extensions, apps, and themes. Before Google Chrome 21, users could click on a link to a *.crx file, and Google Chrome would offer to install the file after a few warnings. Afterwards, such files must be downloaded and dragged to the Google Chrome settings page. This setting allows specific URLs to have the old, easier installation flow.\n\n      Each item in this list is an extension-style match pattern (see https://developer.chrome.com/extensions/match_patterns). Users can easily install items from any URL that matches an item in this list. Both the location of the *.crx file and the page where the download is started from (the referrer) must be allowed by these patterns.\n\n      ExtensionInstallBlocklist takes precedence over this policy. That is, an extension on the blocklist won't be installed, even if it happens from a site on this list.",
            "example_value": [
                "https://corp.mycompany.com/*"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 148,
            "label": "URL patterns to allow extension, app, and user script installs from",
            "name": "ExtensionInstallSources",
            "owners": [
                "dbertoni@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "id": "ExtensionInstallSources",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:21-",
                "chrome_os:21-"
            ],
            "tags": [
                "full-admin-access",
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Allow insecure algorithms in integrity checks on extension updates and installs",
            "deprecated": true,
            "desc": "Setting the policy to Enabled means Google Chrome permits installation and updates for extensions hosted outside the Chrome Web Store, the content of which might only be minimally protected.\n\n      Setting the policy to Disabled means Google Chrome won't permit fresh installation of (and updates to) such extensions. The policy has no effect in Google Chrome 78 and later.\n\n      Leaving this policy unset means it is Enabled in Google Chrome 73 to 75, and Disabled in Google Chrome 76 and 77.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 516,
            "items": [
                {
                    "caption": "Allow installation and updates for extensions hosted outside of Chrome Web Store",
                    "value": true
                },
                {
                    "caption": "Prevent installation and updates for extensions hosted outside of Chrome Web Store",
                    "value": false
                }
            ],
            "name": "ExtensionAllowInsecureUpdates",
            "owners": [
                "waffles@chromium.org",
                "rdevlin.cronin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:73-77",
                "chrome_os:73-77"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Configure allowed app/extension types",
            "desc": "Setting the policy controls which apps and extensions may be installed in Google Chrome, which hosts they can interact with, and limits runtime access.\n\n      Leaving the policy unset results in no restrictions on the acceptable extension and app types.\n\n      Extensions and apps which have a type that's not on the list won't be installed. Each value should be one of these strings:\n\n      * \"extension\"\n\n      * \"theme\"\n\n      * \"user_script\"\n\n      * \"hosted_app\"\n\n      * \"legacy_packaged_app\"\n\n      * \"platform_app\"\n\n      See the Google Chrome extensions documentation for more information on these types.\n\n      Versions earlier than 75 that use multiple comma separated extension IDs aren't supported and are skipped. The rest of the policy applies.\n\n      Note: This policy also affects extensions and apps to be force-installed using ExtensionInstallForcelist.",
            "example_value": [
                "hosted_app"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 168,
            "label": "Types of extensions/apps that are allowed to be installed",
            "name": "ExtensionAllowedTypes",
            "owners": [
                "benwells@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "id": "ExtensionAllowedTypes",
                "items": {
                    "enum": [
                        "extension",
                        "theme",
                        "user_script",
                        "hosted_app",
                        "legacy_packaged_app",
                        "platform_app"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:25-",
                "chrome_os:25-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Extension management settings",
            "desc": "Setting the policy controls extension management settings for Google Chrome, including any controlled by existing extension-related policies. The policy supersedes any legacy policies that might be set.\n\n      This policy maps an extension ID or an update URL to its specific setting only. A default configuration can be set for the special ID \"*\", which applies to all extensions without a custom configuration in this policy. With an update URL, configuration applies to extensions with the exact update URL stated in the extension manifest ( http://support.google.com/chrome/a?p=Configure_ExtensionSettings_policy ). If the 'override_update_url' flag is set to true, the extension is installed and updated using the \"update\" URL specified in the ExtensionInstallForcelist policy or in 'update_url' field in this policy. The flag 'override_update_url' is ignored if the 'update_url' is a Chrome Web Store url.\n\n      Note: For Windows\u00ae instances not joined to a Microsoft\u00ae Active Directory\u00ae domain, forced installation is limited to apps and extensions listed in the Chrome Web Store.",
            "example_value": {
                "abcdefghijklmnopabcdefghijklmnop": {
                    "installation_mode": "allowed",
                    "blocked_permissions": [
                        "history"
                    ],
                    "minimum_version_required": "1.0.1",
                    "toolbar_pin": "force_pinned"
                },
                "bcdefghijklmnopabcdefghijklmnopa": {
                    "installation_mode": "force_installed",
                    "update_url": "https://example.com/update_url",
                    "allowed_permissions": [
                        "downloads"
                    ],
                    "runtime_blocked_hosts": [
                        "*://*.example.com"
                    ],
                    "runtime_allowed_hosts": [
                        "*://good.example.com"
                    ]
                },
                "cdefghijklmnopabcdefghijklmnopab": {
                    "installation_mode": "blocked",
                    "blocked_install_message": "Custom error message."
                },
                "defghijklmnopabcdefghijklmnopabc,efghijklmnopabcdefghijklmnopabcd": {
                    "installation_mode": "blocked",
                    "blocked_install_message": "Custom error message."
                },
                "update_url:https://www.example.com/update.xml": {
                    "blocked_permissions": [
                        "wallpaper"
                    ],
                    "allowed_permissions": [
                        "downloads"
                    ],
                    "installation_mode": "allowed"
                },
                "fghijklmnopabcdefghijklmnopabcde": {
                    "installation_mode": "removed",
                    "blocked_install_message": "Custom removal message."
                },
                "ghijklmnopabcdefghijklmnopabcdef": {
                    "installation_mode": "force_installed",
                    "update_url": "https://example.com/update_url",
                    "override_update_url": true
                },
                "*": {
                    "installation_mode": "blocked",
                    "blocked_permissions": [
                        "downloads",
                        "bookmarks"
                    ],
                    "install_sources": [
                        "https://company-intranet/chromeapps"
                    ],
                    "allowed_types": [
                        "hosted_app"
                    ],
                    "runtime_blocked_hosts": [
                        "*://*.example.com"
                    ],
                    "runtime_allowed_hosts": [
                        "*://good.example.com"
                    ],
                    "blocked_install_message": "Custom error message."
                }
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 278,
            "name": "ExtensionSettings",
            "owners": [
                "finnur@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "patternProperties": {
                    "^[a-p]{32}(?:,[a-p]{32})*,?$": {
                        "properties": {
                            "allowed_permissions": {
                                "$ref": "ListOfPermissions"
                            },
                            "blocked_install_message": {
                                "description": "text that will be displayed to the user in the chrome webstore if installation is blocked.",
                                "type": "string"
                            },
                            "blocked_permissions": {
                                "id": "ListOfPermissions",
                                "items": {
                                    "pattern": "^[a-z][a-zA-Z0-9.]*$",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "installation_mode": {
                                "enum": [
                                    "blocked",
                                    "allowed",
                                    "force_installed",
                                    "normal_installed",
                                    "removed"
                                ],
                                "type": "string"
                            },
                            "minimum_version_required": {
                                "pattern": "^[0-9]+([.][0-9]+)*$",
                                "type": "string"
                            },
                            "override_update_url": {
                                "type": "boolean"
                            },
                            "runtime_allowed_hosts": {
                                "$ref": "ListOfUrlPatterns"
                            },
                            "runtime_blocked_hosts": {
                                "id": "ListOfUrlPatterns",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "toolbar_pin": {
                                "enum": [
                                    "force_pinned",
                                    "default_unpinned"
                                ],
                                "type": "string"
                            },
                            "update_url": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "^update_url:": {
                        "properties": {
                            "allowed_permissions": {
                                "$ref": "ListOfPermissions"
                            },
                            "blocked_permissions": {
                                "$ref": "ListOfPermissions"
                            },
                            "installation_mode": {
                                "enum": [
                                    "blocked",
                                    "allowed",
                                    "removed"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "properties": {
                    "*": {
                        "properties": {
                            "allowed_types": {
                                "$ref": "ExtensionAllowedTypes"
                            },
                            "blocked_install_message": {
                                "type": "string"
                            },
                            "blocked_permissions": {
                                "$ref": "ListOfPermissions"
                            },
                            "install_sources": {
                                "$ref": "ExtensionInstallSources"
                            },
                            "installation_mode": {
                                "enum": [
                                    "blocked",
                                    "allowed",
                                    "removed"
                                ],
                                "type": "string"
                            },
                            "runtime_allowed_hosts": {
                                "$ref": "ListOfUrlPatterns"
                            },
                            "runtime_blocked_hosts": {
                                "$ref": "ListOfUrlPatterns"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome.*:62-",
                "chrome_os:62-"
            ],
            "tags": [],
            "type": "dict",
            "url_schema": "https://www.chromium.org/administrators/policy-list-3/extension-settings-full"
        },
        {
            "caption": "Blocks external extensions from being installed",
            "desc": "Controls external extensions installation.\n\n      Enabling this setting blocks external extensions from being installed.\n\n      Disabling this setting or leaving it unset allows external extensions to be installed.\n\n      External extensions and their installation are documented at https://developer.chrome.com/apps/external_extensions.\n      ",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 637,
            "items": [
                {
                    "caption": "Block installation of external extensions",
                    "value": true
                },
                {
                    "caption": "Allow installation of external extensions",
                    "value": false
                }
            ],
            "name": "BlockExternalExtensions",
            "owners": [
                "reillyg@chromium.org",
                "file://extensions/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show Home button on toolbar",
            "desc": "Setting the policy to Enabled shows the Home button on Google Chrome's toolbar. Setting the policy to Disabled keeps the Home button from appearing.\n\n      If you set the policy, users can't change it in Google Chrome. If not set, users chooses whether to show the Home button.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 35,
            "items": [
                {
                    "caption": "Show the Home button on the toolbar",
                    "value": true
                },
                {
                    "caption": "Hide the Home button from the toolbar",
                    "value": false
                }
            ],
            "name": "ShowHomeButton",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy also controls access to Android Developer Options. If you set this policy to true, users cannot access Developer Options. If you set this policy to false or leave it unset, users can access Developer Options by tapping seven times on the build number in the Android settings app.",
            "caption": "Disable Developer Tools",
            "deprecated": true,
            "desc": "This policy is deprecated in M68, please use DeveloperToolsAvailability instead.\n\n      Disables the Developer Tools and the JavaScript console.\n\n      If you enable this setting, the Developer Tools can not be accessed and web-site elements can not be inspected anymore. Any keyboard shortcuts and any menu or context menu entries to open the Developer Tools or the JavaScript Console will be disabled.\n\n      Setting this option to disabled or leaving it not set allows the user to use the Developer Tools and the JavaScript console.\n\n      If the policy DeveloperToolsAvailability is set, the value of the policy DeveloperToolsDisabled is ignored.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 36,
            "items": [
                {
                    "caption": "Disable Developer Tools",
                    "value": true
                },
                {
                    "caption": "Enable Developer Tools",
                    "value": false
                }
            ],
            "name": "DeveloperToolsDisabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:9-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy also controls access to Android Developer Options. If you set this policy to 'DeveloperToolsDisallowed' (value 2), users cannot access Developer Options. If you set this policy to another value or leave it unset, users can access Developer Options by tapping seven times on the build number in the Android settings app.",
            "caption": "Control where Developer Tools can be used",
            "desc": "Setting the policy to 0 (the default) means you can access the developer tools and the JavaScript console, but not in the context of extensions installed by enterprise policy. Setting the policy to 1 means you can access the developer tools and the JavaScript console in all contexts, including that of extensions installed by enterprise policy. Setting the policy to 2 means you can't acess developer tools, and you can't inspect website elements.\n\n      This setting also turns off keyboard shortcuts and menu or context menu entries to open developer tools or the JavaScript console.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 443,
            "items": [
                {
                    "caption": "Disallow usage of the Developer Tools on extensions installed by enterprise policy, allow usage of the Developer Tools in other contexts",
                    "name": "DeveloperToolsDisallowedForForceInstalledExtensions",
                    "value": 0
                },
                {
                    "caption": "Allow usage of the Developer Tools",
                    "name": "DeveloperToolsAllowed",
                    "value": 1
                },
                {
                    "caption": "Disallow usage of the Developer Tools",
                    "name": "DeveloperToolsDisallowed",
                    "value": 2
                }
            ],
            "name": "DeveloperToolsAvailability",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:68-",
                "chrome_os:68-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Allow remote debugging",
            "default": true,
            "desc": "Controls whether users may use remote debugging.\n\n      If this policy is set to Enabled or not set, users may use remote debugging by specifying --remote-debugging-port and --remote-debugging-pipe command line switches.\n\n      If this policy is set to Disabled, users are not allowed to use remote debugging.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 864,
            "items": [
                {
                    "caption": "Allow use of the remote debugging",
                    "value": true
                },
                {
                    "caption": "Do not allow use of the remote debugging",
                    "value": false
                }
            ],
            "name": "RemoteDebuggingAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:93-",
                "chrome_os:93-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control use of the Headless Mode",
            "default": 1,
            "desc": "Setting this policy to Enabled or leaving the policy unset allows use of the headless mode. Setting this policy to Disabled denies use of the headless mode.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 842,
            "items": [
                {
                    "caption": "Allow use of the Headless Mode",
                    "name": "Enabled",
                    "value": 1
                },
                {
                    "caption": "Do not allow use of the Headless Mode",
                    "name": "Disabled",
                    "value": 2
                }
            ],
            "name": "HeadlessMode",
            "owners": [
                "file://headless/OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:91-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Action on startup",
            "desc": "Setting the policy lets you specify system behavior on startup. Turning this setting off amounts to leaving it unset as Google Chrome must have specified start up behavior.\n\n      If you set the policy, users can't change it in Google Chrome. If not set, users can change it.\n\n      Setting this policy to RestoreOnStartupIsLastSession turns off some settings that rely on sessions or that perform actions on exit, such as clearing browsing data on exit or session-only cookies.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": 4,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 37,
            "items": [
                {
                    "caption": "Open New Tab Page",
                    "name": "RestoreOnStartupIsNewTabPage",
                    "value": 5
                },
                {
                    "caption": "Restore the last session",
                    "name": "RestoreOnStartupIsLastSession",
                    "value": 1
                },
                {
                    "caption": "Open a list of URLs",
                    "name": "RestoreOnStartupIsURLs",
                    "value": 4
                }
            ],
            "name": "RestoreOnStartup",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    4,
                    5
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "URLs to open on startup",
            "desc": "If RestoreOnStartup is set to RestoreOnStartupIsURLs, then setting RestoreOnStartupURLs to a list of URLs specify which URLs open.\n\n      If not set, the New Tab page opens on start up.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": [
                "https://example.com",
                "https://www.chromium.org"
            ],
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 38,
            "name": "RestoreOnStartupURLs",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block third party cookies",
            "default": null,
            "desc": "Setting the policy to Enabled prevents webpage elements that aren't from the domain that's in the browser's address bar from setting cookies. Setting the policy to Disabled lets those elements set cookies and prevents users from changing this setting.\n\n      Leaving it unset turns third-party cookies on, but users can change this setting.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 39,
            "items": [
                {
                    "caption": "Block 3rd party cookies",
                    "value": true
                },
                {
                    "caption": "Allow 3rd party cookies",
                    "value": false
                },
                {
                    "caption": "Allow 3rd party cookies, but allow the user to change this setting",
                    "value": null
                }
            ],
            "name": "BlockThirdPartyCookies",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-",
                "android:83-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the default search provider",
            "default": null,
            "desc": "Setting the policy to Enabled means a default search is performed when a user enters non-URL text in the address bar. To specify the default search provider, set the rest of the default search policies. If you leave those policies empty, the user can choose the default provider. Setting the policy to Disabled means there's no search when the user enters non-URL text in the address bar.\n\n      If you set the policy, users can't change it in Google Chrome. If not set, the default search provider is on, and users can set the search provider list.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 40,
            "items": [
                {
                    "caption": "Enable the default search provider",
                    "value": true
                },
                {
                    "caption": "Disable the default search provider",
                    "value": false
                },
                {
                    "caption": "Enable the default search provider and allow users to modify the search provier list",
                    "value": null
                }
            ],
            "name": "DefaultSearchProviderEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow default search provider context menu search access",
            "desc": "Enables the use of a default search provider on the context menu.\n\n          If you set this policy to disabled the search context menu item that relies on your default search provider will not be available.\n\n          If this policy is set to enabled or not set, the context menu item for your default search provider will be available.\n\n          The policy value is only appled when the DefaultSearchProviderEnabled policy is enabled, and is not applicable otherwise.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 715,
            "items": [
                {
                    "caption": "Enable access to the default search provider context menu",
                    "value": true
                },
                {
                    "caption": "Disable access to the default search provider context menu",
                    "value": false
                }
            ],
            "name": "DefaultSearchProviderContextMenuAccessAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:85-",
                "chrome_os:85-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Default search provider name",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderName specifies the default search provider's name.\n\n      Leaving DefaultSearchProviderName unset means the hostname specified by the search URL is used.",
            "example_value": "My Intranet Search",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 41,
            "name": "DefaultSearchProviderName",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "string"
        },
        {
            "caption": "Default search provider keyword",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderKeyword specifies the keyword or shortcut used in the address bar to trigger the search for this provider.\n\n      Leaving DefaultSearchProviderKeyword unset means no keyword activates the search provider.",
            "example_value": "mis",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 42,
            "name": "DefaultSearchProviderKeyword",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Default search provider search URL",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSearchURL specifies the URL of the search engine used during a default search. The URL should include the string '{searchTerms}', replaced in the query by the user's search terms.\n\n      You can specify Google's search URL as: '{google:baseURL}search?q={searchTerms}&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:searchClient}{google:sourceId}ie={inputEncoding}'.",
            "example_value": "https://search.my.company/search?q={searchTerms}",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 43,
            "name": "DefaultSearchProviderSearchURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "string"
        },
        {
            "caption": "Default search provider suggest URL",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSuggestURL specifies the URL of the search engine to provide search suggestions. The URL should include the string '{searchTerms}', replaced in the query by the user's search terms.\n\n      You can specify Google's search URL as: '{google:baseURL}complete/search?output=chrome&q={searchTerms}'.",
            "example_value": "https://search.my.company/suggest?q={searchTerms}",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 44,
            "name": "DefaultSearchProviderSuggestURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Default search provider instant URL",
            "deprecated": true,
            "desc": "Specifies the URL of the search engine used to provide instant results. The URL should contain the string '{searchTerms}', which will be replaced at query time by the text the user has entered so far.\n\n          This policy is optional. If not set, no instant search results will be provided.\n\n          Google's instant results URL can be specified as: '{google:baseURL}suggest?q={searchTerms}'.\n\n          This policy is only respected if the 'DefaultSearchProviderEnabled' policy is enabled.",
            "example_value": "https://search.my.company/suggest?q={searchTerms}",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 45,
            "name": "DefaultSearchProviderInstantURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:10-63",
                "chrome_os:11-63",
                "android:30-63"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Default search provider icon",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderIconURL specifies the default search provider's favorite icon URL.\n\n      Leaving DefaultSearchProviderIconURL unset means there's no icon for the search provider.",
            "example_value": "https://search.my.company/favicon.ico",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 46,
            "name": "DefaultSearchProviderIconURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Default search provider encodings",
            "desc": "If DefaultSearchProviderEnabled is on, setting DefaultSearchProviderEncodings specifies the character encodings supported by the search provider. Encodings are code page names such as UTF-8, GB2312, and ISO-8859-1. They're tried in the order provided.\n\n      Leaving DefaultSearchProviderEncodings unset puts UTF-8 in use.",
            "example_value": [
                "UTF-8",
                "UTF-16",
                "GB2312",
                "ISO-8859-1"
            ],
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 47,
            "name": "DefaultSearchProviderEncodings",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:8-",
                "chrome_os:11-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "List of alternate URLs for the default search provider",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderAlternateURLs specifies a list of alternate URLs for extracting search terms from the search engine. The URLs should include the string '{searchTerms}'.\n\n      Leaving DefaultSearchProviderAlternateURLs unset means no alternate URLs are used to extract search terms.",
            "example_value": [
                "https://search.my.company/suggest#q={searchTerms}",
                "https://search.my.company/suggest/search#q={searchTerms}"
            ],
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 161,
            "name": "DefaultSearchProviderAlternateURLs",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:24-",
                "chrome_os:24-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Parameter controlling search term placement for the default search provider",
            "deprecated": true,
            "desc": "If this policy is set and a search URL suggested from the omnibox contains this parameter in the query string or in the fragment identifier, then the suggestion will show the search terms and search provider instead of the raw search URL.\n\n          This policy is optional. If not set, no search term replacement will be performed.\n\n          This policy is only respected if the 'DefaultSearchProviderEnabled' policy is enabled.",
            "example_value": "espv",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 171,
            "name": "DefaultSearchProviderSearchTermsReplacementKey",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:25-63",
                "chrome_os:25-63",
                "android:30-63"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Parameter providing search-by-image feature for the default search provider",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderImageURL specifies the URL of the search engine used for image search. (If DefaultSearchProviderImageURLPostParams is set, then image search requests use the POST method instead.)\n\n      Leaving DefaultSearchProviderImageURL unset means no image search is used.",
            "example_value": "https://search.my.company/searchbyimage/upload",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 229,
            "name": "DefaultSearchProviderImageURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:29-",
                "chrome_os:29-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Default search provider new tab page URL",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderNewTabURL specifies the URL of the search engine used to provide a New Tab page.\n\n      Leaving DefaultSearchProviderNewTabURL unset means no new tab page is provided.",
            "example_value": "https://search.my.company/newtab",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 237,
            "name": "DefaultSearchProviderNewTabURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:30-",
                "chrome_os:30-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Parameters for search URL which uses POST",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSearchURLPostParams specifies the parameters when searching a URL with POST. It consists of comma-separated, name-value pairs. If a value is a template parameter, such as '{searchTerms}', real search terms data replaces it.\n\n      Leaving DefaultSearchProviderSearchURLPostParams unset means search requests are sent using the GET method.",
            "example_value": "q={searchTerms},ie=utf-8,oe=utf-8",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 230,
            "name": "DefaultSearchProviderSearchURLPostParams",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:29-",
                "chrome_os:29-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Parameters for suggest URL which uses POST",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderSuggestURLPostParams specifies the parameters during suggestion search with POST. It consists of comma-separated, name-value pairs. If a value is a template parameter, such as '{searchTerms}', real search terms data replaces it.\n\n      Leaving DefaultSearchProviderSuggestURLPostParams unset unset means suggest search requests are sent using the GET method.",
            "example_value": "q={searchTerms},ie=utf-8,oe=utf-8",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 231,
            "name": "DefaultSearchProviderSuggestURLPostParams",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:29-",
                "chrome_os:29-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Parameters for instant URL which uses POST",
            "deprecated": true,
            "desc": "Specifies the parameters used when doing instant search with POST. It consists of comma-separated name/value pairs. If a value is a template parameter, like {searchTerms} in above example, it will be replaced with real search terms data.\n\n          This policy is optional. If not set, instant search request will be sent using the GET method.\n\n          This policy is only respected if the 'DefaultSearchProviderEnabled' policy is enabled.",
            "example_value": "q={searchTerms},ie=utf-8,oe=utf-8",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 232,
            "name": "DefaultSearchProviderInstantURLPostParams",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:29-63",
                "chrome_os:29-63",
                "android:30-63"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Parameters for image URL which uses POST",
            "desc": "If DefaultSearchProviderEnabled is on, then setting DefaultSearchProviderImageURLPostParams specifies the parameters during image search with POST. It consists of comma-separated, name-value pairs. If a value is a template parameter, such as {imageThumbnail}, real image thumbnail data replaces it.\n\n      Leaving DefaultSearchProviderImageURLPostParams unset means image search request is sent using the GET method.",
            "example_value": "content={imageThumbnail},url={imageURL},sbisrc={SearchSource}",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 233,
            "name": "DefaultSearchProviderImageURLPostParams",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:29-",
                "chrome_os:29-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Default cookies setting",
            "desc": "Unless the RestoreOnStartup policy is set to permanently restore URLs from previous sessions, then setting CookiesSessionOnlyForUrls lets you make a list of URL patterns that specify sites that can and can't set cookies for one session.\n\n      Leaving the policy unset results in the use of DefaultCookiesSetting for all sites, if it's set. If not, the user's personal setting applies. URLs not covered by the patterns specified also result in the use of defaults.\n\n      While no specific policy takes precedence, see CookiesBlockedForUrls and CookiesAllowedForUrls. URL patterns among these 3 policies must not conflict.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 48,
            "items": [
                {
                    "caption": "Allow all sites to set local data",
                    "name": "AllowCookies",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to set local data",
                    "name": "BlockCookies",
                    "value": 2
                },
                {
                    "caption": "Keep cookies for the duration of the session",
                    "name": "SessionOnly",
                    "value": 4
                }
            ],
            "name": "DefaultCookiesSetting",
            "owners": [
                "dullweber@google.com",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    4
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Default images setting",
            "desc": "Setting the policy to 1 lets all websites display images. Setting the policy to 2 denies image display.\n\n      Leaving it unset allows images, but users can change this setting.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 49,
            "items": [
                {
                    "caption": "Allow all sites to show all images",
                    "name": "AllowImages",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to show images",
                    "name": "BlockImages",
                    "value": 2
                }
            ],
            "name": "DefaultImagesSetting",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Default JavaScript setting",
            "desc": "Setting the policy to 1 lets websites run JavaScript. Setting the policy to 2 denies JavaScript.\n\n      Leaving it unset allows JavaScript, but users can change this setting.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 50,
            "items": [
                {
                    "caption": "Allow all sites to run JavaScript",
                    "name": "AllowJavaScript",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to run JavaScript",
                    "name": "BlockJavaScript",
                    "value": 2
                }
            ],
            "name": "DefaultJavaScriptSetting",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Default Flash setting",
            "deprecated": true,
            "desc": "This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy to 1 lets you set whether all websites can automatically run the Flash plugin. Setting the policy to 2 denies this plugin for all websites. Click to play lets the Flash plugin run, but users click on the placeholder to start it.\n\n      Leaving the policy unset uses BlockPlugins and lets users change this setting.\n\n      Note: Automatic playback is only for domains explicitly listed in the PluginsAllowedForUrls policy. To turn automatic playback on for all sites, add http://* and https://* to this list.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 51,
            "items": [
                {
                    "caption": "Allow all sites to automatically run the Flash plugin",
                    "name": "AllowPlugins",
                    "value": 1
                },
                {
                    "caption": "Block the Flash plugin",
                    "name": "BlockPlugins",
                    "value": 2
                },
                {
                    "caption": "Click to play",
                    "name": "ClickToPlay",
                    "value": 3
                }
            ],
            "name": "DefaultPluginsSetting",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:10-87",
                "chrome_os:11-87"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Default popups setting",
            "desc": "Setting the policy to 1 lets websites display pop-ups. Setting the policy to 2 denies pop-ups.\n\n      Leaving it unset means BlockPopups applies, but users can change this setting.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 52,
            "items": [
                {
                    "caption": "Allow all sites to show pop-ups",
                    "name": "AllowPopups",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to show popups",
                    "name": "BlockPopups",
                    "value": 2
                }
            ],
            "name": "DefaultPopupsSetting",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-",
                "android:33-",
                "ios:88-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Default notification setting",
            "desc": "Setting the policy to 1 lets websites display desktop notifications. Setting the policy to 2 denies desktop notifications.\n\n      Leaving it unset means AskNotifications applies, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 53,
            "items": [
                {
                    "caption": "Allow sites to show desktop notifications",
                    "name": "AllowNotifications",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to show desktop notifications",
                    "name": "BlockNotifications",
                    "value": 2
                },
                {
                    "caption": "Ask every time a site wants to show desktop notifications",
                    "name": "AskNotifications",
                    "value": 3
                }
            ],
            "name": "DefaultNotificationsSetting",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "arc_support": "If this policy is set to BlockGeolocation, Android apps cannot access location information. If you set this policy to any other value or leave it unset, the user is asked to consent when an Android app wants to access location information.",
            "caption": "Default geolocation setting",
            "desc": "Setting the policy to 1 lets sites track the users' physical location as the default state. Setting the policy to 2 denies this tracking by default. You can set the policy to ask whenever a site wants to track the users' physical location.\n\n      Leaving the policy unset means the AskGeolocation policy applies, but users can change this setting.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 54,
            "items": [
                {
                    "caption": "Allow sites to track the users' physical location",
                    "name": "AllowGeolocation",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to track the users' physical location",
                    "name": "BlockGeolocation",
                    "value": 2
                },
                {
                    "caption": "Ask whenever a site wants to track the users' physical location",
                    "name": "AskGeolocation",
                    "value": 3
                }
            ],
            "name": "DefaultGeolocationSetting",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:10-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Default mediastream setting",
            "deprecated": true,
            "desc": "Allows you to set whether websites are allowed to get access to media capture devices. Access to media capture devices can be allowed by default, or the user can be asked every time a website wants to get access to media capture devices.\n\n          If this policy is left not set, 'PromptOnAccess' will be used and the user will be able to change it.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 149,
            "items": [
                {
                    "caption": "Do not allow any site to access the camera and microphone",
                    "name": "BlockAccess",
                    "value": 2
                },
                {
                    "caption": "Ask every time a site wants to access the camera and/or microphone",
                    "name": "PromptOnAccess",
                    "value": 3
                }
            ],
            "name": "DefaultMediaStreamSetting",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:22-",
                "chrome_os:22-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Control use of the Web Bluetooth API",
            "default": null,
            "desc": "Setting the policy to 3 lets websites ask for access to nearby Bluetooth devices. Setting the policy to 2 denies access to nearby Bluetooth devices.\n\n      Leaving the policy unset lets sites ask for access, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 320,
            "items": [
                {
                    "caption": "Do not allow any site to request access to Bluetooth devices via the Web Bluetooth API",
                    "name": "BlockWebBluetooth",
                    "value": 2
                },
                {
                    "caption": "Allow sites to ask the user to grant access to a nearby Bluetooth device",
                    "name": "AskWebBluetooth",
                    "value": 3
                }
            ],
            "name": "DefaultWebBluetoothGuardSetting",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:50-",
                "android:50-",
                "chrome.*:50-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Default key generation setting",
            "deprecated": true,
            "desc": "Allows you to set whether websites are allowed to use key generation. Using key generation can be either allowed for all websites or denied for all websites.\n\n          If this policy is left not set, 'BlockKeygen' will be used and the user will be able to change it.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 313,
            "items": [
                {
                    "caption": "Allow all sites to use key generation",
                    "name": "AllowKeygen",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to use key generation",
                    "name": "BlockKeygen",
                    "value": 2
                }
            ],
            "name": "DefaultKeygenSetting",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:49-56",
                "chrome_os:49-56",
                "android:49-56"
            ],
            "tags": [
                "system-security",
                "website-sharing",
                "local-data-access"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Default sensors setting",
            "default": null,
            "desc": "Setting the policy to 1 lets websites access and use sensors such as motion and light. Setting the policy to 2 denies acess to sensors.\n\n      Leaving it unset means AllowSensors applies, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 754,
            "items": [
                {
                    "caption": "Allow sites to access sensors",
                    "name": "AllowSensors",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to access sensors",
                    "name": "BlockSensors",
                    "value": 2
                }
            ],
            "name": "DefaultSensorsSetting",
            "owners": [
                "file://third_party/blink/renderer/modules/sensor/OWNERS",
                "reillyg@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:88-",
                "chrome_os:88-",
                "android:88-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Control use of the WebUSB API",
            "default": null,
            "desc": "Setting the policy to 3 lets websites ask for access to connected USB devices. Setting the policy to 2 denies access to connected USB devices.\n\n      Leaving it unset lets websites ask for access, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 434,
            "items": [
                {
                    "caption": "Do not allow any site to request access to USB devices via the WebUSB API",
                    "name": "BlockWebUsb",
                    "value": 2
                },
                {
                    "caption": "Allow sites to ask the user to grant access to a connected USB device",
                    "name": "AskWebUsb",
                    "value": 3
                }
            ],
            "name": "DefaultWebUsbGuardSetting",
            "owners": [
                "reillyg@chromium.org",
                "odejesush@chromium.org"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:67-",
                "android:67-",
                "chrome.*:67-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Automatically grant permission to these sites to connect to USB devices with the given vendor and product IDs.",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites are automatically granted permission to access a USB device with the given vendor and product IDs. Each item in the list requires both devices and urls fields for the policy to be valid. Each item in the devices field can have a vendor_id and product_id field. Omitting the vendor_id field will create a policy matching any device. Omitting the product_id field will create a policy matching any device with the given vendor ID. A policy which has a product_id field without a vendor_id field is invalid.\n\n      The USB permission model will grant the specified URL permission to access the USB device as a top-level origin. If embedded frames need to access USB devices, the 'usb' feature-policy header should be used to grant access. The URL must be valid, otherwise the policy is ignored.\n\n      Deprecated: The USB permission model used to support specifying both the requesting and embedding URLs. This is deprecated and only supported for backwards compatiblity in this manner: if both a requesting and embedding URL is specified, then the embedding URL will be granted the permission as top-level origin and the requsting URL will be ignored entirely.\n\n      This policy overrides DefaultWebUsbGuardSetting, WebUsbAskForUrls, WebUsbBlockedForUrls and the user's preferences.\n\n      This policy only affects access to USB devices through the WebUSB API. To grant access to USB devices through the Web Serial API see the SerialAllowUsbDevicesForUrls policy.",
            "example_value": [
                {
                    "devices": [
                        {
                            "vendor_id": 1234,
                            "product_id": 5678
                        }
                    ],
                    "urls": [
                        "https://google.com"
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 486,
            "name": "WebUsbAllowDevicesForUrls",
            "owners": [
                "reillyg@chromium.org",
                "odejesush@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "devices": {
                            "items": {
                                "properties": {
                                    "product_id": {
                                        "maximum": 65535,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "vendor_id": {
                                        "maximum": 65535,
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "urls": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "devices",
                        "urls"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "android:75-",
                "chrome_os:74-",
                "chrome.*:74-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "dict"
        },
        {
            "caption": "Automatically grant permission to these sites to connect to USB devices with the given vendor and product IDs on the login screen.",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites are automatically granted permission to access a USB device with the given vendor and product IDs on the login screen. Each item in the list requires both devices and urls fields for the policy to be valid. Each item in the devices field can have a vendor_id and product_id field. Omitting the vendor_id field will create a policy matching any device. Omitting the product_id field will create a policy matching any device with the given vendor ID. A policy which has a product_id field without a vendor_id field is invalid.\n\n      The USB permission model will grant the specified URL permission to access the USB device as a top-level origin. If embedded frames need to access USB devices, the 'usb' feature-policy header should be used to grant access. The URL must be valid, otherwise the policy is ignored.\n\n      Deprecated: The USB permission model used to support specifying both the requesting and embedding URLs. This is deprecated and only supported for backwards compatiblity in this manner: if both a requesting and embedding URL is specified, then the embedding URL will be granted the permission as top-level origin and the requsting URL will be ignored entirely.\n\n      Leaving the policy unset puts the global default value in use for all sites (no automatic access).",
            "device_only": true,
            "example_value": [
                {
                    "devices": [
                        {
                            "vendor_id": 1234,
                            "product_id": 5678
                        }
                    ],
                    "urls": [
                        "https://google.com"
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 603,
            "name": "DeviceLoginScreenWebUsbAllowDevicesForUrls",
            "owners": [
                "reillyg@chromium.org",
                "odejesush@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "devices": {
                            "items": {
                                "properties": {
                                    "product_id": {
                                        "type": "integer"
                                    },
                                    "vendor_id": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "urls": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "devices",
                        "urls"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "dict"
        },
        {
            "caption": "Allow WebUSB on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them access to a USB device.\n\n      Leaving the policy unset means DefaultWebUsbGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.\n\n      URL patterns must not conflict with WebUsbAskForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 439,
            "name": "WebUsbAskForUrls",
            "owners": [
                "reillyg@chromium.org",
                "odejesush@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:68-",
                "android:68-",
                "chrome.*:68-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Block WebUSB on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them access to a USB device.\n\n      Leaving the policy unset means DefaultWebUsbGuardSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      URL patterns can't conflict with WebUsbAskForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 440,
            "name": "WebUsbBlockedForUrls",
            "owners": [
                "reillyg@chromium.org",
                "odejesush@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:68-",
                "android:68-",
                "chrome.*:68-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Control use of the Serial API",
            "default": null,
            "desc": "Setting the policy to 3 lets websites ask for access to serial ports. Setting the policy to 2 denies access to serial ports.\n\n      Leaving it unset lets websites ask for access, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 751,
            "items": [
                {
                    "caption": "Do not allow any site to request access to serial ports via the Serial API",
                    "name": "BlockSerial",
                    "value": 2
                },
                {
                    "caption": "Allow sites to ask the user to grant access to a serial port",
                    "name": "AskSerial",
                    "value": 3
                }
            ],
            "name": "DefaultSerialGuardSetting",
            "owners": [
                "reillyg@chromium.org"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Allow the Serial API on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them access to a serial port.\n\n      Leaving the policy unset means DefaultSerialGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.\n\n      For URL patterns which do not match the policy SerialBlockedForUrls (if there is a match), DefaultSerialGuardSetting (if set), or the users' personal settings take precedence, in that order.\n\n      URL patterns must not conflict with SerialBlockedForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 752,
            "name": "SerialAskForUrls",
            "owners": [
                "reillyg@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Block the Serial API on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them access to a serial port.\n\n      Leaving the policy unset means DefaultSerialGuardSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For URL patterns which do not match the policy SerialAskForUrls (if there is a match), DefaultSerialGuardSetting (if set), or the users' personal settings take precedence, in that order.\n\n      URL patterns can't conflict with SerialAskForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 753,
            "name": "SerialBlockedForUrls",
            "owners": [
                "reillyg@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Automatically grant permission to sites to connect all serial ports.",
            "desc": "Setting the policy allows you to list sites which are automatically granted permission to access all available serial ports.\n\n      The URLs must be valid, otherwise the policy is ignored. Only the origin (scheme, host and port) of the URL is considered.\n\n      On Chrome OS, this policy only applies to affiliated users.\n\n      This policy overrides DefaultSerialGuardSetting, SerialAskForUrls, SerialBlockedForUrls and the user's preferences.",
            "example_value": [
                "https://www.example.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 837,
            "name": "SerialAllowAllPortsForUrls",
            "owners": [
                "reillyg@chromium.org",
                "file://content/browser/serial/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:94-",
                "chrome.*:94-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Automatically grant permission to sites to connect to USB serial devices.",
            "desc": "Setting the policy allows you to list sites which are automatically granted permission to access USB serial devices with vendor and product IDs matching the vendor_id and product_id fields. Omitting the product_id field allows the given sites permission to access devices with a vendor ID matching the vendor_id field and any product ID.\n\n      The URLs must be valid, otherwise the policy is ignored. Only the origin (scheme, host and port) of the URL is considered.\n\n      On Chrome OS, this policy only applies to affiliated users.\n\n      This policy overrides DefaultSerialGuardSetting, SerialAskForUrls, SerialBlockedForUrls and the user's preferences.\n\n      This policy only affects access to USB devices through the Web Serial API. To grant access to USB devices through the WebUSB API see the WebUsbAllowDevicesForUrls policy.",
            "example_value": [
                {
                    "devices": [
                        {
                            "vendor_id": 1234,
                            "product_id": 5678
                        }
                    ],
                    "urls": [
                        "https://specific-device.example.com"
                    ]
                },
                {
                    "devices": [
                        {
                            "vendor_id": 1234
                        }
                    ],
                    "urls": [
                        "https://all-vendor-devices.example.com"
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 838,
            "name": "SerialAllowUsbDevicesForUrls",
            "owners": [
                "reillyg@chromium.org",
                "file://content/browser/serial/OWNERS"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "devices": {
                            "items": {
                                "properties": {
                                    "product_id": {
                                        "maximum": 65535,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "vendor_id": {
                                        "maximum": 65535,
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "vendor_id"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "urls": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "devices",
                        "urls"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:94-",
                "chrome.*:94-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "dict"
        },
        {
            "caption": "Control use of the File Handling API",
            "default": null,
            "deprecated": true,
            "desc": "Setting the policy to AskFileHandling lets web apps ask for access to file types via the File Handling API. Setting the policy to BlockFileHandling denies access to file types.\n\n      Leaving it unset lets web apps ask for access, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 845,
            "items": [
                {
                    "caption": "Do not allow any web app to access file types via the File Handling API",
                    "name": "BlockFileHandling",
                    "value": 2
                },
                {
                    "caption": "Allow web apps to ask the user to grant access to file types via the File Handling API",
                    "name": "AskFileHandling",
                    "value": 3
                }
            ],
            "name": "DefaultFileHandlingGuardSetting",
            "owners": [
                "estade@chromium.org",
                "cmp@chromium.org"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:91-96",
                "chrome.*:91-96"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Allow the File Handling API on these web apps",
            "deprecated": true,
            "desc": "Setting the policy lets you list the URL patterns that specify which web apps are granted access to file types.\n\n      Leaving the policy unset means DefaultFileHandlingGuardSetting applies for all web apps, if it's set. If not, users' personal settings apply.\n\n      For URL patterns which match neither FileHandlingAllowedForUrls nor FileHandlingBlockedForUrls, DefaultFileHandlingGuardSetting, or the users' personal settings, will be used, in that order.\n\n      URL patterns must not conflict with FileHandlingBlockedForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 846,
            "name": "FileHandlingAllowedForUrls",
            "owners": [
                "estade@chromium.org",
                "cmp@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:91-96",
                "chrome.*:91-96"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Block the File Handling API on these web apps",
            "deprecated": true,
            "desc": "Setting the policy lets you list the URL patterns that specify which web apps can't ask users to grant them access to file types.\n\n      Leaving the policy unset means DefaultFileHandlingGuardSetting applies for all web apps, if it's set. If not, the user's personal setting applies.\n\n      For URL patterns which match neither FileHandlingAllowedForUrls nor FileHandlingBlockedForUrls, DefaultFileHandlingGuardSetting, or the users' personal settings, will be used, in that order.\n\n      URL patterns must not conflict with FileHandlingAllowedForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 847,
            "name": "FileHandlingBlockedForUrls",
            "owners": [
                "estade@chromium.org",
                "cmp@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:91-96",
                "chrome.*:91-96"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Control use of the File System API for reading",
            "default": null,
            "desc": "Setting the policy to 3 lets websites ask for read access to files and directories in the host operating system's file system via the File System API. Setting the policy to 2 denies access.\n\n      Leaving it unset lets websites ask for access, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 773,
            "items": [
                {
                    "caption": "Do not allow any site to request read access to files and directories via the File System API",
                    "name": "BlockFileSystemRead",
                    "value": 2
                },
                {
                    "caption": "Allow sites to ask the user to grant read access to files and directories via the File System API",
                    "name": "AskFileSystemRead",
                    "value": 3
                }
            ],
            "name": "DefaultFileSystemReadGuardSetting",
            "owners": [
                "mek@chromium.org",
                "file://content/browser/file_system_access/OWNERS"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Control use of the File System API for writing",
            "default": null,
            "desc": "Setting the policy to 3 lets websites ask for write access to files and directories in the host operating system's file system. Setting the policy to 2 denies access.\n\n      Leaving it unset lets websites ask for access, but users can change this setting.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 774,
            "items": [
                {
                    "caption": "Do not allow any site to request write access to files and directories",
                    "name": "BlockFileSystemWrite",
                    "value": 2
                },
                {
                    "caption": "Allow sites to ask the user to grant write access to files and directories",
                    "name": "AskFileSystemWrite",
                    "value": 3
                }
            ],
            "name": "DefaultFileSystemWriteGuardSetting",
            "owners": [
                "mek@chromium.org",
                "file://content/browser/file_system_access/OWNERS"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Allow read access via the File System API on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them read access to files or directories in the host operating system's file system via the File System API.\n\n      Leaving the policy unset means DefaultFileSystemReadGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.\n\n      URL patterns must not conflict with FileSystemReadBlockedForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 775,
            "name": "FileSystemReadAskForUrls",
            "owners": [
                "mek@chromium.org",
                "file://content/browser/file_system_access/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Block read access via the File System API on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them read access to files or directories in the host operating system's file system via the File System API.\n\n      Leaving the policy unset means DefaultFileSystemReadGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.\n\n      URL patterns can't conflict with FileSystemReadAskForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 776,
            "name": "FileSystemReadBlockedForUrls",
            "owners": [
                "mek@chromium.org",
                "file://content/browser/file_system_access/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow write access to files and directories on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can ask users to grant them write access to files or directories in the host operating system's file system.\n\n      Leaving the policy unset means DefaultFileSystemWriteGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.\n\n      URL patterns must not conflict with FileSystemWriteBlockedForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 777,
            "name": "FileSystemWriteAskForUrls",
            "owners": [
                "mek@chromium.org",
                "file://content/browser/file_system_access/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Block write access to files and directories on these sites",
            "desc": "Setting the policy lets you list the URL patterns that specify which sites can't ask users to grant them write access to files or directories in the host operating system's file system.\n\n      Leaving the policy unset means DefaultFileSystemWriteGuardSetting applies for all sites, if it's set. If not, users' personal settings apply.\n\n      URL patterns can't conflict with FileSystemWriteAskForUrls. Neither policy takes precedence if a URL matches with both.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 778,
            "name": "FileSystemWriteBlockedForUrls",
            "owners": [
                "mek@chromium.org",
                "file://content/browser/file_system_access/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Automatically select client certificates for these sites",
            "desc": "Setting the policy lets you make a list of URL patterns that specify sites for which Chrome can automatically select a client certificate. The value is an array of stringified JSON dictionaries, each with the form { \"pattern\": \"$URL_PATTERN\", \"filter\" : $FILTER }, where $URL_PATTERN is a content setting pattern. $FILTER restricts the client certificates the browser automatically selects from. Independent of the filter, only certificates that match the server's certificate request are selected.\n\n      Examples for the usage of the $FILTER section:\n\n      * When $FILTER is set to { \"ISSUER\": { \"CN\": \"$ISSUER_CN\" } }, only client certificates issued by a certificate with the CommonName $ISSUER_CN are selected.\n\n      * When $FILTER contains both the \"ISSUER\" and the \"SUBJECT\" sections, only client certificates that satisfy both conditions are selected.\n\n      * When $FILTER contains a \"SUBJECT\" section with the \"O\" value, a certificate needs at least one organization matching the specified value to be selected.\n\n      * When $FILTER contains a \"SUBJECT\" section with a \"OU\" value, a certificate needs at least one organizational unit matching the specified value to be selected.\n\n      * When $FILTER is set to {}, the selection of client certificates is not additionally restricted. Note that filters provided by the web server still apply.\n\n      Leaving the policy unset means there's no autoselection for any site.",
            "example_value": [
                "{\"pattern\":\"https://www.example.com\",\"filter\":{\"ISSUER\":{\"CN\":\"certificate issuer name\", \"L\": \"certificate issuer location\", \"O\": \"certificate issuer org\", \"OU\": \"certificate issuer org unit\"}, \"SUBJECT\":{\"CN\":\"certificate subject name\", \"L\": \"certificate subject location\", \"O\": \"certificate subject org\", \"OU\": \"certificate subject org unit\"}}}"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 102,
            "name": "AutoSelectCertificateForUrls",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:15-",
                "chrome_os:15-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list",
            "validation_schema": {
                "items": {
                    "properties": {
                        "filter": {
                            "properties": {
                                "ISSUER": {
                                    "id": "CertPrincipalFields",
                                    "properties": {
                                        "CN": {
                                            "type": "string"
                                        },
                                        "L": {
                                            "type": "string"
                                        },
                                        "O": {
                                            "type": "string"
                                        },
                                        "OU": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "SUBJECT": {
                                    "$ref": "CertPrincipalFields"
                                }
                            },
                            "type": "object"
                        },
                        "pattern": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            }
        },
        {
            "caption": "Automatically select client certificates for these sites on the sign-in screen",
            "desc": "Allows you to specify a list of url patterns that specify sites for which a client certificate is automatically selected on the sign-in screen in the frame hosting the SAML flow, if the site requests a certificate. An example usage is to configure a device-wide certificate to be presented to the SAML IdP.\n\n      The value is an array of stringified JSON dictionaries, each with the form { \"pattern\": \"$URL_PATTERN\", \"filter\" : $FILTER }, where $URL_PATTERN is a content setting pattern. $FILTER restricts the client certificates the browser automatically selects from. Independent of the filter, only certificates that match the server's certificate request are selected.\n\n      Examples for the usage of the $FILTER section:\n\n      * When $FILTER is set to { \"ISSUER\": { \"CN\": \"$ISSUER_CN\" } }, only client certificates issued by a certificate with the CommonName $ISSUER_CN are selected.\n\n      * When $FILTER contains both the \"ISSUER\" and the \"SUBJECT\" sections, only client certificates that satisfy both conditions are selected.\n\n      * When $FILTER contains a \"SUBJECT\" section with the \"O\" value, a certificate needs at least one organization matching the specified value to be selected.\n\n      * When $FILTER contains a \"SUBJECT\" section with a \"OU\" value, a certificate needs at least one organizational unit matching the specified value to be selected.\n\n      * When $FILTER is set to {}, the selection of client certificates is not additionally restricted. Note that filters provided by the web server still apply.\n\n\n\n      If this policy is left not set, no auto-selection will be done for any site.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "device_only": true,
            "example_value": [
                "{\"pattern\":\"https://www.example.com\",\"filter\":{\"ISSUER\":{\"CN\":\"certificate issuer name\", \"L\": \"certificate issuer location\", \"O\": \"certificate issuer org\", \"OU\": \"certificate issuer org unit\"}, \"SUBJECT\":{\"CN\":\"certificate subject name\", \"L\": \"certificate subject location\", \"O\": \"certificate subject org\", \"OU\": \"certificate subject org unit\"}}}"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 396,
            "name": "DeviceLoginScreenAutoSelectCertificateForUrls",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:65-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list",
            "validation_schema": {
                "items": {
                    "properties": {
                        "filter": {
                            "properties": {
                                "ISSUER": {
                                    "$ref": "CertPrincipalFields"
                                },
                                "SUBJECT": {
                                    "$ref": "CertPrincipalFields"
                                }
                            },
                            "type": "object"
                        },
                        "pattern": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            }
        },
        {
            "caption": "Allow cookies on these sites",
            "desc": "Allows you to set a list of url patterns that specify sites which are allowed to set cookies.\n\n          If this policy is left not set the global default value will be used for all sites either from the DefaultCookiesSetting policy if it is set, or the user's personal configuration otherwise.\n\n          See also policies CookiesBlockedForUrls and CookiesSessionOnlyForUrls. Note that there must be no conflicting URL patterns between these three policies - it is unspecified which policy takes precedence.\n\n          For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 77,
            "name": "CookiesAllowedForUrls",
            "owners": [
                "dullweber@google.com",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block cookies on these sites",
            "desc": "Setting the policy lets you make a list of URL patterns that specify sites that can't set cookies.\n\n      Leaving the policy unset results in the use of DefaultCookiesSetting for all sites, if it's set. If not, the user's personal setting applies.\n\n      While no specific policy takes precedence, see CookiesAllowedForUrls and CookiesSessionOnlyForUrls. URL patterns among these 3 policies must not conflict.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 67,
            "name": "CookiesBlockedForUrls",
            "owners": [
                "dullweber@google.com",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Limit cookies from matching URLs to the current session",
            "desc": "Unless the RestoreOnStartup policy is set to permanently restore URLs from previous sessions, then setting CookiesSessionOnlyForUrls lets you make a list of URL patterns that specify sites that can and can't set cookies for one session.\n\n      Leaving the policy unset results in the use of DefaultCookiesSetting for all sites, if it's set. If not, the user's personal setting applies. URLs not covered by the patterns specified also result in the use of defaults.\n\n      While no specific policy takes precedence, see CookiesBlockedForUrls and CookiesAllowedForUrls. URL patterns among these 3 policies must not conflict.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 68,
            "name": "CookiesSessionOnlyForUrls",
            "owners": [
                "dullweber@google.com",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow images on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify sites that may display images.\n\n      Leaving the policy unset means DefaultImagesSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.\n\n      Note that previously this policy was erroneously enabled on Android, but this functionality has never been fully supported on Android.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 69,
            "name": "ImagesAllowedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block images on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify sites that can't display images.\n\n      Leaving the policy unset means DefaultImagesSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n       For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.\n\n       Note that previously this policy was erroneously enabled on Android, but this functionality has never been fully supported on Android.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 70,
            "name": "ImagesBlockedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow JavaScript on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can run JavaScript.\n\n      Leaving the policy unset means DefaultJavaScriptSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 71,
            "name": "JavaScriptAllowedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block JavaScript on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can't run JavaScript.\n\n      Leaving the policy unset means DefaultJavaScriptSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 72,
            "name": "JavaScriptBlockedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:30-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow key generation on these sites",
            "deprecated": true,
            "desc": "Allows you to set a list of url patterns that specify sites which are allowed to use key generation. If a url pattern is in 'KeygenBlockedForUrls', that overrides these exceptions.\n\n          If this policy is left not set the global default value will be used for all sites either from the 'DefaultKeygenSetting' policy if it is set, or the user's personal configuration otherwise.\n\n          For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 314,
            "name": "KeygenAllowedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:49-56",
                "chrome_os:49-56",
                "android:49-56"
            ],
            "tags": [
                "system-security",
                "website-sharing",
                "local-data-access"
            ],
            "type": "list"
        },
        {
            "caption": "Block key generation on these sites",
            "deprecated": true,
            "desc": "Allows you to set a list of url patterns that specify sites which are not allowed to use key generation. If a url pattern is in 'KeygenAllowedForUrls', this policy overrides these exceptions.\n\n          If this policy is left not set the global default value will be used for all sites either from the 'DefaultKeygenSetting' policy if it is set, or the user's personal configuration otherwise.\n\n          For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 315,
            "name": "KeygenBlockedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/content_settings/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:49-56",
                "chrome_os:49-56",
                "android:49-56"
            ],
            "tags": [
                "system-security",
                "website-sharing",
                "local-data-access"
            ],
            "type": "list"
        },
        {
            "caption": "Default legacy SameSite cookie behavior setting",
            "deprecated": true,
            "desc": "This policy is deprecated, if you still require legacy cookie behavior please use LegacySameSiteCookieBehaviorEnabledForDomainList. Allows you to revert all cookies to legacy SameSite behavior. Reverting to legacy behavior causes cookies that don't specify a SameSite attribute to be treated as if they were \"SameSite=None\", removes the requirement for \"SameSite=None\" cookies to carry the \"Secure\" attribute, and skips the scheme comparison when evaluating if two sites are same-site. See https://www.chromium.org/administrators/policy-list-3/cookie-legacy-samesite-policies for full description.\n\n          When this policy is not set, the default SameSite behavior for cookies will depend on the user's personal configuration for the SameSite-by-default feature, the Cookies-without-SameSite-must-be-secure feature, and the Schemeful Same-Site feature which may be set by a field trial or by enabling or disabling the same-site-by-default-cookies flag, the cookies-without-same-site-must-be-secure flag, or the schemeful-same-site flag, respectively.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 623,
            "items": [
                {
                    "caption": "Revert to legacy SameSite behavior for cookies on all sites",
                    "name": "DefaultToLegacySameSiteCookieBehavior",
                    "value": 1
                },
                {
                    "caption": "Use SameSite-by-default behavior for cookies on all sites",
                    "name": "DefaultToSameSiteByDefaultCookieBehavior",
                    "value": 2
                }
            ],
            "name": "LegacySameSiteCookieBehaviorEnabled",
            "owners": [
                "bingler@chromium.org",
                "file://net/cookies/OWNERS"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:79-92",
                "chrome_os:79-92",
                "android:79-92"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Revert to legacy SameSite behavior for cookies on these sites",
            "desc": "Cookies set for domains matching these patterns will revert to legacy SameSite behavior. Reverting to legacy behavior causes cookies that don't specify a SameSite attribute to be treated as if they were \"SameSite=None\", removes the requirement for \"SameSite=None\" cookies to carry the \"Secure\" attribute, and skips the scheme comparison when evaluating if two sites are same-site. See https://www.chromium.org/administrators/policy-list-3/cookie-legacy-samesite-policies for full description.\n\n          For cookies on domains not covered by the patterns specified here, or for all cookies if this policy is not set, the global default value will be the user's personal configuration.\n\n          For detailed information on valid patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.\n\n          Note that patterns you list here are treated as domains, not URLs, so you should not specify a scheme or port.",
            "example_value": [
                "www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 624,
            "name": "LegacySameSiteCookieBehaviorEnabledForDomainList",
            "owners": [
                "bingler@chromium.org",
                "file://net/cookies/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-",
                "android:79-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow Google Lens camera assisted search",
            "default": true,
            "desc": "Leaving the policy unset or setting it to Enabled allows users to search with their cameras using Google Lens. Setting the policy to Disabled means users can't see the Google Lens button in the search box when Google Lens camera assisted search is supported.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 853,
            "items": [
                {
                    "caption": "Enable Google Lens camera assisted search for Enterprise user",
                    "value": true
                },
                {
                    "caption": "Disable Google Lens camera assisted search for Enterprise user",
                    "value": false
                }
            ],
            "name": "LensCameraAssistedSearchEnabled",
            "owners": [
                "yusuyoutube@google.com",
                "benwgold@google.com",
                "wylieb@chromium.org",
                "fgorski@chromium.org",
                "lens-chrome@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:91-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Google Lens region search menu item to be shown in context menu if supported.",
            "default": true,
            "desc": "Leaving the policy unset or setting it to Enabled allows users to view and use the Google Lens region search menu item in the context menu. Setting the policy to Disabled means users will not see the Google Lens region search menu item in the context menu when Google Lens region search is supported.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 886,
            "items": [
                {
                    "caption": "Enable Google Lens region search.",
                    "value": true
                },
                {
                    "caption": "Disable Google Lens region search.",
                    "value": false
                }
            ],
            "name": "LensRegionSearchEnabled",
            "owners": [
                "juanmojica@google.com",
                "benwgold@google.com",
                "lens-chrome@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:94-",
                "chrome_os:94-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow showing the most recent Google Search results in a Browser side panel",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving the policy unset means that users can bring up their most recent Google Search results in a side panel via toggling an icon in the toolbar.\n\n      Setting the policy to Disabled removes the icon from the toolbar that opens the side panel with the Google Search results.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 906,
            "items": [
                {
                    "caption": "Enable showing Google Search results in a Browser side panel.",
                    "value": true
                },
                {
                    "caption": "Disable showing Google Search results in a Browser side panel.",
                    "value": false
                }
            ],
            "name": "SideSearchEnabled",
            "owners": [
                "tluk@chromium.org",
                "chrome-cros@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Specifies whether to allow insecure websites to make requests to more-private network endpoints",
            "desc": "Controls whether insecure websites are allowed to make requests to more-private network endpoints.\n\n          This policy relates to the Private Network Access specification. See https://wicg.github.io/private-network-access/ for more details.\n\n          A network endpoint is more private than another if:\n          1) Its IP address is localhost and the other is not.\n          2) Its IP address is private and the other is public.\n          In the future, depending on spec evolution, this policy might apply to all cross-origin requests directed at private IPs or localhost.\n\n          A website is deemed secure if it meets the definition of a secure context in https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts. Otherwise, it will be treated as an insecure context.\n\n          When this policy is either not set or set to false, the default behavior for requests from insecure contexts to more-private network endpoints will depend on the user's personal configuration for the BlockInsecurePrivateNetworkRequests feature, which may be set by a field trial or on the command line.\n\n          When this policy is set to true, insecure websites are allowed to make requests to any network endpoint, subject to other cross-origin checks.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 766,
            "items": [
                {
                    "caption": "Allow insecure websites to make requests to any network endpoint",
                    "value": true
                },
                {
                    "caption": "Use default behavior when determining if insecure websites can make requests to any network endpoint",
                    "value": false
                }
            ],
            "name": "InsecurePrivateNetworkRequestsAllowed",
            "owners": [
                "titouan@chromium.org",
                "clamy@chromium.org",
                "mkwst@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:92-",
                "chrome_os:92-",
                "android:92-",
                "webview_android:92-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow the listed sites to make requests to more-private network endpoints from insecure contexts.",
            "desc": "List of URL patterns. Private network requests initiated from insecure websites served by matching origins are allowed.\n\n          If unset, this policy behaves as if set to the empty list.\n\n          For origins not covered by the patterns specified here, the global default value will be used either from the InsecurePrivateNetworkRequestsAllowed policy, if it is set, or the user's personal configuration otherwise.\n\n          Note that this policy only affects insecure origins, so secure origins (e.g. https://example.com) included in this list will be ignored.\n\n          For detailed information on valid URL patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "example_value": [
                "http://www.example.com:8080",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 767,
            "name": "InsecurePrivateNetworkRequestsAllowedForUrls",
            "owners": [
                "titouan@chromium.org",
                "clamy@chromium.org",
                "mkwst@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:92-",
                "chrome_os:92-",
                "android:92-",
                "webview_android:92-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Allow the Flash plugin on these sites",
            "deprecated": true,
            "desc": "This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy lets you set a list of URL patterns that specify the sites that can run the Flash plugin.\n\n      Leaving the policy unset means DefaultPluginsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. However, starting in M85, patterns with '*' and '[*.]' wildcards in the host are no longer supported for this policy.",
            "example_value": [
                "https://www.example.com",
                "http://example.edu:8080"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 73,
            "name": "PluginsAllowedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-87",
                "chrome_os:11-87"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block the Flash plugin on these sites",
            "deprecated": true,
            "desc": "This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy lets you set a list of URL patterns that specify the sites that can't run the Flash plugin.\n\n      Leaving the policy unset means DefaultPluginsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. However, starting in M85, patterns with '*' and '[*.]' wildcards in the host are no longer supported for this policy.",
            "example_value": [
                "https://www.example.com",
                "http://example.edu:8080"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 74,
            "name": "PluginsBlockedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-87",
                "chrome_os:11-87"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow popups on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can open pop-ups.\n\n      Leaving the policy unset means DefaultPopupsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 75,
            "name": "PopupsAllowedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:34-",
                "ios:88-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "arc_support": "The protocol handlers set via this policy are not used when handling Android intents.",
            "caption": "Register protocol handlers",
            "desc": "Setting the policy (as recommended only) lets you register a list of protocol handlers, which merge with the ones that the user registers, putting both sets in use. Set the property \"protocol\" to the scheme, such as \"mailto\", and set the property \"URL\" to the URL pattern of the application that handles the scheme specified in the \"protocol\" field. The pattern can include a \"%s\" placeholder, which the handled URL replaces.\n\n      Users can't remove a protocol handler registered by policy. However, by installing a new default handler, they can change the protocol handlers installed by policy.",
            "example_value": [
                {
                    "protocol": "mailto",
                    "url": "https://mail.google.com/mail/?extsrc=mailto&url=%s",
                    "default": true
                }
            ],
            "features": {
                "dynamic_refresh": false,
                "per_profile": true,
                "can_be_recommended": true,
                "can_be_mandatory": false
            },
            "id": 268,
            "name": "RegisteredProtocolHandlers",
            "owners": [
                "engedy@chromium.org",
                "file://chrome/browser/custom_handlers/OWNERS"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "default": {
                            "description": "A boolean flag indicating if the protocol handler should be set as the default.",
                            "type": "boolean"
                        },
                        "protocol": {
                            "description": "The protocol for the protocol handler.",
                            "type": "string"
                        },
                        "url": {
                            "description": "The URL of the protocol handler.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "protocol",
                        "url"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:37-",
                "chrome_os:37-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Block popups on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can't open pop-ups.\n\n      Leaving the policy unset means DefaultPopupsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 76,
            "name": "PopupsBlockedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:11-",
                "chrome_os:11-",
                "android:34-",
                "ios:88-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow notifications on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can display notifications.\n\n      Leaving the policy unset means DefaultNotificationsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 105,
            "name": "NotificationsAllowedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:16-",
                "chrome_os:16-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block notifications on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can't display notifications.\n\n      Leaving the policy unset means DefaultNotificationsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 106,
            "name": "NotificationsBlockedForUrls",
            "owners": [
                "engedy@chromium.org",
                "file://components/permissions/PERMISSIONS_OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:16-",
                "chrome_os:16-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow access to sensors on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can access sensors like motion and light sensors.\n\n      Leaving the policy unset means DefaultSensorsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      If the same URL pattern exists in both this policy and the SensorsBlockedForUrls policy, the latter is prioritized and access to motion or light sensors will be blocked.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 755,
            "name": "SensorsAllowedForUrls",
            "owners": [
                "file://third_party/blink/renderer/modules/sensor/OWNERS",
                "timvolodine@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:88-",
                "chrome_os:88-",
                "android:88-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block access to sensors on these sites",
            "desc": "Setting the policy lets you set a list of URL patterns that specify the sites that can't access sensors like motion and light sensors.\n\n      Leaving the policy unset means DefaultSensorsSetting applies for all sites, if it's set. If not, the user's personal setting applies.\n\n      If the same URL pattern exists in both this policy and the SensorsAllowedForUrls policy, this policy is prioritized and access to motion or light sensors will be blocked.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 756,
            "name": "SensorsBlockedForUrls",
            "owners": [
                "file://third_party/blink/renderer/modules/sensor/OWNERS",
                "rijubrata.bhaumik@intel.com"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:88-",
                "chrome_os:88-",
                "android:88-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure native messaging blocklist",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'NativeMessagingBlocklist' policy instead.\n\n      Setting the policy specifies which native messaging hosts shouldn't be loaded. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.\n\n      Leaving the policy unset means Google Chrome loads all installed native messaging hosts.",
            "example_value": [
                "com.native.messaging.host.name1",
                "com.native.messaging.host.name2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 251,
            "label": "Names of the forbidden native messaging hosts (or * for all)",
            "name": "NativeMessagingBlacklist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:34-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure native messaging blocklist",
            "desc": "Setting the policy specifies which native messaging hosts shouldn't be loaded. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.\n\n      Leaving the policy unset means Google Chrome loads all installed native messaging hosts.",
            "example_value": [
                "com.native.messaging.host.name1",
                "com.native.messaging.host.name2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 744,
            "label": "Names of the forbidden native messaging hosts (or * for all)",
            "name": "NativeMessagingBlocklist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure native messaging whitelist",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'NativeMessagingAllowlist' policy instead.\n\n      Setting the policy specifies which native messaging hosts aren't subject to the deny list. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.\n\n      All native messaging hosts are allowed by default. But, if all native messaging hosts are denied by policy, the admin can use the allow list to change that policy.",
            "example_value": [
                "com.native.messaging.host.name1",
                "com.native.messaging.host.name2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 252,
            "label": "Names of the native messaging hosts to exempt from the blocklist",
            "name": "NativeMessagingWhitelist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:34-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure native messaging allowlist",
            "desc": "Setting the policy specifies which native messaging hosts aren't subject to the deny list. A deny list value of * means all native messaging hosts are denied, unless they're explicitly allowed.\n\n      All native messaging hosts are allowed by default. But, if all native messaging hosts are denied by policy, the admin can use the allow list to change that policy.",
            "example_value": [
                "com.native.messaging.host.name1",
                "com.native.messaging.host.name2"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 745,
            "label": "Names of the native messaging hosts to exempt from the blocklist",
            "name": "NativeMessagingAllowlist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow user-level Native Messaging hosts (installed without admin permissions)",
            "desc": "Setting the policy to Enabled or leaving it unset means Google Chrome can use native messaging hosts installed at the user level.\n\n      Setting the policy to Disabled means Google Chrome can only use these hosts if installed at the system level.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 253,
            "items": [
                {
                    "caption": "Allow both user-level and system-level native messaging hosts",
                    "value": true
                },
                {
                    "caption": "Allow only system-level native messaging hosts",
                    "value": false
                }
            ],
            "name": "NativeMessagingUserLevelHosts",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:34-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Disable support for 3D graphics APIs",
            "desc": "Setting the policy to True (or setting HardwareAccelerationModeEnabled to False) prevents webpages from accessing the WebGL API, and plugins can't use the Pepper 3D API.\n\n      Setting the policy to False or leaving it unset lets webpages use the WebGL API and plugins use the Pepper 3D API, but the browser's default settings might still require command line arguments to use these APIs.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 55,
            "items": [
                {
                    "caption": "Disable support for 3D graphics APIs",
                    "value": true
                },
                {
                    "caption": "Enable support for 3D graphics APIs",
                    "value": false
                }
            ],
            "name": "Disable3DAPIs",
            "owners": [
                "kbr@chromium.org",
                "zmo@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:9-",
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Refresh rate for user policy",
            "desc": "Setting the policy specifies the period in milliseconds at which the device management service is queried for user policy information. Valid values range from 1,800,000 (30 minutes) to 86,400,000 (1 day). Values outside this range will be clamped to the respective boundary.\n\n      Leaving the policy unset uses the default value of 3 hours.\n\n      Note: Policy notifications force a refresh when the policy changes, making frequent refreshes unnecessary. So, if the platform supports these notifications, the refresh delay is 24 hours (ignoring defaults and the value of this policy).",
            "example_value": 3600000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 56,
            "name": "PolicyRefreshRate",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "maximum": 86400000,
                "minimum": 1800000,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:11-",
                "chrome.*:79-",
                "ios:90-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Maximum fetch delay after a policy invalidation",
            "default": 10000,
            "desc": "Setting the policy specifies the maximum delay in milliseconds between receiving a policy invalidation and fetching the new policy from the device management service. Valid values range from 1,000 (1 second) to 300,000 (5 minutes). Values outside this range will be clamped to the respective boundary.\n\n      Leaving the policy unset means Google Chrome uses the default value of 10 seconds.",
            "example_value": 10000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 228,
            "name": "MaxInvalidationFetchDelay",
            "owners": [
                "stepco@chromium.org",
                "poromov@chromium.org"
            ],
            "schema": {
                "maximum": 300000,
                "minimum": 1000,
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:30-",
                "chrome_os:30-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Default HTML renderer for Google Chrome Frame",
            "deprecated": true,
            "desc": "Allows you to configure the default HTML renderer when Google Chrome Frame is installed.\n          The default setting used when this policy is left not set is to allow the host browser do the rendering, but you can optionally override this and have Google Chrome Frame render HTML pages by default.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": false
            },
            "id": 57,
            "items": [
                {
                    "caption": "Use the host browser by default",
                    "name": "RenderInHost",
                    "value": 0
                },
                {
                    "caption": "Use Google Chrome Frame by default",
                    "name": "RenderInChromeFrame",
                    "value": 1
                }
            ],
            "name": "ChromeFrameRendererSettings",
            "owners": [
                "tommi@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_frame:8-32"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Always render the following URL patterns in Google Chrome Frame",
            "deprecated": true,
            "desc": "Customize the list of URL patterns that should always be rendered by Google Chrome Frame.\n\n          If this policy is not set the default renderer will be used for all sites as specified by the 'ChromeFrameRendererSettings' policy.\n\n          For example patterns see https://www.chromium.org/developers/how-tos/chrome-frame-getting-started.",
            "example_value": [
                "https://www.example.com",
                "https://www.example.edu"
            ],
            "features": {
                "dynamic_refresh": false
            },
            "id": 58,
            "name": "RenderInChromeFrameList",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_frame:8-32"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Always render the following URL patterns in the host browser",
            "deprecated": true,
            "desc": "Customize the list of URL patterns that should always be rendered by the host browser.\n\n          If this policy is not set the default renderer will be used for all sites as specified by the 'ChromeFrameRendererSettings' policy.\n\n          For example patterns see https://www.chromium.org/developers/how-tos/chrome-frame-getting-started.",
            "example_value": [
                "https://www.example.com",
                "https://www.example.edu"
            ],
            "features": {
                "dynamic_refresh": false
            },
            "id": 59,
            "name": "RenderInHostList",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_frame:8-32"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Additional command line parameters for Google Chrome",
            "deprecated": true,
            "desc": "Allows you to specify additional parameters that are used when Google Chrome Frame launches Google Chrome.\n\n          If this policy is not set the default command line will be used.",
            "example_value": "--enable-media-stream --enable-media-source",
            "features": {
                "dynamic_refresh": false
            },
            "id": 141,
            "name": "AdditionalLaunchParameters",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_frame:19-32"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Skip the meta tag check in Google Chrome Frame",
            "deprecated": true,
            "desc": "Normally pages with X-UA-Compatible set to chrome=1 will be rendered in Google Chrome Frame regardless of the 'ChromeFrameRendererSettings' policy.\n\n          If you enable this setting, pages will not be scanned for meta tags.\n\n          If you disable this setting, pages will be scanned for meta tags.\n\n          If this policy is not set, pages will be scanned for meta tags.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false
            },
            "id": 238,
            "name": "SkipMetadataCheck",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_frame:31-32"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Google Chrome Frame to handle the listed content types",
            "deprecated": true,
            "desc": "If this policy is set, the specified content types are handled by Google Chrome Frame.\n\n          If this policy is not set, the default renderer is used for all sites. (The ChromeFrameRendererSettings policy may be used to configure the default renderer.)",
            "example_value": [
                "text/xml",
                "application/xml"
            ],
            "features": {
                "dynamic_refresh": false
            },
            "id": 60,
            "name": "ChromeFrameContentTypes",
            "owners": [
                "tommi@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_frame:8-32"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable lock when the device become idle or suspended",
            "default": null,
            "desc": "Setting the policy to Enabled means Google Chrome OS asks users for a password to unlock the device when it becomes idle.\n\n      Setting the policy to Disabled means users are not asked for a password to unlock the device from sleep.\n\n      Leaving the policy unset lets the user choose whether to be prompted for a password to unlock the device from sleep.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 61,
            "items": [
                {
                    "caption": "Lock the device when it becomes idle or suspended",
                    "value": true
                },
                {
                    "caption": "Prevent the device from locking when it becomes idle or suspended",
                    "value": false
                },
                {
                    "caption": "Allow users to decide whether the device should lock when it becomes idle or suspended",
                    "value": null
                }
            ],
            "name": "ChromeOsLockOnIdleSuspend",
            "owners": [
                "xiyuan@chromium.org",
                "ultrotter@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:9-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "When multiple users are logged in, only the primary user can use Android apps.",
            "caption": "Control the user behavior in a multiprofile session",
            "default_for_enterprise_users": "primary-only",
            "desc": "Control the user behavior in a multiprofile session on Google Chrome OS devices.\n\n      If this policy is set to 'MultiProfileUserBehaviorUnrestricted', the user can be either primary or secondary user in a multiprofile session.\n\n      If this policy is set to 'MultiProfileUserBehaviorMustBePrimary', the user can only be the primary user in a multiprofile session.\n\n      If this policy is set to 'MultiProfileUserBehaviorNotAllowed', the user cannot be part of a multiprofile session.\n\n      If you set this setting, users cannot change or override it.\n\n      If the setting is changed while the user is signed into a multiprofile session, all users in the session will be checked against their corresponding settings. The session will be closed if any one of the users is no longer allowed to be in the session.\n\n      If the policy is left not set, the default value 'MultiProfileUserBehaviorMustBePrimary' applies for enterprise-managed users and 'MultiProfileUserBehaviorUnrestricted' will be used for non-managed users.",
            "example_value": "unrestricted",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 244,
            "items": [
                {
                    "caption": "Allow enterprise user to be both primary and secondary  (Default behavior for non-managed users)",
                    "name": "MultiProfileUserBehaviorUnrestricted",
                    "value": "unrestricted"
                },
                {
                    "caption": "Allow enterprise user to be primary multiprofile user only (Default behavior for enterprise-managed users)",
                    "name": "MultiProfileUserBehaviorMustBePrimary",
                    "value": "primary-only"
                },
                {
                    "caption": "Do not allow enterprise user to be part of multiprofile (primary or secondary)",
                    "name": "MultiProfileUserBehaviorNotAllowed",
                    "value": "not-allowed"
                }
            ],
            "name": "ChromeOsMultiProfileUserBehavior",
            "owners": [
                "xiyuan@chromium.org",
                "sinhak@chromium.org",
                "tellier@google.com",
                "rsorokin@chromium.org",
                "cros-oac@google.com"
            ],
            "schema": {
                "enum": [
                    "unrestricted",
                    "primary-only",
                    "not-allowed"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:31-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Allow Sign-in To Additional Google Accounts",
            "desc": "This setting allows users to switch between Google Accounts within the content area of their browser window and in Android applications, after they sign into their Google Chrome OS device.\n\n      If this policy is set to false, signing in to a different Google Account from a non-Incognito browser content area and Android applications will not be allowed.\n\n      If this policy is unset or set to true, the default behavior will be used: signing in to a different Google Account from the browser content area and Android applications will be allowed, except for child accounts where it will be blocked for non-Incognito content area.\n\n      In case signing in to a different account shouldn't be allowed via the Incognito mode, consider blocking that mode using the IncognitoModeAvailability policy.\n\n      Note that users will be able to access Google services in an unauthenticated state by blocking their cookies.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 406,
            "items": [
                {
                    "caption": "Enable signing in with additional Google accounts",
                    "value": true
                },
                {
                    "caption": "Disable signing in with additional Google accounts",
                    "value": false
                }
            ],
            "name": "SecondaryGoogleAccountSigninAllowed",
            "owners": [
                "sinhak@chromium.org",
                "anastasiian@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Force logout the user when their account becomes unauthenticated",
            "desc": "Force logout the user when their primary account's authentication token becomes invalid.\n        This policy can protect the user from access to restricted content on Google web properties.\n        If this policy is set to True, the user will be logged out as soon as their authentication token becomes invalid and attempts to restore this token fail.\n        If this policy is set to False or unset, the user can continue working in an unauthenticated state.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 679,
            "name": "ForceLogoutUnauthenticatedUserEnabled",
            "owners": [
                "solovey@google.com",
                "sinhak@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Action on security token removal (e.g., smart card) for Google Chrome OS.",
            "desc": "Specifies what happens when a user who is authenticating via a security token (e.g., with a smart card) removes that token while in a session. IGNORE: Nothing happens. LOCK: The screen is locked until the user authenticates again. LOGOUT: The session is ended and the user is logged out. If this policy is not set, it defaults to IGNORE.",
            "example_value": "LOGOUT",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 799,
            "items": [
                {
                    "caption": "No action happens.",
                    "name": "ignore",
                    "value": "IGNORE"
                },
                {
                    "caption": "Log the user out.",
                    "name": "logout",
                    "value": "LOGOUT"
                },
                {
                    "caption": "Lock the current session.",
                    "name": "lock",
                    "value": "LOCK"
                }
            ],
            "name": "SecurityTokenSessionBehavior",
            "owners": [
                "fabiansommer@chromium.org, emaxx@chromium.org",
                "fabiansommer@chromium.org"
            ],
            "schema": {
                "enum": [
                    "IGNORE",
                    "LOGOUT",
                    "LOCK"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:90-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Duration of the notification on smart card removal for Google Chrome OS.",
            "desc": "This policy only takes effect when the policy SecurityTokenSessionBehavior is set to LOCK or LOGOUT, and a user who authenticates via a smart card removes that smart card. Then, this policy specifies for how many seconds a notification which informs the user of the impending action is displayed. This notification is blocking the screen. The action will only happen after this notification expires. The user can prevent the action from happening by re-inserting the smart card before the notification expires. If this policy is set to zero, no notification will be displayed and the action happens immediately.",
            "example_value": 10,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 800,
            "name": "SecurityTokenSessionNotificationSeconds",
            "owners": [
                "fabiansommer@chromium.org, emaxx@chromium.org",
                "fabiansommer@chromium.org"
            ],
            "schema": {
                "maximum": 9999,
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:90-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Do not set window.opener for links targeting _blank",
            "default": true,
            "desc": "Setting the policy to Disabled allows popups targeting _blank to access (via JavaScript) the page that requested to open the popup.\n\n      Setting the policy to Enabled or leaving it unset causes the window.opener property to be set to null unless the anchor specifies rel=\"opener\".\n\n      This policy will be removed in Google Chrome version 95.\n\n      See https://chromestatus.com/feature/6140064063029248.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 802,
            "items": [
                {
                    "caption": "Only allow popups opened with a target of _blank to interact with the page that opened the popup if the opener page explicitly opts-in to such interaction",
                    "value": true
                },
                {
                    "caption": "Allow all popups opened with a target of _blank to interact the page that requested to open the popup unless the opener page explicitly opts-out of such interaction ",
                    "value": false
                }
            ],
            "name": "TargetBlankImpliesNoOpener",
            "owners": [
                "ericlaw@microsoft.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:88-",
                "chrome_os:88-",
                "android:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Instant",
            "deprecated": true,
            "desc": "Enables Google Chrome's Instant feature and prevents users from changing this setting.\n\n      If you enable this setting, Google Chrome Instant is enabled.\n\n      If you disable this setting, Google Chrome Instant is disabled.\n\n      If you enable or disable this setting, users cannot change or override this setting.\n\n      If this setting is left not set the user can decide to use this function or not.\n\n      This setting has been removed from Google Chrome 29 and higher versions.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 62,
            "name": "InstantEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:11-28",
                "chrome_os:11-28"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable App Recommendations in Zero State of Search Box",
            "desc": "Setting this policy to Enabled will cause recommendations for apps previously installed by the user on other devices. These recommendations will appear in the launcher after the local app recomendations, if no search text has been entered.\n\n      Setting this policy as Disabled or leaving it unset means these recommendations do not appear.\n\n      If this policy is set, users cannot change it.",
            "example_value": true,
            "features": {
                "per_profile": true,
                "dynamic_refresh": true
            },
            "id": 563,
            "name": "AppRecommendationZeroStateEnabled",
            "owners": [
                "robsc@chromium.org",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Translate",
            "desc": "Setting the policy to True provides translation functionality when it's appropriate for users by showing an integrated translate toolbar in Google Chrome and a translate option on the right-click context menu. Setting the policy to False shuts off all built-in translate features.\n\n      If you set the policy, users can't change this function. Leaving it unset lets them change the setting.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 80,
            "name": "TranslateEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:12-",
                "chrome_os:12-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow running plugins that are outdated",
            "deprecated": true,
            "desc": "This policy is deprecated in M88, Flash is no longer supported by Chrome. Setting the policy to Enabled means outdated plugins are used as normal plugins. Setting the policy to Disabled means outdated plugins aren't used.\n\n      Leaving the policy unset means users will be asked for permission to run outdated plugins.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 81,
            "name": "AllowOutdatedPlugins",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:12-87",
                "chrome_os:12-87"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Always runs plugins that require authorization (deprecated)",
            "deprecated": true,
            "desc": "If you enable this setting, plugins that are not outdated always run.\n\n      If this setting is disabled or not set, users will be asked for permission to run plugins that require authorization. These are plugins that can compromise security.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 86,
            "name": "AlwaysAuthorizePlugins",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:13-64",
                "chrome_os:13-64"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Extend Flash content setting to all content (deprecated)",
            "deprecated": true,
            "desc": "This policy has been removed since Google Chrome version 89 because Flash has been deprecated.\n\n      Setting the policy to True runs all Flash content embedded on websites that allow Flash, including content from other origins or small content.\n\n      Setting the policy to False or leaving it unset might block Flash content from other origins or small content.\n\n      Note: To control which websites can run Flash, see these policies: DefaultPluginsSetting, PluginsAllowedForUrls, and PluginsBlockedForUrls.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 391,
            "name": "RunAllFlashInAllowMode",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:63-88",
                "chrome_os:63-88"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Bookmark Bar",
            "desc": "Setting the policy to True displays a bookmark bar in Google Chrome. Setting the policy to False means users never see the bookmark bar.\n\n      If you set the policy, users can't change it. If not set, users decide whether to use this function.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 82,
            "name": "BookmarkBarEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:12-",
                "chrome_os:12-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable or disable bookmark editing",
            "desc": "Setting the policy to True or leaving it unset lets users add, remove, or modify bookmarks.\n\n      Setting the policy to False means users can't add, remove, or modify bookmarks. They can still use existing bookmarks.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 83,
            "name": "EditBookmarksEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:12-",
                "chrome_os:12-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show the apps shortcut in the bookmark bar",
            "default": null,
            "desc": "Setting the policy to True displays the apps shortcut. Setting the policy to False means this shortcut never appears.\n\n      If you set the policy, users can't change it. If not set, users decide to show or hide the apps shortcut from the bookmark bar context menu.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 267,
            "items": [
                {
                    "caption": "Show the apps shortcut in the bookmark bar",
                    "value": true
                },
                {
                    "caption": "Do not show the apps shortcut in the bookmark bar",
                    "value": false
                },
                {
                    "caption": "Allow the user to decide",
                    "value": null
                }
            ],
            "name": "ShowAppsShortcutInBookmarkBar",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:37-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow invocation of file selection dialogs",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset means Chrome can display, and users can open, file selection dialogs.\n\n      Setting the policy to Disabled means that whenever users perform actions provoking a file selection dialog, such as importing bookmarks, uploading files, and saving links, a message appears instead. The user is assumed to have clicked Cancel on the file selection dialog.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 84,
            "items": [
                {
                    "caption": "Allow file selection dialogs",
                    "value": true
                },
                {
                    "caption": "Prevent file selection dialogs",
                    "value": false
                }
            ],
            "name": "AllowFileSelectionDialogs",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:12-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "URLs/domains automatically permitted direct Security Key attestation",
            "desc": "Setting the policy specifies URLs and domains for which no prompt appears when attestation certificates from Security Keys are requested. A signal is also sent to the Security Key indicating that individual attestation may be used. Without this, when sites request attestation of Security Keys, users are prompted in Google Chrome version 65 and later.\n\n      URLs will only match as U2F appIDs. Domains only match as webauthn RP IDs. So to cover both U2F and webauthn APIs, list the appID URL and domain for a given site.",
            "example_value": [
                "https://example.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 402,
            "name": "SecurityKeyPermitAttestation",
            "owners": [
                "agl@chromium.org",
                "martinkr@google.com"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:65-",
                "chrome_os:65-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Allow using the deprecated U2F Security Key API",
            "default": false,
            "desc": "If set to Enabled, the deprecated U2F Security Key API can be used and the deprecation reminder prompt shown for U2F API requests is suppressed.\n\n      If the policy is set to Disabled or left unset, the default behavior will apply.\n\n      The U2F Security Key API is deprecated and it will be disabled by default in Chrome 98.\n\n      This is a temporary opt-out mechanism. The U2F API will be removed from Chrome in Chrome 104, at which point this policy will cease to be supported.\n\n      For more information about the deprecation of the U2F Security Key API, please refer to https://groups.google.com/a/chromium.org/g/blink-dev/c/xHC3AtU_65A.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 903,
            "items": [
                {
                    "caption": "Allow using the U2F Security Key API.",
                    "value": true
                },
                {
                    "caption": "Apply default settings for U2F API deprecation.",
                    "value": false
                }
            ],
            "name": "U2fSecurityKeyApiEnabled",
            "owners": [
                "martinkr@google.com",
                "agl@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:96-103"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set Google Chrome Frame user data directory",
            "deprecated": true,
            "desc": "Configures the directory that Google Chrome Frame will use for storing user data.\n\n      If you set this policy, Google Chrome Frame will use the provided directory.\n\n      See https://support.google.com/chrome/a?p=Supported_directory_variables for a list of variables that can be used.\n\n      If this setting is left not set the default profile directory will be used.",
            "example_value": "${user_home}/Chrome Frame",
            "features": {
                "dynamic_refresh": false
            },
            "id": 87,
            "label": "Set user data directory",
            "name": "GCFUserDataDir",
            "owners": [
                "grt@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_frame:12-32"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Refresh rate for Device Policy",
            "default": 10800000,
            "desc": "Setting the policy specifies the period in milliseconds at which the device management service is queried for device policy information. Valid values range from 1,800,000 (30 minutes) to 86,400,000 (1 day). Values outside this range will be clamped to the respective boundary.\n\n      Leaving the policy unset means Google Chrome OS uses the default value of 3 hours.\n\n      Note: Policy notifications force a refresh when the policy changes, making frequent refreshes unnecessary. So, if the platform supports these notifications, the refresh delay is 24 hours (ignoring defaults and the value of this policy).",
            "device_only": true,
            "example_value": 3600000,
            "features": {
                "dynamic_refresh": true
            },
            "id": 90,
            "name": "DevicePolicyRefreshRate",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Import bookmarks from default browser on first run",
            "default": false,
            "desc": "Setting the policy to Enabled imports bookmarks from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no bookmarks are imported on first run.\n\n      Users can trigger an import dialog and the bookmarks checkbox will be checked or unchecked to match this policy's value.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 97,
            "label": "Import bookmarks from default browser on first run",
            "name": "ImportBookmarks",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:15-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Import browsing history from default browser on first run",
            "default": false,
            "desc": "Setting the policy to Enabled imports browsing history from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no browsing history is imported on first run.\n\n      Users can trigger an import dialog and the browsing history checkbox will be checked or unchecked to match this policy's value.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 98,
            "label": "Import browsing history from default browser on first run",
            "name": "ImportHistory",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:15-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Import of homepage from default browser on first run",
            "desc": "Setting the policy to Enabled imports the homepage from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means the homepage isn't imported on first run.\n\n      Users can trigger an import dialog and the homepage checkbox will be checked or unchecked to match this policy's value.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 99,
            "label": "Import of homepage from default browser on first run",
            "name": "ImportHomepage",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:15-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Import search engines from default browser on first run",
            "desc": "Setting the policy to Enabled imports the default search engine from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means the default search engine isn't imported on first run.\n\n      Users can trigger an import dialog and the default search engine checkbox will be checked or unchecked to match this policy's value.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 100,
            "label": "Import search engines from default browser on first run",
            "name": "ImportSearchEngine",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:15-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Import saved passwords from default browser on first run",
            "desc": "Setting the policy to Enabled imports saved passwords from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no saved passwords are imported on first run.\n\n      Users can trigger an import dialog and the saved passwords checkbox will be checked or unchecked to match this policy's value.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 101,
            "label": "Import saved passwords from default browser on first run",
            "name": "ImportSavedPasswords",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:15-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Import autofill form data from default browser on first run",
            "desc": "Setting the policy to Enabled imports autofill form data from the previous default browser on first run. Setting the policy to Disabled or leaving it unset means no autofill form data is imported on first run.\n\n      Users can trigger an import dialog and the autofill form data checkbox will be checked or unchecked to match this policy's value.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 277,
            "label": "Import autofill form data from default browser on first run",
            "name": "ImportAutofillFormData",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:39-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "main"
        },
        {
            "caption": "Maximal number of concurrent connections to the proxy server",
            "default": 32,
            "desc": "Setting the policy specifies the maximal number of simultaneous connections to the proxy server. Some proxy servers can't handle a high number of concurrent connections per client, which is solved by setting this policy to a lower value. The value should be lower than 100 and higher than 6. Some web apps are known to consume many connections with hanging GETs, so setting a value below 32 may lead to browser networking hangs if there are too many web apps with hanging connections open. Lower below the default at your own risk.\n\n      Leaving the policy unset means a default of 32 is used.",
            "example_value": 32,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 92,
            "name": "MaxConnectionsPerProxy",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:14-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Prevent app promotions from appearing on the new tab page",
            "deprecated": true,
            "desc": "When set to True, promotions for Chrome Web Store apps will not appear on the new tab page.\n\n      Setting this option to False or leaving it not set will make the promotions for Chrome Web Store apps appear on the new tab page",
            "example_value": false,
            "features": {
                "dynamic_refresh": false
            },
            "id": 96,
            "name": "HideWebStorePromo",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:15-21",
                "chrome_os:15-21"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "Android apps may voluntarily choose to honor this list. You cannot force them to honor it.",
            "caption": "Block access to a list of URLs",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'URLBlocklist' policy instead.\n\n      Setting the policy prevents webpages with prohibited URLs from loading. It provides a list of URL patterns that specify forbidden URLs. Leaving the policy unset means no URLs are prohibited in the browser. Format the URL pattern according to this format ( https://www.chromium.org/administrators/url-blocklist-filter-format ). Up to 1,000 exceptions can be defined in URLAllowlist.\n\n      From Google Chrome version 73, you can block javascript://* URLs. However, it affects only JavaScript entered in the address bar (or, for example, bookmarklets). In-page JavaScript URLs with dynamically loaded data aren't subject to this policy. For example, if you block example.com/abc, then example.com can still load example.com/abc using XMLHTTPRequest.\n\n      Note: Blocking internal chrome://* URLs can lead to unexpected errors.",
            "example_value": [
                "example.com",
                "https://ssl.server.com",
                "hosting.com/bad_path",
                "https://server:8080/path",
                ".exact.hostname.com",
                "file://*",
                "custom_scheme:*",
                "*"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 103,
            "name": "URLBlacklist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:15-",
                "chrome_os:15-",
                "android:30-",
                "webview_android:47-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "list"
        },
        {
            "arc_support": "Android apps may voluntarily choose to honor this list. You cannot force them to honor it.",
            "caption": "Allow access to a list of URLs",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'URLAllowlist' policy instead.\n\n      Setting the policy provides access to the listed URLs, as exceptions to the URL blocklist. See that policy's description for the format of entries of this list. For example, setting URLBlocklist to * will block all requests, and you can use this policy to allow access to a limited list of URLs. Use it to open exceptions to certain schemes, subdomains of other domains, ports, or specific paths, using the format specified at ( https://www.chromium.org/administrators/url-blocklist-filter-format ). The most specific filter determines if a URL is blocked or allowed. The allowlist takes precedence over blocklist. This policy is limited to 1,000 entries.\n\n      This policy also allows enabling the automatic invocation by the browser of external application registered as protocol handlers for the listed protocols like \"tel:\" or \"ssh:\".\n\n      Leaving the policy unset allows no exceptions.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": [
                "example.com",
                "https://ssl.server.com",
                "hosting.com/good_path",
                "https://server:8080/path",
                ".exact.hostname.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 104,
            "name": "URLWhitelist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:15-",
                "chrome_os:15-",
                "android:30-",
                "webview_android:47-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "arc_support": "Android apps may voluntarily choose to honor this list. You cannot force them to honor it.",
            "caption": "Block access to a list of URLs",
            "desc": "Setting the policy prevents webpages with prohibited URLs from loading. It provides a list of URL patterns that specify forbidden URLs. Leaving the policy unset means no URLs are prohibited in the browser. Format the URL pattern according to this format ( https://www.chromium.org/administrators/url-blocklist-filter-format ). Up to 1,000 exceptions can be defined in URLAllowlist.\n\n      From Google Chrome version 73, you can block javascript://* URLs. However, it affects only JavaScript entered in the address bar (or, for example, bookmarklets). In-page JavaScript URLs with dynamically loaded data aren't subject to this policy. For example, if you block example.com/abc, then example.com can still load example.com/abc using XMLHTTPRequest.\n\n      From Google Chrome version 92, this policy is also supported in the headless mode.\n\n      Note: Blocking internal chrome://* URLs can lead to unexpected errors.",
            "example_value": [
                "example.com",
                "https://ssl.server.com",
                "hosting.com/bad_path",
                "https://server:8080/path",
                ".exact.hostname.com",
                "file://*",
                "custom_scheme:*",
                "*"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 736,
            "name": "URLBlocklist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-",
                "android:86-",
                "webview_android:86-",
                "ios:91-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "list"
        },
        {
            "arc_support": "Android apps may voluntarily choose to honor this list. You cannot force them to honor it.",
            "caption": "Allow access to a list of URLs",
            "desc": "Setting the policy provides access to the listed URLs, as exceptions to URLBlocklist. See that policy's description for the format of entries of this list. For example, setting URLBlocklist to * will block all requests, and you can use this policy to allow access to a limited list of URLs. Use it to open exceptions to certain schemes, subdomains of other domains, ports, or specific paths, using the format specified at ( https://www.chromium.org/administrators/url-blocklist-filter-format ). The most specific filter determines if a URL is blocked or allowed. The URLAllowlist policy takes precedence over URLBlocklist. This policy is limited to 1,000 entries.\n\n      This policy also allows enabling the automatic invocation by the browser of external application registered as protocol handlers for the listed protocols like \"tel:\" or \"ssh:\".\n\n      Leaving the policy unset allows no exceptions to URLBlocklist.\n\n      From Google Chrome version 92, this policy is also supported in the headless mode.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": [
                "example.com",
                "https://ssl.server.com",
                "hosting.com/good_path",
                "https://server:8080/path",
                ".exact.hostname.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 737,
            "name": "URLAllowlist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-",
                "android:86-",
                "webview_android:86-",
                "ios:91-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enables the concept of policy atomic groups",
            "desc": "Setting the policy to Enabled means policies coming from an atomic group that don't share the source with the highest priority from that group get ignored.\n\n      Setting the policy to Disabled means no policy is ignored because of its source. Policies are ignored only if there's a conflict, and the policy doesn't have the highest priority.\n\n      If this policy is set from a cloud source, it can't target a specific user.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 584,
            "name": "PolicyAtomicGroupsEnabled",
            "owners": [
                "ydago@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:78-",
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow merging list policies from different sources",
            "desc": "Setting the policy allows merging of selected policies when they come from different sources, with the same scopes and level.\n\n      If a policy is in the list and there's conflict between sources with:\n\n      * The same scopes and level: The values merge into a new policy list.\n\n      * Different scopes or level: The policy with the highest priority applies.\n\n      If a policy isn't in the list and there's conflict between sources, scopes, or level, the policy with the highest priority applies.",
            "example_value": [
                "ExtensionInstallAllowlist",
                "ExtensionInstallBlocklist"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "metapolicy_type": "merge"
            },
            "id": 554,
            "label": "Allow merging list policies from different sources",
            "name": "PolicyListMultipleSourceMergeList",
            "owners": [
                "ydago@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:75-",
                "chrome_os:75-",
                "android:97-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow merging dictionary policies from different sources",
            "desc": "Setting the policy allows merging of selected policies when they come from different sources, with the same scopes and level. This merging is in the first level keys of the dictionary from each source. The key coming from the highest priority source takes precedence.\n\n      If a policy is in the list and there's conflict between sources with:\n\n      * The same scopes and level: The values merge into a new policy dictionary.\n\n      * Different scopes or level: The policy with the highest priority applies.\n\n      If a policy isn't in the list and there's conflict between sources, scopes, or level, the policy with the highest priority applies.",
            "example_value": [
                "ExtensionSettings"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "metapolicy_type": "merge"
            },
            "id": 565,
            "items": [
                {
                    "caption": "Managed user manual exception URLs",
                    "name": "ContentPackManualBehaviorURLs",
                    "value": "ContentPackManualBehaviorURLs"
                },
                {
                    "caption": "Power management on the login screen",
                    "name": "DeviceLoginScreenPowerManagement",
                    "value": "DeviceLoginScreenPowerManagement"
                },
                {
                    "caption": "Extension management settings",
                    "name": "ExtensionSettings",
                    "value": "ExtensionSettings"
                },
                {
                    "caption": "Key Permissions",
                    "name": "KeyPermissions",
                    "value": "KeyPermissions"
                },
                {
                    "caption": "Power management settings when the user becomes idle",
                    "name": "PowerManagementIdleSettings",
                    "value": "PowerManagementIdleSettings"
                },
                {
                    "caption": "Screen brightness percent",
                    "name": "ScreenBrightnessPercent",
                    "value": "ScreenBrightnessPercent"
                },
                {
                    "caption": "Screen lock delays",
                    "name": "ScreenLockDelays",
                    "value": "ScreenLockDelays"
                }
            ],
            "label": "Allow merging dictionary policies from different sources",
            "name": "PolicyDictionaryMultipleSourceMergeList",
            "owners": [
                "ydago@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "enum": [
                        "ContentPackManualBehaviorURLs",
                        "ExtensionSettings",
                        "DeviceLoginScreenPowerManagement",
                        "KeyPermissions",
                        "PowerManagementIdleSettings",
                        "ScreenBrightnessPercent",
                        "ScreenLockDelays"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:76-",
                "chrome_os:76-"
            ],
            "tags": [],
            "type": "string-enum-list"
        },
        {
            "caption": "Enables merging of user cloud policies into machine-level policies",
            "default": false,
            "desc": "Setting the policy to Enabled allows policies associated with a Google Workspace account to be merged into machine-level policies.\n\n      Only policies originating from secure users can be merged. A secure user is affiliated with the organization that manages their browser using Chrome Browser Cloud Management. All other user-level policies will always be ignored.\n\n      Policies that need to be merged also need to be set in either PolicyListMultipleSourceMergeList or PolicyDictionaryMultipleSourceMergeList. This policy will be ignored if neither of the two aforementioned policies is configured.\n\n      Leaving the policy unset or setting it to Disabled prevents user-level cloud policies from being merged with policies from any other sources.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "metapolicy_type": "merge"
            },
            "id": 859,
            "items": [
                {
                    "caption": "Enable merging of user-level cloud policies.",
                    "value": true
                },
                {
                    "caption": "Disable merging of user-level cloud policies.",
                    "value": false
                }
            ],
            "name": "CloudUserPolicyMerge",
            "owners": [
                "igorruvinov@google.com",
                "pastarmovj@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:92-",
                "android:97-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enables experimental policies",
            "desc": "Allows Google Chrome to load experimental policies.\n\n        WARNING: Experimental policies are unsupported and subject to change or be removed without notice in future version of the browser!\n\n        An experimental policy may not be finished or still have known or unknown defects. It may be changed or even removed without any notification. By enabling experimental policies, you could lose browser data or compromise your security or privacy.\n\n        If a policy is not in the list and it's not officially released, its value will be ignored on Beta and Stable channel.\n\n        If a policy is in the list and it's not officially released, its value will be applied.\n\n        This policy has no effect on already released policies.",
            "example_value": [
                "ExtensionInstallAllowlist",
                "ExtensionInstallBlocklist"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 711,
            "name": "EnableExperimentalPolicies",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:85-",
                "chrome_os:85-",
                "android:85-",
                "webview_android:85-",
                "ios:85-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "arc_support": "Android apps can use the network configurations and CA certificates set via this policy, but do not have access to some configuration options.",
            "caption": "User-level network configuration",
            "desc": "Setting the policy allows pushing network configuration per-user for each Google Chrome device. The network configuration is a JSON-formatted string, as defined by the Open Network Configuration format.",
            "example_value": "{ \"NetworkConfigurations\": [ { \"GUID\": \"{4b224dfd-6849-7a63-5e394343244ae9c9}\", \"Name\": \"my WiFi\", \"Type\": \"WiFi\", \"WiFi\": { \"SSID\": \"my WiFi\", \"HiddenSSID\": false, \"Security\": \"None\", \"AutoConnect\": true } } ] }",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 107,
            "name": "OpenNetworkConfiguration",
            "owners": [
                "pmarko@chromium.org",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:16-"
            ],
            "tags": [
                "full-admin-access"
            ],
            "type": "string",
            "url_schema": "https://chromium.googlesource.com/chromium/src/+/HEAD/components/onc/docs/onc_spec.md"
        },
        {
            "arc_support": "Android apps can use the network configurations and CA certificates set via this policy, but do not have access to some configuration options.",
            "caption": "Device-level network configuration",
            "desc": "Setting the policy allows pushing network configuration for all users of a Google Chrome OS device. The network configuration is a JSON-formatted string, as defined by the Open Network Configuration format.",
            "device_only": true,
            "example_value": "{ \"NetworkConfigurations\": [ { \"GUID\": \"{4b224dfd-6849-7a63-5e394343244ae9c9}\", \"Name\": \"my WiFi\", \"Type\": \"WiFi\", \"WiFi\": { \"SSID\": \"my WiFi\", \"HiddenSSID\": false, \"Security\": \"None\", \"AutoConnect\": true } } ] }",
            "features": {
                "dynamic_refresh": true
            },
            "id": 108,
            "name": "DeviceOpenNetworkConfiguration",
            "owners": [
                "pmarko@chromium.org",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:16-"
            ],
            "tags": [
                "full-admin-access"
            ],
            "type": "string",
            "url_schema": "https://chromium.googlesource.com/chromium/src/+/HEAD/components/onc/docs/onc_spec.md"
        },
        {
            "caption": "Allowed Kerberos encryption types",
            "desc": "Setting the policy designates which encryption types are allowed when requesting Kerberos tickets from a Microsoft\u00ae Active Directory\u00ae server.\n\n      Setting the policy to:\n\n      * All allows the AES encryption types aes256-cts-hmac-sha1-96 and aes128-cts-hmac-sha1-96, as well as the RC4 encryption type rc4-hmac. AES takes precedence if the server supports AES and RC4 encryption types.\n\n      * Strong or leaving it unset allows only the AES types.\n\n      * Legacy allows only the RC4 type. RC4 is insecure. It should only be needed in very specific circumstances. If possible, reconfigure the server to support AES encryption.\n\n      Also see https://wiki.samba.org/index.php/Samba_4.6_Features_added/changed#Kerberos_client_encryption_types.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true
            },
            "id": 415,
            "items": [
                {
                    "caption": "All (insecure)",
                    "name": "All",
                    "value": 0
                },
                {
                    "caption": "Strong",
                    "name": "Strong",
                    "value": 1
                },
                {
                    "caption": "Legacy (insecure)",
                    "name": "Legacy",
                    "value": 2
                }
            ],
            "name": "DeviceKerberosEncryptionTypes",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/authpolicy/OWNERS"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "active_directory"
            ],
            "supported_on": [
                "chrome_os:66-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "User policy loopback processing mode",
            "desc": "Setting the policy specifies whether and how user policy from computer Group Policy Object (GPO) is processed.\n\n      * Default or leaving it unset has user policy read only from user GPOs. Computer GPOs are ignored.\n\n      * Merge will merge user policy in user GPOs with that of computer GPOs. Computer GPOs take precedence.\n\n      * Replace will replace user policy in user GPOs with that of computer GPOs. User GPOs are ignored.",
            "device_only": true,
            "example_value": 0,
            "features": {
                "dynamic_refresh": true
            },
            "id": 416,
            "items": [
                {
                    "caption": "Default",
                    "name": "Default",
                    "value": 0
                },
                {
                    "caption": "Merge",
                    "name": "Merge",
                    "value": 1
                },
                {
                    "caption": "Replace",
                    "name": "Replace",
                    "value": 2
                }
            ],
            "name": "DeviceUserPolicyLoopbackProcessingMode",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/authpolicy/OWNERS"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "active_directory"
            ],
            "supported_on": [
                "chrome_os:66-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Machine password change rate",
            "desc": "Setting the policy specifies in days how often a client changes their machine account password. The password is randomly generated by the client and not visible to the user. Disabling this policy or setting a high number of days can negatively impact security, because it gives potential attackers more time to find and use the machine account password.\n\n      Leaving the policy unset means the machine account password is changed every 30 days.\n\n      Setting the policy to 0 turns off machine account password change.\n\n      Note: Passwords might get older than the specified number of days if the client has been offline for a longer period of time.",
            "device_only": true,
            "example_value": 0,
            "features": {
                "dynamic_refresh": true
            },
            "id": 425,
            "name": "DeviceMachinePasswordChangeRate",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/authpolicy/OWNERS"
            ],
            "schema": {
                "maximum": 9999,
                "minimum": 0,
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "active_directory"
            ],
            "supported_on": [
                "chrome_os:66-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int"
        },
        {
            "caption": "GPO cache lifetime",
            "desc": "Setting the policy specifies in hours the Group Policy Object (GPO) cache lifetime\u2014the maximum duration GPOs can be reused before they're redownloaded. Instead of redownloading them on every policy fetch, the system reuses cached GPOs as long as their version doesn't change.\n\n      Setting the policy to 0 turns GPO caching off. Doing this increases server load, because GPOs are redownloaded on every policy fetch, even if they didn't change.\n\n      Leaving the policy unset means cached GPOs can be reused for up to 25 hours.\n\n      Note: Restarting and signing out clears the cache.",
            "device_only": true,
            "example_value": 0,
            "features": {
                "dynamic_refresh": true
            },
            "id": 508,
            "name": "DeviceGpoCacheLifetime",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/authpolicy/OWNERS"
            ],
            "schema": {
                "maximum": 9999,
                "minimum": 0,
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "active_directory"
            ],
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Authentication data cache lifetime",
            "desc": "Setting the policy specifies in hours the authentication data cache lifetime. The cache has data about realms trusted by the machine realm (affiliated realms). So, authentication data caching helps speed up sign-in. User-specific data and data for unaffiliated realms isn't cached.\n\n      Setting the policy to 0 turns authentication data caching off. Realm-specific data is fetched on every sign-in, so turning off authentication data caching can significantly slow down user sign-in.\n\n      Leaving the policy unset means cached authentication data can be reused for up to 73 hours.\n\n      Note: Restarting the device clears the cache. Even ephemeral users' realm data is cached. Turn off the cache to prevent the tracing of an ephemeral user's realm.",
            "device_only": true,
            "example_value": 0,
            "features": {
                "dynamic_refresh": true
            },
            "id": 509,
            "name": "DeviceAuthDataCacheLifetime",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/authpolicy/OWNERS"
            ],
            "schema": {
                "maximum": 9999,
                "minimum": 0,
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "active_directory"
            ],
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "int"
        },
        {
            "caption": "Enable submission of documents to Google Cloud Print",
            "desc": "Setting the policy to Enabled or leaving it unset lets users print to Google Cloud Print from the Google Chrome print dialog. Google Chrome can submit documents to Google Cloud Print for printing. This doesn't prevent users from submitting print jobs on websites.\n\n      Setting the policy to Disabled means users can't print to Google Cloud Print from the Google Chrome print dialog.\n\n      In order to keep Google Cloud Print destinations discoverable, this policy must be set to Enabled and cloud must not be included in the PrinterTypeDenyList policy.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 109,
            "name": "CloudPrintSubmitEnabled",
            "owners": [
                "file://printing/OWNERS",
                "weili@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:17-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enterprise web store URL (deprecated)",
            "deprecated": true,
            "desc": "This setting has been retired as of Google Chrome version 29. The recommended way to set up organization-hosted extension/app collections is to include the site hosting the CRX packages in ExtensionInstallSources and put direct download links to the packages on a web page. A launcher for that web page can be created using the ExtensionInstallForcelist policy.",
            "example_value": "https://company-intranet/chromeapps",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 112,
            "name": "EnterpriseWebStoreURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:17-28",
                "chrome_os:17-28"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Enterprise web store name (deprecated)",
            "deprecated": true,
            "desc": "This setting has been retired as of Google Chrome version 29. The recommended way to set up organization-hosted extension/app collections is to include the site hosting the CRX packages in ExtensionInstallSources and put direct download links to the packages on a web page. A launcher for that web page can be created using the ExtensionInstallForcelist policy.",
            "example_value": "WidgCo Chrome Apps",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 113,
            "name": "EnterpriseWebStoreName",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:17-28",
                "chrome_os:17-28"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Disable Print Preview",
            "desc": "Setting the policy to Enabled has Google Chrome open the system print dialog instead of the built-in print preview when users request a printout.\n\n      Setting the policy to Disabled or leaving it unset has print commands trigger the print preview screen.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 117,
            "name": "DisablePrintPreview",
            "owners": [
                "file://printing/OWNERS",
                "rbpotter@chomium.org",
                "thestig@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:18-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Print Headers and Footers",
            "desc": "Setting the policy to Enabled turns headers and footers on in print preview. Setting the policy to Disabled turns them off in print preview.\n\n      If you set the policy, users can't change it. If unset, users decides whether headers and footers appear.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 480,
            "name": "PrintHeaderFooter",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-",
                "chrome.*:70-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on Android apps.",
            "caption": "Default printer selection rules",
            "desc": "Setting the policy sets the rules for selecting the default printer in Google Chrome, overriding the default rules. Printer selection occurs the first time users try to print, when Google Chrome seeks a printer matching the specified attributes. In case of a less than perfect match, Google Chrome can be set to select any matching printer, depending on the order printers are discovered.\n\n      Leaving the policy unset or set to attributes for which there's no match means the built-in PDF printer is the default. If there's no PDF printer, Google Chrome defaults to none.\n\n      Printers connected to Google Cloud Print are considered \"cloud\", the rest of the printers are classified as \"local\".\n\n      Note: Omitting a field means all values match. For example, not specifying connectivity causes Print Preview to start discovery of all kinds of printers, \"local\" and \"cloud\". Regular expression patterns must follow the JavaScript RegExp syntax, and matches are case sensistive.",
            "example_value": "{ \"kind\": \"cloud\", \"idPattern\": \".*public\", \"namePattern\": \".*Color\" }",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 308,
            "name": "DefaultPrinterSelection",
            "owners": [
                "file://printing/OWNERS",
                "thestig@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:48-",
                "chrome_os:48-"
            ],
            "tags": [],
            "type": "string",
            "validation_schema": {
                "properties": {
                    "idPattern": {
                        "description": "Regular expression to match printer id.",
                        "type": "string"
                    },
                    "kind": {
                        "description": "Whether to limit the search of the matching printer to a specific set of printers.",
                        "enum": [
                            "local",
                            "cloud"
                        ],
                        "type": "string"
                    },
                    "namePattern": {
                        "description": "Regular expression to match printer display name.",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "caption": "Disable TLS False Start",
            "deprecated": true,
            "desc": "Specifies whether the TLS False Start optimization should be disabled. For historical reasons, this policy is named DisableSSLRecordSplitting.\n\n      If the policy is not set, or is set to false, then TLS False Start will be enabled. If it is set to true, TLS False Start will be disabled.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 118,
            "name": "DisableSSLRecordSplitting",
            "owners": [
                "file://crypto/OWNERS",
                "agl@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:18-46",
                "chrome_os:18-46"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable online OCSP/CRL checks",
            "desc": "Setting the policy to True means online OCSP/CRL checks are performed.\n\n      Setting the policy to False or leaving it unset means Google Chrome won't perform online revocation checks in Google Chrome 19 and later.\n\n      Note: OCSP/CRL checks provide no effective security benefit.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 129,
            "name": "EnableOnlineRevocationChecks",
            "owners": [
                "file://net/cert/OWNERS",
                "mattm@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:19-",
                "chrome_os:19-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Require online OCSP/CRL checks for local trust anchors",
            "default": false,
            "desc": "Setting the policy to True means Google Chrome always performs revocation checking for successfully validated server certificates signed by locally installed CA certificates. If Google Chrome can't get revocation status information, Google Chrome treats these certificates as revoked (hard-fail).\n\n      Setting the policy to False or leaving it unset means Google Chrome uses existing online revocation-checking settings.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 235,
            "items": [
                {
                    "caption": "Perform revocation checks for successfully validated server certificates signed by locally installed CA certificates",
                    "value": true
                },
                {
                    "caption": "Use existing online revocation-checking settings",
                    "value": false
                }
            ],
            "name": "RequireOnlineRevocationChecksForLocalAnchors",
            "owners": [
                "file://net/cert/OWNERS",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:30-",
                "chrome.linux:30-",
                "chrome.win:30-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow SHA-1 signed certificates issued by local trust anchors",
            "deprecated": true,
            "desc": "When this setting is enabled, Google Chrome allows SHA-1 signed certificates as long as they successfully validate and chain to a locally-installed CA certificates.\n\n      Note that this policy depends on the operating system certificate verification stack allowing SHA-1 signatures. If an OS update changes the OS handling of SHA-1 certificates, this policy may no longer have effect.  Further, this policy is intended as a temporary workaround to give enterprises more time to move away from SHA-1.  This policy will be removed on or around January 1st 2019.\n\n      If this policy is not set, or it is set to false, then Google Chrome follows the publicly announced SHA-1 deprecation schedule.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 340,
            "name": "EnableSha1ForLocalAnchors",
            "owners": [
                "mattm@chromium.org",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:54-71",
                "chrome_os:54-71",
                "android:54-71"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow certificates issued by local trust anchors without subjectAlternativeName extension",
            "deprecated": true,
            "desc": "When this setting is enabled, Google Chrome will use the commonName of a server certificate to match a hostname if the certificate is missing a subjectAlternativeName extension, as long as it successfully validates and chains to a locally-installed CA certificates.\n\n      Note that this is not recommended, as this may allow bypassing the nameConstraints extension that restricts the hostnames that a given certificate can be authorized for.\n\n      If this policy is not set, or is set to false, server certificates that lack a subjectAlternativeName extension containing either a DNS name or IP address will not be trusted.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 366,
            "name": "EnableCommonNameFallbackForLocalAnchors",
            "owners": [
                "file://net/cert/OWNERS",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:58-65",
                "chrome_os:58-65",
                "android:58-65"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable trust in Symantec Corporation's Legacy PKI Infrastructure",
            "deprecated": true,
            "desc": "When this setting is enabled, Google Chrome allows certificates issued by Symantec Corporation's Legacy PKI operations to be trusted if they otherwise successfully validate and chain to a recognized CA certificate.\n\n      Note that this policy depends on the operating system still recognizing certificates from Symantec's legacy infrastructure. If an OS update changes the OS handling of such certificates, this policy no longer has effect.  Further, this policy is intended as a temporary workaround to give enterprises more time to transition away from legacy Symantec certificates.  This policy will be removed on or around January 1st 2019.\n\n      If this policy is not set, or it is set to false, then Google Chrome follows the publicly announced deprecation schedule.\n\n      See https://g.co/chrome/symantecpkicerts for more details on this deprecation.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 413,
            "name": "EnableSymantecLegacyInfrastructure",
            "owners": [
                "file://net/cert/OWNERS",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:66-75",
                "chrome_os:66-75",
                "android:66-75"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Determines whether the built-in certificate verifier will be used to verify server certificates",
            "desc": "When this setting is enabled, Google Chrome will perform verification of server certificates using the built-in certificate verifier.\n      When this setting is disabled, Google Chrome will perform verification of server certificates using the legacy certificate verifier provided by the platform.\n      When this setting is not set, the built-in or the legacy certificate verifier may be used.\n\n      This policy is planned to be removed in Google Chrome OS version 81, when support for the legacy certificate verifier on Google Chrome OS is planned to be removed.\n\n      This policy is planned to be removed in Google Chrome for Linux version 83, when support for the legacy certificate verifier on Linux is planned to be removed.\n\n      This policy is planned to be removed in Google Chrome for Mac OS X version 92, when support for the legacy certificate verifier on Mac OS X is planned to be removed.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 575,
            "name": "BuiltinCertificateVerifierEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:77-83",
                "chrome.linux:79-83",
                "chrome.mac:83-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Ephemeral profile",
            "desc": "If set to enabled this policy forces the profile to be switched to ephemeral mode. If this policy is specified as an OS policy (e.g. GPO on Windows) it will apply to every profile on the system; if the policy is set as a Cloud policy it will apply only to a profile signed in with a managed account.\n\n      In this mode the profile data is persisted on disk only for the length of the user session. Features like browser history, extensions and their data, web data like cookies and web databases are not preserved after the browser is closed. However this does not prevent the user from downloading any data to disk manually, save pages or print them.\n\n      If the user has enabled sync all this data is preserved in their sync profile just like with regular profiles. Incognito mode is also available if not explicitly disabled by policy.\n\n      If the policy is set to disabled or left not set signing in leads to regular profiles.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 245,
            "name": "ForceEphemeralProfiles",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:32-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Limit the time for which a user authenticated via GAIA without SAML can log in offline",
            "default": null,
            "desc": "During login, Google Chrome OS can authenticate against a server (online) or using a cached password (offline).\n\n      When this policy is set to a value of -1, this policy will not enforce online authentication and will allow the user to use offline authentication until a different reason than this policy enforces an online login. If the policy is set to a value of 0, online login will always be required. When this policy is set to any other value, it specifies the length of time since the last online authentication after which the user must use online authentication again in the next sign-in.\n\n      Leaving this policy not set will make Google Chrome OS use offline login.\n\n      This policy affects only users who authenticated using GAIA without SAML.\n\n      The policy value should be specified in days.",
            "example_value": 32,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 821,
            "name": "GaiaOfflineSigninTimeLimitDays",
            "owners": [
                "rodmartin@google.com",
                "chromeos-commercial-identity@google.com",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "maximum": 365,
                "minimum": -1,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:90-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Limit the time for which a user authenticated via SAML can log in offline",
            "desc": "During login, Google Chrome OS can authenticate against a server (online) or using a cached password (offline).\n\n      When this policy is set to a value of -1, the user can authenticate offline indefinitely. When this policy is set to any other value, it specifies the length of time since the last online authentication after which the user must use online authentication again.\n\n      Leaving this policy not set will make Google Chrome OS use a default time limit of 14 days after which the user must use online authentication again.\n\n      This policy affects only users who authenticated using SAML.\n\n      The policy value should be specified in seconds.",
            "example_value": 32,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 254,
            "name": "SAMLOfflineSigninTimeLimit",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "minimum": -1,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:34-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Limit the time for which a user authenticated via GAIA without SAML can log in offline at the lock screen",
            "default": null,
            "desc": "While logging in through the lock screen, Google Chrome OS can authenticate against a server (online) or using a cached password (offline).\n\n      When this policy is set to -2, it will match the value of the login screen offline signin time limit which comes from GaiaOfflineSigninTimeLimitDays.\n\n      When the policy is unset, or set to a value of -1, it will not enforce online authentication on the lock screen and will allow the user to use offline authentication unless a different reason than this policy enforces an online authentication.\n\n      If the policy is set to a value of 0, online authentication will always be required.\n\n      When this policy is set to any other value, it specifies the number of days since the last online authentication after which the user must use online authentication again in the next login through the lock screen.\n\n      This policy affects users who authenticated using GAIA without SAML.\n\n      The policy value should be specified in days.",
            "example_value": 32,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 833,
            "name": "GaiaLockScreenOfflineSigninTimeLimitDays",
            "owners": [
                "ayag@chromium.org",
                "chromeos-commercial-identity@google.com",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "maximum": 365,
                "minimum": -2,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Limit the time for which a user authenticated via SAML can log in offline at the lock screen",
            "default": null,
            "desc": "While logging in through the lock screen, Google Chrome OS can authenticate against a server (online) or using a cached password (offline).\n\n      When this policy is set to -2, it will match the value of the login screen offline signin time limit which comes from SAMLOfflineSigninTimeLimit.\n\n      When the policy is unset or set to a value of -1, it will not enforce online authentication on the lock screen and will allow the user to use offline authentication unless a different reason than this policy enforces an online authentication.\n\n      If the policy is set to a value of 0, online authentication will always be required.\n\n      When this policy is set to any other value, it specifies the number of days since the last online authentication after which the user must use online authentication again in the next login through the lock screen.\n\n      This policy affects users who authenticated using SAML.\n\n      The policy value should be specified in days.",
            "example_value": 32,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 834,
            "name": "SamlLockScreenOfflineSigninTimeLimitDays",
            "owners": [
                "ayag@chromium.org",
                "chromeos-commercial-identity@google.com",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "maximum": 365,
                "minimum": -2,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Select the strategy used to free up disk space during automatic clean-up (deprecated)",
            "deprecated": true,
            "desc": "This policy is deprecated. Google Chrome OS will always use the 'RemoveLRU' clean-up strategy.\n\n      Controls the automatic clean-up behavior on Google Chrome OS devices. Automatic clean-up is triggered when the amount of free disk space reaches a critical level to recover some disk space.\n\n      If this policy is set to 'RemoveLRU', the automatic clean-up will keep removing users from the device in least-recently-logged-in order until there is enough free space.\n\n      If this policy is set to 'RemoveLRUIfDormant', the automatic clean-up will keep removing users who have not logged in for at least 3 months in least-recently-logged-in order until there is enough free space.\n\n      If this policy is not set, automatic clean-up uses the default built-in strategy. Currently, it is the 'RemoveLRUIfDormant' strategy.",
            "device_only": true,
            "example_value": "remove-lru",
            "features": {
                "dynamic_refresh": true
            },
            "id": 246,
            "items": [
                {
                    "caption": "Least recently used users are removed until there is enough free space",
                    "name": "RemoveLRU",
                    "value": "remove-lru"
                },
                {
                    "caption": "Least recently used users who have not logged in within last 3 months are removed until there is enough free space",
                    "name": "RemoveLRUIfDormant",
                    "value": "remove-lru-if-dormant"
                }
            ],
            "name": "AutoCleanUpStrategy",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    "remove-lru",
                    "remove-lru-if-dormant"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:32-35"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Enable granular reporting controls",
            "default": true,
            "desc": "Setting the policy to enabled or leaving it unset allows for the device to recieve granular reporting controls.\n      Setting the policy to Disabled means enrolled devices won't receive granular reporting controls.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 901,
            "items": [
                {
                    "caption": "Allow granular reporting controls",
                    "value": true
                },
                {
                    "caption": "Do not allow granular reporting controls",
                    "value": false
                }
            ],
            "name": "EnableDeviceGranularReporting",
            "owners": [
                "cros-reporting-team@google.com",
                "tylergarrett@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report OS and firmware version",
            "desc": "Setting the policy to Enabled or leaving it unset has enrolled devices periodically report their OS and firmware version.\n\n      Setting the policy to Disabled means enrolled devices don't report version info.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 119,
            "name": "ReportDeviceVersionInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:18-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report device activity times",
            "desc": "Setting the policy to Enabled or leaving it unset has enrolled devices report time periods when a user is active on the device.\n\n      Setting the policy to Disabled means enrolled devices don't record or report activity times.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 120,
            "name": "ReportDeviceActivityTimes",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:18-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report device audio status",
            "default": true,
            "desc": "Setting the policy to enabled or leaving it unset has enrolled devices report device audio volume.\n\n      Setting the policy to Disabled means enrolled devices don't record or report audio status.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 873,
            "items": [
                {
                    "caption": "Report audio status",
                    "value": true
                },
                {
                    "caption": "Do not report audio status",
                    "value": false
                }
            ],
            "name": "ReportDeviceAudioStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "tylergarrett@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report device boot mode",
            "desc": "Setting the policy to Enabled or leaving it unset has enrolled devices report the state of the device's dev switch when the machine booted.\n\n      Setting the policy to Disabled means enrolled devices don't report the state of the dev switch.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 121,
            "name": "ReportDeviceBootMode",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:18-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report device location",
            "desc": "Report the geographic location of the device.\n\n      If the policy is not set, or set to false, the location will not be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 143,
            "name": "ReportDeviceLocation",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report network configuration",
            "default": true,
            "desc": "Report users network configuration on enrolled devices.\n\n      If the policy is set to false, the information will not be reported.\n      If set to true or unset, the device's network configuration will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 875,
            "items": [
                {
                    "caption": "Report network configuration",
                    "value": true
                },
                {
                    "caption": "Do not report network configuration",
                    "value": false
                }
            ],
            "name": "ReportDeviceNetworkConfiguration",
            "owners": [
                "tylergarrett@google.com",
                "cros-reporting-team@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report device network interfaces",
            "desc": "Setting the policy to Enabled or leaving it unset has enrolled devices report the list of network interfaces with their types and hardware addresses.\n\n      Setting the policy to Disabled means enrolled devices don't report the network interface.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 224,
            "name": "ReportDeviceNetworkInterfaces",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report network status",
            "default": true,
            "desc": "Report users network status on enrolled devices.\n\n      If the policy is set to false, the information will not be reported.\n      If set to true or unset, the device's network status will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 876,
            "items": [
                {
                    "caption": "Report network status",
                    "value": true
                },
                {
                    "caption": "Do not report network status",
                    "value": false
                }
            ],
            "name": "ReportDeviceNetworkStatus",
            "owners": [
                "tylergarrett@google.com",
                "cros-reporting-team@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Network telemetry collection rate in milliseconds.",
            "default": 600000,
            "desc": "Rate at which network data is sampled and collected. The minimum allowed is 1 minute.\n\n      If not set, the default rate of 10 minutes applies.",
            "device_only": true,
            "example_value": 600000,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 914,
            "name": "ReportDeviceNetworkTelemetryCollectionRateMs",
            "owners": [
                "anasr@google.com",
                "cros-reporting-team@google.com"
            ],
            "schema": {
                "minimum": 60000,
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "int"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Network events checking rate in milliseconds.",
            "default": 60000,
            "desc": "Rate at which network data is polled and checked for events. The minimum allowed is 1 minute.\n\n      If not set, the default rate of 1 minute applies.",
            "device_only": true,
            "example_value": 60000,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 915,
            "name": "ReportDeviceNetworkTelemetryEventCheckingRateMs",
            "owners": [
                "anasr@google.com",
                "cros-reporting-team@google.com"
            ],
            "schema": {
                "minimum": 60000,
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "int"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report device users",
            "desc": "Setting the policy to Enabled or leaving it unset has enrolled devices report the list of device users that signed in recently.\n\n      Setting the policy to Disabled means enrolled devices don't report the list of users.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 248,
            "name": "ReportDeviceUsers",
            "owners": [
                "stepco@chromium.org",
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:32-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report hardware status",
            "desc": "Setting the policy to Enabled or leaving it unset has enrolled devices report hardware statistics such as CPU/RAM usage.\n\n      Setting the policy to Disabled means enrolled devices don't report the hardware statistics.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 290,
            "name": "ReportDeviceHardwareStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "antrim@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:42-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report information about active kiosk sessions",
            "desc": "Setting the policy to Enabled or leaving it unset has enrolled devices report the active kiosk session information such as application ID and version.\n\n      Setting the policy to Disabled means enrolled devices don't report kiosk session information.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 291,
            "name": "ReportDeviceSessionStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "antrim@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:42-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report device security status",
            "default": false,
            "desc": "Setting the policy to enabled or leaving it unset has enrolled devices report device TPM security status.\n\n      Setting the policy to Disabled means enrolled devices don't record or report TPM security status.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 900,
            "items": [
                {
                    "caption": "Report security status",
                    "value": true
                },
                {
                    "caption": "Do not report security status",
                    "value": false
                }
            ],
            "name": "ReportDeviceSecurityStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "tylergarrett@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report display and graphics statuses",
            "desc": "Report information related to display, such as refresh rate, and\n      information related to graphics, such as driver version.\n\n      If the policy is set to false or left unset, the display and graphics\n      statuses will not be reported. If set to true, display and graphics\n      statuses will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 660,
            "name": "ReportDeviceGraphicsStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report information about crash reports.",
            "desc": "Report information related to crash reports, such as remote id,\n      capture timestamp and cause.\n\n      If the policy is set to false or left unset, the crash report information\n      will not be reported. If set to true, crash report information will be\n      reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 665,
            "name": "ReportDeviceCrashReportInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report OS update status",
            "desc": "Report OS update information such as update status, platform version,\n      last update check and last reboot.\n\n      If the policy is set to false or left unset, the OS update information will not be\n      reported. If set to true, OS update information will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 602,
            "name": "ReportDeviceOsUpdateStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "anqing@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report power status",
            "desc": "Setting the policy to Enabled has enrolled devices report hardware statistics and identifiers related to power.\n\n      Setting the policy to Disabled or leaving it unset means enrolled devices don't report power statistics.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 512,
            "name": "ReportDevicePowerStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "antrim@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report storage status",
            "desc": "Setting the policy to Enabled has enrolled devices report hardware statistics and identifiers for storage devices.\n\n      Setting the policy to Disabled or leaving it unset means enrolled devices don't report storage statistics.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 513,
            "name": "ReportDeviceStorageStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "antrim@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report board status",
            "desc": "Setting the policy to Enabled has enrolled devices report hardware statistics for SoC components.\n\n      Setting the policy to Disabled or leaving it unset means enrolled devices don't report the statistics.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 514,
            "name": "ReportDeviceBoardStatus",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "antrim@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report CPU info",
            "desc": "Report information for a device's CPU(s).\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the CPU model name, architecture, and maximum clock speed will be\n      reported for each CPU.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 656,
            "name": "ReportDeviceCpuInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report Timezone info",
            "desc": "Report information for a device's timezone.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's currently set timezone will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 671,
            "name": "ReportDeviceTimezoneInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report memory info",
            "desc": "Report information about a device's memory.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's memory information will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 682,
            "name": "ReportDeviceMemoryInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report backlight info",
            "desc": "Report information about a device's backlights.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's backlight information will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 686,
            "name": "ReportDeviceBacklightInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report applications information",
            "desc": "Report information for a device's application inventory and usage.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's applications and usage will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 702,
            "name": "ReportDeviceAppInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "mattme@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report Bluetooth info",
            "desc": "Report a device's Bluetooth information.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's Bluetooth information will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 708,
            "name": "ReportDeviceBluetoothInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report fan info",
            "desc": "Report a device's fan information.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's fan information will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 709,
            "name": "ReportDeviceFanInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report VPD info",
            "desc": "Report a device's VPD information.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's VPD information will be reported.\n      Vital Product Data (VPD) is a collection of configuration and informational data (such as part and serial numbers) associated with the device.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 710,
            "name": "ReportDeviceVpdInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report system info",
            "desc": "Report a device's system information.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's system information will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 741,
            "name": "ReportDeviceSystemInfo",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report print jobs",
            "default": false,
            "desc": "Report a device's print jobs.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's print jobs will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 835,
            "items": [
                {
                    "caption": "Report print jobs",
                    "value": true
                },
                {
                    "caption": "Do not report print jobs",
                    "value": false
                }
            ],
            "name": "ReportDevicePrintJobs",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "mattme@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Report login/logout",
            "default": false,
            "desc": "Report users login/logout events on enrolled devices including failed logins.\n\n      If the policy is set to false or left unset, the information will not be reported.\n      If set to true, the device's login/logout events will be reported.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 863,
            "items": [
                {
                    "caption": "Report login/logout events",
                    "value": true
                },
                {
                    "caption": "Do not report login/logout events",
                    "value": false
                }
            ],
            "name": "ReportDeviceLoginLogout",
            "owners": [
                "anasr@google.com",
                "cros-reporting-team@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Frequency of device status report uploads",
            "desc": "Setting the policy determines how frequently to send device status uploads, in milliseconds. The minimum allowed is 60 seconds.\n\n      If not set, the default interval of 3 hours applies.",
            "device_only": true,
            "example_value": 10800000,
            "features": {
                "dynamic_refresh": true
            },
            "id": 292,
            "name": "ReportUploadFrequency",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "minimum": 60000,
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:42-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "int"
        },
        {
            "caption": "Report information about status of Android",
            "desc": "If Android apps are on, then setting the policy to True has enrolled devices report Android status information.\n\n      Setting the policy to Disabled or leaving it unset means enrolled devices don't report Android status information",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 349,
            "name": "ReportArcStatusEnabled",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "phweiss@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:55-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Report information about usage of Linux apps",
            "desc": "If Linux app support is on, setting the policy to Enabled sends information about Linux apps usage back to the server.\n\n      Setting the policy to Disabled or leaving it unset means no usage information is reported.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 484,
            "name": "ReportCrostiniUsageEnabled",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "aoldemeier@chromium.org",
                "okalitova@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Send network packets to the management server to monitor online status",
            "desc": "Setting the policy to Enabled sends monitoring network packets (heartbeats) to the management server to monitor online status, to allow the server to detect if the device is offline.\n\n      Setting the policy to Disabled or leaving it unset sends no packets.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 293,
            "name": "HeartbeatEnabled",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:43-"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Frequency of monitoring network packets",
            "desc": "Setting the policy determines how frequently to send monitoring network packets, in milliseconds. Intervals range from 30 seconds to 24 hours. Values outside this range are clamped to this range.\n\n      If not set, the default interval of 3 minutes applies.",
            "device_only": true,
            "example_value": 180000,
            "features": {
                "dynamic_refresh": true
            },
            "id": 294,
            "name": "HeartbeatFrequency",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org"
            ],
            "schema": {
                "minimum": 30000,
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:43-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Send system logs to the management server",
            "desc": "Setting the policy to Enabled sends system logs to the management server, to allow admins to monitor system logs.\n\n      Setting the policy to Disabled or leaving it unset reports no system logs.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 306,
            "name": "LogUploadEnabled",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "pbond@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:46-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy controls who may start a Google Chrome OS session. It does not prevent users from signing in to additional Google accounts within Android. If you want to prevent this, configure the Android-specific accountTypesWithManagementDisabled policy as part of ArcPolicy.",
            "caption": "Login user white list",
            "deprecated": true,
            "desc": "Defines the list of users that are allowed to login to the device. Entries are of the form user@domain, such as madmax@managedchrome.com. To allow arbitrary users on a domain, use entries of the form *@domain.\n\n      If this policy is not configured, there are no restrictions on which users are allowed to sign in. Note that creating new users still requires the DeviceAllowNewUsers policy to be configured appropriately.\n\n      This policy is deprecated, please use DeviceUserAllowlist instead.\n      ",
            "device_only": true,
            "example_value": [
                "madmax@managedchrome.com"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 122,
            "name": "DeviceUserWhitelist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "sensitiveValue": true,
                "type": "array"
            },
            "supported_on": [
                "chrome_os:12-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "arc_support": "This policy controls who may start a Google Chrome OS session. It does not prevent users from signing in to additional Google accounts within Android. If you want to prevent this, configure the Android-specific accountTypesWithManagementDisabled policy as part of ArcPolicy.",
            "caption": "Login user allow list",
            "desc": "Defines the list of users that are allowed to login to the device. Entries are of the form user@domain, such as madmax@managedchrome.com. To allow arbitrary users on a domain, use entries of the form *@domain.\n\n      If this policy is not configured, there are no restrictions on which users are allowed to sign in. Note that creating new users still requires the DeviceAllowNewUsers policy to be configured appropriately.\n      If DeviceFamilyLinkAccountsAllowed is enabled, Family Link users will be allowed additionally to the accounts defined in this policy.",
            "device_only": true,
            "example_value": [
                "madmax@managedchrome.com"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 764,
            "name": "DeviceUserAllowlist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "sensitiveValue": true,
                "type": "array"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "arc_support": "This policy controls whether new users can be added to Google Chrome OS. It does not prevent users from signing in to additional Google accounts within Android. If you want to prevent this, configure the Android-specific accountTypesWithManagementDisabled policy as part of ArcPolicy.",
            "caption": "Allow creation of new user accounts",
            "desc": "Controls whether Google Chrome OS allows new user accounts to be created.\n\n      If this policy is set to false, only users present in DeviceUserAllowlist will be able to login.\n\n      If this policy is set to true or not configured, all users will be able to login.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 123,
            "name": "DeviceAllowNewUsers",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:12-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable guest mode",
            "desc": "If this policy is set to true or not configured, Google Chrome OS will enable guest logins. Guest logins are anonymous user sessions and do not require a password.\n\n      If this policy is set to false, Google Chrome OS will not allow guest sessions to be started.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 124,
            "name": "DeviceGuestModeEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:12-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show usernames on login screen",
            "desc": "If this policy is set to true or not configured, Google Chrome OS will show existing users on the login screen and allow to pick one.\n\n      If this policy is set to false, Google Chrome OS will not show existing users on the login screen. The normal sign-in screen (prompting for the user email and password or phone) or the SAML interstitial screen (if enabled via the LoginAuthenticationBehavior policy) will be shown, unless a Managed Session is configured. When a Managed Session is configured, only the Managed Session accounts will be shown, allowing to pick one of them.\n\n      Note that this policy does not affect whether the device keeps or discards the local user data.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 125,
            "name": "DeviceShowUserNamesOnSignin",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:12-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable data roaming",
            "desc": "Setting the policy to Enabled allows data roaming for the device.\n\n      Setting the policy to Disabled or leaving it unset renders data roaming unavailable.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 126,
            "name": "DeviceDataRoamingEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:12-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy also controls Android usage and diagnostic data collection.",
            "caption": "Enable metrics reporting",
            "desc": "Setting the policy to Enabled has Google Chrome OS report usage metrics and diagnostic data, including crash reports, back to Google. Setting the policy to Disabled turns off metrics and diagnostic data reporting.\n\n       Leaving the policy unset keeps metrics and diagnostic data reporting off on unmanaged devices and on for managed devices.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 127,
            "name": "DeviceMetricsReportingEnabled",
            "owners": [
                "cros-reporting-team@google.com",
                "lbaraz@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:14-"
            ],
            "tags": [
                "admin-sharing",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Release channel",
            "desc": "Specifies the release channel that this device should be locked to.\n\n      Setting ChromeOsReleaseChannel only has an effect if ChromeOsReleaseChannelDelegated is set to False.",
            "device_only": true,
            "example_value": "stable-channel",
            "features": {
                "dynamic_refresh": true
            },
            "id": 91,
            "items": [
                {
                    "caption": "Stable channel",
                    "name": "StableChannel",
                    "value": "stable-channel"
                },
                {
                    "caption": "Beta channel",
                    "name": "BetaChannel",
                    "value": "beta-channel"
                },
                {
                    "caption": "Dev channel (may be unstable)",
                    "name": "DevChannel",
                    "value": "dev-channel"
                }
            ],
            "name": "ChromeOsReleaseChannel",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "enum": [
                    "stable-channel",
                    "beta-channel",
                    "dev-channel"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:11-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Users may configure the Chrome OS release channel",
            "desc": "Users are only allowed to change the release channel of the device if this policy is set to True. If this policy is False or not set, users are not allowed to change the channel.\n\n      Setting ChromeOsReleaseChannel only has an effect if ChromeOsReleaseChannelDelegated is set to False.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 134,
            "name": "ChromeOsReleaseChannelDelegated",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:19-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow device to receive LTS updates",
            "desc": "If this policy is set to \"lts\" it allows the device to receive LTS (long term support) updates.",
            "device_only": true,
            "example_value": "lts",
            "features": {
                "dynamic_refresh": true
            },
            "id": 771,
            "name": "DeviceReleaseLtsTag",
            "owners": [
                "vsavu@google.com",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Channel downgrade behavior",
            "default": 1,
            "desc": "This policy specifies channel downgrade behavior on enrolled devices. With channel downgrade we mean switching to a more stable channel, e.g. beta to stable.\n\n      The value of this policy affects user-initiated channel downgrades as well as admin initiated channel downgrades.\n\n      On a channel downgrade, the device can either roll back its version and reset or wait for its current (or a higher) version to become available on the channel and receive no update until then.\n\n      If an enrolled user initiates a channel downgrade, they can decide to reset or wait, or the choice is made for them depending on this policy's value. If an admin initiates a channel downgrade via setting ChromeOsReleaseChannel, the device is rolled back on the next update check only if rollback was selected. Otherwise, the device will wait for the target channel to catch up with its current version.\n\n      If unset or invalid, the behavior is the same as for \"Wait for target channel to catch up on channel downgrade\".",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 757,
            "items": [
                {
                    "caption": "Wait for the target channel to catch up on channel downgrade",
                    "name": "WaitForVersionCatchUp",
                    "value": 1
                },
                {
                    "caption": "Roll back and reset the device on channel downgrade, try to preserve enrollment",
                    "name": "Rollback",
                    "value": 2
                },
                {
                    "caption": "User decides on channel downgrade behavior",
                    "name": "AllowUserToConfigure",
                    "value": 3
                }
            ],
            "name": "DeviceChannelDowngradeBehavior",
            "owners": [
                "mpolzer@google.com"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Wipe user data on sign-out",
            "desc": "Determines whether Google Chrome OS keeps local account data after logout. If set to true, no persistent accounts are kept by Google Chrome OS and all data from the user session will be discarded after logout. If this policy is set to false or not configured, the device may keep (encrypted) local user data.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 128,
            "name": "DeviceEphemeralUsersEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:19-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Load specified urls on demo login",
            "deprecated": true,
            "desc": "This policy is active in retail mode only.\n\n      Determines the set of URLs to be loaded when the demo session is started. This policy will override any other mechanisms for setting the initial URL and thus can only be applied to a session not associated with a particular user.",
            "device_only": true,
            "example_value": [
                "https://google.com",
                "chrome-extension://aaaaaaaaaaaaaaaaaaaaaaaa/"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 137,
            "name": "DeviceStartUpUrls",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:19-40"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Timeout until idle user log-out is executed",
            "deprecated": true,
            "desc": "This policy is active in retail mode only.\n\n      When the value of this policy is set and is not 0 then the currently logged in demo user will be logged out automatically after an inactivity time of the specified duration has elapsed.\n\n      The policy value should be specified in milliseconds.",
            "device_only": true,
            "example_value": 60000,
            "features": {
                "dynamic_refresh": true
            },
            "id": 130,
            "name": "DeviceIdleLogoutTimeout",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:19-40"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Duration of the idle log-out warning message",
            "deprecated": true,
            "desc": "This policy is active in retail mode only.\n\n      When DeviceIdleLogoutTimeout is specified this policy defines the duration of the warning box with a count down timer that is shown to the user before the logout is executed.\n\n      The policy value should be specified in milliseconds.",
            "device_only": true,
            "example_value": 15000,
            "features": {
                "dynamic_refresh": true
            },
            "id": 131,
            "name": "DeviceIdleLogoutWarningDuration",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:19-40"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Screen saver to be used on the sign-in screen in retail mode",
            "deprecated": true,
            "desc": "This policy is active in retail mode only.\n\n      Determines the id of the extension to be used as a screen saver on the sign-in screen. The extension must be part of the AppPack that is configured for this domain through the DeviceAppPack policy.",
            "device_only": true,
            "example_value": "fhblcfnmnbehmifidkddcenilbpddlfk",
            "features": {
                "dynamic_refresh": true
            },
            "id": 132,
            "name": "DeviceLoginScreenSaverId",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:19-40"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Duration of inactivity before the screen saver is shown on the sign-in screen in retail mode",
            "deprecated": true,
            "desc": "This policy is active in retail mode only.\n\n      Determines the duration before the screen saver is shown on the sign-in screen for devices in retail mode.\n\n      The policy value should be specified in milliseconds.",
            "device_only": true,
            "example_value": 120000,
            "features": {
                "dynamic_refresh": true
            },
            "id": 133,
            "name": "DeviceLoginScreenSaverTimeout",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:19-40"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "List of AppPack extensions",
            "deprecated": true,
            "desc": "This policy is active in retail mode only.\n\n      Lists extensions that are automatically installed for the Demo user, for devices in retail mode. These extensions are saved in the device and can be installed while offline, after the installation.\n\n      Each list entry contains a dictionary that must include the extension ID in the 'extension-id' field, and its update URL in the 'update-url' field.",
            "device_only": true,
            "example_value": [
                "{ \"extension-id\": \"khgabmflimjjbclkmljlpmgaleanedem\", \"update-url\": \"https://clients2.google.com/service/update2/crx\" }"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 135,
            "name": "DeviceAppPack",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:19-40"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Disable Auto Update",
            "desc": "Disables automatic updates when set to True.\n\n      Google Chrome OS devices automatically check for updates when this setting is not configured or set to False.\n\n      Warning: It is recommended to keep auto-updates enabled so that users receive software updates and critical security fixes. Turning off auto-updates might leave users at risk.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 136,
            "name": "DeviceAutoUpdateDisabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:19-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Auto update P2P enabled",
            "default_for_managed_devices_doc_only": true,
            "desc": "Specifies whether P2P is to be used for OS update payloads.\n      If set to True, devices will share and attempt to consume update payloads on the LAN, potentially reducing Internet bandwidth usage and congestion. If the update payload is not available on the LAN, the device will fall back to downloading from an update server.\n      If set to False, P2P will not be used.\n\n      NOTE: The default behavior for consumer and enterprise devices differs: on managed devices P2P will be enabled, while on non-managed devices it will not be enabled.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 242,
            "name": "DeviceAutoUpdateP2PEnabled",
            "owners": [
                "zeuthen@chromium.org",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:31-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Number of milestones rollback is allowed",
            "desc": "Specifies the minimum number of Google Chrome OS milestones rollback should be allowed starting from the stable version at any time.\n\n      Default is 0 for consumer, 4 (approx. half a year) for enterprise enrolled devices.\n\n      Setting this policy prevents rollback protection to apply for at least this number of milestones.\n\n      Setting this policy to a lower value has a permanent effect: the device MAY not be able to roll back to earlier versions even after the policy is reset to a larger value.\n\n      Actual rollback possibilities may also depend on the board and critical vulnerability patches.",
            "device_only": true,
            "example_value": 4,
            "features": {
                "dynamic_refresh": true
            },
            "id": 426,
            "name": "DeviceRollbackAllowedMilestones",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "maximum": 4,
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:67-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int"
        },
        {
            "caption": "Rollback to target version",
            "desc": "Specifies whether the device should roll back to the version set by DeviceTargetVersionPrefix if it's already running a later version.\n\n      Default is RollbackDisabled.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true
            },
            "id": 427,
            "items": [
                {
                    "caption": "Do not roll back to target version if OS version is newer than target. Updates are also disabled.",
                    "name": "RollbackDisabled",
                    "value": 1
                },
                {
                    "caption": "Roll back and stay on target version if OS version is newer than target. Do a powerwash during the process.",
                    "name": "RollbackAndPowerwash",
                    "value": 2
                },
                {
                    "caption": "Roll back and stay on target version if OS version is newer than target. Try to carry over device-level configuration (including network credentials) through the rollback process, if possible, but do the rollback with full powerwash even if restoring the data is not possible (because the target version doesn't support restoring data or because of a backward-incompatible change).\n          Supported on Google Chrome OS version 75 and higher. For older clients, this value means that rollback is disabled.",
                    "name": "RollbackAndRestoreIfPossible",
                    "value": 3
                }
            ],
            "name": "DeviceRollbackToTargetVersion",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:67-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Target Auto Update Version",
            "desc": "Sets a target version for Auto Updates.\n\n      Specifies the prefix of a target version Google Chrome OS should update to. If the device is running a version that's before the specified prefix, it will update to the latest version with the given prefix. If the device is already on a later version, effects depend on the value of DeviceRollbackToTargetVersion. The prefix format works component-wise as is demonstrated in the following example:\n\n      \"\" (or not configured): update to latest version available.\n      \"1412.\": update to any minor version of 1412 (e.g. 1412.24.34 or 1412.60.2)\n      \"1412.2.\": update to any minor version of 1412.2 (e.g. 1412.2.34 or 1412.2.2)\n      \"1412.24.34\": update to this specific version only\n\n      Warning: It is not recommended to configure version restrictions as they may prevent users from receiving software updates and critical security fixes. Restricting updates to a specific version prefix might leave users at risk.",
            "device_only": true,
            "example_value": "1412.",
            "features": {
                "dynamic_refresh": true
            },
            "id": 142,
            "name": "DeviceTargetVersionPrefix",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:19-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string"
        },
        {
            "caption": "Allow devices to select a specific version to update to",
            "desc": "This setting allows devices to select a specific target version of Google Chrome OS they will update to.\n\n      If not set, devices will update according to other settings or to the latest available version.\n\n      If set, devices will update up to a selected version.\n\n      The exact format of this policy value is an implementation detail of the update service and may change. The policy value is not processed on the device.\n\n      If used together with DeviceTargetVersionPrefix, this policy will be checked first by update service.\n      Unlike DeviceTargetVersionPrefix (which may allow minor updates), devices will stay on the selected version until the value of this policy is changed.\n\n      If used together with DeviceRollbackToTargetVersion, device version can be reverted to a specific previous version.\n\n      Warning: It is not recommended to configure version restrictions as they may prevent users from receiving software updates and critical security fixes. Restricting updates to a specific version might leave users at risk.",
            "device_only": true,
            "example_value": "0,1626155736-",
            "features": {
                "dynamic_refresh": true
            },
            "id": 891,
            "name": "DeviceTargetVersionSelector",
            "owners": [
                "vsavu@google.com",
                "asumaneev@google.com",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:95-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string"
        },
        {
            "caption": "Auto update scatter factor",
            "desc": "Specifies the number of seconds up to which a device may randomly delay its download of an update from the time the update was first pushed out to the server. The device may wait a portion of this time in terms of wall-clock-time and the remaining portion in terms of the number of update checks. In any case, the scatter is upper bounded to a constant amount of time so that a device does not ever get stuck waiting to download an update forever.",
            "device_only": true,
            "example_value": 7200,
            "features": {
                "dynamic_refresh": true
            },
            "id": 145,
            "name": "DeviceUpdateScatterFactor",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:20-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int"
        },
        {
            "caption": "Connection types allowed for updates",
            "desc": " The types of connections that are allowed to use for OS updates. OS updates potentially put heavy strain on the connection due to their size and may incur additional cost. Therefore, they are by default not enabled for connection types that are considered expensive (currently only \"cellular\").\n\n      The recognized connection type identifiers are \"ethernet\", \"wifi\", and \"cellular\".",
            "device_only": true,
            "example_value": [
                "ethernet"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 146,
            "name": "DeviceUpdateAllowedConnectionTypes",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:21-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow autoupdate downloads via HTTP",
            "desc": "Auto-update payloads on Google Chrome OS can be downloaded via HTTP instead of HTTPS. This allows transparent HTTP caching of HTTP downloads.\n\n      If this policy is set to true, Google Chrome OS will attempt to download auto-update payloads via HTTP. If the policy is set to false or not set, HTTPS will be used for downloading auto-update payloads.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 243,
            "name": "DeviceUpdateHttpDownloadsEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Device-local accounts",
            "desc": "Setting the policy specifies the list of device-local accounts to display on the sign-in screen. Identifiers tell the different device-local accounts apart.\n\n      If the policy is unset or an empty list, there are no device-local accounts.",
            "device_only": true,
            "example_value": [
                "demo@example.com"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 163,
            "name": "DeviceLocalAccounts",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:25-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Use only policy-provided update URL when downloading and updating Kiosk Chrome apps",
            "default": false,
            "desc": "Setting the policy will disable in-session Kiosk Chrome apps update (which uses update URL from the extension manifest) and leaves only CRX pre-fetching as the update mechanism.",
            "device_only": true,
            "example_value": true,
            "features": {
                "cloud_only": true,
                "dynamic_refresh": true,
                "unlisted": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 916,
            "items": [
                {
                    "caption": "New behaviour: Kiosk Chrome Apps will be only updated using update URL from the policy",
                    "value": true
                },
                {
                    "caption": "Legacy behavior: Kiosk Chrome Apps will be updated by the extension system using update URL from the extension manifest, as well as by caching manager using update URL from the policy",
                    "value": false
                }
            ],
            "name": "KioskCRXManifestUpdateURLIgnored",
            "owners": [
                "file://chrome/browser/extensions/forced_extensions/OWNERS",
                "burunduk@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Device-local account for auto-login",
            "desc": "Setting the policy means the specified session is automatically signed if there is no user interaction at the sign-in screen within the time specified in DeviceLocalAccountAutoLoginDelay. The device-local account must already be set up (see DeviceLocalAccounts).\n\n      Leaving it unset means there's no automatic sign-in.",
            "device_only": true,
            "example_value": "public@example.com",
            "features": {
                "dynamic_refresh": true
            },
            "id": 194,
            "name": "DeviceLocalAccountAutoLoginId",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Device-local account auto-login timer",
            "desc": "Setting the policy determines the amount of time in milliseconds without user activity before automatically signing in to the device-local account specified by the DeviceLocalAccountAutoLoginId policy.\n\n      Leaving it unset means 0 milliseconds is used as the timeout.\n\n      If the DeviceLocalAccountAutoLoginId policy is unset, this policy has no effect.",
            "device_only": true,
            "example_value": 180000,
            "features": {
                "dynamic_refresh": true
            },
            "id": 195,
            "name": "DeviceLocalAccountAutoLoginDelay",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable bailout keyboard shortcut for auto-login",
            "desc": "Setting the policy to Enabled or leaving it unset means a device-local account is set up for zero-delay, automatic sign-in. Google Chrome OS honors the keyboard shortcut Ctrl+Alt+S for bypassing automatic sign-in and showing the sign-in screen.\n\n      Setting the policy to Disabled means users can't bypass zero-delay automatic sign-in (if configured).",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 202,
            "name": "DeviceLocalAccountAutoLoginBailoutEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:28-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable network configuration prompt when offline",
            "desc": "Setting the policy to Enabled or leaving it unset means when a device is offline, if a device-local account is set for zero-delay, automatic sign-in, Google Chrome OS shows a network-configuration prompt.\n\n      Setting the policy to Disabled has an error message displayed instead.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 250,
            "name": "DeviceLocalAccountPromptForNetworkWhenOffline",
            "owners": [
                "xiyuan@chromium.org",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:33-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow managed session on device",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 88. Public sessions are no longer supported. Please use DeviceLocalAccounts to configure managed-guest sessions instead.\n      If this policy is set to false, managed guest session will behave as documented in https://support.google.com/chrome/a/answer/3017014 - the standard \"Public Session\".\n\n      If this policy is set to true or left unset, managed guest session will take on \"Managed Session\" behaviour which lifts many of the restrictions that are in place for regular \"Public Sessions\".\n\n      If this policy is set, the user cannot change or override it.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 463,
            "name": "DeviceLocalAccountManagedSessionEnabled",
            "owners": [
                "isandrk@chromium.org",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy controls Google Chrome OS developer mode only. If you want to prevent access to Android Developer Options, you need to set the DeveloperToolsDisabled policy.",
            "caption": "Block developer mode",
            "desc": "Setting the policy to Enabled means Google Chrome OS stops the device from going into Developer mode.\n\n       Setting the policy to Disabled or leaving it unset keeps Developer mode available for the device.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 266,
            "name": "DeviceBlockDevmode",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:37-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Reduce Managed-guest session auto-launch notifications",
            "deprecated": true,
            "desc": " Note that this policy is deprecated in M87 and removed in M89. Please use ManagedGuestSessionPrivacyWarningsEnabled to configure the privacy warnings of managed-guest sessions instead.\n\n      Control the auto launch notification of the managed guest session on Google Chrome OS.\n\n      If this policy is set to True, the privacy warning notification will be closed after some seconds.\n\n      If the policy is set to False or not set, the privacy warning notification will be pinned until the user dismisses it.",
            "example_value": true,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 688,
            "name": "ManagedGuestSessionAutoLaunchNotificationReduced",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:83-88"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Reduce Managed-guest session auto-launch notifications",
            "desc": " Controls the privacy warning of the managed-guest session on Google Chrome OS.\n\n      If this policy is set to False, the privacy warnings on the login screen and the auto-launch notification inside the managed-guest session will get deactivated.\n\n      This policy should not be used for devices used by the general public.\n\n      If the policy is set to True or not set, the privacy warning notification in the auto-launched managed-guest session will be pinned until the user dismisses it.",
            "device_only": true,
            "example_value": false,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 723,
            "name": "ManagedGuestSessionPrivacyWarningsEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "ayaelattar@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os: 84-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Continue running background apps when Google Chrome is closed",
            "desc": "Setting the policy to Enabled turns background mode on. In background mode, a Google Chrome process is started on OS sign-in and keeps running when the last browser window is closed, allowing background apps and the browsing session to remain active. The background process displays an icon in the system tray and can always be closed from there.\n\n      Setting the policy to Disabled turns background mode off.\n\n      If you set the policy, users can't change it in the browser settings. If unset, background mode is off at first, but users can change it.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 138,
            "name": "BackgroundModeEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:19-",
                "chrome.linux:19-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "arc_support": "This policy does not prevent the user from using the Android Google Drive app. If you want to prevent access to Google Drive, you should disallow installation of the Android Google Drive app as well.",
            "caption": "Disable Drive in the Google Chrome OS Files app",
            "desc": "Setting the policy to Enabled turns off Google Drive syncing in the Google Chrome OS Files app. No data is uploaded to Drive.\n\n      Setting the policy to Disabled or leaving it unset lets users transfer files to Drive.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 139,
            "name": "DriveDisabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:19-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy has no effect on the Android Google Drive app. If you want to prevent use of Google Drive over cellular connections, you should disallow installation of the Android Google Drive app.",
            "caption": "Disable Google Drive over cellular connections in the Google Chrome OS Files app",
            "desc": "Setting the policy to Enabled turns off Google Drive syncing in the Google Chrome OS Files app when on a cellular connection. Data is only synced to Drive when connected through Wi-Fi or Ethernet.\n\n      Setting the policy to Disabled or leaving it unset lets users transfer files to Drive on cellular connections.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 140,
            "name": "DriveDisabledOverCellular",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:19-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "This policy can also be used to pin Android apps.",
            "caption": "List of pinned apps to show in the launcher",
            "desc": "Setting the policy fixes which application identifiers Google Chrome OS shows as pinned apps in the launcher bar, and users can't change them.\n\n      Specify Chrome apps by their ID, such as pjkljhegncpnkpknbcohdijeoejaedia; Android apps by their package name, such as com.google.android.gm; and web apps by the URL used in WebAppInstallForceList, such as https://google.com/maps.\n\n      Leaving it unset lets users change the list of pinned apps in the launcher.",
            "example_value": [
                "pjkljhegncpnkpknbcohdijeoejaedia",
                "com.google.android.gm",
                "https://google.com/maps"
            ],
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 144,
            "name": "PinnedLauncherApps",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:20-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Restrict which Google accounts are allowed to be set as browser primary accounts in Google Chrome",
            "desc": "Contains a regular expression which is used to determine which Google accounts can be set as browser primary accounts in Google Chrome (i.e. the account that is chosen during the Sync opt-in flow).\n\n      An appropriate error is displayed if a user tries to set a browser primary account with a username that does not match this pattern.\n\n      If this policy is left not set or blank, then the user can set any Google account as a browser primary account in Google Chrome.",
            "example_value": ".*@example\\.com",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 147,
            "name": "RestrictSigninToPattern",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:21-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Disable proceeding from the Safe Browsing warning page",
            "desc": "Setting the policy to Enabled prevents users from proceeding past the warning page the Safe Browsing service shows to the malicious site. This policy only prevents users from proceeding on Safe Browsing warnings such as malware and phishing, not for SSL certificate-related issues such as invalid or expired certificates.\n\n      Setting the policy to Disabled or leaving it unset means users can choose to proceed to the flagged site after the warning appears.\n\n      See more about Safe Browsing ( https://developers.google.com/safe-browsing ).",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 150,
            "name": "DisableSafeBrowsingProceedAnyway",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:22-",
                "chrome_os:22-",
                "android:30-",
                "ios:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to opt in to Safe Browsing extended reporting",
            "deprecated": true,
            "desc": "This policy is deprecated in M82 and removed in M85, use SafeBrowsingExtendedReportingEnabled instead. Disabling SafeBrowsingExtendedReportingOptInAllowed is equivalent to disabling SafeBrowsingExtendedReportingEnabled. Enabling SafeBrowsingExtendedReportingOptInAllowed or leaving this setting unset is equivalent to leaving SafeBrowsingExtendedReportingEnabled unset.\n\n      Setting this policy to false stops users from choosing to send some system information and page content to Google servers. If this setting is true or not configured, then users will be allowed to send some system information and page content to Safe Browsing to help detect dangerous apps and sites.\n\n      See https://developers.google.com/safe-browsing for more info on Safe Browsing.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 299,
            "name": "SafeBrowsingExtendedReportingOptInAllowed",
            "owners": [
                "estark@chromium.org",
                "meacer@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:44-84",
                "chrome_os:44-84"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable or disable spell checking web service",
            "default": null,
            "desc": "Setting the policy to Enabled puts a Google web service in use to help resolve spelling errors. This policy only controls the use of the online service. Setting the policy to Disabled means this service is never used.\n\n      Leaving the policy unset lets users choose whether to use the spellcheck service.\n\n      The spell check can always use a downloaded dictionary locally unless the feature is disabled by SpellcheckEnabled in which case this policy will have no effect.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 151,
            "items": [
                {
                    "caption": "Use a Google web service to help resolve spelling errors",
                    "value": true
                },
                {
                    "caption": "Do not use any Google web services to help resolve spelling errors",
                    "value": false
                },
                {
                    "caption": "Allow the user to choose if Google web services are used to resolve spelling errors",
                    "value": null
                }
            ],
            "name": "SpellCheckServiceEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:22-",
                "chrome_os:22-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Disable mounting of external storage",
            "desc": "Setting the policy to True makes all types of external storage media (USB flash drives, external hard drives, SD and other memory cards, optical storage) unavailable in the file browser. Setting the policy to False or leaving it unset means users can use external storage on their device.\n\n      Note: The policy doesn't affect Google Drive and internal storage. Users can still access files saved in the Downloads folder.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 152,
            "name": "ExternalStorageDisabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:22-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Treat external storage devices as read-only",
            "desc": "Setting the policy to True prevents users from writing to external storage devices.\n\n      Unless external storage is blocked, if you set ExternalStorageReadOnly to False or leave it unset, users can create and modify files of physically writable, external storage devices. (You can block external storage by setting ExternalStorageDisable to True.)",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 343,
            "name": "ExternalStorageReadOnly",
            "owners": [
                "yamaguchi@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:54-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow playing audio",
            "desc": "Setting the policy to Enabled or leaving it unset allows all supported audio outputs on the users' devices.\n\n      Setting the policy to Disabled allows no audio output while users are signed in.\n\n      Note: The policy affects all audio output, including audio accessibility features. Do not turn the policy off if a user requires a screen reader.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 159,
            "name": "AudioOutputAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:23-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "For Android apps, this policy affects the microphone only. When this policy is set to true, the microphone is muted for all Android apps, with no exceptions.",
            "caption": "Allow or deny audio capture",
            "desc": "Setting the policy to Enabled or leaving it unset means that, with the exception of URLs set in the AudioCaptureAllowedUrls list, users get prompted for audio capture access.\n\n      Setting the policy to Disabled turns off prompts, and audio capture is only available to URLs set in the AudioCaptureAllowedUrls list.\n\n      Note: The policy affects all audio input (not just the built-in microphone).",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 160,
            "name": "AudioCaptureAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:25-",
                "chrome_os:23-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "URLs that will be granted access to audio capture devices without prompt",
            "desc": "Setting the policy means you specify the URL list whose patterns get matched to the security origin of the requesting URL. A match grants access to audio capture devices without prompt\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "example_value": [
                "https://www.example.com/",
                "https://[*.]example.edu/"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 208,
            "name": "AudioCaptureAllowedUrls",
            "owners": [
                "guidou@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:29-",
                "chrome_os:29-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Allow or deny video capture",
            "desc": "Setting the policy to Enabled or leaving it unset means that, with the exception of URLs set in the VideoCaptureAllowedUrls list, users get prompted for video capture access.\n\n      Setting the policy to Disabled turns off prompts, and video capture is only available to URLs set in the VideoCaptureAllowedUrls list.\n\n      Note: The policy affects all video input (not just the built-in camera).",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 167,
            "name": "VideoCaptureAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:25-",
                "chrome_os:25-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "URLs that will be granted access to video capture devices without prompt",
            "desc": "Setting the policy means you specify the URL list whose patterns get matched to the security origin of the requesting URL. A match grants access to video capture devices without prompt\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "example_value": [
                "https://www.example.com/",
                "https://[*.]example.edu/"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 209,
            "name": "VideoCaptureAllowedUrls",
            "owners": [
                "guidou@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:29-",
                "chrome_os:29-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Disable taking screenshots",
            "desc": "Setting the policy to True disallows screenshots taken with keyboard shortcuts or extension APIs. Setting the policy to False allows screenshots.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 153,
            "name": "DisableScreenshots",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:22-",
                "chrome.*:22-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Timezone",
            "desc": "Setting the policy specifies a device's time zone and turns off location-based automatic time zone adjustment while overriding the SystemTimezoneAutomaticDetection policy. Users can't change the time zone.\n\n      New devices start with the time zone set to US Pacific. Value format follows the names in the IANA Time Zone Database ( https://en.wikipedia.org/wiki/Tz_database ). Entering an invalid value activates the policy using GMT.\n\n      If not set or if you enter an empty string, the device uses the currently active time zone, but users can change it.",
            "device_only": true,
            "example_value": "America/Los_Angeles",
            "features": {
                "dynamic_refresh": true
            },
            "id": 158,
            "name": "SystemTimezone",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:22-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Use 24 hour clock by default",
            "desc": "Setting the policy to True gives a device's sign-in screen a 24-hour clock format.\n\n      Setting the policy to False gives a device's sign-in screen a 12-hour clock format.\n\n      Leaving the policy unset makes a device use the format from the current locale.\n\n      User sessions also default to the device format, but users can change an account's clock format.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 236,
            "name": "SystemUse24HourClock",
            "owners": [
                "alemate@chromium.org",
                "michaelpg@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:30-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable virtual keyboard",
            "desc": "Setting the policy to Enabled keeps the on-screen virtual keyboard (a Chrome\u00a0OS input device) on. Setting the policy to Disabled keeps this keyboard off.\n\n      If you set the policy, users can't change it. (They can turn an accessibility on-screen keyboard that takes precedence over the virtual keyboard on or off. See the VirtualKeyboardEnabled policy.)\n\n      If not set, the keyboard is off, but users can change it.\n\n       Note: Heuristic rules might also factor into keyboard display.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 269,
            "name": "TouchVirtualKeyboardEnabled",
            "owners": [
                "rsadam@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:37-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Add a logout button to the system tray",
            "desc": "Setting the policy to True displays a big, red sign-out button in the system tray during active sessions while the screen isn't locked.\n\n      Setting the policy to False or leaving it unset means no button appears.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 164,
            "name": "ShowLogoutButtonInTray",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:25-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Use built-in DNS client",
            "desc": "This policy controls which software stack is used to communicate with the DNS server: the Operating System DNS client, or Google Chrome's built-in DNS client. This policy does not affect which DNS servers are used: if, for example, the operating system is configured to use an enterprise DNS server, that same server would be used by the built-in DNS client. It also does not control if DNS-over-HTTPS is used; Google Chrome will always use the built-in resolver for DNS-over-HTTPS requests. Please see the DnsOverHttpsMode policy for information on controlling DNS-over-HTTPS.\n\n      If this policy is set to Enabled, the built-in DNS client will be used, if available.\n\n      If this policy is set to Disabled, the built-in DNS client will only be used when DNS-over-HTTPS is in use.\n\n      If this policy is left unset, the built-in DNS client will be enabled by default on macOS, Android (when neither Private DNS nor VPN are enabled) and Google Chrome OS.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 165,
            "name": "BuiltInDnsClientEnabled",
            "owners": [
                "ericorth@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:73-",
                "chrome.*:25-",
                "chrome_os:73-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Controls the mode of DNS-over-HTTPS",
            "default_for_enterprise_users": "off",
            "desc": "Controls the mode of the DNS-over-HTTPS resolver. Please note that this policy will only set the default mode for each query. The mode may be overridden for special types of queries such as requests to resolve a DNS-over-HTTPS server hostname.\n\n      The \"off\" mode will disable DNS-over-HTTPS.\n\n      The \"automatic\" mode will send DNS-over-HTTPS queries first if a DNS-over-HTTPS server is available and may fallback to sending insecure queries on error.\n\n      The \"secure\" mode will only send DNS-over-HTTPS queries and will fail to resolve on error.\n\n      On Android Pie and above, if DNS-over-TLS is active, Google Chrome will not send insecure DNS requests.\n\n      If this policy is unset the browser may send DNS-over-HTTPS requests to a resolver associated with the user's configured system resolver.",
            "example_value": "off",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 582,
            "items": [
                {
                    "caption": "Disable DNS-over-HTTPS",
                    "name": "off",
                    "value": "off"
                },
                {
                    "caption": "Enable DNS-over-HTTPS with insecure fallback",
                    "name": "automatic",
                    "value": "automatic"
                },
                {
                    "caption": "Enable DNS-over-HTTPS without insecure fallback",
                    "name": "secure",
                    "value": "secure"
                }
            ],
            "name": "DnsOverHttpsMode",
            "owners": [
                "ericorth@chromium.org",
                "bingler@chromium.org"
            ],
            "schema": {
                "enum": [
                    "off",
                    "automatic",
                    "secure"
                ],
                "type": "string"
            },
            "supported_on": [
                "android:85-",
                "chrome_os:78-",
                "chrome.*:78-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Specify URI template of desired DNS-over-HTTPS resolver",
            "desc": "The URI template of the desired DNS-over-HTTPS resolver. To specify multiple DNS-over-HTTPS resolvers, separate the corresponding URI templates with spaces.\n\n      If the DnsOverHttpsMode is set to \"secure\" then this policy must be set and not empty.\n\n      If the DnsOverHttpsMode is set to \"automatic\" and this policy is set then the URI templates specified will be used; if this policy is unset then hardcoded mappings will be used to attempt to upgrade the user's current DNS resolver to a DoH resolver operated by the same provider.\n\n      If the URI template contains a dns variable, requests to the resolver will use GET; otherwise requests will use POST.\n\n      Incorrectly formatted templates will be ignored.",
            "example_value": "https://dns.example.net/dns-query{?dns}",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 642,
            "name": "DnsOverHttpsTemplates",
            "owners": [
                "ericorth@chromium.org",
                "bingler@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "android:85-",
                "chrome_os:80-",
                "chrome.*:80-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Allow DNS queries for additional DNS record types",
            "default": true,
            "desc": "This policy controls whether Google Chrome may query additional DNS record types when making insecure DNS requests. This policy has no effect on DNS queries made via Secure DNS, which may always query additional DNS types.\n\n      If this policy is unset or set to Enabled, additional types such as HTTPS (DNS type 65) may be queried in addition to A (DNS type 1) and AAAA (DNS type 28).\n\n      If this policy is set to Disabled, DNS will only be queried for A (DNS type 1) and/or AAAA (DNS type 28).\n\n      This policy is a temporary measure and will be removed in future versions of Google Chrome. After removal of the policy, Google Chrome will always be able to query additional DNS types.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 857,
            "items": [
                {
                    "caption": "Allow additional DNS query types",
                    "value": true
                },
                {
                    "caption": "Prevent additional DNS query types",
                    "value": false
                }
            ],
            "name": "AdditionalDnsQueryTypesEnabled",
            "owners": [
                "ericorth@chromium.org",
                "file://net/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:92-",
                "chrome.*:92-",
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control shelf auto-hiding",
            "desc": "Setting the policy to Always will autohide the Google Chrome OS shelf. Setting the policy to Never ensures the shelf never autohides.\n\n      If you set the policy, users can't change it. If not set, users decide whether the shelf autohides.",
            "example_value": "Always",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 166,
            "items": [
                {
                    "caption": "Always auto-hide the shelf",
                    "name": "AlwaysAutoHideShelf",
                    "value": "Always"
                },
                {
                    "caption": "Never auto-hide the shelf",
                    "name": "NeverAutoHideShelf",
                    "value": "Never"
                }
            ],
            "name": "ShelfAutoHideBehavior",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "enum": [
                    "Always",
                    "Never"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:25-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Control the shelf position",
            "desc": "Control the position of the Google Chrome OS shelf.\n\n      If this policy is set to 'Bottom', the shelf will be placed at the bottom of the screen.\n\n      If this policy is set to 'Left', the shelf will be placed on the left side of the screen.\n\n      If this policy is set to 'Right', the shelf will be placed on the right side of the screen.\n\n      If you set this policy as mandatory, users cannot change or override it.\n\n      If the policy is left not set, the shelf will be be positioned at the bottom of the screen by default and the user can change the shelf's position.",
            "example_value": "Bottom",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 620,
            "items": [
                {
                    "caption": "Position the shelf on the left side of the screen",
                    "name": "Left",
                    "value": "Left"
                },
                {
                    "caption": "Position the shelf at the bottom of the screen",
                    "name": "Bottom",
                    "value": "Bottom"
                },
                {
                    "caption": "Position the shelf on the right side of the screen",
                    "name": "Right",
                    "value": "Right"
                }
            ],
            "name": "ShelfAlignment",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "enum": [
                    "Left",
                    "Bottom",
                    "Right"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Configure the camera, browser settings, os settings, scanning, web store, canvas and explore features to be disabled",
            "desc": "Allows you to set a list of Google Chrome OS features to be disabled.\n\n      Disabling any of these features means that the user can't access it from the UI and will see it as \"disabled by admin\". The user experience of disabled features is decided by SystemFeaturesDisableMode\n\n      If the policy is left not set, all Google Chrome OS features will be enabled by default and the user can use any of them.\n\n      Note: The scanning feature is currently disabled by default via a feature flag. If the user enables the feature via the feature flag, the feature can still be disabled by this policy.",
            "example_value": [
                "camera",
                "browser_settings",
                "os_settings",
                "scanning",
                "web_store",
                "canvas"
            ],
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 689,
            "items": [
                {
                    "caption": "Browser Settings",
                    "name": "browser_settings",
                    "value": "browser_settings"
                },
                {
                    "caption": "OS Settings",
                    "name": "os_settings",
                    "value": "os_settings"
                },
                {
                    "caption": "Camera",
                    "name": "camera",
                    "value": "camera"
                },
                {
                    "caption": "Scanning (supported since version 87)",
                    "name": "scanning",
                    "value": "scanning"
                },
                {
                    "caption": "Web Store (supported since version 89)",
                    "name": "web_store",
                    "value": "web_store"
                },
                {
                    "caption": "Canvas (supported since version 90)",
                    "name": "canvas",
                    "value": "canvas"
                },
                {
                    "caption": "Unsupported",
                    "name": "google_news",
                    "value": "google_news"
                },
                {
                    "caption": "Explore (supported since version 91)",
                    "name": "explore",
                    "value": "explore"
                }
            ],
            "name": "SystemFeaturesDisableList",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "ayaelattar@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "enum": [
                        "browser_settings",
                        "os_settings",
                        "camera",
                        "scanning",
                        "web_store",
                        "canvas",
                        "google_news",
                        "explore"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "string-enum-list"
        },
        {
            "caption": "Set the user experience of disabled features",
            "default": "blocked",
            "desc": "Controls the user experience of disabled features listed in SystemFeaturesDisableList.\n\n      If this policy is set to \"blocked\", the disabled features will become unusable but still visible to users.\n\n      If this policy is set to \"hidden\", the disabled features will become unusable and invisible to users.\n\n      If this policy is left unset or has an invalid value, the disable mode of system features will be \"blocked\".",
            "example_value": "blocked",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 807,
            "items": [
                {
                    "caption": "Block the disabled features",
                    "name": "blocked",
                    "value": "blocked"
                },
                {
                    "caption": "Hide and block the disabled features",
                    "name": "hidden",
                    "value": "hidden"
                }
            ],
            "name": "SystemFeaturesDisableMode",
            "owners": [
                "anqing@chromium.org"
            ],
            "schema": {
                "enum": [
                    "blocked",
                    "hidden"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:91-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Enables the floating accessibility menu",
            "desc": "In kiosk mode, controls whether the floating accessibility menu is being shown.\n\n      If this policy is set to enabled, the floating accessibility menu will be always shown.\n\n      If this policy is set to disabled or left unset, the floating accessibility menu will never be shown.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 691,
            "name": "FloatingAccessibilityMenuEnabled",
            "owners": [
                "apotapchuk@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the display name for device-local accounts",
            "desc": "Controls the account name Google Chrome OS shows on the login screen for the corresponding device-local account.\n\n      If this policy is set, the login screen will use the specified string in the picture-based login chooser for the corresponding device-local account.\n\n      If the policy is left not set, Google Chrome OS will use the device-local account's email account ID as the display name on the login screen.\n\n      This policy is ignored for regular user accounts.",
            "example_value": "Policy User",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 169,
            "name": "UserDisplayName",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:25-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Limit the length of a user session",
            "desc": "When this policy is set, it specifies the length of time after which a user is automatically logged out, terminating the session. The user is informed about the remaining time by a countdown timer shown in the system tray.\n\n      When this policy is not set, the session length is not limited.\n\n      If you set this policy, users cannot change or override it.\n\n      The policy value should be specified in milliseconds. Values are clamped to a range of 30 seconds to 24 hours.",
            "example_value": 3600000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 170,
            "name": "SessionLengthLimit",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:25-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "arc_support": "This policy has no effect on the Android apps. They will be able to enter fullscreen mode even if this policy is set to False.",
            "caption": "Allow fullscreen mode",
            "desc": "Setting the policy to True or leaving it unset means that, with appropriate permissions, users, apps, and extensions can enter Fullscreen mode (in which only web content appears).\n\n      Setting the policy to False means users, apps, and extensions can't enter Fullscreen mode.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 240,
            "name": "FullscreenAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:31-",
                "chrome.linux:31-",
                "chrome_os:31-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable fullscreen alert",
            "default": null,
            "desc": "Specifies whether the fullscreen alert should be shown when the device returns from sleep or dark screen.\n\n      When the policy is unset or set to True, an alert will be shown to remind the users to exit fullscreen before entering password. When the policy is set to False, no alert would be shown.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 804,
            "items": [
                {
                    "caption": "Enable fullscreen alert",
                    "value": true
                },
                {
                    "caption": "Disable show fullscreen alert",
                    "value": false
                },
                {
                    "caption": "Enable fullscreen alert",
                    "value": null
                }
            ],
            "name": "FullscreenAlertEnabled",
            "owners": [
                "zxdan@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Screen dim delay when running on AC power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which the screen is dimmed when running on AC power.\n\n          When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS dims the screen.\n\n          When this policy is set to zero, Google Chrome OS does not dim the screen when the user becomes idle.\n\n          When this policy is unset, a default length of time is used.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than or equal the screen off delay (if set) and the idle delay.",
            "example_value": 420000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 172,
            "name": "ScreenDimDelayAC",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Screen off delay when running on AC power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which the screen is turned off when running on AC power.\n\n          When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS turns off the screen.\n\n          When this policy is set to zero, Google Chrome OS does not turn off the screen when the user becomes idle.\n\n          When this policy is unset, a default length of time is used.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than or equal the idle delay.",
            "example_value": 480000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 173,
            "name": "ScreenOffDelayAC",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Screen lock delay when running on AC power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use ScreenLockDelays instead.\n\n          Specifies the length of time without user input after which the screen is locked when running on AC power.\n\n          When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS locks the screen.\n\n          When this policy is set to zero, Google Chrome OS does not lock the screen when the user becomes idle.\n\n          When this policy is unset, a default length of time is used.\n\n          The recommended way to lock the screen on idle is to enable screen locking on suspend and have Google Chrome OS suspend after the idle delay. This policy should only be used when screen locking should occur a significant amount of time sooner than suspend or when suspend on idle is not desired at all.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than the idle delay.",
            "example_value": 600000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 174,
            "name": "ScreenLockDelayAC",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Idle warning delay when running on AC power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which a warning dialog is shown when running on AC power.\n\n          When this policy is set, it specifies the length of time that the user must remain idle before Google Chrome OS shows a warning dialog telling the user that the idle action is about to be taken.\n\n          When this policy is unset, no warning dialog is shown.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than or equal the idle delay.\n\n          The warning message is only shown if the idle action is to logout or shut down.",
            "example_value": 545000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 197,
            "name": "IdleWarningDelayAC",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:27-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Idle delay when running on AC power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which the idle action is taken when running on AC power.\n\n          When this policy is set, it specifies the length of time that the user must remain idle before Google Chrome OS takes the idle action, which can be configured separately.\n\n          When this policy is unset, a default length of time is used.\n\n          The policy value should be specified in milliseconds.",
            "example_value": 1800000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 175,
            "name": "IdleDelayAC",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Screen dim delay when running on battery power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which the screen is dimmed when running on battery power.\n\n          When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS dims the screen.\n\n          When this policy is set to zero, Google Chrome OS does not dim the screen when the user becomes idle.\n\n          When this policy is unset, a default length of time is used.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than or equal the screen off delay (if set) and the idle delay.",
            "example_value": 300000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 176,
            "name": "ScreenDimDelayBattery",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Screen off delay when running on battery power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which the screen is turned off when running on battery power.\n\n          When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS turns off the screen.\n\n          When this policy is set to zero, Google Chrome OS does not turn off the screen when the user becomes idle.\n\n          When this policy is unset, a default length of time is used.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than or equal the idle delay.",
            "example_value": 360000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 177,
            "name": "ScreenOffDelayBattery",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Screen lock delay when running on battery power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use ScreenLockDelays instead.\n\n          Specifies the length of time without user input after which the screen is locked when running on battery power.\n\n          When this policy is set to a value greater than zero, it specifies the length of time that the user must remain idle before Google Chrome OS locks the screen.\n\n          When this policy is set to zero, Google Chrome OS does not lock the screen when the user becomes idle.\n\n          When this policy is unset, a default length of time is used.\n\n          The recommended way to lock the screen on idle is to enable screen locking on suspend and have Google Chrome OS suspend after the idle delay. This policy should only be used when screen locking should occur a significant amount of time sooner than suspend or when suspend on idle is not desired at all.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than the idle delay.",
            "example_value": 600000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 178,
            "name": "ScreenLockDelayBattery",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Idle warning delay when running on battery power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which a warning dialog is shown when running on battery power.\n\n          When this policy is set, it specifies the length of time that the user must remain idle before Google Chrome OS shows a warning dialog telling the user that the idle action is about to be taken.\n\n          When this policy is unset, no warning dialog is shown.\n\n          The policy value should be specified in milliseconds. Values are clamped to be less than or equal the idle delay.\n\n          The warning message is only shown if the idle action is to logout or shut down.",
            "example_value": 545000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 198,
            "name": "IdleWarningDelayBattery",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:27-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Idle delay when running on battery power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          Specifies the length of time without user input after which the idle action is taken when running on battery power.\n\n          When this policy is set, it specifies the length of time that the user must remain idle before Google Chrome OS takes the idle action, which can be configured separately.\n\n          When this policy is unset, a default length of time is used.\n\n          The policy value should be specified in milliseconds.",
            "example_value": 600000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 179,
            "name": "IdleDelayBattery",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Action to take when the idle delay is reached",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          This policy provides a fallback value for the more-specific IdleActionAC and IdleActionBattery policies. If this policy is set, its value gets used if the respective more-specific policy is not set.\n\n          When this policy is unset, behavior of the more-specific policies remains unaffected.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 180,
            "items": [
                {
                    "caption": "Suspend",
                    "name": "IdleActionSuspend",
                    "value": 0
                },
                {
                    "caption": "Log the user out",
                    "name": "IdleActionLogout",
                    "value": 1
                },
                {
                    "caption": "Shut down",
                    "name": "IdleActionShutdown",
                    "value": 2
                },
                {
                    "caption": "Do nothing",
                    "name": "IdleActionDoNothing",
                    "value": 3
                }
            ],
            "name": "IdleAction",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Action to take when the idle delay is reached while running on AC power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          When this policy is set, it specifies the action that Google Chrome OS takes when the user remains idle for the length of time given by the idle delay, which can be configured separately.\n\n          When this policy is unset, the default action is taken, which is suspend.\n\n          If the action is suspend, Google Chrome OS can separately be configured to either lock or not lock the screen before suspending.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 226,
            "items": [
                {
                    "caption": "Suspend",
                    "name": "IdleActionSuspend",
                    "value": 0
                },
                {
                    "caption": "Log the user out",
                    "name": "IdleActionLogout",
                    "value": 1
                },
                {
                    "caption": "Shut down",
                    "name": "IdleActionShutdown",
                    "value": 2
                },
                {
                    "caption": "Do nothing",
                    "name": "IdleActionDoNothing",
                    "value": 3
                }
            ],
            "name": "IdleActionAC",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:30-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Action to take when the idle delay is reached while running on battery power",
            "deprecated": true,
            "desc": "Note that this policy is deprecated and will be removed in Google Chrome OS version 85. Please use PowerManagementIdleSettings instead.\n\n          When this policy is set, it specifies the action that Google Chrome OS takes when the user remains idle for the length of time given by the idle delay, which can be configured separately.\n\n          When this policy is unset, the default action is taken, which is suspend.\n\n          If the action is suspend, Google Chrome OS can separately be configured to either lock or not lock the screen before suspending.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 222,
            "items": [
                {
                    "caption": "Suspend",
                    "name": "IdleActionSuspend",
                    "value": 0
                },
                {
                    "caption": "Log the user out",
                    "name": "IdleActionLogout",
                    "value": 1
                },
                {
                    "caption": "Shut down",
                    "name": "IdleActionShutdown",
                    "value": 2
                },
                {
                    "caption": "Do nothing",
                    "name": "IdleActionDoNothing",
                    "value": 3
                }
            ],
            "name": "IdleActionBattery",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:30-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Action to take when the user closes the lid",
            "desc": "Setting the policy specifies the action that Google Chrome OS takes when the user closes the device's lid.\n\n      Leaving the policy unset means the Suspend action is taken.\n\n      Note: If the action is Suspend, Google Chrome OS can separately be set up to lock or not lock the screen before suspending.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 181,
            "items": [
                {
                    "caption": "Suspend",
                    "name": "LidCloseActionSuspend",
                    "value": 0
                },
                {
                    "caption": "Log the user out",
                    "name": "LidCloseActionLogout",
                    "value": 1
                },
                {
                    "caption": "Shut down",
                    "name": "LidCloseActionShutdown",
                    "value": 2
                },
                {
                    "caption": "Do nothing",
                    "name": "LidCloseActionDoNothing",
                    "value": 3
                }
            ],
            "name": "LidCloseAction",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Specify whether audio activity affects power management",
            "desc": "Setting the policy to Enabled or leaving it unset means the user is not considered idle while audio plays. This prevents the idle timeout from being reached and the idle action from being taken. However, screen dimming, screen off, and screen lock will still occur after their configured timeouts despite audio activity.\n\n      Setting the policy to Disabled means the system can consider users idle despite audio activity.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 182,
            "name": "PowerManagementUsesAudioActivity",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "Video playing in Android apps is not taken into consideration, even if this policy is set to True.",
            "caption": "Specify whether video activity affects power management",
            "desc": "Setting the policy to Enabled or leaving it unset means the user is not considered idle while video plays. This prevents the idle delay, screen dim delay, screen off delay, and screen lock delay from being reached and the corresponding actions from being taken.\n\n      Setting the policy to Disabled means the system can consider users idle despite video activity.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 183,
            "name": "PowerManagementUsesVideoActivity",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Percentage by which to scale the idle delay in presentation mode (deprecated)",
            "deprecated": true,
            "desc": "This policy has been retired as of Google Chrome OS version 29. Please use the PresentationScreenDimDelayScale policy instead.",
            "example_value": 200,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 184,
            "name": "PresentationIdleDelayScale",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:26-28"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Percentage by which to scale the screen dim delay in presentation mode",
            "desc": "If PowerSmartDimEnabled is Disabled, then setting PresentationScreenDimDelayScale specifies the percent that the screen dim delay scales when the device is presenting. When the screen dim delay scales, the screen off, screen lock, and idle delays adjust to maintain the same distances from the screen dim delay as originally set.\n\n      Leaving the policy unset puts a default scale factor in use.\n\n      Note: The scale factor must be 100% or more.",
            "example_value": 200,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 220,
            "name": "PresentationScreenDimDelayScale",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Allow wake locks",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset allows wake locks for power management. Extensions can request wake locks through the power management extension API and ARC apps.\n\n      Setting the policy to Disabled means wake lock requests are ignored.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 491,
            "items": [
                {
                    "caption": "Allow wake locks for power management",
                    "value": true
                },
                {
                    "caption": "Ignore requests for wake locks for power management",
                    "value": false
                }
            ],
            "name": "AllowWakeLocks",
            "owners": [
                "file://chrome/browser/ash/login/demo_mode/OWNERS",
                "michaelpg@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:71-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow screen wake locks",
            "default": true,
            "desc": "Unless AllowWakeLocks is set to Disabled, setting AllowScreenWakeLocks to Enabled or leaving it unset allows screen wake locks for power management. Extensions can request screen wake locks through the power management extension API and ARC apps.\n\n      Setting the policy to Disabled demotes screen wake lock requests to system wake lock requests.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 203,
            "items": [
                {
                    "caption": "Allow screen wake locks for power management",
                    "value": true
                },
                {
                    "caption": "Demote screen wake lock requests to system wake lock requests",
                    "value": false
                }
            ],
            "name": "AllowScreenWakeLocks",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:28-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Percentage by which to scale the screen dim delay if the user becomes active after dimming",
            "desc": "If PowerSmartDimEnabled is Disabled, then setting UserActivityScreenDimDelayScale specifies the percent that the screen dim delay scales when there's user activity while the screen dims or soon after the screen turns off. When the dim delay scales, the screen off, screen lock and idle delays adjust to maintain the same distances from the screen dim delay as originally set.\n\n      Leaving the policy unset puts a default scale factor in use.\n\n      Note: The scale factor must be 100% or more.",
            "example_value": 200,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 210,
            "name": "UserActivityScreenDimDelayScale",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Wait for initial user activity",
            "desc": "Setting the policy to Enabled means that power management delays and session length limits don't start until after the first user activity occurs in a session.\n\n      Setting the policy to Disabled or leaving it unset means power management delays and the time limit begin immediately at session start.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 247,
            "name": "WaitForInitialUserActivity",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:32-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Power management settings when the user becomes idle",
            "desc": "Setting the policy controls the power management strategy when the user idles.\n\n      There are 4 actions:\n\n      * The screen dims if the user is idle for the time specified by ScreenDim.\n\n      * The screen turns off if the user is idle for the time specified by ScreenOff.\n\n      * A warning dialog appears if the user remains idle for the time specified by IdleWarning. It warns the user that the idle action will be taken and only appears if the idle action is to sign out or shut down.\n\n      * The action specified by IdleAction is taken if the user is idle for the time specified by Idle.\n\n      For each of the above actions, the delay should be specified in milliseconds and must be set to a value greater than zero to trigger the corresponding action. If the delay is set to zero, Google Chrome OS won't take the corresponding action.\n\n      For each of the above delays, when the time is unset, a default value is used.\n\n      ScreenDim values will be clamped to be less than or equal to ScreenOff. ScreenOff and IdleWarning will be clamped to be less than or equal to Idle.\n\n      IdleAction can be one of 4 actions:\n\n      * Suspend\n\n      * Logout\n\n      * Shutdown\n\n      * DoNothing\n\n      If the IdleAction is not set, Suspend is taken.\n\n      Note: There are separate settings for AC power and battery.",
            "example_value": {
                "AC": {
                    "IdleAction": "DoNothing"
                },
                "Battery": {
                    "IdleAction": "DoNothing",
                    "Delays": {
                        "ScreenDim": 10000,
                        "ScreenOff": 20000,
                        "IdleWarning": 5000,
                        "Idle": 30000
                    }
                }
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 258,
            "name": "PowerManagementIdleSettings",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "properties": {
                    "AC": {
                        "description": "Delays and actions to take when the device is idle and running on AC power",
                        "id": "PowerManagementDelays",
                        "properties": {
                            "Delays": {
                                "properties": {
                                    "Idle": {
                                        "description": "The length of time without user input after which the idle action is taken, in milliseconds",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "IdleWarning": {
                                        "description": "The length of time without user input after which a warning dialog is shown, in milliseconds",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "ScreenDim": {
                                        "description": "The length of time without user input after which the screen is dimmed, in milliseconds",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "ScreenOff": {
                                        "description": "The length of time without user input after which the screen is turned off, in milliseconds",
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "IdleAction": {
                                "description": "Action to take when the idle delay is reached",
                                "enum": [
                                    "Suspend",
                                    "Logout",
                                    "Shutdown",
                                    "DoNothing"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Battery": {
                        "$ref": "PowerManagementDelays",
                        "description": "Delays and actions to take when the device is idle and running on battery"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:35-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Screen lock delays",
            "desc": "Setting the policy specifies the length of time in milliseconds without user input after which the screen locks when running on AC power or battery. Values are clamped to be less than the idle delay in PowerManagementIdleSettings.\n\n      When set to zero, Google Chrome OS doesn't lock the screen when the user becomes idle. If unset, a default time is used.\n\n      Recommendation: Lock the screen on idle by turning on screen locking on suspend and have Google Chrome OS suspend after the idle delay. Only use this policy when screen locking should occur a significant amount of time sooner than suspend or when you don't want suspend on idle.",
            "example_value": {
                "AC": 600000,
                "Battery": 300000
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 259,
            "name": "ScreenLockDelays",
            "owners": [
                "reinauer@google.com",
                "chromeos-power@google.com"
            ],
            "schema": {
                "properties": {
                    "AC": {
                        "description": "The length of time without user input after which the screen is locked when running on AC power, in milliseconds",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "Battery": {
                        "description": "The length of time without user input after which the screen is locked when running on battery, in milliseconds",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:35-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Power management on the login screen",
            "desc": "Setting the policy lets you set how Google Chrome OS behaves when there is no user activity for some amount of time while the sign-in screen appears. The policy controls multiple settings. For their individual semantics and value ranges, see the corresponding policies that control power management within a session.\n\n      The deviations from these policies are:\n\n      * The actions to take on idle or lid close cannot be to end the session.\n\n      * The default action taken on idle when running on AC power is to shut down.\n\n      Leaving the policy or any of its settings unset results in the use of the default values for the various power settings.",
            "device_only": true,
            "example_value": {
                "AC": {
                    "IdleAction": "DoNothing"
                },
                "Battery": {
                    "IdleAction": "DoNothing",
                    "Delays": {
                        "ScreenDim": 10000,
                        "ScreenOff": 20000,
                        "Idle": 30000
                    }
                },
                "LidCloseAction": "Suspend",
                "UserActivityScreenDimDelayScale": 110
            },
            "features": {
                "dynamic_refresh": true
            },
            "id": 225,
            "name": "DeviceLoginScreenPowerManagement",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "properties": {
                    "AC": {
                        "description": "Power management settings applicable only when running on AC power",
                        "id": "DeviceLoginScreenPowerSettings",
                        "properties": {
                            "Delays": {
                                "properties": {
                                    "Idle": {
                                        "description": "The length of time without user input after which the idle action is taken, in milliseconds",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "ScreenDim": {
                                        "description": "The length of time without user input after which the screen is dimmed, in milliseconds",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "ScreenOff": {
                                        "description": "The length of time without user input after which the screen is turned off, in milliseconds",
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "IdleAction": {
                                "description": "Action to take when the idle delay is reached",
                                "enum": [
                                    "Suspend",
                                    "Shutdown",
                                    "DoNothing"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Battery": {
                        "$ref": "DeviceLoginScreenPowerSettings",
                        "description": "Power management settings applicable only when running on battery power"
                    },
                    "LidCloseAction": {
                        "description": "Action to take when the lid is closed",
                        "enum": [
                            "Suspend",
                            "Shutdown",
                            "DoNothing"
                        ],
                        "type": "string"
                    },
                    "UserActivityScreenDimDelayScale": {
                        "description": "Percentage by which the screen dim delay is scaled when user activity is observed while the screen is dimmed or soon after the screen has been turned off",
                        "minimum": 100,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:30-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow users to redeem offers through Chrome OS Registration",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset lets enterprise device users redeem offers through Google Chrome OS Registration.\n\n      Setting the policy to Disabled means users can't redeem these offers.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 185,
            "items": [
                {
                    "caption": "Allow users to redeem offers through Chrome OS Registration",
                    "value": true
                },
                {
                    "caption": "Prevent users from redeeming offers through Chrome OS Registration",
                    "value": false
                }
            ],
            "name": "DeviceAllowRedeemChromeOsRegistrationOffers",
            "owners": [
                "oscarpan@google.com",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the Terms of Service for a device-local account",
            "desc": "Setting the policy means Google Chrome OS downloads the Terms of Service and presents them to users whenever a device-local account session starts. Users can only sign in to the session after accepting the Terms of Service.\n\n      Leaving the policy unset means no Terms of Service appear.\n\n      The policy should be set to a URL from which Google Chrome OS can download the Terms of Service. The Terms of Service must be plain text, served as MIME type text/plain. No markup is allowed.",
            "example_value": "https://www.example.com/terms_of_service.txt",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 186,
            "name": "TermsOfServiceURL",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:26-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Show accessibility options in system tray menu",
            "desc": "Setting the policy to True displays the accessibility options in the system tray menu. If you set the policy to False, the options don't appear in the menu.\n\n      If you set the policy, users can't change it. If not set, accessibility options don't appear in the menu, but users can make them appear through the Settings page.\n\n      If you turn on accessibility features by other means (for example, by key combination), accessibility options always appear in the system tray menu.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 188,
            "name": "ShowAccessibilityOptionsInSystemTrayMenu",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:27-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show accessibility options in system tray menu in the login screen",
            "desc": "Setting the policy to True displays the accessibility options in the system tray menu. If you set the policy to False, the options don't appear in the menu.\n\n      If you set the policy, users can't change it. If not set, accessibility options don't appear in the menu, but users can make them appear through the Settings page.\n\n      If you turn on accessibility features by other means (for example, by key combination), accessibility options always appear in the system tray menu.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 646,
            "name": "DeviceLoginScreenShowOptionsInSystemTrayMenu",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable large cursor",
            "desc": "Setting the policy to True keeps the large cursor on. Setting the policy to False keeps the large cursor off.\n\n      If you set the policy, users can't change the feature. If not set, the large cursor is off at first, but users can turn it on any time.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 211,
            "name": "LargeCursorEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable spoken feedback",
            "desc": "Setting the policy to True keeps spoken feedback on. Setting the policy to False keeps spoken feedback off.\n\n       If you set the policy, users can't change it. If not set, spoken feedback is off at first, but users can turn it on any time.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 212,
            "name": "SpokenFeedbackEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable high contrast mode",
            "desc": "Setting the policy to True keeps High-contrast mode on. Setting the policy to False keeps High-contrast mode off.\n\n      If you set the policy, users can't change it. If not set, High-contrast mode is off, but users can turn it on any time.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 213,
            "name": "HighContrastEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable accessibility features shortcuts on the login screen",
            "desc": "Enable accessibility features shortcuts on the login screen.\n\n          If this policy is set to true, accessibility features shortcuts will always be enabled on the login screen.\n\n          If this policy is set to false, accessibility features shortcuts will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, accessibility features shortcuts will be enabled by default on the login screen.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 661,
            "name": "DeviceLoginScreenAccessibilityShortcutsEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable accessibility features shortcuts",
            "desc": "Enable accessibility features shortcuts.\n\n          If this policy is set to true, accessibility features shortcuts will always be enabled.\n\n          If this policy is set to false, accessibility features shortcuts will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, accessibility features shortcuts will be enabled by default.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 659,
            "name": "AccessibilityShortcutsEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable on-screen keyboard",
            "desc": "Setting the policy to True keeps the on-screen keyboard on. Setting the policy to False keeps the on-screen keyboard off.\n\n      If you set the policy, users can't change it. If not set, the on-screen keyboard is off at first, but users can turn it on any time.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 255,
            "name": "VirtualKeyboardEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:34-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable or disable various features on the on-screen keyboard",
            "desc": "Enable or disable various features on the on-screen keyboard. This policy takes effect only when \"VirtualKeyboardEnabled\" policy is enabled.\n\n      If one feature in this policy is set to True, it will be enabled on the on-screen keyboard.\n\n      If one feature in this policy is set to False or left unset, it will be disabled on the on-screen keyboard.\n\n      NOTE: this policy is only supported in PWA Kiosk mode.",
            "example_value": {
                "auto_complete_enabled": true,
                "auto_correct_enabled": true,
                "handwriting_enabled": false,
                "spell_check_enabled": false,
                "voice_input_enabled": false
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 717,
            "name": "VirtualKeyboardFeatures",
            "owners": [
                "anqing@chromium.org"
            ],
            "schema": {
                "properties": {
                    "auto_complete_enabled": {
                        "description": "A boolean flag indicating if the on-screen keyboard can provide auto-complete.",
                        "type": "boolean"
                    },
                    "auto_correct_enabled": {
                        "description": "A boolean flag indicating if the on-screen keyboard can provide auto-correct.",
                        "type": "boolean"
                    },
                    "handwriting_enabled": {
                        "description": "A boolean flag indicating if the on-screen keyboard can provide input via handwriting recognition.",
                        "type": "boolean"
                    },
                    "spell_check_enabled": {
                        "description": "A boolean flag indicating if the on-screen keyboard can provide spell-check.",
                        "type": "boolean"
                    },
                    "voice_input_enabled": {
                        "description": "A boolean flag indicating if the on-screen keyboard can provide voice input.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable sticky keys",
            "desc": "Setting the policy to True keeps sticky keys on. Setting the policy to False keeps sticky keys off.\n\n      If you set the policy, users can't change it. If not set, sticky keys is off at first, but users can turn it on any time.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 561,
            "name": "StickyKeysEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:76-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable select to speak",
            "desc": "Enable the select to speak accessibility feature.\n\n          If this policy is set to true, the select to speak will always be enabled.\n\n          If this policy is set to false, the select to speak will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the select to speak is disabled initially but can be enabled by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 573,
            "name": "SelectToSpeakEnabled",
            "owners": [
                "amraboelkher@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:77-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the dictation accessibility feature",
            "desc": "Enable the dictation accessibility feature.\n\n          If this policy is set to enabled, the dictation will always be enabled.\n\n          If this policy is set to disabled, the dictation will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the dictation is disabled initially but can be enabled by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 592,
            "name": "DictationEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the keyboard focus highlighting accessibility feature",
            "desc": "Enable the keyboard focus highlighting accessibility feature.\n\n          This feature is responsible for highlighting the object that has the focus by the keyboard.\n\n          If this policy is set to enabled, the keyboard focus highlighting will always be enabled.\n\n          If this policy is set to disabled, the keyboard focus highlighting will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the keyboard focus highlighting is disabled initially but can be enabled by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 593,
            "name": "KeyboardFocusHighlightEnabled",
            "owners": [
                "amraboelkher@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the cursor highlight accessibility feature",
            "desc": "Enable the cursor highlight accessibility feature.\n\n          This feature is responsible for highlighting the area that surrounds the mouse cursor while moving it.\n\n          If this policy is set to enabled, the cursor highlight will always be enabled.\n\n          If this policy is set to disabled, the cursor highlight will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the cursor highlight is disabled initially but can be enabled by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 594,
            "name": "CursorHighlightEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the caret highlight accessibility feature",
            "desc": "Enable the caret highlight accessibility feature.\n\n          This feature is responsible for highlighting the area that surrounds the caret while editing.\n\n          If this policy is set to enabled, the caret highlight will always be enabled.\n\n          If this policy is set to disabled, the caret highlight will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the caret highlight is disabled initially but can be enabled by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 595,
            "name": "CaretHighlightEnabled",
            "owners": [
                "amraboelkher@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the mono audio accessibility feature",
            "desc": "Enable the mono audio accessibility feature.\n\n          This feature is responsible for outputing stereo audio which includes different left and right channels, so different ears get different sounds.\n\n          If this policy is set to enabled, the mono audio will always be enabled.\n\n          If this policy is set to disabled, the mono audio will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the mono audio is disabled initially but can be enabled by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 596,
            "name": "MonoAudioEnabled",
            "owners": [
                "amraboelkher@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the autoclick accessibility feature",
            "desc": "Enable the autoclick accessibility feature.\n\n          This feature is responsible to click without physically pressing your mouse or touchpad, hover over the object you'd like to click.\n\n          If this policy is set to enabled, the autoclick will always be enabled.\n\n          If this policy is set to disabled, the autoclick will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the autoclick is disabled initially but can be enabled by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 597,
            "name": "AutoclickEnabled",
            "owners": [
                "amraboelkher@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Media keys default to function keys",
            "desc": "Setting the policy to True makes the top row of keys on the keyboard act as function key commands. Pressing the Search key changes their behavior back to media keys.\n\n      If set to False or not set, the keyboard defaults to producing media key commands. Pressing the Search key changes them to function keys.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 260,
            "name": "KeyboardDefaultToFunctionKeys",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:35-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set screen magnifier type",
            "desc": "Setting the policy to None turns the screen magnifier off.\n\n      If you set the policy, users can't change it. If not set, the screen magnifier is off at first, but users can turn it on any time.",
            "example_value": 1,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 214,
            "items": [
                {
                    "caption": "Screen magnifier disabled",
                    "name": "None",
                    "value": 0
                },
                {
                    "caption": "Full-screen magnifier enabled",
                    "name": "Full-screen",
                    "value": 1
                },
                {
                    "caption": "Docked magnifier enabled",
                    "name": "Docked",
                    "value": 2
                }
            ],
            "name": "ScreenMagnifierType",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Set default state of the large cursor on the login screen",
            "desc": "Setting the policy to True turns the large cursor on at the sign-in screen. Setting the policy to False turns the large cursor off at the sign-in screen.\n\n      If you set the policy, users can temporarily turn the large cursor on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.\n\n      If not set, the large cursor is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.\n\n          Note: DeviceLoginScreenLargeCursorEnabled overrides this policy if the former is specified.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 215,
            "name": "DeviceLoginScreenDefaultLargeCursorEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the large cursor on the login screen",
            "desc": "Enable the large cursor accessibility feature on the login screen.\n\n          If this policy is set to true, the large cursor will always be enabled on the login screen.\n\n          If this policy is set to false, the large cursor will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the large cursor is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 599,
            "name": "DeviceLoginScreenLargeCursorEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the default state of spoken feedback on the login screen",
            "desc": "Setting the policy to True turns spoken feedback on at the sign-in screen. Setting the policy to False turns spoken feedback off at the screen.\n\n      If you set the policy, users can temporarily turn spoken feedback on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.\n\n      If not set, spoken feedback is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.\n\n          Note: DeviceLoginScreenSpokenFeedbackEnabled overrides this policy if the former is specified.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 216,
            "name": "DeviceLoginScreenDefaultSpokenFeedbackEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the spoken feedback on the login screen",
            "desc": "Enable the spoken feedback accessibility feature on the login screen.\n\n          If this policy is set to true, the spoken feedback will always be enabled on the login screen.\n\n          If this policy is set to false, the spoken feedback will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the spoken feedback is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 605,
            "name": "DeviceLoginScreenSpokenFeedbackEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the default state of high contrast mode on the login screen",
            "desc": "Setting the policy to True turns High-contrast mode on at the sign-in screen. Setting the policy to False turns High-contrast mode off at the screen.\n\n      If you set the policy, users can temporarily change High-contrast mode, turning it on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.\n\n      If not set, High-contrast mode is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.\n\n          Note: DeviceLoginScreenHighContrastEnabled overrides this policy if the former is specified.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 217,
            "name": "DeviceLoginScreenDefaultHighContrastEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the high contrast on the login screen",
            "desc": "Enable the high contrast accessibility feature on the login screen.\n\n          If this policy is set to true, the high contrast will always be enabled on the login screen.\n\n          If this policy is set to false, the high contrast will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the high contrast is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 606,
            "name": "DeviceLoginScreenHighContrastEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set default state of the on-screen keyboard on the login screen",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the DeviceLoginScreenVirtualKeyboardEnabled policy instead.\n\n      Setting the policy to True turns the on-screen keyboard on at sign-in. Setting the policy to False turns the on-screen keyboard off at sign-in.\n\n      If you set the policy, users can temporarily turn the on-screen keyboard on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.\n\n      If not set, the on-screen keyboard is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.\n\n      Note: DeviceLoginScreenVirtualKeyboardEnabled overrides this policy if the former is specified.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 256,
            "name": "DeviceLoginScreenDefaultVirtualKeyboardEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:34-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the virtual keyboard on the login screen",
            "desc": "Enable the virtual keyboard accessibility feature on the login screen.\n\n          If this policy is set to true, the virtual keyboard will always be enabled on the login screen.\n\n          If this policy is set to false, the virtual keyboard will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the virtual keyboard is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 607,
            "name": "DeviceLoginScreenVirtualKeyboardEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Switch the primary mouse button to the right button",
            "desc": "Switch the primary mouse button to the right button.\n\n          If this policy is set to enabled, the right button of the mouse will always be the primary key.\n\n          If this policy is set to disabled, the left button of the mouse will always be the primary key.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the left button of the mouse will be the primary key initially, but can be switched by the user anytime.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 655,
            "name": "PrimaryMouseButtonSwitch",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Switch the primary mouse button to the right button on the login screen",
            "desc": "Switch the primary mouse button to the right button on the login screen.\n\n          If this policy is set to enabled, the right button of the mouse will always be the primary key on the login screen.\n\n          If this policy is set to disabled, the left button of the mouse will always be the primary key on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the left button of the mouse will be the primary key on the login screen initially, but can be switched by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 657,
            "name": "DeviceLoginScreenPrimaryMouseButtonSwitch",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:81-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the Shared Clipboard Feature",
            "desc": "Enable the Shared Clipboard feature which allows users to send text between Chrome Desktops and an Android device when Sync is enabled and the user is Signed-in.\n\n          If this policy is set to true, the capability of sending text, cross device, for chrome user is enabled.\n\n          If this policy is set to false, the capability of sending text, cross device, for chrome user is disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the shared clipboard feature is enabled by default.\n\n          It is up to the admins to set policies in all platforms they care about. It's recommended to set this policy to one value in all platforms.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 610,
            "name": "SharedClipboardEnabled",
            "owners": [
                "mvanouwerkerk@chromium.org",
                "yasmo@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-",
                "android:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the default screen magnifier type enabled on the login screen",
            "desc": "Setting the policy to None turns screen magnification off at the sign-in screen.\n\n       If you set the policy, users can temporarily turn the screen magnifier on or off. When the sign-in screen reloads or stays idle for a minute, it reverts to its original state.\n\n      If not set, the screen magnifier is off at the sign-in screen. Users can turn it on any time, and its status on the sign-in screen persists across users.\n\n       Valid values: \u2022 0 = Off \u2022 1 = On \u2022 2 = Docked magnifier on\n\n          Note: DeviceLoginScreenScreenMagnifierType overrides this policy if the former is specified.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true
            },
            "id": 218,
            "items": [
                {
                    "caption": "Screen magnifier disabled",
                    "name": "None",
                    "value": 0
                },
                {
                    "caption": "Full-screen magnifier enabled",
                    "name": "Full-screen",
                    "value": 1
                },
                {
                    "caption": "Docked magnifier enabled",
                    "name": "Docked",
                    "value": 2
                }
            ],
            "name": "DeviceLoginScreenDefaultScreenMagnifierType",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Set the screen magnifier type on the login screen",
            "desc": "If this policy is set, it controls the type of screen magnifier that is enabled.\n\n          If this policy is set to \"Full-screen\", the screen magnifier will always be enabled in full-screen magnifier mode on the login screen.\n\n          If this policy is set to \"Docked\", the screen magnifier will always be enabled in docked magnifier mode on the login screen.\n\n          If this policy is set to \"None\", the screen magnifier will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the dictation is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 628,
            "items": [
                {
                    "caption": "Screen magnifier disabled",
                    "name": "None",
                    "value": 0
                },
                {
                    "caption": "Full-screen magnifier enabled",
                    "name": "Full-screen",
                    "value": 1
                },
                {
                    "caption": "Docked magnifier enabled",
                    "name": "Docked",
                    "value": 2
                }
            ],
            "name": "DeviceLoginScreenScreenMagnifierType",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Enable the dictation on the login screen",
            "desc": "Enable the dictation accessibility feature on the login screen.\n\n          If this policy is set to true, the dictation will always be enabled on the login screen.\n\n          If this policy is set to false, the dictation will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the dictation is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 611,
            "name": "DeviceLoginScreenDictationEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the select to speak on the login screen",
            "desc": "Enable the select to speak accessibility feature on the login screen.\n\n          If this policy is set to true, the select to speak will always be enabled on the login screen.\n\n          If this policy is set to false, the select to speak will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the select to speak is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 612,
            "name": "DeviceLoginScreenSelectToSpeakEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the cursor highlight on the login screen",
            "desc": "Enable the cursor highlight accessibility feature on the login screen.\n\n          If this policy is set to true, the cursor highlight will always be enabled on the login screen.\n\n          If this policy is set to false, the cursor highlight will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the cursor highlight is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 613,
            "name": "DeviceLoginScreenCursorHighlightEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the caret highlight on the login screen",
            "desc": "Enable the caret highlight accessibility feature on the login screen.\n\n          If this policy is set to true, the caret highlight will always be enabled on the login screen.\n\n          If this policy is set to false, the caret highlight will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the caret highlight is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 614,
            "name": "DeviceLoginScreenCaretHighlightEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the mono audio on the login screen",
            "desc": "Enable the mono audio accessibility feature on the login screen.\n\n          This feature allows to switch the device mode from the default stereo audio to the mono audio.\n\n          If this policy is set to true, the mono audio will always be enabled on the login screen.\n\n          If this policy is set to false, the mono audio will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the mono audio is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 615,
            "name": "DeviceLoginScreenMonoAudioEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the autoclick on the login screen",
            "desc": "Enable the autoclick accessibility feature on the login screen.\n\n          This feature allows to automatically click when the mouse cursor stops, without requiring the user to physically press the mouse or touchpad buttons.\n\n          If this policy is set to true, the autoclick will always be enabled on the login screen.\n\n          If this policy is set to false, the autoclick will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the autoclick is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 617,
            "name": "DeviceLoginScreenAutoclickEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the sticky keys on the login screen",
            "desc": "Enable the sticky keys accessibility feature on the login screen.\n\n          If this policy is set to true, the sticky keys will always be enabled on the login screen.\n\n          If this policy is set to false, the sticky keys will always be disabled on the login screen.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the sticky keys is disabled on the login screen initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 618,
            "name": "DeviceLoginScreenStickyKeysEnabled",
            "owners": [
                "amraboelkher@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the keyboard focus highlighting accessibility feature",
            "desc": "Enable the keyboard focus highlighting accessibility feature on the login screen.\n\n          This feature is responsible for highlighting the object that is focused by the keyboard.\n\n          If this policy is set to enabled, the keyboard focus highlighting will always be enabled.\n\n          If this policy is set to disabled, the keyboard focus highlighting will always be disabled.\n\n          If you set this policy, users cannot change or override it.\n\n          If this policy is left unset, the keyboard focus highlighting is disabled initially but can be enabled by the user anytime.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true
            },
            "id": 619,
            "name": "DeviceLoginScreenKeyboardFocusHighlightEnabled",
            "owners": [
                "amraboelkher@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Hide the web store from the New Tab Page and app launcher",
            "desc": "Hide the Chrome Web Store app and footer link from the New Tab Page and Google Chrome OS app launcher.\n\n      When this policy is set to true, the icons are hidden.\n\n      When this policy is set to false or is not configured, the icons are visible.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 189,
            "name": "HideWebStoreIcon",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:26-",
                "chrome_os:68-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "System wide flags to be applied on Google Chrome start-up",
            "deprecated": true,
            "desc": "This policy is deprecated and removed in M66, because it was used only for internal testing and it is a security liability.\n\n      Specifies the flags that should be applied to Google Chrome when it starts. The specified flags are applied on the login screen only. Flags set via this policy do not propagate into user sessions.",
            "device_only": true,
            "example_value": [
                "enable-managed-mode",
                "my-cool-flag"
            ],
            "features": {
                "dynamic_refresh": false
            },
            "id": 191,
            "name": "DeviceStartUpFlags",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:27-65"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Limit device uptime by automatically rebooting",
            "desc": "Setting the policy limits the device uptime by scheduling automatic restarts, which you can delay by up to 24 hours if a user is on the device. The policy value should be specified in seconds. Values are clamped to be at least 3,600 (one hour).\n\n      If you set the policy, users can't change it. If not set, the device uptime isn't limited.\n\n      Note: Automatic restarts are only on while the sign-in screen appears or during a kiosk app session.",
            "device_only": true,
            "example_value": 86400,
            "features": {
                "dynamic_refresh": true
            },
            "id": 192,
            "name": "UptimeLimit",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Automatically reboot after update",
            "desc": "Schedule an automatic reboot after a Google Chrome OS update has been applied.\n\n      When this policy is set to true, an automatic reboot is scheduled when a Google Chrome OS update has been applied and a reboot is required to complete the update process. The reboot is scheduled immediately but may be delayed on the device by up to 24 hours if a user is currently using the device.\n\n      When this policy is set to false, no automatic reboot is scheduled after applying a Google Chrome OS update. The update process is completed when the user next reboots the device.\n\n      If you set this policy, users cannot change or override it.\n\n      Note: Currently, automatic reboots are only enabled while the login screen is being shown or a kiosk app session is in progress. This will change in the future and the policy will always apply, regardless of whether a session of any particular type is in progress or not.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 193,
            "name": "RebootAfterUpdate",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:29-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the restriction on the fetching of the Variations seed",
            "desc": "Add a parameter to the fetching of the Variations seed in Google Chrome.\n\n      If specified, will add a query parameter called 'restrict' to the URL used to fetch the Variations seed. The value of the parameter will be the value specified in this policy.\n\n      If not specified, will not modify the Variations seed URL.",
            "example_value": "restricted",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "internal_only": true
            },
            "id": 196,
            "name": "VariationsRestrictParameter",
            "owners": [
                "file://components/variations/OWNERS",
                "mpearson@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:27-",
                "android:34-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Set the restriction on the fetching of the Variations seed",
            "desc": "Add a parameter to the fetching of the Variations seed in Google Chrome OS.\n\n      If specified, will add a query parameter called 'restrict' to the URL used to fetch the Variations seed. The value of the parameter will be the value specified in this policy.\n\n      If not specified, will not modify the Variations seed URL.",
            "device_only": true,
            "example_value": "restricted",
            "features": {
                "dynamic_refresh": false,
                "internal_only": true
            },
            "id": 199,
            "name": "DeviceVariationsRestrictParameter",
            "owners": [
                "file://components/variations/OWNERS",
                "rkaplow@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:28-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Determine the availability of variations",
            "desc": "Configuring this policy allows to specify which variations are allowed to be applied in Google Chrome.\n\n      Variations provide a means for offering modifications to Google Chrome without shipping a new version of the browser by selectively enabling or disabling already existing features. See https://support.google.com/chrome/a?p=Manage_the_Chrome_variations_framework for more information.\n\n      Setting the VariationsEnabled (value 0), or leaving the policy not set allows all variations to be applied to the browser.\n\n      Setting the CriticalFixesOnly (value 1), allows only variations considered critical security or stability fixes to be applied to Google Chrome.\n\n      Setting the VariationsDisabled (value 2), prevent all variations from being applied to the browser. Please note that this mode can potentially prevent the Google Chrome developers from providing critical security fixes in a timely manner and is thus not recommended.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 663,
            "items": [
                {
                    "caption": "Enable all variations",
                    "name": "VariationsEnabled",
                    "value": 0
                },
                {
                    "caption": "Enable variations concerning critical fixes only",
                    "name": "CriticalFixesOnly",
                    "value": 1
                },
                {
                    "caption": "Disable all variations",
                    "name": "VariationsDisabled",
                    "value": 2
                }
            ],
            "name": "ChromeVariations",
            "owners": [
                "pastarmovj@chromium.org",
                "asvitkine@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:83-",
                "ios:88-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Determine the availability of variations on Google Chrome OS",
            "desc": "Configuring this policy allows to specify which variations are allowed to be applied on an enterprise-managed Google Chrome OS device.\n\n      Variations provide a means for offering modifications to Google Chrome OS without shipping a new version  by selectively enabling or disabling already existing features. See https://support.google.com/chrome/a?p=Manage_the_Chrome_variations_framework for more information.\n\n      Setting the VariationsEnabled (value 0), or leaving the policy not set allows all variations to be applied to Google Chrome OS.\n\n      Setting the CriticalFixesOnly (value 1), allows only variations considered critical security or stability fixes to be applied to Google Chrome OS.\n\n      Setting the VariationsDisabled (value 2), will prevent all variations from being applied to the browser on the login screen. Please note that this mode can potentially prevent the Google Chrome OS developers from providing critical security fixes in a timely manner and is thus not recommended.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 674,
            "items": [
                {
                    "caption": "Enable all variations",
                    "name": "VariationsEnabled",
                    "value": 0
                },
                {
                    "caption": "Enable variations concerning critical fixes only",
                    "name": "CriticalFixesOnly",
                    "value": 1
                },
                {
                    "caption": "Disable all variations",
                    "name": "VariationsDisabled",
                    "value": 2
                }
            ],
            "name": "DeviceChromeVariations",
            "owners": [
                "pastarmovj@chromium.org",
                "asvitkine@chromium.org",
                "amraboelkher@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Enable remote attestation for the device",
            "desc": "Setting the policy to Enabled allows remote attestation for the device. A certificate is automatically generated and uploaded to the Device Management Server.\n\n      Setting the policy to Disabled or leaving it unset means no certificate is generated and calls to the Enterprise Platform Keys API fail.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 207,
            "name": "AttestationEnabledForDevice",
            "owners": [
                "emaxx@chromium.org",
                "file://chrome/browser/ash/attestation/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:28-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable remote attestation for the user",
            "desc": "Setting the policy to Enabled lets users use the hardware on Google Chrome OS devices to remotely attest its identity to the privacy CA through the Enterprise Platform Keys API using chrome.enterprise.platformKeys.challengeUserKey().\n\n      Setting the policy to Disabled or leaving it unset has calls to the API fail with an error code.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 200,
            "name": "AttestationEnabledForUser",
            "owners": [
                "emaxx@chromium.org",
                "file://chrome/browser/ash/attestation/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:28-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Extensions allowed to to use the remote attestation API",
            "desc": "Setting the policy specifies the allowed extensions to use the Enterprise Platform Keys API functions for remote attestation. Extensions must be on this list to use the API.\n\n      If an extension is not in the list, or the list is not set, the call to the API fails with an error code.",
            "example_value": [
                "ghdilpkmfbfdnomkmaiogjhjnggaggoi"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 785,
            "name": "AttestationExtensionAllowlist",
            "owners": [
                "emaxx@chromium.org",
                "file://chrome/browser/extensions/api/enterprise_platform_keys/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Extensions allowed to to use the remote attestation API",
            "deprecated": true,
            "desc": "This policy is deprecated, please use AttestationExtensionAllowlist instead.\n\n      Setting the policy specifies the allowed extensions to use the Enterprise Platform Keys API function chrome.enterprise.platformKeys.challengeUserKey() for remote attestation. Extensions must be on this list to use the API.\n\n      If an extension is not in the list, or the list is not set, the call to the API fails with an error code.",
            "example_value": [
                "ghdilpkmfbfdnomkmaiogjhjnggaggoi"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 201,
            "name": "AttestationExtensionWhitelist",
            "owners": [
                "emaxx@chromium.org",
                "file://chrome/browser/extensions/api/enterprise_platform_keys/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:28-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable the use of remote attestation for content protection for the device",
            "desc": "Setting the policy to Enabled or leaving it unset lets Google Chrome OS devices use remote attestation (Verified Access) to get a certificate issued by the Google Chrome OS CA that asserts the device is eligible to play protected content. This process involves sending hardware endorsement information to the Google Chrome OS CA which uniquely identifies the device.\n\n      Setting the policy to Disabled means the device won't use remote attestation for content protection, and the device may not play protected content.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 239,
            "name": "AttestationForContentProtectionEnabled",
            "owners": [
                "emaxx@chromium.org",
                "file://chrome/browser/ash/attestation/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:31-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Suppress the Google Chrome Frame turndown prompt",
            "deprecated": true,
            "desc": "Suppresses the turndown prompt that appears when a site is rendered by Google Chrome Frame.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false
            },
            "id": 221,
            "name": "SuppressChromeFrameTurndownPrompt",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_frame:29-32"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable supervised users",
            "default_for_managed_devices_doc_only": false,
            "deprecated": true,
            "desc": "If set to true, supervised users can be created and used.\n\n          If set to false or not configured, supervised-user creation and login will be disabled. All existing supervised users will be hidden.\n\n          NOTE: The default behavior for consumer and enterprise devices differs: on consumer devices supervised users are enabled by default, but on enterprise devices they are disabled by default.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": false
            },
            "id": 219,
            "name": "SupervisedUsersEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:29-70"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable creation of supervised users",
            "deprecated": true,
            "desc": "If set to false, supervised-user creation by this user will be disabled. Any existing supervised users will still be available.\n\n          If set to true or not configured, supervised users can be created and managed by this user.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 223,
            "name": "SupervisedUserCreationEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:29-70"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the supervised user content provider",
            "deprecated": true,
            "desc": "If true and the user is a supervised user then other Android apps can query the user's web restrictions through a content provider.\n\n          If false or unset then the content provider returns no information.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 312,
            "name": "SupervisedUserContentProviderEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:49-70"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Managed Bookmarks",
            "desc": "Setting the policy sets up a list of bookmarks where each one is a dictionary with the keys \"name\" and \"url\". These keys hold the bookmark's name and target. Admins can set up a subfolder by defining a bookmark without a \"url\" key, but with an additional \"children\" key. This key also has a list of bookmarks, some of which can also be folders. Chrome amends incomplete URLs as if they were submitted through the address bar. For example, \"google.com\" becomes \"https://google.com/\".\n\n      Users can't change the folders the bookmarks are placed in (though they can hide it from the bookmark bar). The default folder name for managed bookmarks is \"Managed bookmarks\" but it can be changed by adding a new sub-dictionary to the policy with a single key named \"toplevel_name\" with the desired folder name as its value. Managed bookmarks are not synced to the user account and extensions can't modify them.",
            "example_value": [
                {
                    "toplevel_name": "My managed bookmarks folder"
                },
                {
                    "name": "Google",
                    "url": "google.com"
                },
                {
                    "name": "Youtube",
                    "url": "youtube.com"
                },
                {
                    "name": "Chrome links",
                    "children": [
                        {
                            "name": "Chromium",
                            "url": "chromium.org"
                        },
                        {
                            "name": "Chromium Developers",
                            "url": "dev.chromium.org"
                        }
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 227,
            "name": "ManagedBookmarks",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "items": {
                    "id": "BookmarkType",
                    "properties": {
                        "children": {
                            "items": {
                                "$ref": "BookmarkType"
                            },
                            "type": "array"
                        },
                        "name": {
                            "type": "string"
                        },
                        "toplevel_name": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "android:30-",
                "chrome.*:37-",
                "chrome_os:37-",
                "ios:88-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable the data compression proxy feature",
            "desc": "Setting the policy to Enabled allows the data compression proxy. Setting the policy to Disabled disallows the proxy.\n\n      If you set the policy, users can't change it. If unset, users can choose to use the feature.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 241,
            "name": "DataCompressionProxyEnabled",
            "owners": [
                "bolian@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:31-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "User avatar image",
            "desc": "This policy allows you to configure the avatar image representing the user on the login screen. The policy is set by specifying the URL from which Google Chrome OS can download the avatar image and a cryptographic hash used to verify the integrity of the download. The image must be in JPEG format, its size must not exceed 512kB. The URL must be accessible without any authentication.\n\n      The avatar image is downloaded and cached. It will be re-downloaded whenever the URL or the hash changes.\n\n      If this policy is set, Google Chrome OS will download and use the avatar image.\n\n      If you set this policy, users cannot change or override it.\n\n      If the policy is left not set, the user can choose the avatar image representing them on the login screen.",
            "example_value": {
                "url": "https://example.com/avatar.jpg",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 249,
            "max_size": 524288,
            "name": "UserAvatarImage",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the avatar image.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL from which the avatar image can be downloaded.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:34-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Wallpaper image",
            "desc": "If you set the policy, Google Chrome OS\n\n      downloads and uses the wallpaper image you set for the user's desktop and sign-in screen background, and users can't change it. Specify the URL (that's accessible without authentication) which Google Chrome OS\n\n      can download the wallpaper image from, as well as a cryptographic hash (in JPEG format with a file size up to 16 MB) to verify its integrity.\n\n      If not set, users choose the image for the desktop and sign-in screen background.",
            "example_value": {
                "url": "https://example.com/wallpaper.jpg",
                "hash": "baddecafbaddecafbaddecafbaddecafbaddecafbaddecafbaddecafbaddecaf"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 262,
            "max_size": 16777216,
            "name": "WallpaperImage",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the wallpaper image.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL from which the wallpaper image can be downloaded.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:35-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Enable deprecated web platform features for a limited time",
            "deprecated": true,
            "desc": "Specify a list of deprecated web platform features to re-enable temporarily.\n\n      This policy gives administrators the ability to re-enable deprecated web platform features for a limited time. Features are identified by a string tag and the features corresponding to the tags included in the list specified by this policy will get re-enabled.\n\n      If this policy is left not set, or the list is empty or does not match one of the supported string tags, all deprecated web platform features will remain disabled.\n\n      While the policy itself is supported on the above platforms, the feature it is enabling may be available on fewer platforms. Not all deprecated Web Platform features can be re-enabled. Only the ones explicitly listed below can be for a limited period of time, which is different per feature. The general format of the string tag will be [DeprecatedFeatureName]_EffectiveUntil[yyyymmdd]. As reference, you can find the intent behind the Web Platform feature changes at https://bit.ly/blinkintents.\n      ",
            "example_value": [
                "ExampleDeprecatedFeature_EffectiveUntil20080902"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 270,
            "items": [
                {
                    "caption": "Enable ExampleDeprecatedFeature API through 2008/09/02",
                    "name": "ExampleDeprecatedFeature",
                    "value": "ExampleDeprecatedFeature_EffectiveUntil20080902"
                }
            ],
            "name": "EnableDeprecatedWebPlatformFeatures",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "items": {
                    "enum": [
                        "ExampleDeprecatedFeature_EffectiveUntil20080902"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:37-87",
                "chrome_os:37-87",
                "android:37-87"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string-enum-list"
        },
        {
            "arc_support": "Cookies transferred to the user's profile are not accessible to Android apps.",
            "caption": "Transfer SAML IdP cookies during login",
            "desc": "Specifies whether authentication cookies set by a SAML IdP during login should be transferred to the user's profile.\n\n      When a user authenticates via a SAML IdP during login, cookies set by the IdP are written to a temporary profile at first. These cookies can be transferred to the user's profile to carry forward the authentication state.\n\n      When this policy is set to true, cookies set by the IdP are transferred to the user's profile every time they authenticate against the SAML IdP during login.\n\n      When this policy is set to false or unset, cookies set by the IdP are transferred to the user's profile during their first login on a device only.\n\n      This policy affects users whose domain matches the device's enrollment domain only. For all other users, cookies set by the IdP are transferred to the user's profile during their first login on the device only.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 271,
            "name": "DeviceTransferSAMLCookies",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:38-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Smart Lock to be used",
            "default_for_enterprise_users": false,
            "desc": "If you enable this setting, users will be allowed to use Smart Lock if the requirements for the feature are satisfied.\n\n      If you disable this setting, users will not be allowed to use Smart Lock.\n\n      If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 272,
            "name": "EasyUnlockAllowed",
            "owners": [
                "file://chrome/browser/ash/login/easy_unlock/OWNERS",
                "hansberry@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:38-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set the recommended locales for a managed session",
            "desc": "Setting the policy (as recommended only) moves recommended locales for a managed session to the top of the list, in the order in which they appear in the policy. The first recommended locale is preselected.\n\n      If not set, the current UI locale is preselected.\n\n      For more than one recommended locale, the assumption is that users want to choose among these locales. Locale and keyboard layout selection is prominent when starting a managed session. Otherwise, the assumption is that most users want the preselected locale. Locale and keyboard layout selection is less prominent when starting a managed session.\n\n      If you set the policy and turn automatic sign-in on (see the DeviceLocalAccountAutoLoginId and DeviceLocalAccountAutoLoginDelay policies), the managed session uses the first recommended locale and the most popular matching keyboard layout.\n\n      The preselected keyboard layout is always the most popular layout matching the preselected locale. Users can always choose any locale supported by Google Chrome OS for their session.",
            "example_value": [
                "de",
                "fr"
            ],
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 274,
            "name": "SessionLocales",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:38-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable guest mode in browser",
            "desc": "If this policy is set to true or not configured, Google Chrome will enable guest logins. Guest logins are Google Chrome profiles where all windows are in incognito mode.\n\n      If this policy is set to false, Google Chrome will not allow guest profiles to be started.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 275,
            "name": "BrowserGuestModeEnabled",
            "owners": [
                "mlerman@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:38-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enforce browser guest mode",
            "desc": "Setting the policy to Enabled means Google Chrome enforces guest sessions and prevents profile sign-ins. Guest sign-ins are Google Chrome profiles where windows are in Incognito mode.\n\n      Setting the policy to Disabled, leaving it unset, or disabling browser Guest mode (through BrowserGuestModeEnabled) allows the use of new and existing profiles.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 574,
            "name": "BrowserGuestModeEnforced",
            "owners": [
                "mlerman@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:77-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable add person in user manager",
            "desc": "If this policy is set to true or not configured, Google Chrome will allow Add Person from the user manager.\n\n      If this policy is set to false, Google Chrome will not allow creation of new profiles from the user manager.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 276,
            "name": "BrowserAddPersonEnabled",
            "owners": [
                "mlerman@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:39-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable force sign in for Google Chrome",
            "deprecated": true,
            "desc": "This policy is deprecated, consider using BrowserSignin instead.\n\n      If this policy is set to true, user has to sign in to Google Chrome with their profile before using the browser. And the default value of BrowserGuestModeEnabled will be set to false. Note that existing unsigned profiles will be locked and inaccessible after enabling this policy. For more information, see help center article.\n\n      If this policy is set to false or not configured, user can use the browser without sign in to Google Chrome.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 346,
            "name": "ForceBrowserSignin",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:64-",
                "chrome.mac:66-",
                "android:65-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Browser sign in settings",
            "desc": "This policy controls the sign-in behavior of the browser. It allows you to specify if the user can sign in to Google Chrome with their account and use account related services like Google Chrome Sync.\n\n      If the policy is set to \"Disable browser sign-in\" then the user cannot sign in to the browser and use account-based services. In this case browser-level features like Google Chrome Sync cannot be used and will be unavailable. On iOS, if the user was signed in and the policy is set to \"Disabled\" they will be signed out immediately. On other platforms, they will be signed out the next time they run Google Chrome. On all platforms, their local profile data like bookmarks, passwords etc. will be preserved and still usable. The user will still be able to sign into and use Google web services like Gmail.\n\n      If the policy is set to \"Enable browser sign-in,\" then the user is allowed to sign in to the browser. On all platforms except iOS, the user is automatically signed in to the browser when signed in to Google web services like Gmail. Being signed in to the browser means the user's account information will be kept by the browser. However, it does not mean that Google Chrome Sync will be turned on by default; the user must separately opt-in to use this feature. Enabling this policy will prevent the user from turning off the setting that allows browser sign-in. To control the availability of Google Chrome Sync, use the SyncDisabled policy.\n\n      If the policy is set to \"Force browser sign-in\" the user is presented with an account selection dialog and has to choose and sign in to an account to use the browser. This ensures that for managed accounts the policies associated with the account are applied and enforced. The default value of BrowserGuestModeEnabled will be set to disabled. Note that existing unsigned profiles will be locked and inaccessible after enabling this policy. For more information, see help center article: https://support.google.com/chrome/a/answer/7572556 . This option is not supported on Linux, Android or iOS. It will fall back to \"Enable browser sign-in\" if used.\n\n      If this policy is not set then the user can decide if they want to enable browser sign-in in the Google Chrome settings and use it as they see fit.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 487,
            "items": [
                {
                    "caption": "Disable browser sign-in",
                    "name": "Disable",
                    "value": 0
                },
                {
                    "caption": "Enable browser sign-in",
                    "name": "Enable",
                    "value": 1
                },
                {
                    "caption": "Force users to sign-in to use the browser",
                    "name": "Force",
                    "supported_on": [
                        "chrome.win:70-",
                        "chrome.mac:70-"
                    ],
                    "value": 2
                }
            ],
            "name": "BrowserSignin",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:70-",
                "android:70-",
                "ios:90-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Minimum SSL version enabled",
            "desc": "Setting the policy to a valid value means Google Chrome won't use SSL/TLS versions less than the specified version. Unrecognized values are ignored.\n\n      If this policy is not set, then Google Chrome will show an error for TLS 1.0 and TLS 1.1, but the user will be able to bypass it.\n\n      If this policy is set to \"tls1.2\", the user will not be able to bypass this error.\n\n      Support for setting this policy to \"tls1\" or \"tls1.1\" was removed in version 91. Suppressing the TLS 1.0/1.1 warning is no longer supported.",
            "example_value": "tls1.2",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 279,
            "items": [
                {
                    "caption": "TLS 1.0",
                    "name": "TLSv1",
                    "supported_on": [
                        "chrome.*:66-90",
                        "chrome_os:66-90",
                        "android:66-90"
                    ],
                    "value": "tls1"
                },
                {
                    "caption": "TLS 1.1",
                    "name": "TLSv1.1",
                    "supported_on": [
                        "chrome.*:66-90",
                        "chrome_os:66-90",
                        "android:66-90"
                    ],
                    "value": "tls1.1"
                },
                {
                    "caption": "TLS 1.2",
                    "name": "TLSv1.2",
                    "value": "tls1.2"
                }
            ],
            "name": "SSLVersionMin",
            "owners": [
                "file://crypto/OWNERS",
                "agl@chromium.org"
            ],
            "schema": {
                "enum": [
                    "tls1",
                    "tls1.1",
                    "tls1.2"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome.*:66-",
                "chrome_os:66-",
                "android:66-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Minimum TLS version to fallback to",
            "deprecated": true,
            "desc": "Warning: The TLS version fallback will be removed from Google Chrome after version 52 (around September 2016) and this policy will stop working then.\n\n      When a TLS handshake fails, Google Chrome would previously retry the connection with a lesser version of TLS in order to work around bugs in HTTPS servers. This setting configures the version at which this fallback process will stop. If a server performs version negotiation correctly (i.e. without breaking the connection) then this setting doesn't apply. Regardless, the resulting connection must still comply with SSLVersionMin.\n\n      If this policy is not configured or if it is set to \"tls1.2\" then Google Chrome no longer performs this fallback. Note this does not disable support for older TLS versions, only whether Google Chrome will work around buggy servers which cannot negotiate versions correctly.\n\n      Otherwise, if compatibility with a buggy server must be maintained, this policy may be set to \"tls1.1\". This is a stopgap measure and the server should be rapidly fixed.",
            "example_value": "tls1.1",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 280,
            "items": [
                {
                    "caption": "TLS 1.1",
                    "name": "TLSv1.1",
                    "value": "tls1.1"
                },
                {
                    "caption": "TLS 1.2",
                    "name": "TLSv1.2",
                    "value": "tls1.2"
                }
            ],
            "name": "SSLVersionFallbackMin",
            "owners": [
                "file://crypto/OWNERS",
                "agl@chromium.org"
            ],
            "schema": {
                "enum": [
                    "tls1.1",
                    "tls1.2"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome.*:50-52",
                "chrome_os:50-52",
                "android:50-52"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string-enum"
        },
        {
            "caption": "Maximum SSL version enabled",
            "deprecated": true,
            "desc": "Warning: The max TLS version policy will be entirely removed from Google Chrome around version 75 (around June 2019).\n\n      If this policy is not configured then Google Chrome uses the default maximum version.\n\n      Otherwise it may be set to one of the following values: \"tls1.2\" or \"tls1.3\". When set, Google Chrome will not use SSL/TLS versions greater than the specified version. An unrecognized value will be ignored.",
            "example_value": "tls1.2",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 361,
            "items": [
                {
                    "caption": "TLS 1.2",
                    "name": "TLSv1.2",
                    "value": "tls1.2"
                },
                {
                    "caption": "TLS 1.3",
                    "name": "TLSv1.3",
                    "value": "tls1.3"
                }
            ],
            "name": "SSLVersionMax",
            "owners": [
                "file://crypto/OWNERS",
                "agl@chromium.org"
            ],
            "schema": {
                "enum": [
                    "tls1.2",
                    "tls1.3"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome.*:58-74",
                "chrome_os:58-74",
                "android:58-74"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string-enum"
        },
        {
            "caption": "CECPQ2 post-quantum key-agreement enabled for TLS",
            "default": true,
            "desc": "If this policy is not configured, or is set to enabled, then Google Chrome will follow the default rollout process for CECPQ2, a post-quantum key-agreement algorithm in TLS.\n\n      CECPQ2 results in larger TLS messages which, in very rare cases, can trigger bugs in some networking hardware. This policy can be set to False to disable CECPQ2 while networking issues are resolved.\n\n      This policy is a temporary measure and will be removed in future versions of Google Chrome.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 841,
            "items": [
                {
                    "caption": "Enable default CECPQ2 rollout process",
                    "value": true
                },
                {
                    "caption": "Disable CECPQ2",
                    "value": false
                }
            ],
            "name": "CECPQ2Enabled",
            "owners": [
                "file://crypto/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:91-",
                "chrome_os:91-",
                "android:91-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Disable Certificate Transparency enforcement for a list of URLs",
            "desc": "Setting the policy turns off Certificate Transparency disclosure requirements for the hostnames in the specified URLs. While making it harder to detect misissued certificates, hosts can keep using certificates that otherwise wouldn't be trusted (because they weren't properly publicly disclosed).\n\n      Leaving the policy unset means that if certificates requiring disclosure through Certificate Transparency aren't disclosed, then Google Chrome doesn't trust those certificates.\n\n      A URL pattern follows this format ( https://www.chromium.org/administrators/url-blocklist-filter-format ). However, because the validity of certificates for a given hostname is independent of the scheme, port, or path, Google Chrome only considers the hostname portion of the URL. Wildcard hosts aren't supported.",
            "example_value": [
                "example.com",
                ".example.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 335,
            "name": "CertificateTransparencyEnforcementDisabledForUrls",
            "owners": [
                "file://components/certificate_transparency/OWNERS",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:53-",
                "chrome_os:53-",
                "android:53-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Disable Certificate Transparency enforcement for a list of subjectPublicKeyInfo hashes",
            "desc": "Setting the policy turns off enforcement of Certificate Transparency disclosure requirements for a list of subjectPublicKeyInfo hashes. Enterprise hosts can keep using certificates that otherwise wouldn't be trusted (because they weren't properly publicly disclosed). To turn off enforcement, the hash must meet one of these conditions:\n\n      * It's of the server certificate's subjectPublicKeyInfo.\n\n      * It's of a subjectPublicKeyInfo that appears in a Certificate Authority (CA) certificate in the certificate chain. That CA certificate is constrained through the X.509v3 nameConstraints extension, one or more directoryName nameConstraints are present in the permittedSubtrees, and the directoryName has an organizationName attribute.\n\n      * It's of a subjectPublicKeyInfo that appears in a CA certificate in the certificate chain, the CA certificate has one or more organizationName attributes in the certificate Subject, and the server's certificate has the same number of organizationName attributes, in the same order, and with byte-for-byte identical values.\n\n      Specify a subjectPublicKeyInfo hash by linking the hash algorithm name, a slash, and the Base64 encoding of that hash algorithm applied to the DER-encoded subjectPublicKeyInfo of the specified certificate. Base64 encoding format matches that of an SPKI Fingerprint. The only recognized hash algorithm is sha256; others are ignored.\n\n      Leaving the policy unset means that if certificates requiring disclosure through Certificate Transparency aren't disclosed, then Google Chrome doesn't trust those certificates.",
            "example_value": [
                "sha256/AAAAAAAAAAAAAAAAAAAAAA==",
                "sha256//////////////////////w=="
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 435,
            "name": "CertificateTransparencyEnforcementDisabledForCas",
            "owners": [
                "file://components/certificate_transparency/OWNERS",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:67-",
                "chrome_os:67-",
                "android:67-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Disable Certificate Transparency enforcement for a list of Legacy Certificate Authorities",
            "desc": "Setting the policy turns off enforcement of Certificate Transparency disclosure requirements for a list of Legacy Certificate Authorities (CA) for certificate chains with a specified subjectPublicKeyInfo hash. Enterprise hosts can keep using certificates that otherwise wouldn't be trusted (because they weren't properly publicly disclosed). To turn off enforcement, the subjectPublicKeyInfo hash must appear in a CA certificate recognized as a Legacy CA. A Legacy CA is publicly trusted by one or more operating systems supported by Google Chrome, but not Android Open Source Project or Google Chrome OS.\n\n      Specify a subjectPublicKeyInfo hash by linking the hash algorithm name, a slash and the Base64 encoding of that hash algorithm applied to the DER-encoded subjectPublicKeyInfo of the specified certificate. Base64 encoding format matches that of an SPKI Fingerprint. The only recognized hash algorithm is sha256; others are ignored.\n\n      Leaving the policy unset means that if certificates requiring disclosure through Certificate Transparency aren't disclosed, then Google Chrome doesn't trust those certificates.",
            "example_value": [
                "sha256/AAAAAAAAAAAAAAAAAAAAAA==",
                "sha256//////////////////////w=="
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 436,
            "name": "CertificateTransparencyEnforcementDisabledForLegacyCas",
            "owners": [
                "file://components/certificate_transparency/OWNERS",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:67-",
                "chrome_os:67-",
                "android:67-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Enable RC4 cipher suites in TLS",
            "deprecated": true,
            "desc": "Warning: RC4 will be completely removed from Google Chrome after version 52 (around September 2016) and this policy will stop working then.\n\n      If the policy is not set, or is set to false, then RC4 cipher suites in TLS will not be enabled. Otherwise it may be set to true to retain compatibility with an outdated server. This is a stopgap measure and the server should be reconfigured.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 310,
            "name": "RC4Enabled",
            "owners": [
                "file://crypto/OWNERS",
                "davidben@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:48-52",
                "chrome_os:48-52",
                "android:48-52"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable DHE cipher suites in TLS",
            "deprecated": true,
            "desc": "Warning: DHE will be completely removed from Google Chrome after version 57 (around March 2017) and this policy will stop working then.\n\n      If the policy is not set, or is set to false, then DHE cipher suites in TLS will not be enabled. Otherwise it may be set to true to enable DHE cipher suites and retain compatibility with an outdated server. This is a stopgap measure and the server should be reconfigured.\n\n      Servers are encouraged to migrated to ECDHE cipher suites. If these are unavailable, ensure a cipher suite using RSA key exchange is enabled.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 334,
            "name": "DHEEnabled",
            "owners": [
                "file://crypto/OWNERS",
                "davidben@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:53-57",
                "chrome_os:53-57",
                "android:53-57"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Touch to Search",
            "default": true,
            "desc": "Setting the policy to True or leaving it unset makes Touch to Search available to the user, and they can turn the feature on or off.\n\n      Setting the policy to False turns Touch to Search off completely.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 281,
            "items": [
                {
                    "caption": "Allow users to use Touch to Search",
                    "value": true
                },
                {
                    "caption": "Prevent users from using Touch to Search",
                    "value": false
                }
            ],
            "name": "ContextualSearchEnabled",
            "owners": [
                "donnd@chromium.org",
                "twellington@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:40-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Automatic reboot on device shutdown",
            "desc": "Setting the policy to Enabled means Google Chrome OS triggers a restart when users shut down the device. Google Chrome OS replaces all shutdown buttons in the UI with restart buttons. If the users shut down devices using the power button, they won't automatically restart, even if the policy is on.\n\n      Setting the policy to Disabled or leaving it unset means Google Chrome OS lets them shut down the device.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 284,
            "name": "DeviceRebootOnShutdown",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:41-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "The cache is not used for Android apps. If multiple users install the same Android app, it will be downloaded anew for each user.",
            "caption": "Set Apps and Extensions cache size (in bytes)",
            "default": 268435456,
            "desc": "Setting to lower than 1 MB or leaving it unset means Google Chrome OS uses the default size of 256 MiB for caching apps and extensions for installation by multiple users of a single device, avoiding the need to redownload each one for every user.",
            "device_only": true,
            "example_value": 104857600,
            "features": {
                "dynamic_refresh": false
            },
            "id": 296,
            "name": "ExtensionCacheSize",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:43-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable domain name autocomplete during user sign in",
            "desc": "If this policy is set to a blank string or not configured, Google Chrome OS will not show an autocomplete option during user sign-in flow.\n      If this policy is set to a string representing a domain name, Google Chrome OS will show an autocomplete option during user sign-in allowing the user to type in only their user name without the domain name extension.  The user will be able to overwrite this domain name extension.\n      If the value of the policy is not a valid domain, the policy will not be applied.",
            "device_only": true,
            "example_value": "students.school.edu",
            "features": {
                "dynamic_refresh": true
            },
            "id": 297,
            "name": "DeviceLoginScreenDomainAutoComplete",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:44-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Maximize the first browser window on first run",
            "desc": "Setting the policy to True means Chrome maximizes the first window shown on first run.\n\n      Setting the policy to False or leaving it unset means that Chrome might maximize the first window, depending on the screen size.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 298,
            "name": "ForceMaximizeOnFirstRun",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:43-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow proceeding from the SSL warning page",
            "desc": "Setting the policy to Enabled or leaving it unset lets users click through warning pages Google Chrome shows when users navigate to sites that have SSL errors.\n\n      Setting the policy to Disabled prevent users from clicking through any warning pages.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 300,
            "name": "SSLErrorOverrideAllowed",
            "owners": [
                "agl@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:44-",
                "chrome_os:44-",
                "android:44-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow proceeding from the SSL warning page on specific origins",
            "desc": "If SSLErrorOverrideAllowed is Disabled, setting the policy lets you set a list of origin patterns that specify the sites where a user can click through warning pages Google Chrome shows when users navigate to sites that have SSL errors. Users will not be able to click through SSL warning pages on origins that are not on this list.\n\n      If SSLErrorOverrideAllowed is Enabled or unset, this policy does nothing.\n\n      Leaving the policy unset means SSLErrorOverrideAllowed applies for all sites.\n\n      For detailed information on valid input patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy. This policy only matches based on origin, so any path in the URL pattern is ignored.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 819,
            "name": "SSLErrorOverrideAllowedForOrigins",
            "owners": [
                "agl@chromium.org",
                "niarci@microsoft.com"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:90-",
                "chrome_os:90-",
                "android:90-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow origins to query for device attributes",
            "desc": "Setting the policy to allow some origins of force-installed web applications to get device attributes (e.g. serial number, hostname) by using Device Attributes API.\n\n      Device Attributes API is a list of web APIs, please see https://wicg.github.io/WebApiDevice/device_attributes. They are only available to origins which correspond to force-installed web applications via WebAppInstallForceList or the one configured in the Kiosk session.",
            "example_value": [
                "https://www.google.com",
                "https://www.example.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 865,
            "name": "DeviceAttributesAllowedForOrigins",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:93-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow QUIC protocol",
            "desc": "Setting the policy to Enabled or leaving it unset allows the use of QUIC protocol in Google Chrome.\n\n      Setting the policy to Disabled disallows the use of QUIC protocol.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 301,
            "name": "QuicAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:43-",
                "chrome_os:43-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "arc_support": "Corporate keys can be used by Android applications that are installed and listed in this policy.",
            "caption": "Key Permissions",
            "desc": "Setting the policy grants access to corporate keys to extensions or Android applications. Keys are designated for corporate usage only if they're generated using the chrome.enterprise.platformKeys API on a managed account. Users can't grant or withdraw access to corporate keys to or from extensions or Android applications.\n\n      By default, an extension or an Android applications can't use a key designated for corporate usage, which is equivalent to setting allowCorporateKeyUsage to False for it. Only if allowCorporateKeyUsage is set to True for an extension or an Android application can it use any platform key marked for corporate usage to sign arbitrary data. Only grant this permission if the extension or the Android application is trusted to secure access to the key against attackers.",
            "example_value": {
                "extension1": {
                    "allowCorporateKeyUsage": true
                },
                "extension2": {
                    "allowCorporateKeyUsage": false
                },
                "com.example.app": {
                    "allowCorporateKeyUsage": true
                },
                "com.example.app2": {
                    "allowCorporateKeyUsage": false
                }
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 302,
            "name": "KeyPermissions",
            "owners": [
                "pmarko@chromium.org",
                "miersh@google.com",
                "omorsi@google.com"
            ],
            "schema": {
                "additionalProperties": {
                    "properties": {
                        "allowCorporateKeyUsage": {
                            "description": "If set to true, this extension can use all keys that are designated for corporate usage to sign arbitrary data. If set to false, it cannot access any such keys and the user cannot grant such permission either. As an exception, an extension can access such a key exactly once if the same extension generated that key.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:45-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable showing the welcome page on the first browser launch following OS upgrade",
            "deprecated": true,
            "desc": "If this policy is set to true or not configured, the browser will re-show the welcome page on the first launch following an OS upgrade.\n\n      If this policy is set to false, the browser will not re-show the welcome page on the first launch following an OS upgrade.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 303,
            "name": "WelcomePageOnOSUpgradeEnabled",
            "owners": [
                "grt@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:45-62"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Use hardware acceleration when available",
            "desc": "Setting the policy to Enabled or leaving it unset turns on hardware acceleration, if available.\n\n      Setting the policy to Disabled turns off hardware acceleration.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 304,
            "name": "HardwareAccelerationModeEnabled",
            "owners": [
                "zmo@chromium.org",
                "kbr@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:46-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Make Unified Desktop available and turn on by default",
            "desc": "Setting the policy to True turns on Unified Desktop, which allows applications to span multiple displays. Users can turn off Unified Desktop for individual displays.\n\n      Setting the policy to False or leaving it unset turns off Unified Desktop, and users can't turn it on.",
            "example_value": true,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 307,
            "name": "UnifiedDesktopEnabledByDefault",
            "owners": [
                "phweiss@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:47-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set default display rotation, reapplied on every reboot",
            "desc": "Setting the policy has each display rotate to the specified orientation on every reboot and the first time it's connected after the policy value changes. Users may change the display rotation through the settings page after signing in, but it changes back at the next reboot. This policy applies to primary and secondary displays.\n\n      If not set, the default value is 0 degrees and users are free to change it. In this case, the default value isn't reapplied at restart.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 311,
            "items": [
                {
                    "caption": "Rotate screen by 0 degrees",
                    "name": "ROTATE_0",
                    "value": 0
                },
                {
                    "caption": "Rotate screen clockwise by 90 degrees",
                    "name": "ROTATE_90",
                    "value": 1
                },
                {
                    "caption": "Rotate screen by 180 degrees",
                    "name": "ROTATE_180",
                    "value": 2
                },
                {
                    "caption": "Rotate screen clockwise by 270 degrees",
                    "name": "ROTATE_270",
                    "value": 3
                }
            ],
            "name": "DisplayRotationDefault",
            "owners": [
                "phweiss@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:48-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Enable ARC",
            "default_for_enterprise_users": false,
            "desc": "Unless Ephemeral mode or multiple sign-in is on during the user's session, setting ArcEnabled to True turns ARC on for the user. Setting the policy to False or leaving it unset means enterprise users can't use ARC.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 317,
            "name": "ArcEnabled",
            "owners": [
                "pbond@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:50-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure ARC",
            "desc": "Setting the policy specifies a set of policies to hand over to the ARC runtime. Admins can use it to select the Android apps that autoinstall. Enter value in valid JSON format.\n\n      To pin apps to the launcher, see PinnedLauncherApps.",
            "description_schema": {
                "properties": {
                    "applications": {
                        "items": {
                            "properties": {
                                "defaultPermissionPolicy": {
                                    "description": "Policy for granting permission requests to apps. PERMISSION_POLICY_UNSPECIFIED: Policy not specified. If no policy is specified for a permission at any level, then the `PROMPT` behavior is used by default. PROMPT: Prompt the user to grant a permission. GRANT: Automatically grant a permission. DENY: Automatically deny a permission.",
                                    "enum": [
                                        "PERMISSION_POLICY_UNSPECIFIED",
                                        "PROMPT",
                                        "GRANT",
                                        "DENY"
                                    ],
                                    "type": "string"
                                },
                                "installType": {
                                    "description": "Specifies how an app is installed. OPTIONAL: The app is not installed automatically, but the user can install it. This is the default if this policy is not specified. PRELOAD: The app is installed automatically, but the user can uninstall it. FORCE_INSTALLED: The app is installed automatically and the user cannot uninstall it. BLOCKED: The app is blocked and cannot be installed. If the app was installed under a previous policy it will be uninstalled.",
                                    "enum": [
                                        "OPTIONAL",
                                        "PRELOAD",
                                        "FORCE_INSTALLED",
                                        "BLOCKED"
                                    ],
                                    "type": "string"
                                },
                                "managedConfiguration": {
                                    "description": "App-specific JSON configuration object with a set of key-value pairs, e.g. '\"managedConfiguration\": { \"key1\": value1, \"key2\": value2 }'. The keys are defined in the app manifest.",
                                    "type": "object"
                                },
                                "packageName": {
                                    "description": "Android app identifier, e.g. \"com.google.android.gm\" for Gmail",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "example_value": "{\"applications\":[{\"packageName\":\"com.google.android.gm\",\"installType\":\"FORCE_INSTALLED\",\"defaultPermissionPolicy\":\"PROMPT\",\"managedConfiguration\":{}},{\"packageName\":\"com.google.android.apps.docs\",\"installType\":\"PRELOAD\",\"defaultPermissionPolicy\":\"PROMPT\",\"managedConfiguration\":{}}]}",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 318,
            "name": "ArcPolicy",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:50-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "arc_support": "If the kiosk app is an Android app, it will have no control over the Google Chrome OS version, even if this policy is set to True.",
            "caption": "Allow the auto launched with zero delay kiosk app to control Google Chrome OS version",
            "desc": "Setting the policy to Enabled means the value of the required_platform_version manifest key of the zero-delay, autolaunched kiosk app is used as the autoupdate target version prefix.\n\n      Setting the policy to Disabled or leaving it unset means the required_platform_version manifest key is ignored and autoupdate proceeds as normal.\n\n      Warning: Do not delegate control of the Google Chrome OS version to a kiosk app, because it might prevent the device from getting software updates and critical security fixes. Delegating control of the Google Chrome OS version might leave users at risk.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 319,
            "name": "AllowKioskAppControlChromeVersion",
            "owners": [
                "xiyuan@chromium.org",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:51-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Configure the login authentication behavior",
            "desc": "When this policy is set, the login authentication flow will be in one of the following ways depending on the value of the setting:\n\n      If set to GAIA, login will be done via the normal GAIA authentication flow.\n\n      If set to SAML_INTERSTITIAL, login will show an interstitial screen offering the user to go forward with authentication via the SAML IdP of the device's enrollment domain, or go back to the normal GAIA login flow.",
            "device_only": true,
            "example_value": 0,
            "features": {
                "dynamic_refresh": true
            },
            "id": 321,
            "items": [
                {
                    "caption": "Authentication via the default GAIA flow",
                    "name": "GAIA",
                    "value": 0
                },
                {
                    "caption": "Redirect to SAML IdP after user confirmation",
                    "name": "SAML_INTERSTITIAL",
                    "value": 1
                }
            ],
            "name": "LoginAuthenticationBehavior",
            "owners": [
                "afakhry@chromium.org",
                "tbarzic@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:51-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Whitelist of USB detachable devices",
            "deprecated": true,
            "desc": "Setting the policy defines the list of USB devices users can detach from their kernel driver to use through the chrome.usb API directly inside a web app. Entries are pairs of USB Vendor Identifier and Product Identifier to identify specific hardware.\n\n      If not set, the list of a detachable USB devices is empty.\n\n      This policy is deprecated, please use UsbDetachableAllowlist instead.\n      ",
            "device_only": true,
            "example_value": [
                {
                    "vendor_id": 1027,
                    "product_id": 24577
                },
                {
                    "vendor_id": 16700,
                    "product_id": 8453
                }
            ],
            "features": {
                "dynamic_refresh": false
            },
            "id": 322,
            "name": "UsbDetachableWhitelist",
            "owners": [
                "vpalatin@chromium.org",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "id": "UsbDeviceId",
                    "properties": {
                        "product_id": {
                            "type": "integer"
                        },
                        "vendor_id": {
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:51-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Allowlist of USB detachable devices",
            "desc": "Setting the policy defines the list of USB devices users can detach from their kernel driver to use through the chrome.usb API directly inside a web app. Entries are pairs of USB Vendor Identifier and Product Identifier to identify specific hardware.\n\n      If not set, the list of a detachable USB devices is empty.",
            "device_only": true,
            "example_value": [
                {
                    "vendor_id": 1027,
                    "product_id": 24577
                },
                {
                    "vendor_id": 16700,
                    "product_id": 8453
                }
            ],
            "features": {
                "dynamic_refresh": false
            },
            "id": 765,
            "name": "UsbDetachableAllowlist",
            "owners": [
                "vpalatin@chromium.org",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "id": "UsbDeviceIdInclusive",
                    "properties": {
                        "product_id": {
                            "type": "integer"
                        },
                        "vendor_id": {
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Allow bluetooth on device",
            "desc": "Setting the policy to Enabled or leaving it unset lets users turn Bluetooth on or off.\n\n      Setting the policy to Disabled means Google Chrome OS turns Bluetooth off, and users can't turn it on.\n\n      Note: To turn on Bluetooth, users must sign out and in again.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": false
            },
            "id": 323,
            "name": "DeviceAllowBluetooth",
            "owners": [
                "isandrk@chromium.org",
                "sinhak@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:52-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Suppress the unsupported OS warning",
            "desc": "Setting the policy to Enabled suppresses the warning that appears when Google Chrome is running on an unsupported computer or operating system.\n\n      Setting the policy to Disabled or leaving it unset means the warnings appear on unsupported systems.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 324,
            "name": "SuppressUnsupportedOSWarning",
            "owners": [
                "grt@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:49-",
                "chrome_os:49-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable queries to Quirks Server for hardware profiles",
            "default": true,
            "desc": "The Quirks Server provides hardware-specific configuration files, like\n      ICC display profiles to adjust monitor calibration.\n\n      When this policy is set to false, the device will not attempt to\n      contact the Quirks Server to download configuration files.\n\n      If this policy is true or not configured then Google Chrome OS will automatically contact the Quirks Server and download configuration files, if available, and store them on the device.  Such files might, for example, be used to improve display quality of attached monitors.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 325,
            "items": [
                {
                    "caption": "Allow queries to the Quirks Server and potentially downloading hardware-specific configuration files",
                    "value": true
                },
                {
                    "caption": "Do not query Quirks Servers",
                    "value": false
                }
            ],
            "name": "DeviceQuirksDownloadEnabled",
            "owners": [
                "glevin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:51-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure the automatic timezone detection method",
            "desc": "Unless the SystemTimezone policy turns off automatic time zone detection, then setting the policy outlines the automatic time zone detection method, which users can't change.\n\n      Setting the policy to:\n       * TimezoneAutomaticDetectionDisabled keeps automatic time zone detection off.\n       * TimezoneAutomaticDetectionIPOnly keeps automatic time zone detection on, using the IP-only method.\n       * TimezoneAutomaticDetectionSendWiFiAccessPoints keeps automatic time zone detection on, continually sending the list of visible Wi-Fi access-points to the Geolocation API server for finer-grained time zone detection.\n       * TimezoneAutomaticDetectionSendAllLocationInfo keeps automatic time zone detection on, continually sending location information (such as Wi-Fi access points, reachable cell towers, GPS) to a server for the most fine-grained time zone detection.\n\n      If not set, set to Let users decide, or set to None, then users control automatic time zone detection using normal controls in chrome://settings.",
            "device_only": true,
            "example_value": 0,
            "features": {
                "dynamic_refresh": true
            },
            "id": 326,
            "items": [
                {
                    "caption": "Let users decide",
                    "name": "TimezoneAutomaticDetectionUsersDecide",
                    "value": 0
                },
                {
                    "caption": "Never auto-detect timezone",
                    "name": "TimezoneAutomaticDetectionDisabled",
                    "value": 1
                },
                {
                    "caption": "Always use coarse timezone detection",
                    "name": "TimezoneAutomaticDetectionIPOnly",
                    "value": 2
                },
                {
                    "caption": "Always send WiFi access-points to server while resolving timezone",
                    "name": "TimezoneAutomaticDetectionSendWiFiAccessPoints",
                    "value": 3
                },
                {
                    "caption": "Always send any available location signals to the server while resolving timezone",
                    "name": "TimezoneAutomaticDetectionSendAllLocationInfo",
                    "value": 4
                }
            ],
            "name": "SystemTimezoneAutomaticDetection",
            "owners": [
                "alemate@chromium.org",
                "michaelpg@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:53-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Enable ending processes in Task Manager",
            "desc": "Setting the policy to Disabled prevents users from ending processes in the Task Manager.\n\n      Setting the policy to Enabled or leaving it unset lets users end processes in the Task Manager.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 327,
            "name": "TaskManagerEndProcessEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:52-",
                "chrome_os:52-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show notification when disk space is low",
            "default": false,
            "default_for_managed_devices_doc_only": false,
            "desc": "Allows enabling or disabling a notification when disk space is low. This applies to all users on the device.\n\n      Setting policy to Enabled, an notification will be shown when remaining disk space is low.\n\n      Setting policy to Disabled or not set, there won't be any low disk space notification.\n\n      This policy is ignored and the notification is always shown if the device is unmanaged or there is only one user.\n\n      If there are multiple user accounts on a managed device, the notification will only be shown when this policy is enabled.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 763,
            "items": [
                {
                    "caption": "Always show low disk space warnings",
                    "value": true
                },
                {
                    "caption": "Only show low disk space warnings if the device is unmanged or there is only 1 user",
                    "value": false
                }
            ],
            "name": "DeviceShowLowDiskSpaceNotification",
            "owners": [
                "vsavu@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable throttling network bandwidth",
            "desc": "Setting the policy turns network throttling on or off. This means that the system is throttled to achieve the provided upload and download rates (in kbits/s). It applies to all users and interfaces on the device.",
            "device_only": true,
            "example_value": {
                "enabled": true,
                "upload_rate_kbits": 5600,
                "download_rate_kbits": 5600
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 351,
            "name": "NetworkThrottlingEnabled",
            "owners": [
                "kirtika@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "properties": {
                    "download_rate_kbits": {
                        "description": "Desired download rate in kbits/s.",
                        "type": "integer"
                    },
                    "enabled": {
                        "description": "A boolean flag indicating if throttling is enabled.",
                        "type": "boolean"
                    },
                    "upload_rate_kbits": {
                        "description": "Desired upload rate in kbits/s.",
                        "type": "integer"
                    }
                },
                "required": [
                    "enabled",
                    "upload_rate_kbits",
                    "download_rate_kbits"
                ],
                "type": "object"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:56-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable 802.11r Fast Transition",
            "desc": "Setting the policy to Enabled means that Fast Transition is used when the wireless access point supports it. It applies to all users and interfaces on the device.\n\n      Setting the policy to Disabled or leaving it unset means that Fast Transition isn't used.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 501,
            "name": "DeviceWiFiFastTransitionEnabled",
            "owners": [
                "matthewmwang@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable WiFi",
            "desc": "Setting the policy to Disabled means Google Chrome OS turns off Wi-Fi, and users can't change it.\n\n      Setting the policy to Enabled or leaving it unset lets users turn Wi-Fi on or off.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 537,
            "name": "DeviceWiFiAllowed",
            "owners": [
                "apotapchuk@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Device MAC address source when docked",
            "desc": "Setting the policy lets the administrator change the MAC (media access control) address when connecting a device to the dock. When a dock is connected to some device models, by default, the device's designated dock's MAC address helps identify the device on Ethernet.\n\n      If 'DeviceDockMacAddress' is selected or the policy is left unset, the device's designated dock MAC address will be used.\n\n      If 'DeviceNicMacAddress' is selected, the device's NIC (network interface controller) MAC address will be used.\n\n      If 'DockNicMacAddress' is selected, the dock's NIC MAC address will be used.\n\n      Users can't change this setting.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 547,
            "items": [
                {
                    "caption": "Device's designated dock MAC address",
                    "name": "DeviceDockMacAddress",
                    "value": 1
                },
                {
                    "caption": "Device's built-in NIC MAC address",
                    "name": "DeviceNicMacAddress",
                    "value": 2
                },
                {
                    "caption": "Dock's built-in NIC MAC address",
                    "name": "DockNicMacAddress",
                    "value": 3
                }
            ],
            "name": "DeviceDockMacAddressSource",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "URLs that will be granted access to video capture devices on SAML login pages",
            "desc": "Patterns in this list will be matched against the security\n      origin of the requesting URL.  If a match is found, access to video\n      capture devices will be granted on SAML login pages.  If no match is\n      found, access will be automatically denied.  Wildcard patterns are not\n      allowed.",
            "device_only": true,
            "example_value": [
                "https://example.com"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 328,
            "name": "LoginVideoCaptureAllowedUrls",
            "owners": [
                "cernekee@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:52-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Configure the list of installed apps and extensions on the login screen",
            "desc": "\n      Specifies a list of apps and extensions that are installed silently on the login screen, without user interaction, and which cannot be uninstalled or disabled by the user.\n\n      Permissions requested by the apps/extensions are granted implicitly, without user interaction, including any additional permissions requested by future versions of the app/extension. Google Chrome restricts the set of permissions that the extensions can request.\n\n      Note that, for security and privacy reasons, only apps and extensions that belong to the allow list bundled into Google Chrome can be installed. All other items will be ignored.\n\n      If an app or extension that previously had been force-installed is removed from this list, it is automatically uninstalled by Google Chrome.\n\n      Each list item of the policy is a string that contains an extension ID and, optionally, an \"update\" URL separated by a semicolon (;). The extension ID is the 32-letter string found e.g. on chrome://extensions when in developer mode. The \"update\" URL, if specified, should point to an update manifest XML document as described at https://developer.chrome.com/extensions/autoupdate. By default, the Chrome Web Store's update URL is used (which currently is \"https://clients2.google.com/service/update2/crx\"). Note that the \"update\" URL set in this policy is only used for the initial installation; subsequent updates of the extension employ the update URL indicated in the extension's manifest.\n\n      For example, khpfeaanjngmcnplbdlpegiifgpfgdco;https://clients2.google.com/service/update2/crx installs the Smart Card Connector app from the standard Chrome Web Store \"update\" URL. For more information about hosting extensions, see: https://developer.chrome.com/extensions/hosting.",
            "device_only": true,
            "example_value": [
                "khpfeaanjngmcnplbdlpegiifgpfgdco;https://clients2.google.com/service/update2/crx"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 336,
            "name": "DeviceLoginScreenExtensions",
            "owners": [
                "emaxx@chromium.org",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:60-"
            ],
            "tags": [
                "full-admin-access"
            ],
            "type": "list"
        },
        {
            "caption": "Permit locking the screen",
            "desc": "Setting the policy to Enabled or leaving it unset lets users who authenticate with a password lock the screen.\n\n      Setting the policy to Disabled means users can't lock the screen. (They can only sign out from the user session.)",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 329,
            "name": "AllowScreenLock",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:52-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set certificate availability for ARC-apps",
            "desc": "Setting the policy to CopyCaCerts makes all ONC-installed CA certificates with Web TrustBit available for ARC-apps.\n\n       Setting to None or leaving it unset makes Google Chrome OS certificates unavailable for ARC-apps.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 330,
            "items": [
                {
                    "caption": "Disable usage of Google Chrome OS certificates to ARC-apps",
                    "name": "SyncDisabled",
                    "value": 0
                },
                {
                    "caption": "Enable Google Chrome OS CA certificates to ARC-apps",
                    "name": "CopyCaCerts",
                    "value": 1
                }
            ],
            "name": "ArcCertificatesSyncMode",
            "owners": [
                "pbond@chromium.org",
                "edmanp@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:52-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Define domains allowed to access Google Workspace",
            "desc": "Setting the policy turns on Chrome's restricted sign-in feature in Google Workspace and prevents users from changing this setting. Users can only access Google tools using accounts from the specified domains (to allow gmail or googlemail accounts, add consumer_accounts to the list of domains). This setting prevents users from signing in and adding a Secondary Account on a managed device that requires Google authentication, if that account doesn't belong to one of the explicitly allowed domains.\n\n      Leaving this setting empty or unset means users can access Google Workspace with any account.\n\n      Users cannot change or override this setting.\n\n      Note: This policy causes the X-GoogApps-Allowed-Domains header to be appended to all HTTP and HTTPS requests to all google.com domains, as described in https://support.google.com/a/answer/1668854.",
            "example_value": "managedchrome.com,example.com",
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 331,
            "name": "AllowedDomainsForApps",
            "owners": [
                "igorcov@chromium.org",
                "atwilson@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:51-",
                "chrome_os:51-",
                "android:51-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "string"
        },
        {
            "caption": "Enable PAC URL stripping (for https://)",
            "deprecated": true,
            "desc": "Strips privacy and security sensitive parts of https:// URLs before passing them on to PAC scripts (Proxy Auto Config) used by Google Chrome during proxy resolution.\n\n      When True, the security feature is enabled, and https:// URLs are\n      stripped before submitting them to a PAC script. In this manner the PAC\n      script is not able to view data that is ordinarily protected by an\n      encrypted channel (such as the URL's path and query).\n\n      When False, the security feature is disabled, and PAC scripts are\n      implicitly granted the ability to view all components of an https://\n      URL. This applies to all PAC scripts regardless of origin (including\n      those fetched over an insecure transport, or discovered insecurely\n      through WPAD).\n\n      This defaults to True (security feature enabled).\n\n      It is recommended that this be set to True. The only reason to set it to\n      False is if it causes a compatibility problem with existing PAC scripts.\n\n      The policy will be removed in M75.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 332,
            "name": "PacHttpsUrlStrippingEnabled",
            "owners": [
                "net-dev@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:52-74",
                "chrome_os:52-74"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Google Cast",
            "desc": "Setting the policy to Enabled or leaving it unset turns on Google Cast, which users can launch from the app menu, page context menus, media controls on Cast-enabled websites, and (if shown) the Cast toolbar icon.\n\n      Setting the policy to Disabled turns off Google Cast.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 333,
            "name": "EnableMediaRouter",
            "owners": [
                "file://components/media_router/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:52-",
                "chrome_os:52-",
                "android:52-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show the Google Cast toolbar icon",
            "desc": "Setting the policy to Enabled displays the Cast toolbar icon on the toolbar or the overflow menu, and users can't remove it.\n\n      Setting the policy to Disabled or leaving it unset lets users pin or remove the icon through its contextual menu.\n\n      If the policy EnableMediaRouter is set to Disabled, then this policy's value has no effect, and the toolbar icon doesn't appear.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 362,
            "name": "ShowCastIconInToolbar",
            "owners": [
                "file://components/media_router/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:58-",
                "chrome_os:58-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Google Cast to connect to Cast devices on all IP addresses.",
            "desc": "Unless EnableMediaRouter is set to Disabled, setting MediaRouterCastAllowAllIPs to Enabled connects Google Cast to Cast devices on all IP addresses, not just RFC1918/RFC4193 private addresses.\n\n      Setting the policy to Disabled connects Google Cast to Cast devices only on RFC1918/RFC4193.\n\n      Leaving the policy unset connects Google Cast to Cast devices only on RFC1918/RFC4193, unless the CastAllowAllIPs feature is turned on.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 437,
            "name": "MediaRouterCastAllowAllIPs",
            "owners": [
                "file://components/media_router/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:67-",
                "chrome_os:67-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Android Backup Service",
            "deprecated": true,
            "desc": "This policy was removed in Google Chrome OS 68 and replaced by ArcBackupRestoreServiceEnabled.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 337,
            "name": "ArcBackupRestoreEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:53-67"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Android Google Location Service",
            "deprecated": true,
            "desc": "This policy was removed in Google Chrome OS 68 and replaced by ArcGoogleLocationServicesEnabled.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 363,
            "name": "ArcLocationServiceEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:57-67"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Show content suggestions on the New Tab page",
            "default": true,
            "default_for_enterprise_users": false,
            "desc": "Setting the policy to True or leaving it unset displays autogenerated content suggestions on the New Tab page, based on the user's browsing history, interests, or location.\n\n      Setting the policy to False prevents autogenerated content suggestions from appearing on the New Tab page.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 338,
            "items": [
                {
                    "caption": "Show content suggestions on the New Tab page",
                    "value": true
                },
                {
                    "caption": "Do not show content suggestions on the New Tab page",
                    "value": false
                }
            ],
            "name": "NTPContentSuggestionsEnabled",
            "owners": [
                "treib@chromium.org",
                "carlosk@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:54-",
                "ios:93-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to customize the background on the New Tab page",
            "default": true,
            "default_for_enterprise_users": true,
            "desc": "If the policy is set to false, the New Tab page won't allow users to customize the background. Any existing custom background will be permanently removed even if the policy is set to true later.\n\n      If the policy is set to true or unset, users can customize the background on the New Tab page.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 653,
            "items": [
                {
                    "caption": "Users can customize the New Tab page background",
                    "value": true
                },
                {
                    "caption": "Users can not customize the New Tab page background",
                    "value": false
                }
            ],
            "name": "NTPCustomBackgroundEnabled",
            "owners": [
                "mahmadi@chromium.org",
                "yyushkina@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-",
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show cards on the New Tab Page",
            "default": null,
            "desc": "This policy controls the visibility of cards on the New Tab Page. Cards surface entry points to launch common user journeys based on the user's browsing behavior.\n\n      If the policy is set to Enabled, the New Tab Page will show cards if content is available.\n\n      If the policy is set to Disabled, the New Tab Page won't show cards.\n\n      If the policy is not set, the user can control the card visibility. The default is visible.\n      ",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 805,
            "items": [
                {
                    "caption": "New Tab Page will show cards if content is available",
                    "value": true
                },
                {
                    "caption": "New Tab Page will not show cards",
                    "value": false
                },
                {
                    "caption": "New Tab Page will show cards if content is available, but allow the user to change this setting",
                    "value": null
                }
            ],
            "name": "NTPCardsVisible",
            "owners": [
                "danielms@chromium.org",
                "tiborg@chromium.org",
                "yyushkina@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:88-",
                "chrome_os:88-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Restrict the range of local UDP ports used by WebRTC",
            "desc": "If the policy is set, the UDP port range used by WebRTC is restricted to the specified port interval (endpoints included).\n\n      If the policy is not set, or if it is set to the empty string or an invalid port range, WebRTC is allowed to use any available local UDP port.",
            "example_value": "10000-11999",
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 339,
            "name": "WebRtcUdpPortRange",
            "owners": [
                "guidou@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:54-",
                "chrome_os:54-",
                "android:54-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "URLs for which local IPs are exposed in WebRTC ICE candidates",
            "desc": "Patterns in this list will be matched against the security origin of the requesting URL.\n      If a match is found or chrome://flags/#enable-webrtc-hide-local-ips-with-mdns is Disabled, the local IP addresses are shown in WebRTC ICE candidates.\n      Otherwise, local IP addresses are concealed with mDNS hostnames.\n      Please note that this policy weakens the protection of local IPs if needed by administrators.",
            "example_value": [
                "https://www.example.com",
                "*example.com*"
            ],
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 640,
            "name": "WebRtcLocalIpsAllowedUrls",
            "owners": [
                "qingsi@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Set an external source of URL restrictions",
            "desc": "When this policy is set to a non-empty string the WebView will read URL restrictions from the content provider with the given authority name.",
            "example_value": "com.android.chrome.SupervisedUserProvider",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "webview_android"
            ],
            "id": 341,
            "name": "WebRestrictionsAuthority",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "tags": [
                "filtering",
                "admin-sharing"
            ],
            "type": "string"
        },
        {
            "caption": "Enable component updates in Google Chrome",
            "desc": "Enables component updates for all components in Google Chrome when not set or set to enabled.\n\n      If set to disabled, updates to components are disabled. However, some components are exempt from this policy: updates to any component that does not contain executable code, or does not significantly alter the behavior of the browser, or is critical for its security will not be disabled.\n      Examples of such components include the certificate revocation lists and Safe Browsing data.\n      See https://developers.google.com/safe-browsing for more info on Safe Browsing.\n      Please note that setting this policy to disabled can potentially prevent the Google Chrome developers from providing critical security fixes in a timely manner and is thus not recommended.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 342,
            "name": "ComponentUpdatesEnabled",
            "owners": [
                "file://components/update_client/OWNERS",
                "sorin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:54-",
                "chrome_os:54-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Native Printing",
            "deprecated": true,
            "desc": "Setting the policy lets administrators set up a list of printers for their users. Printer selection occurs the first time users try to print.\n\n      Using the policy:\n\n      * Customize free-form display_name and description for ease of printer selection.\n\n      * Help users identify printers using manufacturer and model.\n\n      * uri should be an address reachable from a client computer, including the scheme, port, and queue.\n\n      * Optionally provide uuid to help deduplicate zeroconf printers.\n\n      * Either use the model name for effective_model or set autoconf to True. Printers with both or no properties get ignored.\n\n      PPDs are downloaded after the printer is used, and frequently used PPDs are cached. This policy doesn't affect whether users can configure printers on individual devices.\n\n      Note: For Microsoft\u00ae Active Directory\u00ae managed devices, this policy supports expansion of ${MACHINE_NAME[,pos[,count]]} to the Microsoft\u00ae Active Directory\u00ae machine name or a substring of it. For example, if the machine name is CHROMEBOOK, then ${MACHINE_NAME,6,4} gets replaced by the 4 characters starting after the 6th position, in other words, BOOK. The position is zero-based.\n\n      This policy is deprecated, please use Printers instead.",
            "example_value": [
                "{ \"display_name\": \"Color Laser\", \"description\": \"The printer next to the water cooler.\", \"manufacturer\": \"Printer Manufacturer\", \"model\": \"Color Laser 2004\", \"uri\": \"ipps://print-server.intranet.example.com:443/ipp/cl2k4\", \"uuid\": \"1c395fdb-5d93-4904-b246-b2c046e79d12\", \"ppd_resource\": { \"effective_model\": \"Printer Manufacturer ColorLaser2k4\", \"autoconf\": false } }"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 350,
            "name": "NativePrinters",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "skau@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:57-"
            ],
            "tags": [],
            "type": "list",
            "validation_schema": {
                "items": {
                    "id": "PrinterType",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "display_name": {
                            "type": "string"
                        },
                        "manufacturer": {
                            "type": "string"
                        },
                        "model": {
                            "type": "string"
                        },
                        "ppd_resource": {
                            "id": "PpdResource",
                            "properties": {
                                "autoconf": {
                                    "description": "Boolean flag indicating whether IPP Everywhere should be used to set up the printer. This flag is supported on Google Chrome OS version 76 and higher.",
                                    "type": "boolean"
                                },
                                "effective_model": {
                                    "description": "This field must match one of the strings which represent a Google Chrome OS supported printer. The string will be used to identify and install the appropriate PPD for the printer. More information can be found at https://support.google.com/chrome?p=noncloudprint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "uri": {
                            "type": "string"
                        },
                        "uuid": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            }
        },
        {
            "caption": "Configures a list of printers",
            "desc": "Setting the policy lets administrators set up a list of printers for their users. Printer selection occurs the first time users try to print.\n\n      Using the policy:\n\n      * Customize free-form display_name and description for ease of printer selection.\n\n      * Help users identify printers using manufacturer and model.\n\n      * uri should be an address reachable from a client computer, including the scheme, port, and queue.\n\n      * Optionally provide uuid to help deduplicate zeroconf printers.\n\n      * Either use the model name for effective_model or set autoconf to True. Printers with both or no properties get ignored.\n\n      PPDs are downloaded after the printer is used, and frequently used PPDs are cached. This policy doesn't affect whether users can configure printers on individual devices.\n\n      Note: For Microsoft\u00ae Active Directory\u00ae managed devices, this policy supports expansion of ${MACHINE_NAME[,pos[,count]]} to the Microsoft\u00ae Active Directory\u00ae machine name or a substring of it. For example, if the machine name is CHROMEBOOK, then ${MACHINE_NAME,6,4} gets replaced by the 4 characters starting after the 6th position, in other words, BOOK. The position is zero-based.",
            "example_value": [
                "{ \"display_name\": \"Color Laser\", \"description\": \"The printer next to the water cooler.\", \"manufacturer\": \"Printer Manufacturer\", \"model\": \"Color Laser 2004\", \"uri\": \"ipps://print-server.intranet.example.com:443/ipp/cl2k4\", \"uuid\": \"1c395fdb-5d93-4904-b246-b2c046e79d12\", \"ppd_resource\": { \"effective_model\": \"Printer Manufacturer ColorLaser2k4\", \"autoconf\": false } }"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 769,
            "name": "Printers",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "skau@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list",
            "validation_schema": {
                "items": {
                    "id": "PrinterTypeInclusive",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "display_name": {
                            "type": "string"
                        },
                        "manufacturer": {
                            "type": "string"
                        },
                        "model": {
                            "type": "string"
                        },
                        "ppd_resource": {
                            "id": "PpdResourceInclusive",
                            "properties": {
                                "autoconf": {
                                    "description": "Boolean flag indicating whether IPP Everywhere should be used to set up the printer.",
                                    "type": "boolean"
                                },
                                "effective_model": {
                                    "description": "This field must match one of the strings which represent a Google Chrome OS supported printer. The string will be used to identify and install the appropriate PPD for the printer. More information can be found at https://support.google.com/chrome?p=noncloudprint.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "uri": {
                            "type": "string"
                        },
                        "uuid": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            }
        },
        {
            "caption": "Enterprise printer configuration file",
            "deprecated": true,
            "desc": "Setting this policy configure enterprise printers. Its format matches the NativePrinters dictionary, with an additional required \"id\" or \"guid\" field for each printer for allow listing or deny listing. The file size can't exceed 5MB and is in JSON format. A file with about 21,000 printers encodes as a 5MB file. The cryptographic hash helps verify download integrity. The file is downloaded, cached, and redownloaded when the URL or the hash changes. Google Chrome OS downloads the file for printer configurations and makes printers available along with NativePrintersBulkAccessMode, NativePrintersBulkWhitelist, and NativePrintersBulkBlacklist.\n\n      This policy has no effect on whether users can configure printers on individual devices. It is intended to be supplementary to the configuration of printers by individual users.\n\n      If you set the policy, users can't change it.\n\n      This policy is deprecated, please use PrintersBulkConfiguration instead.",
            "example_value": {
                "url": "https://example.com/printerpolicy",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 382,
            "max_size": 5242880,
            "name": "NativePrintersBulkConfiguration",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "luum@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Enterprise printer configuration file",
            "desc": "Setting this policy configure enterprise printers. Its format matches the Printers dictionary, with an additional required \"id\" or \"guid\" field for each printer for allow listing or deny listing. The file size can't exceed 5MB and is in JSON format. A file with about 21,000 printers encodes as a 5MB file. The cryptographic hash helps verify download integrity. The file is downloaded, cached, and redownloaded when the URL or the hash changes. Google Chrome OS downloads the file for printer configurations and makes printers available along with PrintersBulkAccessMode, PrintersBulkAllowlist, and PrintersBulkBlocklist.\n\n      This policy has no effect on whether users can configure printers on individual devices. It is intended to be supplementary to the configuration of printers by individual users.\n\n      If you set the policy, users can't change it.",
            "example_value": {
                "url": "https://example.com/printerpolicy",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 770,
            "max_size": 5242880,
            "name": "PrintersBulkConfiguration",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "luum@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Printer configuration access policy.",
            "deprecated": true,
            "desc": "Setting the policy designates which access policy applies to bulk printer configuration, controlling which printers from NativePrintersBulkConfiguration are available for users.\n\n      * If BlacklistRestriction (value 0) is selected, NativePrintersBulkBlacklist restricts access to the specified printers\n\n      * If WhitelistPrintersOnly is selected, NativePrintersBulkWhitelist (value 1) designates only those printers which are selectable\n\n      * AllowAll (Value 2) displays all printers\n\n      Leaving the policy unset puts AllowAll in use.\n\n      This policy is deprecated, please use PrintersBulkAccessMode instead.",
            "example_value": 1,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 383,
            "items": [
                {
                    "caption": "All printers are shown except those in the blacklist.",
                    "name": "BlacklistRestriction",
                    "value": 0
                },
                {
                    "caption": "Only printers in the whitelist are shown to users",
                    "name": "WhitelistPrintersOnly",
                    "value": 1
                },
                {
                    "caption": "Allow all printers from the configuration file.",
                    "name": "AllowAll",
                    "value": 2
                }
            ],
            "name": "NativePrintersBulkAccessMode",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "zentaro@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Printer configuration access policy.",
            "desc": "Setting the policy designates which access policy applies to bulk printer configuration, controlling which printers from PrintersBulkConfiguration are available for users.\n\n      * BlocklistRestriction (value 0) uses PrintersBulkBlocklist to restrict access to the specified printers\n\n      * AllowlistPrintersOnly (value 1) uses PrintersBulkAllowlist to designate only those printers which are selectable\n\n      * AllowAll (value 2) displays all printers\n\n      Leaving the policy unset puts AllowAll in use.",
            "example_value": 1,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 772,
            "items": [
                {
                    "caption": "All printers are shown except those in the blocklist.",
                    "name": "BlocklistRestriction",
                    "value": 0
                },
                {
                    "caption": "Only printers in the allowlist are shown to users",
                    "name": "AllowlistPrintersOnly",
                    "value": 1
                },
                {
                    "caption": "Allow all printers from the configuration file.",
                    "name": "AllowAll",
                    "value": 2
                }
            ],
            "name": "PrintersBulkAccessMode",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "zentaro@chromium.org",
                "thestig@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Disabled enterprise printers",
            "deprecated": true,
            "desc": "If BlacklistRestriction is chosen for NativePrintersBulkAccessMode, then setting NativePrintersBulkBlacklist specifies which printers users can't use. All printers are provided to the user, except for the IDs listed in this policy. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in NativePrintersBulkConfiguration.\n\n      This policy is deprecated, please use PrintersBulkBlocklist instead.",
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 384,
            "name": "NativePrintersBulkBlacklist",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "thestig@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Disabled enterprise printers",
            "desc": "If BlocklistRestriction is chosen for PrintersBulkAccessMode, then setting PrintersBulkBlocklist specifies which printers users can't use. All printers are provided to the user, except for the IDs listed in this policy. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in PrintersBulkConfiguration.",
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 779,
            "name": "PrintersBulkBlocklist",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "thestig@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enabled enterprise printers",
            "deprecated": true,
            "desc": "If WhitelistPrintersOnly is chosen for NativePrintersBulkAccessMode, then setting NativePrintersBulkWhitelist specifies which printers users can use. Only the printers with IDs matching the values in this policy are available to the user. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in NativePrintersBulkConfiguration.\n\n      This policy is deprecated, please use PrintersBulkAllowlist instead.",
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 385,
            "name": "NativePrintersBulkWhitelist",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "thestig@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enabled enterprise printers",
            "desc": "If AllowlistPrintersOnly is chosen for PrintersBulkAccessMode, then setting PRINTERS_BULK_ALLOWLIST specifies which printers users can use. Only the printers with IDs matching the values in this policy are available to the user. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in PrintersBulkConfiguration.",
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 780,
            "name": "PrintersBulkAllowlist",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "thestig@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enterprise printer configuration file for devices",
            "deprecated": true,
            "desc": "Setting the policy provides configurations for enterprise printers bound to devices. Its format matches the NativePrinters dictionary, with an additional required \"id\" or \"guid\" field for each printer for allow listing or deny listing. The file size can't exceed 5MB and is in JSON format. A file with about 21,000 printers encodes as a 5MB file. The cryptographic hash helps verify download integrity. The file is downloaded, cached, and redownloaded when the URL or the hash changes. Google Chrome OS downloads the file for printer configurations and makes printers available along with DevicePrintersAccessMode, DevicePrintersAllowlist, and DevicePrintersBlocklist.\n\n      This policy:\n\n      * doesn't affect whether users can configure printers on individual devices\n\n      * supplements NativePrintersBulkConfiguration and individual users' printer setups\n\n      If unset, there are no device printers, and the other DeviceNativePrinter* policies are ignored.\n\n      This policy is deprecated, please use DevicePrinters instead.",
            "device_only": true,
            "example_value": {
                "url": "https://example.com/printerpolicy",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 386,
            "max_size": 5242880,
            "name": "DeviceNativePrinters",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Device printers configuration access policy.",
            "deprecated": true,
            "desc": "Setting the policy designates which access policy applies to bulk printer configuration, controlling which printers from DevicePrinters are available for users.\n\n      * BlacklistRestriction (value 0), DevicePrintersBlocklist can restrict access to the specified printers\n\n      * If set to WhitelistPrintersOnly (value 1), DevicePrintersAllowlist designates only those printers which are selectable\n\n      * AllowAll (value 2), all printers are shown.\n\n      Leaving the policy unset applies AllowAll.\n\n      This policy is deprecated, please use DevicePrintersAccessMode instead.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 387,
            "items": [
                {
                    "caption": "All printers are shown except those in the blacklist.",
                    "name": "BlacklistRestriction",
                    "value": 0
                },
                {
                    "caption": "Only printers in the whitelist are shown to users",
                    "name": "WhitelistPrintersOnly",
                    "value": 1
                },
                {
                    "caption": "Allow all printers from the configuration file.",
                    "name": "AllowAll",
                    "value": 2
                }
            ],
            "name": "DeviceNativePrintersAccessMode",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Disabled enterprise device printers",
            "deprecated": true,
            "desc": "If BlacklistRestriction is chosen for DevicePrintersAccessMode, then setting DeviceNativePrintersBlacklist specifies which printers users can't use. All printers are provided to users, except for the IDs listed in this policy. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in DevicePrinters.\n\n      This policy is deprecated, please use DevicePrintersBlocklist instead.",
            "device_only": true,
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 388,
            "name": "DeviceNativePrintersBlacklist",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enabled enterprise device printers",
            "deprecated": true,
            "desc": "If WhitelistPrintersOnly is chosen for DevicePrintersAccessMode, then setting DeviceNativePrintersWhitelist specifies which printers users can use. Only the printers with IDs matching the values in this policy are available to users. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in DevicePrinters.\n\n      This policy is deprecated, please use DevicePrintersAllowlist instead.",
            "device_only": true,
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 389,
            "name": "DeviceNativePrintersWhitelist",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enterprise printer configuration file for devices",
            "desc": "Setting the policy provides configurations for enterprise printers bound to devices. Its format matches the Printers dictionary, with an additional required \"id\" or \"guid\" field for each printer for allow listing or deny listing. The file size can't exceed 5MB and is in JSON format. A file with about 21,000 printers encodes as a 5MB file. The cryptographic hash helps verify download integrity. The file is downloaded, cached, and redownloaded when the URL or the hash changes. Google Chrome OS downloads the file for printer configurations and makes printers available along with DevicePrintersAccessMode, DevicePrintersAllowlist, and DevicePrintersBlocklist.\n\n      This policy:\n\n      * doesn't affect whether users can configure printers on individual devices\n\n      * supplements PrintersBulkConfiguration and individual users' printer setups\n\n      If unset, there are no device printers, and the other DevicePrinter* policies are ignored.",
            "device_only": true,
            "example_value": {
                "url": "https://example.com/printerpolicy",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 743,
            "max_size": 5242880,
            "name": "DevicePrinters",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Device printers configuration access policy.",
            "desc": "Setting the policy designates which access policy applies to bulk printer configuration, controlling which printers from DevicePrinters are available for users.\n\n      * BlocklistRestriction (value 0), DevicePrintersBlocklist can restrict access to the specified printers\n\n      * AllowlistPrintersOnly (value 1), DevicePrintersAllowlist designates only those printers which are selectable\n\n      * AllowAll (value 2), all printers are allowed.\n\n      Leaving the policy unset applies AllowAll.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 733,
            "items": [
                {
                    "caption": "All printers are shown except those in the blocklist.",
                    "name": "BlocklistRestriction",
                    "value": 0
                },
                {
                    "caption": "Only printers in the allowlist are shown to users",
                    "name": "AllowlistPrintersOnly",
                    "value": 1
                },
                {
                    "caption": "Allow all printers from the configuration file.",
                    "name": "AllowAll",
                    "value": 2
                }
            ],
            "name": "DevicePrintersAccessMode",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Disabled enterprise device printers",
            "desc": "If BlocklistRestriction is chosen for DevicePrintersAccessMode, then setting DevicePrintersBlocklist specifies which printers users can't use. All printers are provided to users, except for the IDs listed in this policy. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in DevicePrinters.",
            "device_only": true,
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 734,
            "name": "DevicePrintersBlocklist",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enabled enterprise device printers",
            "desc": "If AllowlistPrintersOnly is chosen for DevicePrintersAccessMode, then setting DevicePrintersAllowlist specifies which printers users can use. Only the printers with IDs matching the values in this policy are available to users. The IDs must correspond to the \"id\" or \"guid\" fields in the file specified in DevicePrinters",
            "device_only": true,
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 735,
            "name": "DevicePrintersAllowlist",
            "owners": [
                "skau@chromium.org",
                "bmalcolm@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure TPM firmware update behavior",
            "desc": "Setting the policy configures availability and behavior of TPM firmware updates.\n\n      Specify individual settings in JSON properties:\n\n      * allow-user-initiated-powerwash: If set to true, users can trigger the powerwash flow to install a TPM firmware update.\n\n      * allow-user-initiated-preserve-device-state (available starting in Google Chrome version 68): If set to true, users can invoke the TPM firmware update flow that preserves device-wide state, including enterprise enrollment, but loses user data.\n\n      * auto-update-mode (available starting in Google Chrome version 75): Controls how automatic TPM firmware updates are enforced for vulnerable TPM firmware. All flows preserve local device state. If set to:\n\n        * 1 or left not set, TPM firmware updates are not enforced.\n\n        * 2, TPM firmware updates at the next reboot after user acknowledges the update.\n\n        * 3, TPM firmware updates at the next reboot.\n\n        * 4, TPM firmware updates after enrollment, before user sign-in.\n\n      Leaving the policy unset renders TPM firmware update unavailable.",
            "device_only": true,
            "example_value": {
                "allow-user-initiated-powerwash": true,
                "allow-user-initiated-preserve-device-state": true,
                "auto-update-mode": 1
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 390,
            "name": "TPMFirmwareUpdateSettings",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "properties": {
                    "allow-user-initiated-powerwash": {
                        "type": "boolean"
                    },
                    "allow-user-initiated-preserve-device-state": {
                        "type": "boolean"
                    },
                    "auto-update-mode": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:63-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Configure minimum allowed Chrome version for the device.",
            "deprecated": true,
            "desc": "This policy is removed in M82, please use DeviceMinimumVersion instead.\n\n      Configures the requirement of the minimum allowed version of Google Chrome. Versions below given are treated as obsolete and device would not allow user sign in before OS is updated.\n\n      If current version becomes obsolete during user session, user will be forcefully signed out.\n\n      If this policy is not set, no restrictions are applied, and user can sign regardless of Google Chrome version.\n\n      Here \"Version\" can be either an exact version like '61.0.3163.120' or a version prefix, like '61.0'  ",
            "device_only": true,
            "example_value": "61.0.3163.120",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 394,
            "name": "MinimumRequiredChromeVersion",
            "owners": [
                "antrim@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:64-81"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Configure minimum allowed Chrome OS version for the device.",
            "desc": "Configures the requirement of the minimum allowed version of Google Chrome OS.\n\n      When this policy is set to a non-empty list:\n      If none of the entries has a chromeos_version greater than the current version of the device, then no restrictions are applied and the already existing restrictions are revoked.\n      If at least one of the entries has a chromeos_version greater than the current version, the entry whose version is greater and closest to the current version is chosen.\n      In case of conflict, preference is given to the entry with lower warning_period or aue_warning_period and the policy is applied using that entry.\n\n      If the current version becomes obsolete during user session and the current network limits auto updates, an on-screen notification is shown to update the device within the warning_period shown in the notification.\n      No notifications are shown if the current network allows auto updates and the device must be updated within the warning_period.\n      The warning_period starts from the time the policy is applied.\n      If the device is not updated till the expiry of the warning_period, the user is signed out of the session.\n      If the current version is found to be obsolete at the time of login with expired warning_period, the user is required to update the device before signing in.\n\n      If the current version becomes obsolete during user session and the device has reached auto update expiration, an on-screen notification is shown to return the device within aue_warning_period.\n      If the device is found to have reached auto update expiration at the time of login with expired aue_warning_period, the device is blocked for any user to sign in.\n\n      Unmanaged user sessions do not receive notifications and force log out if unmanaged_user_restricted is unset or set to False.\n\n      If this policy is not set or set to empty, no restrictions are applied, already existing restrictions are revoked and user can sign in regardless of Google Chrome OS version.\n\n      Here chromeos_version can be either an exact version like '13305.0.0' or a version prefix, like '13305'.\n      The warning_period and aue_warning_period are optional values specified in number of days. Default value for them is 0 days, which means that there is no warning period.\n      The unmanaged_user_restricted is an optional property with default value as False.",
            "device_only": true,
            "example_value": {
                "requirements": [
                    {
                        "chromeos_version": "12215",
                        "warning_period": 0,
                        "aue_warning_period": 14
                    },
                    {
                        "chromeos_version": "13315.60.12",
                        "warning_period": 10,
                        "aue_warning_period": 21
                    }
                ],
                "unmanaged_user_restricted": true
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 670,
            "name": "DeviceMinimumVersion",
            "owners": [
                "snijhara@google.com"
            ],
            "schema": {
                "properties": {
                    "requirements": {
                        "items": {
                            "properties": {
                                "aue_warning_period": {
                                    "description": "Time in days after auto update expiration post which the user will be signed out if Google Chrome OS version is less than the specified chromeos_version",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "chromeos_version": {
                                    "description": "Minimum allowed Google Chrome OS version",
                                    "type": "string"
                                },
                                "warning_period": {
                                    "description": "Time in days after which the user will be signed out if Google Chrome OS version is less than the specified chromeos_version",
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "chromeos_version"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "unmanaged_user_restricted": {
                        "description": "A boolean flag indicating whether unmanaged user sessions should receive notifications and force log out if update is required as per this policy.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Configure auto update expiration message for DeviceMinimumVersion policy",
            "desc": "This policy is only effective when the device has reached auto update expiration and does not meet the minimum allowed version of Google Chrome OS set through DeviceMinimumVersion policy.\n\n      When this policy is set to a non-empty string :\n      If the warning time mentioned in DeviceMinimumVersion policy has expired, this message is shown at the login screen when the device is blocked for any user to sign in.\n      If the warning time mentioned in DeviceMinimumVersion policy has not expired, this message is shown on the Chrome management page after user sign in.\n\n      If this policy is not set or set to empty, the default auto update expiration message is shown to the user in both of the above cases.\n      The auto update expiration message must be plain text without any formatting. No markup is allowed.",
            "device_only": true,
            "example_value": "This device has reached auto update expiration. Kindly return it.",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 714,
            "name": "DeviceMinimumVersionAueMessage",
            "owners": [
                "snijhara@google.com",
                "marcgrimme@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Configure allowed quick unlock modes",
            "default_for_enterprise_users": [],
            "desc": "Setting the policy controls which quick unlock modes can unlock the lock screen.\n\n      To allow:\n\n      * Every quick unlock mode, use [\"all\"] (includes modes added in the future).\n\n      * Only PIN unlock, use [\"PIN\"].\n\n      * PIN and fingerprint, use [\"PIN\", \"FINGERPRINT\"].\n\n      If the policy is unset or set to an empty list, no quick unlock modes are available for managed devices.",
            "example_value": [
                "PIN"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 784,
            "name": "QuickUnlockModeAllowlist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "bartfab@chromium.org"
            ],
            "schema": {
                "id": "QuickUnlockModeAllowlist",
                "items": {
                    "enum": [
                        "all",
                        "PIN",
                        "FINGERPRINT"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure allowed quick unlock modes",
            "default_for_enterprise_users": [],
            "deprecated": true,
            "desc": "Setting the policy controls which quick unlock modes can unlock the lock screen.\n\n      To allow:\n\n      * Every quick unlock mode, use [\"all\"] (includes modes added in the future).\n\n      * Only PIN unlock, use [\"PIN\"].\n\n      * PIN and fingerprint, use [\"PIN\", \"FINGERPRINT\"].\n\n      If the policy is unset or set to an empty list, no quick unlock modes are available for managed devices.\n\n      This policy is deprecated, please use QuickUnlockModeAllowlist instead",
            "example_value": [
                "PIN"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 352,
            "name": "QuickUnlockModeWhitelist",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "id": "QuickUnlockModeWhitelist",
                "items": {
                    "enum": [
                        "all",
                        "PIN",
                        "FINGERPRINT"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:56-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Set how often user has to enter password to use quick unlock",
            "desc": "Setting the policy controls how often the lock screen requests the password for quick unlock. Each time the lock screen appears, if the last password entry occurred before the time window specified by the value chosen, quick unlock won't be available. If users stay on the lock screen past this amount of time, a password is requested next time they enter the wrong code or re-enter the lock screen, whichever comes first.\n\n      Leaving the policy unset means users using quick unlock enter their password on the lock screen daily.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 353,
            "items": [
                {
                    "caption": "Password entry is required every six hours",
                    "name": "SixHours",
                    "value": 0
                },
                {
                    "caption": "Password entry is required every twelve hours",
                    "name": "TweleveHours",
                    "value": 1
                },
                {
                    "caption": "Password entry is required every two days (48 hours)",
                    "name": "TwoDays",
                    "value": 2
                },
                {
                    "caption": "Password entry is required every week (168 hours)",
                    "name": "Week",
                    "value": 3
                }
            ],
            "name": "QuickUnlockTimeout",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:57-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Set the minimum length of the lock screen PIN",
            "desc": "Setting the policy enforces the minimum PIN length chosen. (Values below 1 are rounded up to the minimum of 1.)\n\n      Leaving the policy unset enforces a minimal PIN length of 6 digits, the recommended minimum.",
            "example_value": 6,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 354,
            "name": "PinUnlockMinimumLength",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:57-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Set the maximum length of the lock screen PIN",
            "desc": "Setting the policy means the configured maximum PIN length is enforced. A value of 0 or less means the user may set a PIN of any length. If the value is less than PinUnlockMinimumLength but greater than 0, the maximum length is set to the minimum length.\n\n      Leaving the policy unset means no maximum length is enforced.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 355,
            "name": "PinUnlockMaximumLength",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:57-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable users to set weak PINs for the lock screen PIN",
            "desc": "Setting the policy to Enabled allows weak PINs. Some characteristics of weak PINs: only one digit (1111), digits increase by 1 (1234), digits decrease by 1 (4321), and common PINs. Setting the policy to Disabled means users can't set weak, easy-to-guess PINs.\n\n      By default, users get a warning, not an error, for a weak PIN.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 356,
            "name": "PinUnlockWeakPinsAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:57-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Device wallpaper image",
            "desc": "Configure device-level wallpaper image that is shown on the login screen if no user has yet signed in to the device. The policy is set by specifying the URL from which the Chrome OS device can download the wallpaper image and a cryptographic hash used to verify the integrity of the download. The image must be in JPEG format, its file size must not exceed 16MB. The URL must be accessible without any authentication. The wallpaper image is downloaded and cached. It will be re-downloaded whenever the URL or the hash changes.\n\n      If the device wallpaper policy is set, the Chrome OS device will download and use the wallpaper image on the login screen if no user has yet signed in to the device. Once the user logs in, the user's wallpaper policy kicks in.\n\n      If the device wallpaper policy is left not set, it's the user's wallpaper policy to decide what to show if the user's wallpaper policy is set.",
            "device_only": true,
            "example_value": {
                "url": "https://example.com/device_wallpaper.jpg",
                "hash": "1337c0ded00d84b1dbadf00dd15ea5eb000deaddeaddeaddeaddeaddeaddead0"
            },
            "features": {
                "dynamic_refresh": true
            },
            "id": 357,
            "max_size": 16777216,
            "name": "DeviceWallpaperImage",
            "owners": [
                "xdai@chromium.org",
                "maybelle@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the wallpaper image.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL from which the wallpaper image can be downloaded.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:61-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Device sign-in screen locale",
            "desc": "Configures the locale which is enforced on the Google Chrome OS sign-in screen.\n\n      If this policy is set, the sign-in screen will always be displayed in the locale which is given by the first value of this policy (the policy is defined as a list for forward compatibility).  If this policy is not set or is set to an empty list, the sign-in screen will be displayed in the locale of the last user session.  If this policy is set to a value which is not a valid locale, the sign-in screen will be displayed in a fallback locale (currently, en-US).",
            "device_only": true,
            "example_value": [
                "en-US"
            ],
            "features": {
                "dynamic_refresh": false
            },
            "id": 364,
            "name": "DeviceLoginScreenLocales",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:58-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Device sign-in screen keyboard layouts",
            "desc": "Configures which keyboard layouts are allowed on the Google Chrome OS sign-in screen.\n\n      If this policy is set to a list of input method identifiers, the given input methods will be available on the sign-in screen. The first given input method will be preselected. While a user pod is focused on the sign-in screen, the user's last used input method will be available in addition to the input methods given by this policy. If this policy is not set, the input methods on the sign-in screen will be derived from the locale in which the sign-in screen is displayed. Values which are not valid input method identifiers will be ignored.",
            "device_only": true,
            "example_value": [
                "xkb:us::en",
                "xkb:ch::ger"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 365,
            "name": "DeviceLoginScreenInputMethods",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:58-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Force the sign-in screen to show or hide system information.",
            "desc": "Specify whether the system information (e.g. Chrome OS version, device serial\n      number) is always shown (or hidden) on the login screen.\n\n      If the policy is set to true, the system information will be shown forcedly.\n      If the policy is set to false, the system information will be hidden forcedly.\n      If the policy is unset, default hehavior (being shown for Canary / Dev channel)\n      is effective. Users can toggle the visibility by specific operations (e.g., Alt-V).",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 609,
            "name": "DeviceLoginScreenSystemInfoEnforced",
            "owners": [
                "anqing@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow SMS Messages to be synced from phone to Chromebook.",
            "default_for_enterprise_users": false,
            "desc": "Setting the policy to Enabled lets users set up their devices to sync their text messages to Chromebooks. Users must explicitly opt in to this feature by completing a setup flow. On completion, users can send and receive texts on their Chromebooks.\n\n      Setting the policy to Disabled means users can't set up text syncing.\n\n      Leaving the policy unset means that by default, the feature isn't allowed for managed users but is allowed for other users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 469,
            "name": "SmsMessagesAllowed",
            "owners": [
                "jlklein@chromium.org",
                "jonmann@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Wi-Fi network configurations to be synced across Google Chrome OS devices and a connected Android phone.",
            "default_for_enterprise_users": false,
            "desc": "If this setting is enabled, users will be allowed to sync Wi-Fi network configurations between their Google Chrome OS device(s) and a connected Android phone. Before Wi-Fi network configurations can sync, users must explicitly opt in to this feature by completing a setup flow.\n\n      If this setting is disabled, users will not be allowed to sync Wi-Fi network configurations.\n\n      This feature depends on the wifiConfigurations datatype in Chrome Sync being enabled. If wifiConfigurations is disabled in the SyncTypesListDisabled policy, or Chrome Sync is disabled in the SyncDisabled policy this feature will not be enabled.\n\n      If this policy is left not set, the default is not allowed for managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 798,
            "name": "WifiSyncAndroidAllowed",
            "owners": [
                "jonmann@chromium.org",
                "cvandermerwe@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:89-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Smart Lock Signin to be used.",
            "default_for_enterprise_users": false,
            "desc": "If this setting is enabled, users will be allowed to sign into their account with Smart Lock. This is more permissive than usual Smart Lock behavior which only allows users to unlock their screen.\n\n      If this setting is disabled, users will not be allowed to use Smart Lock Signin.\n\n      If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 488,
            "name": "SmartLockSigninAllowed",
            "owners": [
                "hansberry@chromium.org",
                "jhawkins@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:71-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Instant Tethering to be used.",
            "default_for_enterprise_users": false,
            "desc": "If this setting is enabled, users will be allowed to use Instant Tethering, which allows their Google phone to share its mobile data with their device.\n\n      If this setting is disabled, users will not be allowed to use Instant Tethering.\n\n      If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 367,
            "name": "InstantTetheringAllowed",
            "owners": [
                "hansberry@chromium.org",
                "khorimoto@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:60-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Phone Hub to be enabled.",
            "default_for_enterprise_users": false,
            "desc": "If this setting is enabled, users will be allowed to opt in to Phone Hub, which allows them to interact with their phone on a Chrome OS device.\n\n      If this setting is disabled, users will not be allowed to opt in to Phone Hub.\n\n      If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 795,
            "name": "PhoneHubAllowed",
            "owners": [
                "khorimoto@google.com",
                "danlee@google.com",
                "better-together-dev@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:89-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Phone Hub notifications to be enabled.",
            "desc": "If this setting is enabled, users who have already opted in to Phone Hub, will be able to send/receive their phone's notifications on Chrome OS.\n\n      If this setting is disabled, users will not be allowed to use this feature. If the PhoneHubAllowed policy is disabled, users also will not be allowed to use this feature.\n\n      If this policy is left not set, the default is allowed for both enterprise-managed users and non-managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 796,
            "name": "PhoneHubNotificationsAllowed",
            "owners": [
                "khorimoto@google.com",
                "danlee@google.com",
                "better-together-dev@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:89-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Phone Hub task continuation to be enabled.",
            "desc": "If this setting is enabled, users who have already opted in to Phone Hub, will be able to continue tasks such as viewing their phone's webpages on Chrome OS.\n\n      If this setting is disabled, users will not be allowed to use this feature. If the PhoneHubAllowed policy is disabled, users also will not be allowed to use this feature.\n\n      If this policy is left not set, the default is allowed for both enterprise-managed users and non-managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 797,
            "name": "PhoneHubTaskContinuationAllowed",
            "owners": [
                "khorimoto@google.com",
                "danlee@google.com",
                "better-together-dev@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:89-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Nearby Share to be enabled.",
            "default_for_enterprise_users": false,
            "desc": "If this setting is enabled, users will be allowed to opt in to Nearby Share, which allows them to send and receive files from people closeby.\n\n      If this setting is disabled, users will not be allowed to opt in to Nearby Share.\n\n      If this policy is left not set, the default is not allowed for enterprise-managed users and allowed for non-managed users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 761,
            "name": "NearbyShareAllowed",
            "owners": [
                "danlee@google.com",
                "hansberry@chromium.org",
                "better-together-dev@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:91-"
            ],
            "tags": [
                "local-data-access",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Thunderbolt/USB4 peripheral data access",
            "desc": " If this policy is disabled user will not be able to fully connect their Thunderbolt/USB4 peripheral device through PCIe tunneling.\n\n      If this policy is enabled, user will be able to fully connect their Thunderbolt/USB4 peripheral device through PCIe tunneling.\n\n      If policy is left unset, defaults to false and the user will be able to select whichever state (true/false) for this setting.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 825,
            "items": [
                {
                    "caption": "Enables PCIe tunneling for Thunderbolt/USB4 peripheral devices, peripheral devices will function at their full capabilities",
                    "value": true
                },
                {
                    "caption": "Disables PCIe tunneling for Thunderbolt/USB4 peripheral devices, limiting the device capabilities",
                    "value": false
                }
            ],
            "name": "DevicePciPeripheralDataAccessEnabled",
            "owners": [
                "jimmyxgong@chromium.org",
                "cros-peripheral@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:90-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow queries to a Google time service",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset means Google Chrome send occasional queries to a Google server to retrieve an accurate timestamp.\n\n      Setting the policy to Disabled stops Google Chrome from sending these queries.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 370,
            "items": [
                {
                    "caption": "Allow queries to a Google server to retrieve an accurate timestamp",
                    "value": true
                },
                {
                    "caption": "Do not allow queries to Google servers to retrieve timestamps",
                    "value": false
                }
            ],
            "name": "BrowserNetworkTimeQueriesEnabled",
            "owners": [
                "estark@chromium.org",
                "mab@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:60-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Integrated second factor authentication mode",
            "desc": "Specifies how the on-board secure element hardware can be used to provide a second-factor authentication if it is compatible with this feature. The machine power button is used to detect the user physical presence.\n\n      If 'Disabled' is selected, no second factor is provided.\n\n      If 'U2F' is selected, the integrated second factor will behave according the FIDO U2F specification.\n\n      If 'U2F_EXTENDED' is selected, the integrated second factor will provide the U2F functions plus some extensions for individual attestation.",
            "device_only": true,
            "example_value": 2,
            "features": {
                "dynamic_refresh": false
            },
            "id": 372,
            "items": [
                {
                    "caption": "Second factor disabled",
                    "name": "Disabled",
                    "value": 1
                },
                {
                    "caption": "U2F (Universal Second Factor)",
                    "name": "U2F",
                    "value": 2
                },
                {
                    "caption": "U2F plus extensions for individual attestation",
                    "name": "U2F_EXTENDED",
                    "value": 3
                }
            ],
            "name": "DeviceSecondFactorAuthentication",
            "owners": [
                "vpalatin@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:61-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Use System Default Printer as Default",
            "default": false,
            "desc": "Setting the policy to Enabled means Google Chrome uses the OS default printer as the default destination for print preview.\n\n      Setting the policy to Disabled or leaving it unset means Google Chrome uses the most recently used printer as the default destination for print preview.",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 373,
            "items": [
                {
                    "caption": "Use the system default printer as the default choice in Print Preview",
                    "value": true
                },
                {
                    "caption": "Use the most recently used printer as the default choice in Print Preview",
                    "value": false
                }
            ],
            "name": "PrintPreviewUseSystemDefaultPrinter",
            "owners": [
                "file://printing/OWNERS",
                "thestig@chromium.org",
                "rbpotter@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:61-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Migration strategy for ecryptfs",
            "deprecated": true,
            "desc": "This policy was removed in M61.\n\n      Specifies how a device should behave that shipped with ecryptfs and needs to transition to ext4 encryption.\n\n      If you set this policy to 'DisallowArc', Android apps will be disabled for all users on the device (including those that have ext4 encryption already) and no migration from ecryptfs to ext4 encryption will be offered to any users.\n\n      If you set this policy to 'AllowMigration', users with ecryptfs home directories will be offered to migrate these to ext4 encryption as necessary (currently when Android N becomes available on the device).\n\n      This policy does not apply to kiosk apps - these are migrated automatically. If this policy is left not set, the device will behave as if 'DisallowArc' was chosen.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true
            },
            "id": 374,
            "items": [
                {
                    "caption": "Policy unset, disallow data migration and ARC",
                    "name": "Unset",
                    "value": 0
                },
                {
                    "caption": "Disallow data migration and ARC",
                    "name": "DisallowArc",
                    "value": 1
                },
                {
                    "caption": "Allow data migration",
                    "name": "AllowMigration",
                    "value": 2
                }
            ],
            "name": "DeviceEcryptfsMigrationStrategy",
            "owners": [
                "igorcov@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:60-60"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Migration strategy for ecryptfs",
            "deprecated": true,
            "desc": "This policy was removed in M87 and home directories will automatically migrate to ext4 at sign-in.\n      Setting the policy specifies the action to take when the user's home directory was created with ecryptfs encryption. Unless ecryptfs-encrypted home directories migrate to ext4-encryption, Android apps might stop running.\n\n      Setting the policy to:\n\n      * Migrate (or an unsupported option such as AskUser or AskForEcryptfsArcUsers) means directories automatically migrate to ext4 at sign-in, without asking for user consent.\n\n      * Wipe or MinimalMigrate means that, at sign-in, new ext4-encrypted home directories replace old ecryptfs-encrypted directories. To help the user avoid repeated sign-ins, MinimalMigrate tries to preserve sign-in tokens.\n\n      * DisallowArc or leaving it unset prevents migration, and the user's Android apps stop running.\n\n      This policy doesn't apply to kiosk users.\n\n      Warning: Wipe and MinimalMigrate remove local data.",
            "device_only": false,
            "example_value": 2,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 376,
            "items": [
                {
                    "caption": "Disallow data migration and ARC.",
                    "name": "DisallowArc",
                    "value": 0
                },
                {
                    "caption": "Migrate automatically, don\u2019t ask for user consent.",
                    "name": "Migrate",
                    "value": 1
                },
                {
                    "caption": "Wipe the user\u2019s ecryptfs home directory and start with a fresh ext4-encrypted home directory.",
                    "name": "Wipe",
                    "value": 2
                },
                {
                    "caption": "Similar to Wipe (value 2), but tries to preserve login tokens so the user does not have to sign in again.",
                    "name": "MinimalMigrate",
                    "value": 4
                }
            ],
            "name": "EcryptfsMigrationStrategy",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    4
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:61-87"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Select task scheduler configuration",
            "desc": "Setting the policy instructs Google Chrome OS to use the task scheduler configuration identified by the specified name. This policy can be set to Conservative or Performance, which tune the task scheduler for stability or maximum performance, respectively.\n\n      If unset, users make their own choice.",
            "example_value": "performance",
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 522,
            "items": [
                {
                    "caption": "Optimize for stability.",
                    "name": "Conservative",
                    "value": "conservative"
                },
                {
                    "caption": "Optimize for performance.",
                    "name": "Performance",
                    "value": "performance"
                }
            ],
            "name": "SchedulerConfiguration",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "enum": [
                    "conservative",
                    "performance"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:74-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Whitelist note-taking apps allowed on the Google Chrome OS lock screen",
            "deprecated": true,
            "desc": "This policy is deprecated, please use NoteTakingAppsLockScreenAllowlist instead.\n\n      Setting the policy specifies the apps that users can turn on as a note-taking app on the Google Chrome OS lock screen.\n\n      If the preferred app is on the lock screen, a UI element for launching the preferred note-taking app appears on the screen. When launched, the app can create a window on top of the lock screen and create notes in this context. The app can import created notes to the primary user session, when the session is unlocked. Only Google Chrome note-taking apps are supported on the lock screen.\n\n      Setting the policy means users can turn on an app on the lock screen if the app's extension ID is in the policy list value. So, setting it to an empty list will turn off note-taking on the lock screen. The policy with an app ID doesn't necessarily mean that users can turn the app on as a note-taking app on the lock screen. For example, on Google Chrome 61, the set of available apps is also restricted by the platform.\n\n      Leaving the policy unset amounts to no restrictions on the set of apps users can enable on the lock screen imposed by the policy.",
            "example_value": [
                "abcdefghabcdefghabcdefghabcdefgh"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 377,
            "name": "NoteTakingAppsLockScreenWhitelist",
            "owners": [
                "tbarzic@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:61-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "The list of note-taking apps allowed on the Google Chrome OS lock screen",
            "desc": "Setting the policy specifies the apps that users can turn on as a note-taking app on the Google Chrome OS lock screen.\n\n      If the preferred app is on the lock screen, a UI element for launching the preferred note-taking app appears on the screen. When launched, the app can create a window on top of the lock screen and create notes in this context. The app can import created notes to the primary user session, when the session is unlocked. Only Google Chrome note-taking apps are supported on the lock screen.\n\n      Setting the policy means users can turn on an app on the lock screen if the app's extension ID is in the policy list value. So, setting it to an empty list will turn off note-taking on the lock screen. The policy with an app ID doesn't necessarily mean that users can turn the app on as a note-taking app on the lock screen. For example, on Google Chrome 61, the set of available apps is also restricted by the platform.\n\n      Leaving the policy unset amounts to no restrictions on the set of apps users can enable on the lock screen imposed by the policy.",
            "example_value": [
                "abcdefghabcdefghabcdefghabcdefgh"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 759,
            "name": "NoteTakingAppsLockScreenAllowlist",
            "owners": [
                "tbarzic@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable casting content to the device",
            "default_for_enterprise_users": false,
            "deprecated": true,
            "desc": "Allow content to be cast to the device using Google Cast.\n\n          If this policy is set to False, users will not be able to cast content to their device. If this policy is set to True, users are allowed to cast content. If this policy is not set, users are not allowed to cast content to enrolled Chrome OS devices, but can cast to non enrolled devices.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 378,
            "name": "CastReceiverEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Name of the Google Cast destination",
            "deprecated": true,
            "desc": "Determine the name advertised as a Google Cast destination.\n\n          If this policy is set to a non empty string, that string will be used as the name of the Google Cast destination. Otherwise, the destination name will be the device name. If this policy is not set, the destination name will be the device name, and the owner of the device (or a user from the domain managing the device) will be allowed to change it. The name is limited to 24 characters.",
            "device_only": true,
            "example_value": "My Chromebook",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 379,
            "name": "CastReceiverName",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Off hours intervals when the specified device policies are released",
            "desc": "Setting the policy means the specified device policies are ignored (use these policies' default settings) during the specified intervals. Device policies are reapplied by Google Chrome when the policy period starts or ends. The user is notified and forced to sign out when this period changes and device policy settings change (for example, when a user signs in with a disallowed account).",
            "device_only": true,
            "example_value": {
                "intervals": [
                    {
                        "start": {
                            "day_of_week": "MONDAY",
                            "time": 12840000
                        },
                        "end": {
                            "day_of_week": "MONDAY",
                            "time": 21720000
                        }
                    },
                    {
                        "start": {
                            "day_of_week": "FRIDAY",
                            "time": 38640000
                        },
                        "end": {
                            "day_of_week": "FRIDAY",
                            "time": 57600000
                        }
                    }
                ],
                "timezone": "GMT",
                "ignored_policy_proto_tags": [
                    3,
                    8
                ]
            },
            "features": {
                "dynamic_refresh": true
            },
            "id": 380,
            "name": "DeviceOffHours",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "properties": {
                    "ignored_policy_proto_tags": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "intervals": {
                        "items": {
                            "id": "WeeklyTimeIntervals",
                            "properties": {
                                "end": {
                                    "$ref": "WeeklyTime"
                                },
                                "start": {
                                    "id": "WeeklyTime",
                                    "properties": {
                                        "day_of_week": {
                                            "enum": [
                                                "MONDAY",
                                                "TUESDAY",
                                                "WEDNESDAY",
                                                "THURSDAY",
                                                "FRIDAY",
                                                "SATURDAY",
                                                "SUNDAY"
                                            ],
                                            "id": "WeekDay",
                                            "type": "string"
                                        },
                                        "time": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:62-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Google Chrome cloud policy overrides Platform policy.",
            "desc": "Setting the policy to Enabled means cloud policy takes precedence if it conflicts with platform policy.\n\n      Setting the policy to Disabled or leaving it unset means platform policy takes precedence if it conflicts with cloud policy.\n\n      This mandatory policy affects machine scope cloud policies.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "metapolicy_type": "precedence"
            },
            "id": 381,
            "name": "CloudPolicyOverridesPlatformPolicy",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:75-",
                "ios:88-",
                "android:97-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow user cloud policies to override Chrome Browser Cloud Management policies.",
            "default": false,
            "desc": "Setting the policy to Enabled allows policies associated with a Google Workspace account to take precedence if they conflict with Chrome Browser Cloud Management policies.\n\n      Only policies originating from secure users can be merged. A secure user is affiliated with the organization that manages their browser using Chrome Browser Cloud Management. All other user-level policies will have default precedence.\n\n      The policy can be combined with CloudPolicyOverridesPlatformPolicy. If both policies are enabled, user cloud policies will also take precedence over conflicting platform policies.\n\n      Leaving the policy unset or setting it to disabled causes user-level cloud policies to have default priority.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "metapolicy_type": "precedence"
            },
            "id": 899,
            "items": [
                {
                    "caption": "Allow user cloud policies to override machine cloud policies.",
                    "value": true
                },
                {
                    "caption": "Prevent user cloud policies from overriding machine cloud policies.",
                    "value": false
                }
            ],
            "name": "CloudUserPolicyOverridesCloudMachinePolicy",
            "owners": [
                "igorruvinov@chromium.org",
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:96-",
                "android:97-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Ask where to save each file before downloading",
            "desc": "Setting the policy to Enabled means users are asked where to save each file before downloading. Setting the policy to Disabled has downloads start immediately, and users aren't asked where to save the file.\n\n      Leaving the policy unset lets users change this setting.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 395,
            "name": "PromptForDownloadLocation",
            "owners": [
                "macourteau@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:64-",
                "chrome_os:64-",
                "android:92-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow unaffiliated users to use ARC",
            "desc": "Unless ARC is turned off by other means, then setting the policy to True or leaving it unset lets users use ARC. Setting the policy to False means unaffiliated users may not use ARC.\n\n      Changes to the policy only apply while ARC isn't running, for example, while starting Chrome OS.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": false
            },
            "id": 397,
            "name": "UnaffiliatedArcAllowed",
            "owners": [
                "phweiss@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:64-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Intervals when ARC data snapshot update process can be started for Managed Guest Sessions",
            "desc": "If \"DeviceArcDataSnapshotHours\" policy is set, then the ARC data snapshotting mechanism is turned on. And the ARC data snapshot update can be started automatically during the defined time intervals. When an interval starts, ARC data snapshot update is required and no user is logged-in, the ARC data snapshot update process is started without user notification. If the user session is active, the UI notification is shown and have to be accepted in order to reboot a device and start ARC data snapshot update process. Note: a device is blocked for usage during the ARC data snapshot update process.",
            "device_only": true,
            "example_value": {
                "intervals": [
                    {
                        "start": {
                            "day_of_week": "MONDAY",
                            "time": 12840000
                        },
                        "end": {
                            "day_of_week": "MONDAY",
                            "time": 21720000
                        }
                    },
                    {
                        "start": {
                            "day_of_week": "FRIDAY",
                            "time": 38640000
                        },
                        "end": {
                            "day_of_week": "FRIDAY",
                            "time": 57600000
                        }
                    }
                ],
                "timezone": "GMT"
            },
            "features": {
                "dynamic_refresh": true
            },
            "id": 794,
            "name": "DeviceArcDataSnapshotHours",
            "owners": [
                "pbond@chromium.org",
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "properties": {
                    "intervals": {
                        "items": {
                            "$ref": "WeeklyTimeIntervals"
                        },
                        "type": "array"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:88-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable Site Isolation for specified origins",
            "desc": "Setting the policy means each of the named origins in a comma-separated list runs in a dedicated process. Each named origin's process will only be allowed to contain documents from that origin and its subdomains. For example, specifying https://a1.example.com/ allows https://a2.a1.example.com/ in the same process, but not https://example.com or https://b.example.com.\n\n      Since Google Chrome 77, you can also specify a range of origins to isolate using a wildcard. For example, specifying https://[*.]corp.example.com will give every origin underneath https://corp.example.com its own dedicated process, including https://corp.example.com itself, https://a1.corp.example.com, and https://a2.a1.corp.example.com.\n\n      Note that all sites (i.e., scheme plus eTLD+1, such as https://example.com) are already isolated by default on Desktop platforms, as noted in the SitePerProcess policy. This IsolateOrigins policy is useful to isolate specific origins at a finer granularity (e.g., https://a.example.com).\n\n      Also note that origins isolated by this policy will be unable to script other origins in the same site, which is otherwise possible if two same-site documents modify their document.domain values to match. Administrators should confirm this uncommon behavior is not used on an origin before isolating it.\n\n      Setting the policy to off or leaving it unset lets users change this setting.\n\n      Note: For Android, use the IsolateOriginsAndroid policy instead.",
            "device_only": false,
            "example_value": "https://a.example.com/,https://othersite.org/,https://[*.]corp.example.com",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 398,
            "name": "IsolateOrigins",
            "owners": [
                "alexmos@chromium.org",
                "creis@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:63-",
                "chrome_os:63-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string"
        },
        {
            "caption": "Require Site Isolation for every site",
            "desc": "Since Google Chrome 67, site isolation has been enabled by default on all Desktop platforms, causing every site to run in its own process. A site is a scheme plus eTLD+1 (e.g., https://example.com). Setting this policy to Enabled does not change that behavior; it only prevents users from opting out (for example, using Disable site isolation in chrome://flags). Since Google Chrome 76, setting the policy to Disabled or leaving it unset doesn't turn off site isolation, but instead allows users to opt out.\n\n      IsolateOrigins might also be useful for isolating specific origins at a finer granularity than site (e.g., https://a.example.com).\n\n      On Google Chrome OS version 76 and earlier, set the DeviceLoginScreenSitePerProcess device policy to the same value. (If the values don't match, a delay can occur when entering a user session.)\n\n      Note: For Android, use the SitePerProcessAndroid policy instead.",
            "device_only": false,
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 399,
            "name": "SitePerProcess",
            "owners": [
                "alexmos@chromium.org",
                "creis@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:63-",
                "chrome_os:63-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Site Isolation for specified origins",
            "deprecated": true,
            "desc": "\n      This policy was removed in M77.\n      This policy applies to the sign-in screen. Please see also the IsolateOrigins policy which applies to the user session.\n      If the policy is enabled, each of the named origins in a comma-separated list will run in its own process. This will also isolate origins named by subdomains; e.g. specifying https://example.com/ will also cause https://foo.example.com/ to be isolated as part of the https://example.com/ site.\n      If the policy is not configured or disabled, the platform default site isolation settings will be used for the sign-in screen.\n      ",
            "device_only": true,
            "example_value": "https://a.example.com/,https://othersite.org/,https://[*.]corp.example.com",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 417,
            "name": "DeviceLoginScreenIsolateOrigins",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:66-76"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string"
        },
        {
            "caption": "Enable Site Isolation for every site",
            "deprecated": true,
            "desc": "\n      This policy was removed in M77.\n      This policy applies to the sign-in screen. Please see also the SitePerProcess policy which applies to the user session. It is recommended to set both policies to the same value. If the values don't match, a delay may be incurred when entering a user session while the value specified by user policy is being applied.\n      ",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 418,
            "name": "DeviceLoginScreenSitePerProcess",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:66-76"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Site Isolation for specified origins on Android devices",
            "desc": "Setting the policy means each of the named origins in a comma-separated list runs in a dedicated process on Android. Each named origin's process will only be allowed to contain documents from that origin and its subdomains. For example, specifying https://a1.example.com/ allows https://a2.a1.example.com/ in the same process, but not https://example.com or https://b.example.com. Note that Android isolates certain sensitive sites by default starting in Google Chrome version 77, and this policy extends that mode to isolate specific additional origins.\n\n      Since Google Chrome 77, you can also specify a range of origins to isolate using a wildcard. For example, specifying https://[*.]corp.example.com will give every origin underneath https://corp.example.com its own dedicated process, including https://corp.example.com itself, https://a1.corp.example.com, and https://a2.a1.corp.example.com.\n\n      Note that origins isolated by this policy will be unable to script other origins in the same site, which is otherwise possible if two same-site documents modify their document.domain values to match. Administrators should confirm this uncommon behavior is not used on an origin before isolating it.\n\n      Setting the policy to Disabled turns off any form of site isolation, including isolation of sensitive sites and field trials of IsolateOriginsAndroid, SitePerProcessAndroid, and other site isolation modes. Users can still turn on IsolateOrigins manually, through the command line flag.\n\n      Leaving the policy unset lets users change this setting.\n\n      Note: Isolating too many sites on Android may cause performance problems, especially on low-memory devices. This policy applies only to Chrome on Android running on devices with strictly more than 1 GB of RAM. To apply the policy on non-Android platforms, use IsolateOrigins.",
            "device_only": false,
            "example_value": "https://a.example.com/,https://othersite.org/,https://[*.]corp.example.com",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 445,
            "name": "IsolateOriginsAndroid",
            "owners": [
                "alexmos@chromium.org",
                "creis@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "android:68-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "string"
        },
        {
            "caption": "Enable Site Isolation for every site",
            "desc": "Setting the policy to Enabled isolates all sites on Android, such that each site runs in its own process, and it prevents users from opting out. A site is a scheme plus eTLD+1 (e.g., https://example.com). Note that Android isolates certain sensitive sites by default starting in Google Chrome version 77, and this policy extends that default site isolation mode to apply to all sites.\n\n      Setting the policy to Disabled turns off any form of site isolation, including isolation of sensitive sites and field trials of IsolateOriginsAndroid, SitePerProcessAndroid, and other site isolation modes. Users can still turn the policy on manually.\n\n      Leaving the policy unset means users can change this setting.\n\n      IsolateOriginsAndroid might also be useful for isolating specific origins at a finer granularity than site (e.g., https://a.example.com).\n\n      Note: Support for isolating every site on Android will improve, but currently it may cause performance problems, especially on low-end devices. This policy applies only to Chrome on Android running on devices with strictly more than 1 GB of RAM. To isolate specific sites while limiting performance impact for users, use IsolateOriginsAndroid with a list of the sites you want to isolate.  To apply the policy on non-Android platforms, use SitePerProcess.",
            "device_only": false,
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 446,
            "name": "SitePerProcessAndroid",
            "owners": [
                "alexmos@chromium.org",
                "creis@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:68-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Specifies whether SharedArrayBuffers can be used in a non cross-origin-isolated context",
            "default": false,
            "desc": "\n      Specifies whether SharedArrayBuffers can be used in a non cross-origin-isolated context. Google Chrome will require cross-origin isolation when using SharedArrayBuffers from Google Chrome 91 onward (2021-05-25) for Web Compatibility reasons. Additional details can be found on: https://developer.chrome.com/blog/enabling-shared-array-buffer/.\n\n      When set to Enabled, sites can use SharedArrayBuffer with no restrictions.\n\n      When set to Disabled or not set, sites can only use SharedArrayBuffers when cross-origin isolated.",
            "device_only": false,
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 852,
            "items": [
                {
                    "caption": "Allow sites to use SharedArrayBuffers",
                    "value": true
                },
                {
                    "caption": "Prevent sites from using SharedArrayBuffers",
                    "value": false
                }
            ],
            "name": "SharedArrayBufferUnrestrictedAccessAllowed",
            "owners": [
                "bbudge@chromium.org",
                "vahl@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:91-",
                "chrome_os:91-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Chrome to block navigations toward external protocols in sandboxed iframes",
            "default": true,
            "desc": "Chrome will block navigations toward external protocols inside\n      sandboxed iframe. See https://chromestatus.com/features/5680742077038592.\n\n      When True, this lets Chrome blocks those navigations.\n\n      When False, this prevents Chrome from blocking those navigations.\n\n      This defaults to True: security feature enabled.\n\n      This can be used by administrators who need more time to update their internal website affected by this new restriction. This Enterprise policy is temporary; it's intended to be removed after Google Chrome version 104.\n      ",
            "device_only": false,
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 913,
            "items": [
                {
                    "caption": "Allow Chrome to block navigations to external protocols inside sandboxed iframe",
                    "value": true
                },
                {
                    "caption": "Prevent Chrome to block navigations to external protocols inside sandboxed iframe",
                    "value": false
                }
            ],
            "name": "SandboxExternalProtocolBlocked",
            "owners": [
                "arthursonzogni@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:96-",
                "chrome_os:96-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Specifies whether WebAssembly modules can be sent cross-origin",
            "default": false,
            "desc": "\n      Specifies whether WebAssembly modules can be sent to another window or worker cross-origin. Cross-origin WebAssembly module sharing will be deprecated as part of the efforts to deprecate document.domain, see https://github.com/mikewest/deprecating-document-domain. This policy allows to re-enable cross-origin WebAssembly module sharing to offer a longer transition period in the deprecation process.\n\n      When set to True, sites can send WebAssembly modules also cross-origin without restrictions.\n\n      When set to False or not set, sites can only send WebAssembly modules to windows and workers in the same origin.",
            "device_only": false,
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 878,
            "items": [
                {
                    "caption": "Allow WebAssembly modules to be sent cross-origin",
                    "value": true
                },
                {
                    "caption": "Prevent WebAssembly modules to be sent cross-origin",
                    "value": false
                }
            ],
            "name": "CrossOriginWebAssemblyModuleSharingEnabled",
            "owners": [
                "ahaas@chromium.org",
                "clamy@chromium.org",
                "vahl@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:94-",
                "chrome_os:94-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Specifies whether the display-capture permissions-policy is checked or skipped.",
            "default": true,
            "desc": "\n      The display-capture permissions-policy gates access to getDisplayMedia(), as per this spec: https://www.w3.org/TR/screen-capture/#feature-policy-integration. However, if this policy is Disabled, this requirement is not enforced, and getDisplayMedia() is allowed from contexts that would otherwise be forbidden. This Enterprise policy is temporary; it's intended to be removed after Google Chrome version 100. It is intended to unblock Enterprise users whose application is non-spec compliant, but needs time to be fixed.\n\n      When enabled or not set, sites can only call getDisplayMedia() from contexts which are allowlisted by the display-capture permissions-policy.\n\n      When disabled, sites can call getDisplayMedia() even from contexts which are not allowlisted by the display-capture permissions policy. Note that other restrictions may still apply.",
            "device_only": false,
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 880,
            "items": [
                {
                    "caption": "\n          Calls to getDisplayMedia originating from non-allowlisted contexts\n          are denied.",
                    "value": true
                },
                {
                    "caption": "\n          Calls are not denied on account of originating from non-allowlisted\n          contexts. (Calls may still be denied for other reasons.)",
                    "value": false
                }
            ],
            "name": "DisplayCapturePermissionsPolicyEnabled",
            "owners": [
                "eladalon@chromium.org",
                "guidou@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:94-",
                "chrome_os:94-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow WebDriver to Override Incompatible Policies",
            "deprecated": true,
            "desc": "\n      This policy was removed in M80, because it is not necessary anymore as\n      WebDriver is now compatible with all existing policies.\n\n      This policy allows users of the WebDriver feature to override policies which can interfere with its operation.\n\n      Currently this policy disables SitePerProcess and IsolateOrigins policies.\n\n      If the policy is enabled, WebDriver will be able to override incomaptible policies.\n\n      If the policy is disabled or not configured, WebDriver will not be allowed to override incompatible policies.",
            "device_only": false,
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 414,
            "name": "WebDriverOverridesIncompatiblePolicies",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:65-79"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Origins or hostname patterns for which restrictions on\n      insecure origins should not apply",
            "deprecated": true,
            "desc": "Deprecated in M69. Use\n      OverrideSecurityRestrictionsOnInsecureOrigin instead.\n\n      The policy specifies a list of origins (URLs) or hostname patterns (such as \"*.example.com\") for which security restrictions on insecure origins will not apply.\n\n      The intent is to allow organizations to allow origins for legacy applications that cannot deploy TLS, or to set up a staging server for internal web development so that their developers can test out features requiring secure contexts without having to deploy TLS on the staging server. This policy will also prevent the origin from being labeled \"Not Secure\" in the omnibox.\n\n      Setting a list of URLs in this policy has the same effect as setting the command-line flag '--unsafely-treat-insecure-origin-as-secure' to a comma-separated list of the same URLs. If the policy is set, it will override the command-line flag.\n\n      This policy is deprecated in M69 in favor of OverrideSecurityRestrictionsOnInsecureOrigin. If both policies are present, OverrideSecurityRestrictionsOnInsecureOrigin will override this policy.\n\n      For more information on secure contexts, see https://www.w3.org/TR/secure-contexts/\n      ",
            "example_value": [
                "http://testserver.example.com/",
                "*.example.org"
            ],
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 400,
            "name": "UnsafelyTreatInsecureOriginAsSecure",
            "owners": [
                "vogelheim@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:65-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Set default download directory",
            "desc": "Setting the policy changes the default directory that Chrome downloads files to, but users can change the directory.\n\n      Leaving the policy unset means Chrome uses its platform-specific default directory.\n\n      Note: See a list of variables you can use ( https://www.chromium.org/administrators/policy-list-3/user-data-directory-variables ).",
            "example_value": "/home/${user_name}/Downloads",
            "features": {
                "can_be_mandatory": false,
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 401,
            "name": "DefaultDownloadDirectory",
            "owners": [
                "macourteau@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:64-",
                "chrome_os:64-"
            ],
            "tags": [
                "local-data-access"
            ],
            "type": "string"
        },
        {
            "caption": "Device network hostname template",
            "desc": "Setting the policy to a string applies the string as the device hostname during DHCP request. The string can have variables ${ASSET_ID}, ${SERIAL_NUM}, ${MAC_ADDR}, ${MACHINE_NAME}, ${LOCATION} to be replaced with values on the device before using it as a hostname. The resulting substitution should be a valid hostname (per RFC 1035, section 3.1).\n\n      Leaving the policy unset or if the value after substitution isn't a valid hostname, no hostname is set in DHCP request.",
            "device_only": true,
            "example_value": "chromebook-${ASSET_ID}",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 403,
            "name": "DeviceHostnameTemplate",
            "owners": [
                "antrim@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Allow user to configure their device hostname",
            "default": false,
            "desc": "Determine whether a user is allowed to configure the device hostname.\n\n      If DeviceHostnameTemplate is set, the admininistrator sets hostname and the user cannot choose regardless of what this policy is set to.\n      If this policy is set to True and DeviceHostnameTemplate is not set, the admininistrator does not set hostname and the user can choose one.\n      If this policy is set to False and DeviceHostnameTemplate is not set, the admininistrator does not set hostname and the user cannot choose one, hence the default name is used.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_mandatory": true,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 874,
            "items": [
                {
                    "caption": "Allow managed user to configure device hostname",
                    "value": true
                },
                {
                    "caption": "Prevent managed user from configuring device hostname",
                    "value": false
                }
            ],
            "name": "DeviceHostnameUserConfigurable",
            "owners": [
                "khorimoto@google.com",
                "cros-connectivity@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:97-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Abusive Experience Intervention Enforce",
            "default": true,
            "desc": "If SafeBrowsingEnabled is not Disabled, then setting AbusiveExperienceInterventionEnforce to Enabled or leaving it unset prevents sites with abusive experiences from opening new windows or tabs.\n\n       Setting SafeBrowsingEnabled to Disabled or AbusiveExperienceInterventionEnforce to Disabled lets sites with abusive experiences open new windows or tabs.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 404,
            "items": [
                {
                    "caption": "Prevent sites with abusive experiences from opening new windows or tabs",
                    "value": true
                },
                {
                    "caption": "Allow sites with abusive experiences to open new windows or tabs",
                    "value": false
                }
            ],
            "name": "AbusiveExperienceInterventionEnforce",
            "owners": [
                "shivanisha@chromium.org",
                "csharrison@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:65-",
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Force enable spellcheck languages",
            "desc": "Force-enables spellcheck languages. Unrecognized languages in the list will be ignored.\n\n      If you enable this policy, spellcheck will be enabled for the languages specified, in addition to the languages for which the user has enabled spellcheck.\n\n      If you do not set this policy, or disable it, there will be no change to the user's spellcheck preferences.\n\n      If the SpellcheckEnabled policy is set to false, this policy will have no effect.\n\n      If a language is included in both this policy and the SpellcheckLanguageBlocklist policy, this policy is prioritized and the spellcheck language is enabled.\n\n      The currently supported languages are: af, bg, ca, cs, da, de, el, en-AU, en-CA, en-GB, en-US, es, es-419, es-AR, es-ES, es-MX, es-US, et, fa, fo, fr, he, hi, hr, hu, id, it, ko, lt, lv, nb, nl, pl, pt-BR, pt-PT, ro, ru, sh, sk, sl, sq, sr, sv, ta, tg, tr, uk, vi.",
            "example_value": [
                "fr",
                "es"
            ],
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 405,
            "name": "SpellcheckLanguage",
            "owners": [
                "macourteau@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.win:65-",
                "chrome.linux:65-",
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Force disable spellcheck languages",
            "deprecated": true,
            "desc": "This policy is deprecated, please use SpellcheckLanguageBlocklist instead.\n\n      Force-disables spellcheck languages. Unrecognized languages in that list will be ignored.\n\n      If you enable this policy, spellcheck will be disabled for the languages specified. The user can still enable or disable spellcheck for languages not in the list.\n\n      If you do not set this policy, or disable it, there will be no change to the user's spellcheck preferences.\n\n      If the SpellcheckEnabled policy is set to false, this policy will have no effect.\n\n      If a language is included in both this policy and the SpellcheckLanguage policy, the latter is prioritized and the spellcheck language will be enabled.\n\n      The currently supported languages are: af, bg, ca, cs, da, de, el, en-AU, en-CA, en-GB, en-US, es, es-419, es-AR, es-ES, es-MX, es-US, et, fa, fo, fr, he, hi, hr, hu, id, it, ko, lt, lv, nb, nl, pl, pt-BR, pt-PT, ro, ru, sh, sk, sl, sq, sr, sv, ta, tg, tr, uk, vi.",
            "example_value": [
                "fr",
                "es"
            ],
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 536,
            "name": "SpellcheckLanguageBlacklist",
            "owners": [
                "gujen@google.com"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.win:75-",
                "chrome.linux:75-",
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Force disable spellcheck languages",
            "desc": "Force-disables spellcheck languages. Unrecognized languages in that list will be ignored.\n\n      If you enable this policy, spellcheck will be disabled for the languages specified. The user can still enable or disable spellcheck for languages not in the list.\n\n      If you do not set this policy, or disable it, there will be no change to the user's spellcheck preferences.\n\n      If the SpellcheckEnabled policy is set to false, this policy will have no effect.\n\n      If a language is included in both this policy and the SpellcheckLanguage policy, the latter is prioritized and the spellcheck language will be enabled.\n\n      The currently supported languages are: af, bg, ca, cs, da, de, el, en-AU, en-CA, en-GB, en-US, es, es-419, es-AR, es-ES, es-MX, es-US, et, fa, fo, fr, he, hi, hr, hu, id, it, ko, lt, lv, nb, nl, pl, pt-BR, pt-PT, ro, ru, sh, sk, sl, sq, sr, sv, ta, tg, tr, uk, vi.",
            "example_value": [
                "fr",
                "es"
            ],
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 749,
            "name": "SpellcheckLanguageBlocklist",
            "owners": [
                "gujen@google.com"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.win:86-",
                "chrome.linux:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable third party software injection blocking",
            "desc": "Setting the policy to Enabled or leaving it unset prevents third-party software from injecting executable code into Google Chrome's processes.\n\n      Setting the policy to Disabled allows this software to inject such code into Google Chrome's processes.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 407,
            "name": "ThirdPartyBlockingEnabled",
            "owners": [
                "chrisha@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:65-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable spellcheck",
            "default": null,
            "desc": "Setting the policy to Enabled turns spellcheck on, and users can't turn it off. On Microsoft\u00ae Windows\u00ae, Google Chrome OS and Linux\u00ae, spellcheck languages can be switched on or off individually, so users can still turn spellcheck off by switching off every spellcheck language. To avoid that, use the SpellcheckLanguage to force-enable specific spellcheck languages.\n\n      Setting the policy to Disabled turns off spellcheck from all sources, and users can't turn it on. The SpellCheckServiceEnabled, SpellcheckLanguage and SpellcheckLanguageBlocklist policies have no effect when this policy is set to False.\n\n      Leaving the policy unset lets users turn spellcheck on or off in the language settings. ",
            "example_value": false,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 408,
            "items": [
                {
                    "caption": "Enable spellcheck",
                    "value": true
                },
                {
                    "caption": "Disable spellcheck",
                    "value": false
                },
                {
                    "caption": "Allow the user to enable or disable spellcheck",
                    "value": null
                }
            ],
            "name": "SpellcheckEnabled",
            "owners": [
                "macourteau@chromium.org",
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:65-",
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Ads setting for sites with intrusive ads",
            "default": 1,
            "desc": "Unless SafeBrowsingEnabled is set to False, then setting AdsSettingForIntrusiveAdsSites to 1 or leaving it unset allows ads on all sites.\n\n      Setting the policy to 2 blocks ads on sites with intrusive ads.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 409,
            "items": [
                {
                    "caption": "Allow ads on all sites",
                    "name": "AllowAds",
                    "value": 1
                },
                {
                    "caption": "Do not allow ads on sites with intrusive ads",
                    "name": "BlockAds",
                    "value": 2
                }
            ],
            "name": "AdsSettingForIntrusiveAdsSites",
            "owners": [
                "shivanisha@chromium.org",
                "csharrison@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:65-",
                "chrome_os:65-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Restrict accounts that are visible in Google Chrome",
            "desc": "Contains a list of patterns which are used to control the visibility of accounts in Google Chrome.\n\n      Each Google account on the device will be compared to patterns stored in this policy to determine the account visibility in Google Chrome. The account will be visible if its name matches any pattern on the list. Otherwise, the account will be hidden.\n\n      Use the wildcard character '*' to match zero or more arbitrary characters. The escape character is '\\', so to match actual '*' or '\\' characters, put a '\\' in front of them.\n\n      If this policy is not set, all Google accounts on the device will be visible in Google Chrome.",
            "example_value": [
                "*@example.com",
                "user@managedchrome.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "ios"
            ],
            "id": 410,
            "name": "RestrictAccountsToPatterns",
            "owners": [
                "bsazonov@chromium.org",
                "file://components/signin/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "android:65-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Password protection warning trigger",
            "desc": "Setting the policy lets you control the triggering of password protection warning. Password protection alerts users when they reuse their protected password on potentially suspicious sites.\n\n      Use PasswordProtectionLoginURLs and PasswordProtectionChangePasswordURL to set which password to protect.\n\n      If this policy is set to:\n\n      * PasswordProtectionWarningOff, no password protection warning will be shown.\n\n      * PasswordProtectionWarningOnPasswordReuse, password protection warning will be shown when the user reuses their protected password on a non-allowed site.\n\n      * PasswordProtectionWarningOnPhishingReuse, password protection warning will be shown when the user reuses their protected password on a phishing site.\n\n      Leaving the policy unset has the password protection service only protect Google passwords, but users can change this setting.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 411,
            "items": [
                {
                    "caption": "Password protection warning is off",
                    "name": "PasswordProtectionWarningOff",
                    "value": 0
                },
                {
                    "caption": "Password protection warning is triggered by password reuse",
                    "name": "PasswordProtectionWarningOnPasswordReuse",
                    "value": 1
                },
                {
                    "caption": "Password protection warning is triggered by password reuse on phishing page",
                    "name": "PasswordProtectionWarningOnPhishingReuse",
                    "value": 2
                }
            ],
            "name": "PasswordProtectionWarningTrigger",
            "owners": [
                "bdea@chromium.org",
                "nparker@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:69-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Notify a user that a browser relaunch or device restart is recommended or required",
            "desc": "Notify users that Google Chrome must be relaunched or Google Chrome OS must be restarted to apply a pending update.\n\n      This policy setting enables notifications to inform the user that a browser relaunch or device restart is recommended or required. If not set, Google Chrome indicates to the user that a relaunch is needed via subtle changes to its menu, while Google Chrome OS indicates such via a notification in the system tray. If set to 'Recommended', a recurring warning will be shown to the user that a relaunch is recommended. The user can dismiss this warning to defer the relaunch. If set to 'Required', a recurring warning will be shown to the user indicating that a browser relaunch will be forced once the notification period passes. The default period is seven days for Google Chrome and four days for Google Chrome OS, and may be configured via the RelaunchNotificationPeriod policy setting.\n\n      The user's session is restored following the relaunch/restart.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 419,
            "items": [
                {
                    "caption": "Show a recurring prompt to the user indicating that a relaunch is recommended",
                    "name": "Recommended",
                    "value": 1
                },
                {
                    "caption": "Show a recurring prompt to the user indicating that a relaunch is required",
                    "name": "Required",
                    "value": 2
                }
            ],
            "name": "RelaunchNotification",
            "owners": [
                "grt@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:66-",
                "chrome_os:70-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Set the time period for update notifications",
            "desc": "Allows you to set the time period, in milliseconds, over which users are notified that Google Chrome must be relaunched or that a Google Chrome OS device must be restarted to apply a pending update.\n\n      Over this time period, the user will be repeatedly informed of the need for an update. For Google Chrome OS devices, a restart notification appears in the system tray according to the RelaunchHeadsUpPeriod policy. For Google Chrome browsers, the app menu changes to indicate that a relaunch is needed once one third of the notification period passes. This notification changes color once two thirds of the notification period passes, and again once the full notification period has passed. The additional notifications enabled by the RelaunchNotification policy follow this same schedule.\n\n      If not set, the default period of 604800000 milliseconds (one week) is used.",
            "example_value": 604800000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 420,
            "label": "Time period (milliseconds)",
            "name": "RelaunchNotificationPeriod",
            "owners": [
                "grt@chromium.org"
            ],
            "schema": {
                "minimum": 3600000,
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:67-",
                "chrome_os:67-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Set the time of the first user relaunch notification",
            "desc": "Allows you to set the time period, in milliseconds, between the first notification that a Google Chrome OS device must be restarted to apply a pending update and the end of the time period specified by the RelaunchNotificationPeriod policy.\n\n      If not set, the default period of 259200000 milliseconds (three days) is used for Google Chrome OS devices.",
            "example_value": 86400000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 567,
            "label": "Time period (milliseconds)",
            "name": "RelaunchHeadsUpPeriod",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "zmin@chromium.org"
            ],
            "schema": {
                "minimum": 3600000,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:76-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Set the time interval for relaunch",
            "desc": "Specify a target time window for the end of the relaunch notification period.\n\n      Users are notified of the need for a browser relaunch or device restart based on the RelaunchNotification and RelaunchNotificationPeriod policy settings. Browsers and devices are forcibly restarted at the end of the notification period when the RelaunchNotification policy is set to 'Required'. This RelaunchWindow policy can be used to defer the end of the notification period so that it falls within a specific time window.\n\n      If this policy is not set, the default target time window for Google Chrome OS is between 2 AM and 4 AM. The default target time window for Google Chrome is the whole day (i.e., the end of the notification period is never deferred).\n\n      Note: Though the policy can accept multiple items in entries, all but the first item are ignored.\n      Warning: Setting this policy may delay application of software updates.",
            "example_value": {
                "entries": [
                    {
                        "start": {
                            "hour": 2,
                            "minute": 15
                        },
                        "duration_mins": 240
                    }
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 854,
            "label": "Relaunch time window",
            "name": "RelaunchWindow",
            "owners": [
                "snijhara@google.com",
                "file://chrome/browser/upgrade_detector/OWNERS"
            ],
            "schema": {
                "properties": {
                    "entries": {
                        "items": {
                            "properties": {
                                "duration_mins": {
                                    "description": "Time period (minutes) that specifies the length of the relaunch window.",
                                    "maximum": 1440,
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                "start": {
                                    "description": "Time interpreted in local wall-clock 24h format.",
                                    "id": "Time",
                                    "properties": {
                                        "hour": {
                                            "maximum": 23,
                                            "minimum": 0,
                                            "type": "integer"
                                        },
                                        "minute": {
                                            "maximum": 59,
                                            "minimum": 0,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "hour",
                                        "minute"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "start",
                                "duration_mins"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome.*:93-",
                "chrome_os:93-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow devices to run virtual machines on Chrome OS",
            "default_for_managed_devices_doc_only": false,
            "desc": "Setting the policy to Enabled lets the device run virtual machines on Google Chrome OS. VirtualMachinesAllowed and CrostiniAllowed must be Enabled to use Crostini. Setting the policy to Disabled means the device can't run virtual machines. Changing it to Disabled starts applying the policy to starting new virtual machines, not those already running.\n\n      When this policy is not set on a managed device, the device can't run virtual machines. Unmanaged devices can run virtual machines.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 421,
            "name": "VirtualMachinesAllowed",
            "owners": [
                "timzheng@chromium.org",
                "aoldemeier@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:66-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "User is enabled to run Crostini",
            "desc": "Setting the policy to Enabled or leaving it unset lets users run Crostini, as long as VirtualMachinesAllowed and CrostiniAllowed are set to Enabled. Setting the policy to Disabled turns Crostini off for the user. Changing it to Disabled starts applying the policy to starting new Crostini containers, not those already running.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 481,
            "name": "CrostiniAllowed",
            "owners": [
                "timzheng@chromium.org",
                "aoldemeier@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow unaffiliated users to use Crostini",
            "desc": "Setting the policy to Enabled or leaving it unset lets all users use Crostini as long as all 3 policies, VirtualMachinesAllowed, CrostiniAllowed, and DeviceUnaffiliatedCrostiniAllowed are set to Enabled. Setting the policy to Disabled means unaffiliated users can't use Crostini. Changing it to Disabled starts applying the policy to starting new Crostini containers, not those already running.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 482,
            "name": "DeviceUnaffiliatedCrostiniAllowed",
            "owners": [
                "timzheng@chromium.org",
                "aoldemeier@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "User is enabled to export / import Crostini containers via the UI",
            "desc": "Setting the policy to Enabled or leaving it unset makes the export-import UI available to users. Setting the policy to Disabled renders the export-import UI unavailable to users.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 523,
            "name": "CrostiniExportImportUIAllowed",
            "owners": [
                "joelhockey@chromium.org",
                "aoldemeier@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:74-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "User is allowed to have root access to Crostini containers",
            "desc": "Allow this user root access to Crostini containers.\n\n      If the policy is set to true or left unset root access to Crostini containers will be granted to the user.\n      If the policy is set to false, root access to both existing and new Crostini containers will not be granted to the user.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 576,
            "name": "CrostiniRootAccessAllowed",
            "owners": [
                "aoldemeier@chromium.org",
                "okalitova@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Crostini Ansible playbook",
            "desc": "Provides an Ansible playbook that should be executed in the default Crostini container.\n\n      This policy allows to provide an Ansible playbook to be applied to the default Crostini container if it is available on the given device and allowed by policies.\n\n      The size of the data must not exceed 1MB (1000000 bytes) and must be encoded in YAML. The cryptographic hash is used to verify the integrity of the download.\n\n      The configuration is downloaded and cached. It will be re-downloaded whenever the URL or the hash changes.\n\n      If you set the policy, users can't change it. If not set, users can continue using default Crostini container in its ongoing configuration if Crostini is allowed by policies.",
            "example_value": {
                "url": "https://example.com/ansibleplaybook",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 639,
            "max_size": 1000000,
            "name": "CrostiniAnsiblePlaybook",
            "owners": [
                "aoldemeier@chromium.org",
                "okalitova@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the Ansible playbook.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL from which the Ansible playbook can be downloaded.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Control usage of Android apps from untrusted sources for the user",
            "default": 0,
            "desc": "This policy controls the usage of Android apps from untrusted sources (other than Google Play Store) on a per-user basis.\n\n      If the value for this policy is not set, then the functionality is treated as disallowed.\n\n      If the user's device is managed, the availability of this functionality is additionally dependant on the corresponding device policy.\n\n      If the user's device is not managed, the availability of this functionality is additionally dependant on whether the user is the device owner.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 690,
            "items": [
                {
                    "caption": "Prevent the user from using Android apps from untrusted sources",
                    "name": "Disallow",
                    "value": 0
                },
                {
                    "caption": "Allow the user to use Android apps from untrusted sources",
                    "name": "Allow",
                    "value": 1
                }
            ],
            "name": "CrostiniArcAdbSideloadingAllowed",
            "owners": [
                "janagrill@chromium.org",
                "okalitova@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Control usage of Android apps from untrusted sources for the device",
            "default": 0,
            "desc": "This policy controls the usage of Android apps from untrusted sources (other than Google Play Store) for a device.\n\n      If the value for this policy is not set, then the functionality is treated as disallowed.\n\n      The availability of this functionality is additionally dependant on the corresponding user policy.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 695,
            "items": [
                {
                    "caption": "Prevent users of this device from using ADB sideloading, without forcing a powerwash, which might leave the device in a questionable state security-wise",
                    "name": "Disallow",
                    "value": 0
                },
                {
                    "caption": "Prevent users of this device from using ADB sideloading and force a device powerwash if sideloading was enabled before",
                    "name": "DisallowWithPowerwash",
                    "value": 1
                },
                {
                    "caption": "Allow affiliated users of this device to use ADB sideloading",
                    "name": "AllowForAffiliatedUsers",
                    "value": 2
                }
            ],
            "name": "DeviceCrostiniArcAdbSideloadingAllowed",
            "owners": [
                "janagrill@chromium.org",
                "okalitova@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Allow users to [enable/configure] Crostini port forwarding",
            "desc": "Specifies whether port forwarding into Crostini containers is allowed.\n\n      If this policy is set to True or not set, users will be able to configure port forwarding into their Crostini containers.\n\n      If this policy is set to False, port forwarding into Crostini containers will be disabled.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 716,
            "name": "CrostiniPortForwardingAllowed",
            "owners": [
                "danielng@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Configure the list of domains on which Safe Browsing will not trigger warnings.",
            "deprecated": true,
            "desc": "This policy is deprecated, please use SafeBrowsingAllowlistDomains instead.\n\n      Setting the policy to Enabled means Safe Browsing will trust the domains you designate. It won't check them for dangerous resources such as phishing, malware, or unwanted software. Safe Browsing's download protection service won't check downloads hosted on these domains. Its password protection service won't check for password reuse.\n\n      Setting the policy to Disabled or leaving it unset means default Safe Browsing protection applies to all resources.\n\n       On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": [
                "mydomain.com",
                "myuniversity.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 422,
            "name": "SafeBrowsingWhitelistDomains",
            "owners": [
                "bdea@chromium.org",
                "nparker@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:68-",
                "chrome_os:68-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure the list of domains on which Safe Browsing will not trigger warnings.",
            "desc": "Setting the policy to Enabled means Safe Browsing will trust the domains you designate. It won't check them for dangerous resources such as phishing, malware, or unwanted software. Safe Browsing's download protection service won't check downloads hosted on these domains. Its password protection service won't check for password reuse.\n\n      Leaving the policy unset means default Safe Browsing protection applies to all resources.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": [
                "mydomain.com",
                "myuniversity.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 732,
            "name": "SafeBrowsingAllowlistDomains",
            "owners": [
                "bdea@chromium.org",
                "nparker@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure the list of enterprise login URLs where password protection service should capture salted hashes of passwords.",
            "desc": "Setting the policy sets the list of enterprise login URLs (HTTP and HTTPS protocols only). Password protection service will capture salted hashes of passwords on these URLs and use them for password reuse detection. For Google Chrome to correctly capture password salted hashes, ensure your sign-in pages follow these guidelines ( https://www.chromium.org/developers/design-documents/create-amazing-password-forms ).\n\n      Turning this setting off or leaving it unset means the password protection service only captures the password salted hashes on https://accounts.google.com.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": [
                "https://mydomain.com/login.html",
                "https://login.mydomain.com"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 423,
            "name": "PasswordProtectionLoginURLs",
            "owners": [
                "bdea@chromium.org",
                "nparker@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:69-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure the change password URL.",
            "desc": "Setting the policy sets the URL for users to change their password after seeing a warning in the browser. The password protection service sends users to the URL (HTTP and HTTPS protocols only) you designate through this policy. For Google Chrome to correctly capture the salted hash of the new password on this change password page, make sure your change password page follows these guidelines ( https://www.chromium.org/developers/design-documents/create-amazing-password-forms ).\n\n      Turning the policy off or leaving it unset means the service sends users to https://myaccount.google.com to change their password.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": "https://mydomain.com/change_password.html",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 424,
            "name": "PasswordProtectionChangePasswordURL",
            "owners": [
                "bdea@chromium.org",
                "nparker@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:69-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "arc_support": "This policy is not supported within Arc.",
            "caption": "Enable Safe Browsing Extended Reporting",
            "desc": "Setting the policy to Enabled turns on Google Chrome's Safe Browsing Extended Reporting, which sends some system information and page content to Google servers to help detect dangerous apps and sites.\n\n      Setting the policy to Disabled means reports are never sent.\n\n      If you set this policy, users can't change it. If not set, users can decide whether to send reports or not.\n\n      See more about Safe Browsing ( https://developers.google.com/safe-browsing ).",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 429,
            "name": "SafeBrowsingExtendedReportingEnabled",
            "owners": [
                "bdea@chromium.org",
                "nparker@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:66-",
                "chrome_os:66-",
                "android: 87-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "The enrollment token of cloud policy on desktop",
            "deprecated": true,
            "desc": "\n        This policy is deprecated in M72. Please use CloudManagementEnrollmentToken instead.\n        ",
            "example_value": "37185d02-e055-11e7-80c1-9a214cf093ae",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 428,
            "name": "MachineLevelUserCloudPolicyEnrollmentToken",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org",
                "rogerta@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:66-80"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "The enrollment token of cloud policy on desktop",
            "desc": "Setting the policy means Google Chrome tries to register itself with Chrome Browser Cloud Management. The value of this policy is an enrollment token you can retrieve from the Google Admin console.\n\n      See https://support.google.com/chrome/a/answer/9301891?ref_topic=9301744 for details.",
            "example_value": "37185d02-e055-11e7-80c1-9a214cf093ae",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 510,
            "name": "CloudManagementEnrollmentToken",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org",
                "rogerta@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:72-",
                "ios:88-",
                "android:97-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Enable mandatory cloud management enrollment",
            "desc": "Setting the policy to Enabled mandates Chrome Browser Cloud Management enrollment and blocks Google Chrome launch process if failed.\n\n      Setting the policy to Disabled or leaving it unset renders Chrome Browser Cloud Management optional and doesn't block Google Chrome launch process if failed.\n\n      Machine scope cloud policy enrollment on desktop uses this policy. See https://support.google.com/chrome/a/answer/9301891?ref_topic=9301744 for details.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 505,
            "name": "CloudManagementEnrollmentMandatory",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:72-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow media autoplay",
            "desc": "Setting the policy to True lets Google Chrome autoplay media. Setting the policy to False stops Google Chrome from autoplaying media.\n\n       By default, Google Chrome doesn't autoplay media. But, for certain URL patterns, you can use the AutoplayAllowlist policy to change this setting.\n\n      If this policy changes while Google Chrome is running, it only applies to newly opened tabs.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 430,
            "name": "AutoplayAllowed",
            "owners": [
                "fbeaufort@chromium.org",
                "beccahughes@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:66-",
                "chrome.linux:66-",
                "chrome.mac:66-",
                "chrome_os:66-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow media autoplay on a whitelist of URL patterns",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'AutoplayAllowlist' policy instead.\n\n      Setting the policy lets videos play automatically (without user consent) with audio content in Google Chrome. If AutoplayAllowed policy is set to True, then this policy has no effect. If AutoplayAllowed is set to False, then any URL patterns set in this policy can still play. If this policy changes while Google Chrome is running, it only applies to newly opened tabs.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 431,
            "name": "AutoplayWhitelist",
            "owners": [
                "fbeaufort@chromium.org",
                "beccahughes@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:66-",
                "chrome_os:66-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow media autoplay on a allowlist of URL patterns",
            "desc": "Setting the policy lets videos play automatically (without user consent) with audio content in Google Chrome. If AutoplayAllowed policy is set to True, then this policy has no effect. If AutoplayAllowed is set to False, then any URL patterns set in this policy can still play. If this policy changes while Google Chrome is running, it only applies to newly opened tabs.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 742,
            "name": "AutoplayAllowlist",
            "owners": [
                "fbeaufort@chromium.org",
                "beccahughes@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow sites to simultaneously navigate and open pop-ups",
            "deprecated": true,
            "desc": "Deprecated in M68. Use DefaultPopupsSetting instead.\n\n      For a full explanation, see https://www.chromestatus.com/feature/5675755719622656.\n      If this policy is enabled, sites will be allowed to simultaneously navigate and open new windows/tabs.\n      If this policy is disabled or not set, sites will be disallowed from simultaneously navigating and opening a new window/tab.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 432,
            "name": "TabUnderAllowed",
            "owners": [
                "chrisha@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:67-67",
                "chrome_os:67-67"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow access to native CUPS printers",
            "deprecated": true,
            "desc": "Allows you to control if users can access non-enterprise printers\n\n      If the policy is set to True, or not set at all, users will be able to add, configure, and print using their own native printers.\n\n      If the policy is set to False, users will not be able to add and configure their own native printers. They will also not be able to print using any previously configured native printers.\n\n      This policy is deprecated, please use UserPrintersAllowed instead.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 433,
            "name": "UserNativePrintersAllowed",
            "owners": [
                "valleau@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:67-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow access to CUPS printers",
            "desc": "Allows you to control if users can access non-enterprise printers\n\n      If the policy is set to True, or not set at all, users will be able to add, configure, and print using their own printers.\n\n      If the policy is set to False, users will not be able to add and configure their own printers. They will also not be able to print using any previously configured printers.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 768,
            "name": "UserPrintersAllowed",
            "owners": [
                "valleau@chromium.org",
                "skau@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "SAML login authentication type",
            "desc": "Configures the type of authentication for SAML logins.\n\n      When this policy is unset or set to Default (value 0), the behavior of SAML logins is determined by the browser depending on other factors. In the most basic scenario, the user authentication and the protection of the cached user data are based on passwords manually entered by users.\n\n      When this policy is set to ClientCertificate (value 1), client certificate authentication is used for newly added users which log in via SAML. No passwords are used for such users, and their cached local data is protected using corresponding cryptographic keys. For instance, this setting allows configuring smart card based user authentication (note that smart card middleware apps have to be installed via the DeviceLoginScreenExtensions policy).\n\n      This policy affects only users who authenticate using SAML.",
            "device_only": true,
            "example_value": 0,
            "features": {
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 438,
            "items": [
                {
                    "caption": "Default configuration",
                    "name": "Default",
                    "value": 0
                },
                {
                    "caption": "Authentication based on client certificates",
                    "name": "ClientCertificate",
                    "value": 1
                }
            ],
            "name": "DeviceSamlLoginAuthenticationType",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Enable Chrome Cleanup on Windows",
            "desc": "Setting the policy to Enabled or leaving it unset means Chrome Cleanup periodically scans the system for unwanted software and should any be found, will ask the user if they wish to remove it. Manually triggering Chrome Cleanup from chrome://settings is allowed.\n\n      Setting the policy to Disabled means Chrome Cleanup won't periodically scan and manual triggering is disabled.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 441,
            "name": "ChromeCleanupEnabled",
            "owners": [
                "proberge@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:68-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Control how Chrome Cleanup reports data to Google",
            "desc": "Setting the policy to Enabled means if Chrome Cleanup detects unwanted software, it may, in line with policy set by SafeBrowsingExtendedReportingEnabled, report about the scan to Google. Chrome Cleanup asks users if they want the cleanup. It sends results to Google.\n\n      Setting the policy to Disabled means if Chrome Cleanup detects unwanted software, it won't report about the scan to Google, regardless of the value of SafeBrowsingExtendedReportingEnabled. Chrome Cleanup asks users if they want the cleanup. The results aren't reported to Google.\n\n      Leaving the policy unset means Chrome Cleanup may, in line with policy set by SafeBrowsingExtendedReportingEnabled, report about scans for detecting unwanted software to Google. Chrome Cleanup asks users if they want the cleanup and to share the results with Google to help with future unwanted software detection. These results have file metadata, automatically installed extensions, and registry keys, as described by the Chrome Privacy Whitepaper.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 442,
            "name": "ChromeCleanupReportingEnabled",
            "owners": [
                "proberge@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:68-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Configure the allowed languages in a user session",
            "desc": "Setting the policy lets users add only one of the languages listed in this policy to the list of preferred languages.\n\n      If not set or set to an empty list, users can specify languages as preferred.\n\n      If set to a list with invalid values, those values are ignored. If users added languages not allowed by this policy to the list of preferred languages, they're removed. If they had Google Chrome OS displayed in a language not allowed by this policy, the next time they sign in, the display language switches to an allowed UI language. Otherwise, if this policy only has invalid entries, Google Chrome OS switches to the first valid value specified by this policy or a fallback locale such as en-US.",
            "device_only": false,
            "example_value": [
                "en-US"
            ],
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 444,
            "name": "AllowedLanguages",
            "owners": [
                "hendrich@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure the allowed input methods in a user session",
            "desc": "Setting the policy lets users choose one of the input methods for Google Chrome OS sessions that you specify.\n\n       If you leave it unset or set to an empty list, users can select all supported input methods.\n\n      Note: If the current input method is unsupported, it switches to the hardware keyboard layout (if allowed) or the first valid entry in this list. Invalid or unsupported methods are ignored.",
            "device_only": false,
            "example_value": [
                "xkb:us::eng"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 456,
            "name": "AllowedInputMethods",
            "owners": [
                "hendrich@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:69-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Log events for Android app installs",
            "desc": "Setting the policy to True sends reports of key, policy-triggered Android app installation events to Google. Setting the policy to False means no events are captured.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 447,
            "name": "ArcAppInstallEventLoggingEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:67-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Log events for policy based extension installs",
            "default": true,
            "desc": "Setting the policy to True sends reports of key, policy-triggered extension installation events to Google. Setting the policy to False means no events are captured. If the policy is unset, default value is set to True.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 727,
            "name": "ExtensionInstallEventLoggingEnabled",
            "owners": [
                "swapnilgupta@google.com",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Time Limit",
            "desc": "Allows you to lock the user's session based on the client time or the usage quota of the day.\n\n          The |time_window_limit| specifies a daily window in which the user's session should be locked. We only support one rule for each day of the week, therefore the |entries| array may vary from 0-7 in size. |starts_at| and |ends_at| are the beginning and the end of the window limit, when |ends_at| is smaller than |starts_at| it means that the |time_limit_window| ends on the following day. |last_updated_millis| is the UTC timestamp for the last time this entry was updated, it is sent as a string because the timestamp wouldn't fit in an integer.\n\n          The |time_usage_limit| specifies a daily screen quota, so when the user reaches it, the user's session is locked. There is a property for each day of the week, and it should be set only if there is an active quota for that day. |usage_quota_mins| is the amount of time that the managed device can be use in a day and |reset_at| is the time when the usage quota is renewed. The default value for |reset_at| is midnight ({'hour': 0, 'minute': 0}). |last_updated_millis| is the UTC timestamp for the last time this entry was updated, it is sent as a string because the timestamp wouldn't fit in an integer.\n\n          |overrides| is provided to invalidate temporarily one or more of the previous rules.\n          * If neither time_window_limit nor time_usage_limit is active |LOCK| can be used to lock the device.\n          * |LOCK| temporarily locks a user session until the next time_window_limit or time_usage_limit starts.\n          * |UNLOCK| unlocks a user's session locked by time_window_limit or time_usage_limit.\n          |created_time_millis| is the UTC timestamp for the override creation, it is sent as a String because the timestamp wouldn't fit in an integer It is used to determine whether this override should still be applied. If the current active time limit feature (time usage limit or time window limit) started after the override was created, it should not take action. Also if the override was created before the last change of the active time_window_limit or time_usage_window it should not be applied.\n\n          Multiple overrides may be sent, the newest valid entry is the one that is going to be applied.",
            "example_value": {
                "time_window_limit": {
                    "entries": [
                        {
                            "effective_day": "WEDNESDAY",
                            "starts_at": {
                                "hour": 21,
                                "minute": 0
                            },
                            "ends_at": {
                                "hour": 7,
                                "minute": 30
                            },
                            "last_updated_millis": "1000000"
                        }
                    ]
                },
                "time_usage_limit": {
                    "monday": {
                        "usage_quota_mins": 120,
                        "last_updated_millis": "1200000"
                    },
                    "tuesday": {
                        "usage_quota_mins": 120,
                        "last_updated_millis": "1200000"
                    },
                    "wednesday": {
                        "usage_quota_mins": 120,
                        "last_updated_millis": "1200000"
                    },
                    "thursday": {
                        "usage_quota_mins": 120,
                        "last_updated_millis": "1200000"
                    },
                    "friday": {
                        "usage_quota_mins": 120,
                        "last_updated_millis": "1200000"
                    },
                    "saturday": {
                        "usage_quota_mins": 120,
                        "last_updated_millis": "1200000"
                    },
                    "sunday": {
                        "usage_quota_mins": 120,
                        "last_updated_millis": "1200000"
                    },
                    "reset_at": {
                        "hour": 6,
                        "minute": 0
                    }
                },
                "overrides": [
                    {
                        "action": "UNLOCK",
                        "created_at_millis": "1250000",
                        "action_specific_data": {
                            "duration_mins": 30
                        }
                    }
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 448,
            "name": "UsageTimeLimit",
            "owners": [
                "hgrandinetti@chromium.org",
                "vtrmc@chromium.org"
            ],
            "schema": {
                "properties": {
                    "overrides": {
                        "items": {
                            "properties": {
                                "action": {
                                    "enum": [
                                        "LOCK",
                                        "UNLOCK"
                                    ],
                                    "type": "string"
                                },
                                "action_specific_data": {
                                    "properties": {
                                        "duration_mins": {
                                            "minimum": 0,
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "created_at_millis": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "time_usage_limit": {
                        "properties": {
                            "friday": {
                                "$ref": "TimeUsageLimitEntry"
                            },
                            "monday": {
                                "id": "TimeUsageLimitEntry",
                                "properties": {
                                    "last_updated_millis": {
                                        "type": "string"
                                    },
                                    "usage_quota_mins": {
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "reset_at": {
                                "$ref": "Time"
                            },
                            "saturday": {
                                "$ref": "TimeUsageLimitEntry"
                            },
                            "sunday": {
                                "$ref": "TimeUsageLimitEntry"
                            },
                            "thursday": {
                                "$ref": "TimeUsageLimitEntry"
                            },
                            "tuesday": {
                                "$ref": "TimeUsageLimitEntry"
                            },
                            "wednesday": {
                                "$ref": "TimeUsageLimitEntry"
                            }
                        },
                        "type": "object"
                    },
                    "time_window_limit": {
                        "properties": {
                            "entries": {
                                "items": {
                                    "properties": {
                                        "effective_day": {
                                            "$ref": "WeekDay"
                                        },
                                        "ends_at": {
                                            "$ref": "Time"
                                        },
                                        "last_updated_millis": {
                                            "type": "string"
                                        },
                                        "starts_at": {
                                            "$ref": "Time"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:69-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Control Android backup and restore service",
            "default_for_enterprise_users": 0,
            "desc": "Setting the policy to BackupAndRestoreEnabled means Android backup and restore is initially on. Setting the policy to BackupAndRestoreDisabled or leaving it unset keeps backup and restore off during setup.\n\n      Setting the policy to BackupAndRestoreUnderUserControl means users see prompts to use backup and restore. If they turn on backup and restore, Android app data is uploaded to Android backup servers and restored during reinstallations of compatible apps.\n\n      After initial setup, users can turn backup and restore on or off.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 449,
            "items": [
                {
                    "caption": "Backup and restore disabled",
                    "name": "BackupAndRestoreDisabled",
                    "value": 0
                },
                {
                    "caption": "User decides whether to enable backup and restore",
                    "name": "BackupAndRestoreUnderUserControl",
                    "value": 1
                },
                {
                    "caption": "Backup and restore enabled",
                    "name": "BackupAndRestoreEnabled",
                    "value": 2
                }
            ],
            "name": "ArcBackupRestoreServiceEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:68-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Control Android Google location services",
            "default_for_enterprise_users": 0,
            "desc": "Unless the DefaultGeolocationSetting policy is set to BlockGeolocation, then setting GoogleLocationServicesEnabled turns Google location services on during initial setup. Setting the policy to GoogleLocationServicesDisabled or leaving it unset keeps location services off during setup.\n\n      Setting policy to BackupAndRestoreUnderUserControl prompts users about whether or not to use Google location services. If they turn it on, Android apps use the services to search the device location and send anonymous location data to Google.\n\n      After initial setup, users can turn Google location services on or off.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 450,
            "items": [
                {
                    "caption": "Google location services disabled",
                    "name": "GoogleLocationServicesDisabled",
                    "value": 0
                },
                {
                    "caption": "User decides whether to enable Google location services",
                    "name": "GoogleLocationServicesUnderUserControl",
                    "value": 1
                },
                {
                    "caption": "Google location services enabled",
                    "name": "GoogleLocationServicesEnabled",
                    "value": 2
                }
            ],
            "name": "ArcGoogleLocationServicesEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:68-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Enable displaying Sync Consent during sign-in",
            "desc": "This policy controls if Sync Consent can be shown to the user during first sign-in. It should be set to false if Sync Consent is never needed for the user.\n      If set to false, Sync Consent will not be displayed.\n      If set to true or unset, Sync Consent can be displayed.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 451,
            "name": "EnableSyncConsent",
            "owners": [
                "agawronska@chromium.org",
                "alemate@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:66-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable contextual suggestions of related web pages",
            "deprecated": true,
            "desc": "This feature never launched, therefore the policy is deprecated. If this is set to true or unset, Google Chrome will suggest pages related to the current page.\n      These suggestions are fetched remotely from Google servers.\n\n      If this setting is set to false, suggestions will not be fetched or displayed.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 452,
            "name": "ContextualSuggestionsEnabled",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:69-75"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Update Time Restrictions",
            "desc": "This policy controls the time frames during which the Google Chrome OS device is not allowed to check for updates automatically.\n      When this policy is set to a non-empty list of time intervals:\n      Devices will not be able to check for updates automatically during the specified time intervals. Devices that require an enterprise rollback or are below the minimum Google Chrome OS version will not be affected by this policy due to potential security issues. Furthermore, this policy will not block update checks requested by users or administrators.\n      Starting from M88, this policy cancels an ongoing update when a restricted time interval is reached. The next auto update after the restricted time interval ends will automatically resume the update. Devices updating to a Quick Fix Build will not be affected by this policy.\n      When this policy is unset or contains no time intervals:\n      No automatic update checks will be blocked by this policy, but they may be blocked by other policies.\n      Till M88, this feature is only enabled on Google Chrome OS devices configured as auto-launch kiosks. Other devices will not be restricted by this policy. However starting from M89, this policy is enabled on all Google Chrome OS devices.",
            "device_only": true,
            "example_value": [
                {
                    "start": {
                        "day_of_week": "Monday",
                        "minutes": 50,
                        "hours": 3
                    },
                    "end": {
                        "day_of_week": "Thursday",
                        "minutes": 30,
                        "hours": 2
                    }
                },
                {
                    "start": {
                        "day_of_week": "Thursday",
                        "minutes": 30,
                        "hours": 3
                    },
                    "end": {
                        "day_of_week": "Sunday",
                        "minutes": 10,
                        "hours": 15
                    }
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 453,
            "name": "DeviceAutoUpdateTimeRestrictions",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "items": {
                    "description": "Time interval that spans at most one week. If the start time is later than the end time, then the interval will wrap around.",
                    "properties": {
                        "end": {
                            "$ref": "DisallowedTimeInterval",
                            "description": "End of the interval, exclusive."
                        },
                        "start": {
                            "description": "Start time of the interval, inclusive.",
                            "id": "DisallowedTimeInterval",
                            "properties": {
                                "day_of_week": {
                                    "description": "Day of the week for the interval.",
                                    "enum": [
                                        "Monday",
                                        "Tuesday",
                                        "Wednesday",
                                        "Thursday",
                                        "Friday",
                                        "Saturday",
                                        "Sunday"
                                    ],
                                    "type": "string"
                                },
                                "hours": {
                                    "description": "Hours elapsed since the start of the day in (24 hour format).",
                                    "maximum": 23,
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "minutes": {
                                    "description": "Minutes elapsed in the current hour.",
                                    "maximum": 59,
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "day_of_week",
                                "minutes",
                                "hours"
                            ],
                            "type": "object"
                        }
                    },
                    "required": [
                        "start",
                        "end"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:69-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable showing full-tab promotional content",
            "desc": "Setting the policy to True or leaving it unset lets Google Chrome show users product information as full-tab content.\n\n      Setting the policy to False prevents Google Chrome from showing product information as full-tab content.\n\n      Setting the policy controls the presentation of the welcome pages that help users sign in to Google Chrome, set Google Chrome as users' default browser, or otherwise inform them of product features.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 454,
            "name": "PromotionalTabsEnabled",
            "owners": [
                "grt@chromium.org",
                "rbpotter@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:93-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control SafeSites adult content filtering.",
            "desc": "Setting the policy controls the SafeSites URL filter, which uses the Google Safe Search API to classify URLs as pornographic or not.\n\n      When this policy is set to:\n\n      * Do not filter sites for adult content, or not set, sites aren't filtered\n\n      * Filter top level sites for adult content, pornographic sites are filtered",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 455,
            "items": [
                {
                    "caption": "Do not filter sites for adult content",
                    "name": "SafeSitesFilterDisabled",
                    "value": 0
                },
                {
                    "caption": "Filter top level sites (but not embedded iframes) for adult content",
                    "name": "SafeSitesFilterEnabled",
                    "value": 1
                }
            ],
            "name": "SafeSitesFilterBehavior",
            "owners": [
                "bdea@chromium.org",
                "nparker@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:69-"
            ],
            "tags": [
                "filtering",
                "google-sharing"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Origins or hostname patterns for which restrictions on\n      insecure origins should not apply",
            "desc": "Setting the policy specifies a list of origins (URLs) or hostname patterns (such as *.example.com) for which security restrictions on insecure origins won't apply. Organizations can specify origins for legacy applications that can't deploy TLS or set up a staging server for internal web development, so developers can test out features requiring secure contexts without having to deploy TLS on the staging server. This policy also prevents the origin from being labeled \"Not Secure\" in the address bar.\n\n      Setting a list of URLs in this policy amounts to setting the command-line flag --unsafely-treat-insecure-origin-as-secure to a comma-separated list of the same URLs. The policy overrides the command-line flag and UnsafelyTreatInsecureOriginAsSecure, if present.\n\n      For more information on secure contexts, see Secure Contexts ( https://www.w3.org/TR/secure-contexts ).",
            "example_value": [
                "http://testserver.example.com/",
                "*.example.org"
            ],
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 457,
            "name": "OverrideSecurityRestrictionsOnInsecureOrigin",
            "owners": [
                "estark@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:69-",
                "android:69-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "The staging schedule for applying a new update",
            "desc": "This policy defines a list of percentages that will define the fraction of Google Chrome OS devices in the OU to update per day starting from the day the update is first discovered. The discovery time is later than the update published time, since it could be a while after the update publishing until the device checks for updates.\n\n      Each (day, percentage) pair contains which percentage of the fleet has to be updated by the given number of days since the update has been discovered. For example, if we have the pairs [(4, 40), (10, 70), (15, 100)], then 40% of the fleet should have been updated 4 days after seeing the update. 70% should be updated after 10 days, and so on.\n\n      If there is a value defined for this policy, updates will ignore the DeviceUpdateScatterFactor policy and follow this policy instead.\n\n      If this list is empty, there will be no staging and updates will be applied according to other device policies.\n\n      This policy does not apply for channel switches.",
            "device_only": true,
            "example_value": [
                {
                    "days": 7,
                    "percentage": 50
                },
                {
                    "days": 10,
                    "percentage": 100
                }
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 458,
            "name": "DeviceUpdateStagingSchedule",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "anqing@chromium.org"
            ],
            "schema": {
                "items": {
                    "description": "Contains the number of days and the percentage of the fleet that should be updated after those days have passed.",
                    "id": "DayPercentagePair",
                    "properties": {
                        "days": {
                            "description": "Days from update discovery.",
                            "maximum": 28,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "percentage": {
                            "description": "Percentage of the fleet that should be updated after the given days.",
                            "maximum": 100,
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:69-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "dict"
        },
        {
            "caption": "Allow background tabs freeze",
            "deprecated": true,
            "desc": "Controls whether Google Chrome can freeze tabs that have been in the background for at least 5 minutes.\n\n      If the policy is set to true, tabs that have been in the background for at least 5 minutes may be frozen. Tab freezing reduces CPU, battery and memory usage. Google Chrome uses heuristics to avoid freezing tabs that do useful work in the background (e.g. display notifications, play sound, stream video). Web developers can also opt-out their site from freezing (https://chromium.googlesource.com/chromium/src/+/HEAD/chrome/browser/performance_manager/docs/freezing_opt_out_opt_in.md).\n\n      If the policy is set to false, no tabs will be frozen.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 460,
            "name": "TabFreezingEnabled",
            "owners": [
                "catan-team@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:79-79",
                "chrome_os:79-79"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable URL-keyed anonymized data collection",
            "desc": "Setting the policy to Enabled means URL-keyed anonymized data collection, which sends URLs of pages the user visits to Google to make searches and browsing better, is always active.\n\n      Setting the policy to Disabled results in no URL-keyed anonymized data collection.\n\n      If you set the policy, users can't change. If not set, then URL-keyed anonymized data collection at first, but users can change it.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 461,
            "name": "UrlKeyedAnonymizedDataCollectionEnabled",
            "owners": [
                "file://base/metrics/OWNERS",
                "bcwhite@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:69-",
                "chrome_os:69-",
                "android:70-",
                "ios:90-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Controls Network File Shares for ChromeOS availability",
            "desc": "Setting the policy to Enabled lets users use Network File Shares for Google Chrome OS. Setting the policy to Disabled means users can't use this feature.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 462,
            "name": "NetworkFileSharesAllowed",
            "owners": [
                "amistry@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow collection of WebRTC event logs from Google services",
            "desc": "Setting the policy to Enabled means Google Chrome can collect WebRTC event logs from Google services such as Hangouts Meet and upload them to Google. These logs have diagnostic information for debugging issues with audio or video meetings in Google Chrome, such as the time and size of RTP packets, feedback about congestion on the network, and metadata about time and quality of audio and video frames. These logs have no audio or video content from the meeting. To make debugging easier, Google might associate these logs, by means of a session ID, with other logs collected by the Google service itself.\n\n      Setting the policy to Disabled results in no collection or uploading of such logs.\n\n      Leaving the policy unset on versions up to and including M76 means Google Chrome defaults to not being able to collect and upload these logs. Starting at M77, Google Chrome defaults to being able to collect and upload these logs from most profiles affected by cloud-based, user-level enterprise policies. From M77 up to and including M80, Google Chrome can also collect and upload these logs by default from profiles affected by Google Chrome on-premise management.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 464,
            "name": "WebRtcEventLogCollectionAllowed",
            "owners": [
                "eladalon@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:70-",
                "chrome_os:70-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable smart dim model to extend the time until the screen is dimmed",
            "desc": "Setting the policy to Enabled or leaving it unset turns the smart dim model on and can extend the time until the screen dims. If it delays the time, the screen off, screen lock, and idle delays adjust to maintain the same distances from the screen dim delay as originally set.\n\n      Setting the policy to Disabled means the smart dim model won't influence screen dimming.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 465,
            "name": "PowerSmartDimEnabled",
            "owners": [
                "jiameng@chromium.org",
                "ejcaruso@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow coalescing of HTTP/2 connections for these hosts even when client certificates are used",
            "desc": "This policy allows HTTP/2 connection coalescing when client certificates are in use. In order to coalesce, both the hostname of the potential new connection and the hostname of an existing connection must match one or more patterns described by this policy. The policy is a list of hosts using the URLBlocklist filter format: \"example.com\" matches \"example.com\" and all subdomains (e.g. \"sub.example.com\"), while \".example.net\" matches exactly \"example.net\".\n\n      Coalescing requests to different hosts over connections that use client certificates can create security and privacy issues, as the ambient authority will be conveyed to all requests, even if the user did not explicitly authorize this. This policy is temporary and will be removed in a future release. See https://crbug.com/855690.\n\n      If this policy is left unset, then the default behavior of not allowing any HTTP/2 connection coalescing on connections using client certificates will be used.",
            "example_value": [
                "example.com"
            ],
            "features": {
                "internal_only": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 466,
            "name": "CoalesceH2ConnectionsWithClientCertificatesForHosts",
            "owners": [
                "rsleevi@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:70-",
                "android:70-",
                "chrome_os:70-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Controls Network File Share discovery via NetBIOS",
            "default_for_enterprise_users": false,
            "desc": "Setting the policy to Enabled means share discovery (the Network File Shares feature for Google Chrome OS) uses the NetBIOS Name Query Request protocol to discover shares on the network. Setting the policy to Disabled means share discovery won't use this protocol to discover shares.\n\n      Leaving the policy unset means the behavior defaults to off for managed users and on for other users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 467,
            "name": "NetBiosShareDiscoveryEnabled",
            "owners": [
                "amistry@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:70-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Sets managed configuration values to websites to specific origins",
            "desc": "Setting the policy defines the return value of Managed Configuration API for given origin.\n\n      Managed configuration API is a key-value configuration that can be accessed via navigator.managed.getManagedConfiguration() javascript call. This API is only available to origins which correspond to force-installed web applications via WebAppInstallForceList.\n     ",
            "example_value": [
                {
                    "origin": "https://www.google.com",
                    "managed_configuration_url": "https://gstatic.google.com/configuration.json",
                    "managed_configuration_hash": "asd891jedasd12ue9h"
                },
                {
                    "origin": "https://www.example.com",
                    "managed_configuration_url": "https://gstatic.google.com/configuration2.json",
                    "managed_configuration_hash": "djio12easd89u12aws"
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 813,
            "name": "ManagedConfigurationPerOrigin",
            "owners": [
                "file://chrome/browser/device_api/OWNERS",
                "apotapchuk@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "managed_configuration_hash": {
                            "type": "string"
                        },
                        "managed_configuration_url": {
                            "type": "string"
                        },
                        "origin": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "origin",
                        "managed_configuration_url",
                        "managed_configuration_hash"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:89-",
                "chrome_os:89-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Configure list of force-installed Web Apps",
            "desc": "Setting the policy specifies a list of web apps that install silently, without user interaction, and which users can't uninstall or turn off.\n\n      Each list item of the policy is an object with a mandatory member:\n      url (the URL of the web app to install)\n\n      and 5 optional members:\n      - default_launch_container\n      (for how the web app opens\u2014a new tab is the default)\n\n      - create_desktop_shortcut\n      (True if you want to create Linux and\n      Microsoft\u00ae Windows\u00ae desktop shortcuts).\n\n      - fallback_app_name\n      (Starting with Google Chrome version 90,\n      allows you to override the app name if it is not a\n      Progressive Web App (PWA), or the app name that is temporarily\n      installed if it is a PWA but authentication is required before the\n      installation can be completed. If both\n      custom_name and\n      fallback_app_name are provided,\n      the latter will be ignored.)\n\n      - custom_name\n      (Starting with Google Chrome\n      version 96, allows you to permanently override the app name for all web\n      apps and PWAs. Currently only supported on\n      Google Chrome OS.)\n\n      - custom_icon\n      (Starting with Google Chrome\n      version 96, allows you to override the app icon of installed apps. The\n      icons have to be square, maximal 1 MB in size, and in one of the following\n      formats: jpeg, png, gif, webp, ico. The hash value has to be the SHA256\n      hash of the icon file. Currently only supported on\n      Google Chrome OS.)\n\n      See PinnedLauncherApps for pinning apps to the Google Chrome OS shelf.",
            "example_value": [
                {
                    "url": "https://www.google.com/maps",
                    "default_launch_container": "window",
                    "create_desktop_shortcut": true
                },
                {
                    "url": "https://docs.google.com",
                    "default_launch_container": "tab"
                },
                {
                    "url": "https://docs.google.com/editor",
                    "default_launch_container": "window",
                    "fallback_app_name": "Editor"
                },
                {
                    "url": "https://docs.google.com/sheets",
                    "default_launch_container": "window",
                    "custom_name": "Spreadsheets"
                },
                {
                    "url": "https://weather.example.com",
                    "custom_icon": {
                        "url": "https://mydomain.example.com/sunny_icon.png",
                        "hash": "c28f469c450e9ab2b86ea47038d2b324c6ad3b1e9a4bd8960da13214afd0ca38"
                    }
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 468,
            "label": "URLs for Web Apps to be silently installed.",
            "max_size": 1048576,
            "name": "WebAppInstallForceList",
            "owners": [
                "file://chrome/browser/web_applications/OWNERS",
                "ortuno@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "create_desktop_shortcut": {
                            "type": "boolean"
                        },
                        "custom_icon": {
                            "properties": {
                                "hash": {
                                    "type": "string"
                                },
                                "url": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "url",
                                "hash"
                            ],
                            "type": "object"
                        },
                        "custom_name": {
                            "type": "string"
                        },
                        "default_launch_container": {
                            "enum": [
                                "tab",
                                "window"
                            ],
                            "type": "string"
                        },
                        "fallback_app_name": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "url"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:75-",
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Report OS and Google Chrome Version Information",
            "desc": "This policy controls whether to report version information, such as OS version, OS platform, OS architecture, Google Chrome version and Google Chrome channel.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.\n\n      When this policy is left unset or set to True, version information is gathered.\n      When this policy is set to False, version information is not gathered.\n\n      This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.\n      This policy is always effective for Google Chrome OS.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future_on": [
                "chrome.*"
            ],
            "id": 470,
            "name": "ReportVersionData",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Report Google Chrome Policy Information",
            "desc": "This policy controls whether to report policy data and time of policy fetch.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.\n\n      When this policy is left unset or set to True, policy data and time of policy fetch are gathered.\n      When this policy is set to False, policy data and time of policy fetch are not gathered.\n\n      This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.\n      This policy is always effective for Google Chrome OS.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future_on": [
                "chrome.*"
            ],
            "id": 471,
            "name": "ReportPolicyData",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Report Machine Identification information",
            "desc": "This policy controls whether to report information that can be used to identify machines, such as machine name and network addresses.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.\n\n      When this policy is left unset or set to True, information that can be used to identify machines is gathered.\n      When this policy is set to False, information that can be used to identify machines is not gathered.\n\n      This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future_on": [
                "chrome.*"
            ],
            "id": 472,
            "name": "ReportMachineIDData",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Report User Identification information",
            "desc": "This policy controls whether to report information that can be used to identify users, such as OS login, Google Chrome Profile login, Google Chrome Profile name, Google Chrome Profile path and Google Chrome executable path.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.\n\n      When this policy is left unset or set to True, information that can be used to identify users is gathered.\n      When this policy is set to False, information that can be used to identify users is not gathered.\n\n      This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.\n      This policy is always effective for Google Chrome OS.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future_on": [
                "chrome.*"
            ],
            "id": 473,
            "name": "ReportUserIDData",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Report Extensions and Plugins information",
            "desc": "This policy controls whether to report extensions and plugins information.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.\n\n      When this policy is left unset or set to True, extension and plugins data are gathered.\n      When this policy is set to False, extensions and plugins data are not gathered.\n\n      This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.\n      This policy is always effective for Google Chrome OS.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future_on": [
                "chrome.*"
            ],
            "id": 499,
            "name": "ReportExtensionsAndPluginsData",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Report Safe Browsing information",
            "deprecated": true,
            "desc": "This policy controls whether to report Safe Browsing information including the number of Safe Browsing warning and the number of safe browsering warning click through.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored.\n\n      When this policy is left unset or set to True, Safe Browsing data are gathered.\n      When this policy is set to False, Safe Browsing data are not gathered.\n\n      This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.\n      This policy is always effective for Google Chrome OS.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "id": 500,
            "name": "ReportSafeBrowsingData",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:72-84"
            ],
            "tags": [
                "admin-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enables Google Chrome extension installation requests",
            "desc": "This policy controls Google Chrome extension installation requests which allows users to send the requests to the Google Admin console for approval.\n\n      When the policy CloudReportingEnabled is left unset or set to disabled, this policy will be ignored, extension installation requests are not created or uploaded.\n      When this policy is left unset or set to disabled, extension installation requests are not created or uploaded.\n      When this policy is set to enabled, extension installation requests are created and uploaded to Google Admin console.\n\n      Extension installation requests are created when users try to install an extension that is not allowed by ExtensionInstallAllowlist or ExtensionSettings.\n\n      This policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken for Google Chrome.\n      This policy is always effective for Google Chrome OS.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "id": 608,
            "name": "CloudExtensionRequestEnabled",
            "owners": [
                "zmin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:85-",
                "chrome_os:85-"
            ],
            "tags": [
                "admin-sharing",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enables Google Chrome cloud reporting",
            "desc": "This policy controls Google Chrome cloud reporting which uploads information about the browser operation to Google Admin console.\n\n      When this policy is left unset or set to False, there is no data collected or uploaded.\n      When this policy is set to True, the data is collected and uploaded to Google Admin console.\n\n      For Google Chrome, this policy is only effective when the machine is enrolled with CloudManagementEnrollmentToken.\n      For Google Chrome OS, this policy is always effective.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "cloud_only": true
            },
            "id": 493,
            "name": "CloudReportingEnabled",
            "owners": [
                "zmin@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:72-",
                "chrome_os:81-",
                "ios:88-",
                "android:97-"
            ],
            "tags": [
                "admin-sharing",
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enables managed extensions to use the Enterprise Hardware Platform API",
            "desc": "Setting the policy to True lets extensions installed by enterprise policy use the Enterprise Hardware Platform API.\n\n      Setting the policy to False or leaving it unset prevents extensions from using this API.\n\n      Note: This policy also applies to component extensions, such as the Hangout Services extension.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 483,
            "name": "EnterpriseHardwarePlatformAPIEnabled",
            "owners": [
                "guidou@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:71-",
                "chrome_os:71-",
                "android:71-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow the user to manage VPN connections",
            "desc": "Setting the policy to Enabled or leaving it unset lets users manage (disconnect or modify) VPN connections. If the VPN connection is created using a VPN app, the UI inside the app isn't affected. So, users might still be able to use the app to modify the VPN connection. Use this policy with the Always on VPN feature, which lets the admin decide to establish a VPN connection when starting a device.\n\n      Setting the policy to Disabled turns off the Google Chrome OS user interfaces that would let the user disconnect or modify VPN connections.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 485,
            "name": "VpnConfigAllowed",
            "owners": [
                "phweiss@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:71-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Controls enabling NTLM as an authentication protocol for SMB mounts",
            "default_for_enterprise_users": false,
            "desc": "Setting the policy to Enabled means the Network File Shares feature for Google Chrome OS uses NTLM for authentication to SMB shares if necessary. Setting the policy to Disabled turns off NTLM authentication to SMB shares.\n\n      Leaving the policy unset means the behavior defaults to off for managed users and on for other users.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 489,
            "name": "NTLMShareAuthenticationEnabled",
            "owners": [
                "amistry@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:71-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "List of preconfigured network file shares.",
            "desc": "Setting the policy specifies a list of preset network file shares. Each item is an object with 2 properties: share_url and mode.\n\n      The share URL should be share_url.\n\n      For mode, it should be drop_down or pre_mount:\n\n      * drop_down indicates that share_url will be added to the share discovery list.\n\n      * pre_mount indicates that share_url will be mounted.",
            "example_value": [
                {
                    "share_url": "smb://server/share",
                    "mode": "drop_down"
                },
                {
                    "share_url": "\\\\server\\share",
                    "mode": "drop_down"
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 490,
            "name": "NetworkFileSharesPreconfiguredShares",
            "owners": [
                "amistry@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "mode": {
                            "enum": [
                                "drop_down",
                                "pre_mount"
                            ],
                            "type": "string"
                        },
                        "share_url": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "share_url",
                        "mode"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:71-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Screen brightness percent",
            "desc": "Setting the policy specifies screen brightness percent, turning autobrightness features off. Initial screen brightness adjusts to the policy value, but users can change it.\n\n      Leaving the policy unset doesn't affect user screen controls or autobrightness features.\n\n      Note: The policy values should be specified in percents from 0 to 100.",
            "example_value": {
                "BrightnessAC": 90,
                "BrightnessBattery": 75
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 492,
            "name": "ScreenBrightnessPercent",
            "owners": [
                "file://chrome/browser/ash/login/demo_mode/OWNERS",
                "agawronska@chromium.org"
            ],
            "schema": {
                "properties": {
                    "BrightnessAC": {
                        "description": "Screen brightness percent when running on AC power",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "BrightnessBattery": {
                        "description": "Screen brightness percent when running on battery power",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Alternative browser to launch for configured websites.",
            "desc": "Setting the policy controls which command to use to open URLs in an alternative browser. The policy can be set to one of ${ie}, ${firefox}, ${safari}, ${opera}, ${edge} or a file path. When this policy is set to a file path, that file is used as an executable file. ${ie} is only available on Microsoft\u00ae Windows\u00ae. ${safari} and ${edge} are only available on Microsoft\u00ae Windows\u00ae and macOS.\n\n      Leaving the policy unset puts a platform-specific default in use: Internet Explorer\u00ae for Microsoft\u00ae Windows\u00ae, or Safari\u00ae for macOS. On Linux\u00ae, launching an alternative browser will fail.",
            "example_value": "${ie}",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 494,
            "name": "AlternativeBrowserPath",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:71-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Command-line parameters for the alternative browser.",
            "desc": "Setting the policy to a list of strings means each string is passed to the alternative browser as separate command-line parameters. On Microsoft\u00ae Windows\u00ae, the parameters are joined with spaces. On macOS and Linux\u00ae, a parameter can have spaces and still be treated as a single parameter.\n\n      If an parameter contains ${url}, ${url} is replaced with the URL of the page to open. If no parameter contains ${url}, the URL is appended at the end of the command line.\n\n      Environment variables are expanded. On Microsoft\u00ae Windows\u00ae, %ABC% is replaced with the value of the ABC environment variable. On macOS and Linux\u00ae, ${ABC} is replaced with the value of the ABC environment variable.\n\n      Leaving the policy unset means only the URL is passed as a command-line parameter.",
            "example_value": [
                "-foreground",
                "-new-window",
                "${url}",
                "-profile",
                "%HOME%\\browser_profile"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 495,
            "name": "AlternativeBrowserParameters",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:71-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Path to Chrome for switching from the alternative browser.",
            "desc": "This policy controls the command to use to open URLs in Google Chrome when switching from Internet Explorer\u00ae. This policy can be set to an executable file path or ${chrome} to autodetect the location of Google Chrome.\n\n      Leaving the policy unset means Internet Explorer\u00ae autodetects Google Chrome's own executable path when launching Google Chrome from Internet Explorer.\n\n      Note: If the Legacy Browser Support add-in for Internet Explorer\u00ae isn't installed, this policy has no effect.",
            "example_value": "${chrome}",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 530,
            "name": "BrowserSwitcherChromePath",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.win:74-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Command-line parameters for switching from the alternative browser.",
            "desc": "Setting the policy to a list of strings means the strings are joined with spaces and passed from Internet Explorer\u00ae to Google Chrome as command-line parameters. If an parameter contains ${url}, ${url} is replaced with the URL of the page to open. If no parameter contains ${url}, the URL is appended at the end of the command line.\n\n      Environment variables are expanded. On Microsoft\u00ae Windows\u00ae, %ABC% is replaced with the value of the ABC environment variable.\n\n      Leaving the policy unset means Internet Explorer\u00ae only passes the URL to Google Chrome as a command-line parameter.\n\n      Note: If the Legacy Browser Support add-in for Internet Explorer\u00ae isn't installed, this policy has no effect.",
            "example_value": [
                "--force-dark-mode"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 531,
            "name": "BrowserSwitcherChromeParameters",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.win:74-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Websites to open in alternative browser",
            "desc": "Setting the policy controls the list of websites to open in an alternative browser. Each item is treated as a rule for something to open in an alternative browser. Google Chrome uses those rules when choosing if a URL should open in an alternative browser. When the Internet Explorer\u00ae add-in is on, Internet Explorer\u00ae switches back to Google Chrome when the rules don't match. If rules contradict each other, Google Chrome uses the most specific rule.\n\n      Leaving the policy unset adds no websites to the list.\n\n      Note: Elements can also be added to this list through the BrowserSwitcherUseIeSitelist and BrowserSwitcherExternalSitelistUrl policies.",
            "example_value": [
                "ie.com",
                "!open-in-chrome.ie.com",
                "foobar.com/ie-only/"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 496,
            "name": "BrowserSwitcherUrlList",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:71-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Websites that should never trigger a browser switch.",
            "desc": "Setting the policy controls the list of websites that will never cause a browser switch. Each item is treated as a rule. Those rules that match won't open an alternative browser. Unlike the BrowserSwitcherUrlList policy, rules apply to both directions. When the Internet Explorer\u00ae add-in is on, it also controls whether Internet Explorer\u00ae should open these URLs in Google Chrome.\n\n      Leaving the policy unset adds no websites to the list.\n\n      Note: Elements can also be added to this list through the BrowserSwitcherExternalGreylistUrl policy.",
            "example_value": [
                "ie.com",
                "!open-in-chrome.ie.com",
                "foobar.com/ie-only/"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 497,
            "name": "BrowserSwitcherUrlGreylist",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:71-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Use Internet Explorer's SiteList policy for Legacy Browser Support.",
            "desc": "This policy controls whether to load rules from Internet Explorer\u00ae's SiteList policy.\n\n      When this policy is set to true, Google Chrome reads Internet Explorer\u00ae's SiteList to obtain the site list's URL. Google Chrome then downloads the site list from that URL, and applies the rules as if they had been configured with the BrowserSwitcherUrlList policy.\n\n      When this policy is false or unset, Google Chrome does not use Internet Explorer\u00ae's SiteList policy as a source of rules for switching browsers.\n\n      For more information on Internet Explorer's SiteList policy: https://docs.microsoft.com/internet-explorer/ie11-deploy-guide/what-is-enterprise-mode",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 498,
            "name": "BrowserSwitcherUseIeSitelist",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:71-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "URL of an XML file that contains URLs to load in an alternative browser.",
            "desc": "Setting the policy to a valid URL has Google Chrome download the site list from that URL and apply the rules as if they were set up with the BrowserSwitcherUrlList policy.\n\n      Leaving it unset (or set to a invalid URL) means Google Chrome doesn't use the policy as a source of rules for switching browsers.\n\n      Note: This policy points to an XML file in the same format as Internet Explorer\u00ae's SiteList policy. This loads rules from an XML file, without sharing those rules with Internet Explorer\u00ae. Read more on Internet Explorer\u00ae's SiteList policy ( https://docs.microsoft.com/internet-explorer/ie11-deploy-guide/what-is-enterprise-mode)",
            "example_value": "http://example.com/sitelist.xml",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 511,
            "name": "BrowserSwitcherExternalSitelistUrl",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:72-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "URL of an XML file that contains URLs that should never trigger a browser switch.",
            "desc": "Setting the policy to a valid URL has Google Chrome download the site list from that URL and apply the rules as if they were set up with the BrowserSwitcherUrlGreylist policy. These policies prevent Google Chrome and the alternative browser from opening one another.\n\n      Leaving it unset (or set to a invalid URL) means Google Chrome doesn't use the policy as a source of rules for not switching browsers.\n\n      Note: This policy points to an XML file in the same format as Internet Explorer\u00ae's SiteList policy. This loads rules from an XML file, without sharing those rules with Internet Explorer\u00ae. Read more on Internet Explorer\u00ae's SiteList policy ( https://docs.microsoft.com/internet-explorer/ie11-deploy-guide/what-is-enterprise-mode )",
            "example_value": "http://example.com/greylist.xml",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 564,
            "name": "BrowserSwitcherExternalGreylistUrl",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome.*:77-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Delay before launching alternative browser (milliseconds)",
            "desc": "Setting the policy to a number has Google Chrome show a message for that number of milliseconds, then it opens an alternative browser.\n\n      Leaving the policy unset or set to 0 means navigating to a designated URL immediately opens it in an alternative browser.",
            "example_value": 10000,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 524,
            "name": "BrowserSwitcherDelay",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:74-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable the Legacy Browser Support feature.",
            "desc": "Setting the policy to Enabled means Google Chrome will try to launch some URLs in an alternate browser, such as Internet Explorer\u00ae. This feature is set using the policies in the Legacy Browser support group.\n\n      Setting the policy to Disabled or leaving it unset means Google Chrome won't try to launch designated URLs in an alternate browser.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 517,
            "name": "BrowserSwitcherEnabled",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:73-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Sitelist parsing mode",
            "default": 0,
            "desc": "This policy controls how Google Chrome interprets sitelist/greylist policies for the Legacy Browser Support feature. It affects the following policies: BrowserSwitcherUrlList, BrowserSwitcherUrlGreylist, BrowserSwitcherUseIeSitelist, BrowserSwitcherExternalSitelistUrl, and BrowserSwitcherExternalGreylistUrl.\n\n      If 'Default' (0) or unset, URL matching is less strict. Rules that do not contain \"/\" look for a substring anywhere in the URL's hostname. Matching the path component of a URL is case-sensitive.\n\n      If 'IESiteListMode' (1), URL matching is more strict. Rules that do not contain \"/\" only match at the end of the hostname. They must also be at a domain name boundary. Matching the path component of a URL is case-insensitive. This is more compatible with Microsoft\u00ae Internet Explorer\u00ae and Microsoft\u00ae Edge\u00ae.\n\n      For example, with the rules \"example.com\" and \"acme.com/abc\":\n\n      \"http://example.com/\", \"http://subdomain.example.com/\" and \"http://acme.com/abc\" match regardless of parsing mode.\n\n      \"http://notexample.com/\", \"http://example.com.invalid.com/\", \"http://example.comabc/\" only match in 'Default' mode.\n\n      \"http://acme.com/ABC\" only matches in 'IESiteListMode'.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 866,
            "items": [
                {
                    "caption": "Default behavior for LBS.",
                    "name": "Default",
                    "value": 0
                },
                {
                    "caption": "More compatible with Microsoft IE/Edge enterprise mode sitelists.",
                    "name": "IESiteListMode",
                    "value": 1
                }
            ],
            "name": "BrowserSwitcherParsingMode",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:95-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Keep last tab open in Chrome.",
            "desc": "Setting the policy to Enabled or leaving it unset has Google Chrome keep at least one tab open, after switching to an alternate browser.\n\n      Setting the policy to Disabled has Google Chrome close the tab after switching to an alternate browser, even if it was the last tab. This causes Google Chrome to exit completely.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 519,
            "name": "BrowserSwitcherKeepLastChromeTab",
            "owners": [
                "nicolaso@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:74-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set display resolution and scale factor",
            "desc": "Setting the policy sets the resolution and scale factor for each display. External display settings apply to connected displays. (The policy doesn't apply if a display doesn't support the specified resolution or scale.)\n\n      Setting external_use_native to True means the policy ignores external_width and external_height and sets external displays to their native resolution. Setting external_use_native to False or leaving it and external_width or external_height unset means the policy doesn't affect external displays.\n\n      Setting the recommended flag to True lets users change resolution and scale factor of any display through the settings page, but their settings change back at the next reboot. Setting the recommended flag to False or leaving it unset means users can't change the display settings.\n\n      Note: Set external_width and external_height in pixels and external_scale_percentage and internal_scale_percentage in percents.",
            "device_only": true,
            "example_value": {
                "external_width": 1920,
                "external_height": 1080,
                "external_use_native": false,
                "external_scale_percentage": 100,
                "internal_scale_percentage": 150,
                "recommended": true
            },
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 502,
            "name": "DeviceDisplayResolution",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "properties": {
                    "external_height": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "external_scale_percentage": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "external_use_native": {
                        "type": "boolean"
                    },
                    "external_width": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "internal_scale_percentage": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "recommended": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow devices to use a PluginVm on Google Chrome OS",
            "desc": "Setting the policy to Enabled turns on PluginVm for the device, as long as other settings also allow it. PluginVmAllowed and UserPluginVmAllowed must be True, and either PluginVmLicenseKey or PluginVmUserId must be set for PluginVm to run.\n\n      Setting the policy to Disabled or leaving it unset means PluginVm isn't on for the device.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 503,
            "name": "PluginVmAllowed",
            "owners": [
                "okalitova@chromium.org",
                "aoldemeier@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to use a PluginVm on Google Chrome OS",
            "default": false,
            "desc": "Allow this user to run PluginVm.\n\n      If the policy is set to false or left unset, PluginVm is not enabled for the user.\n      If set to true, PluginVm is enabled for the user as long as other settings also allow it. PluginVmAllowed and UserPluginVmAllowed need to be true, and either PluginVmLicenseKey or PluginVmUserId need to be set for PluginVm to be allowed to run.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 705,
            "name": "UserPluginVmAllowed",
            "owners": [
                "okalitova@chromium.org",
                "janagrill@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "PluginVm license key",
            "deprecated": true,
            "desc": "Setting the policy specifies the PluginVm license key for this device.\n\n      This policy was removed in M94.",
            "device_only": true,
            "example_value": "LICENSE_KEY",
            "features": {
                "dynamic_refresh": true
            },
            "id": 515,
            "name": "PluginVmLicenseKey",
            "owners": [
                "okalitova@chromium.org",
                "aoldemeier@chromium.org"
            ],
            "schema": {
                "sensitiveValue": true,
                "type": "string"
            },
            "supported_on": [
                "chrome_os:73-93"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "PluginVm user id",
            "desc": "This policy specifies the PluginVm licensing user id for this device.",
            "example_value": "USER_ID",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 698,
            "name": "PluginVmUserId",
            "owners": [
                "traciechan@google.com",
                "zatrudo@google.com"
            ],
            "schema": {
                "sensitiveValue": true,
                "type": "string"
            },
            "supported_on": [
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "PluginVm image",
            "desc": "Setting the policy specifies the PluginVm image for a user. Specify this policy as a JSON format string, with URL stating where to download the image and hash as a SHA-256 hash used to verify the integrity of the download.",
            "example_value": {
                "url": "https://example.com/plugin_vm_image",
                "hash": "842841a4c75a55ad050d686f4ea5f77e83ae059877fe9b6946aa63d3d057ed32"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 504,
            "name": "PluginVmImage",
            "owners": [
                "okalitova@chromium.org",
                "aoldemeier@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the PluginVm image.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL from which the PluginVm image can be downloaded.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:72-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow PluginVm Product Analytics",
            "desc": "Allow PluginVm to collect PluginVm usage data.\n\n      If the policy is set to false or left unset, PluginVm is not allowed to collect data.\n      If set to true, PluginVm might collect PluginVm usage data that is then combined and thoroughly analyzed to improve PluginVm experience.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 712,
            "name": "PluginVmDataCollectionAllowed",
            "owners": [
                "okalitova@chromium.org",
                "janagrill@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Required free disk space for PluginVm",
            "desc": "Free disk space (in GB) required to install PluginVm.\n\n      If this policy is left unset, PluginVm installation fails if free disk space available on the device is less than 20 GB (default value).\n      If this policy is set, PluginVm installation fails if free disk space available on the device is less than required by policy.",
            "example_value": 20,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 724,
            "name": "PluginVmRequiredFreeDiskSpace",
            "owners": [
                "okalitova@chromium.org",
                "janagrill@chromium.org"
            ],
            "schema": {
                "maximum": 1000,
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Parent Access Code Configuration",
            "desc": "This policy specifies configuration that is used to generate and verify Parent Access Code.\n\n      |current_config| is always used for generating access code and should be used for validating access code only when it cannot be validated with |future_config|.\n      |future_config| is the primary config used for validating access code.\n      |old_configs| should be used for validating access code only when it cannot be validated with |future_config| nor |current_config|.\n\n      The expected way of using this policy is to gradually rotate access code configuration. New configuration is always put into |future_config| and at the same\n      time the existing value is moved into |current_config|. |current_config|'s previous values are moved into |old_configs| and removed after rotation cycle is finished.\n\n      This policy applies only to child user.\n      When this policy is set Parent Access Code can be verified on child user's device.\n      When this policy is unset it is not possible to verify Parent Access Code on child user's device.",
            "example_value": {
                "current_config": {
                    "shared_secret": "oOA9nX02LdhYdOzwMsGof+QA3wUKP4YMNlk9S/W3o+w=",
                    "access_code_ttl": 600,
                    "clock_drift_tolerance": 300
                },
                "future_config": {
                    "shared_secret": "KMsoIjnpvcWmiU1GHchp2blR96mNyJwS",
                    "access_code_ttl": 600,
                    "clock_drift_tolerance": 300
                },
                "old_configs": [
                    {
                        "shared_secret": "sTr6jqMTJGCbLhWI5plFTQb/VsqxwX2Q",
                        "access_code_ttl": 600,
                        "clock_drift_tolerance": 300
                    }
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 507,
            "name": "ParentAccessCodeConfig",
            "owners": [
                "file://chrome/browser/ash/child_accounts/OWNERS",
                "agawronska@chromium.org"
            ],
            "schema": {
                "properties": {
                    "current_config": {
                        "description": "Configuration used to generate and verify Parent Access Code.",
                        "id": "Config",
                        "properties": {
                            "access_code_ttl": {
                                "description": "Time that access code is valid for (in seconds).",
                                "maximum": 3600,
                                "minimum": 60,
                                "type": "integer"
                            },
                            "clock_drift_tolerance": {
                                "description": "The allowed difference between the clock on child and parent devices (in seconds).",
                                "maximum": 1800,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "shared_secret": {
                                "description": "Secret shared between child and parent devices.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "future_config": {
                        "$ref": "Config"
                    },
                    "old_configs": {
                        "items": {
                            "$ref": "Config"
                        },
                        "type": "array"
                    }
                },
                "sensitiveValue": true,
                "type": "object"
            },
            "supported_on": [
                "chrome_os:73-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow users to manage installed client certificates.",
            "default": 0,
            "desc": "Setting the policy to 'All' (value 0) or leaving it unset lets users manage certificates. Setting the policy to 'None' (value 2) means users can only view (not manage) certificates.\n\n      Setting the policy to 'UserOnly' (value 1) lets users manage user certificates, but not device-wide certificates.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 518,
            "items": [
                {
                    "caption": "Allow users to manage all certificates",
                    "name": "All",
                    "value": 0
                },
                {
                    "caption": "Allow users to manage user certificates",
                    "name": "UserOnly",
                    "value": 1
                },
                {
                    "caption": "Disallow users from managing certificates",
                    "name": "None",
                    "value": 2
                }
            ],
            "name": "ClientCertificateManagementAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:74-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Force device reboot when user sign out",
            "desc": "\n      This policy, when set to ArcSession, forces the device to reboot when a user sign out if Android has started.\n      This policy, when set to ArcSessionOrVMStart, forces the device to reboot when a user sign out if Android or a VM has started.\n      When set to Always, it forces the device to reboot on every user sign out.\n      If left unset, it has no effect and no reboot is forced on user sign out. The same applies if set to Never.\n      This policy has effect only for unaffiliated users.\n      ",
            "device_only": true,
            "example_value": 2,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 520,
            "items": [
                {
                    "caption": "Do not reboot on user sign out.",
                    "name": "Never",
                    "value": 1
                },
                {
                    "caption": "Reboot on user sign out if Android has started.",
                    "name": "ArcSession",
                    "value": 2
                },
                {
                    "caption": "Always reboot on user sign out.",
                    "name": "Always",
                    "value": 3
                },
                {
                    "caption": "Reboot on user sign out if Android or a VM has started.",
                    "name": "ArcSessionOrVMStart",
                    "value": 4
                }
            ],
            "name": "DeviceRebootOnUserSignout",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pmarko@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3,
                    4
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:76-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "int-enum"
        },
        {
            "caption": "Force networking code to run in the browser process",
            "deprecated": true,
            "desc": "This policy is deprecated.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 521,
            "name": "ForceNetworkInProcess",
            "owners": [
                "file://services/network/OWNERS",
                "jam@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:72-83"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Mode of the Assistant onboarding experience",
            "default": "Default",
            "desc": "This policy controls the mode of the Assistant onboarding experience.\n\n      If the policy is unset or is set to \"Default\", the default mode of the Assistant onboarding experience is used.\n      If the policy is set to \"Education\", the EDU mode of the Assistant onboarding experience is used.",
            "example_value": "Default",
            "features": {
                "dynamic_refresh": false,
                "per_profile": true,
                "unlisted": true,
                "cloud_only": true
            },
            "id": 729,
            "items": [
                {
                    "caption": "Use the default mode of the Assistant onboarding experience",
                    "name": "Default",
                    "value": "Default"
                },
                {
                    "caption": "Use the EDU mode of the Assistant onboarding experience",
                    "name": "Education",
                    "value": "Education"
                }
            ],
            "name": "AssistantOnboardingMode",
            "owners": [
                "xiaohuic@chromium.org",
                "croissant-eng@google.com"
            ],
            "schema": {
                "enum": [
                    "Default",
                    "Education"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Allow Google Assistant to access screen context",
            "desc": "Setting the policy to Enabled lets Google Assistant access screen context and send that data to a server. Setting the policy to Disabled keeps Google Assistant from screen context.\n\n      Leaving the policy unset lets users decide to turn this feature on or off.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 527,
            "name": "VoiceInteractionContextEnabled",
            "owners": [
                "yanxiao@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:74-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow Google Assistant to listen for the voice activation phrase",
            "desc": "Setting the policy to Enabled lets Google Assistant listen for the voice activation phrase. Setting the policy to Disabled keeps Google Assistant from listening for the phrase.\n\n      Leaving the policy unset lets users decide to turn this feature on or off.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 529,
            "name": "VoiceInteractionHotwordEnabled",
            "owners": [
                "yanxiao@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:74-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Google Assistant voice match flow",
            "default": true,
            "desc": "Setting the policy to Enabled lets show Google Assistant voice match flow during initial setup. Setting the policy to Disabled keeps Google Assistant from showing voice match flow during initial setup.\n\n      Leaving the policy unset means it is Enabled.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 885,
            "items": [
                {
                    "caption": "Show Google Assistant voice match flow during initial setup",
                    "value": true
                },
                {
                    "caption": "Do not show Google Assistant voice match flow during initial setup",
                    "value": false
                }
            ],
            "name": "AssistantVoiceMatchEnabledDuringOobe",
            "owners": [
                "raleksandrov@google.com",
                "cros-oac@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:93-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Quick Answers to access selected content",
            "deprecated": true,
            "desc": "This policy is deprecated and will be removed in Google Chrome OS version 89.\n\n      This policy gives Quick Answers permission to access selected content and send the info to server.\n\n      If the policy is enabled, Quick Answers will be allowed to access selected content.\n      If the policy is disabled, Quick Answers will not be allowed to access selected content.\n      If the policy is not set, users can decide whether to allow Quick Answers to access selected content.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 694,
            "name": "VoiceInteractionQuickAnswersEnabled",
            "owners": [
                "llin@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:84-88"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Quick Answers",
            "default": true,
            "desc": "This policy gives Quick Answers permission to access selected content and send the info to the server.\n\n      If the policy is enabled, Quick Answers will be enabled.\n      If the policy is disabled, Quick Answers will be disabled.\n      If the policy is not set, users can decide whether to enable or disable Quick Answers.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 917,
            "items": [
                {
                    "caption": "Enable Quick Answers",
                    "value": true
                },
                {
                    "caption": "Disable Quick Answers",
                    "value": false
                }
            ],
            "name": "QuickAnswersEnabled",
            "owners": [
                "updowndota@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:97-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Quick Answers Definition",
            "default": true,
            "desc": "This policy gives Quick Answers permission to access selected content and send the info to the server to get definition results.\n\n      If the policy is enabled or not set, Quick Answers Definition will be enabled.\n      If the policy is disabled, Quick Answers Definition will be disabled.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 918,
            "items": [
                {
                    "caption": "Enable Quick Answers Definition",
                    "value": true
                },
                {
                    "caption": "Disable Quick Answers Definition",
                    "value": false
                }
            ],
            "name": "QuickAnswersDefinitionEnabled",
            "owners": [
                "updowndota@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:97-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Quick Answers Translation",
            "default": true,
            "desc": "This policy gives Quick Answers permission to access selected content and send the info to the server to get translation results.\n\n      If the policy is enabled or not set, Quick Answers translation will be enabled.\n      If the policy is disabled, Quick Answers translation will be disabled.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 919,
            "items": [
                {
                    "caption": "Enable Quick Answers Translation",
                    "value": true
                },
                {
                    "caption": "Disable Quick Answers Translation",
                    "value": false
                }
            ],
            "name": "QuickAnswersTranslationEnabled",
            "owners": [
                "updowndota@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:97-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable Quick Answers Unit Conversion",
            "default": true,
            "desc": "This policy gives Quick Answers permission to access selected content and send the info to the server to get unit conversion results.\n\n      If the policy is enabled or not set, Quick Answers unit conversion will be enabled.\n      If the policy is disabled, Quick Answers unit conversion will be disabled.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 920,
            "items": [
                {
                    "caption": "Enable Quick Answers Unit Conversion",
                    "value": true
                },
                {
                    "caption": "Disable Quick Answers Unit Conversion",
                    "value": false
                }
            ],
            "name": "QuickAnswersUnitConverstionEnabled",
            "owners": [
                "updowndota@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:97-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allows wilco diagnostics and telemetry controller",
            "desc": "Setting the policy to Enabled when wilco diagnostics and telemetry controller (DTC) is available on the device turns collecting, processing, and reporting of telemetry and diagnostics data on.\n\n      Setting the policy to Disabled or leaving it unset turns DTC off. It can't collect, process, or report telemetry and diagnostics data from the device.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 532,
            "name": "DeviceWilcoDtcAllowed",
            "owners": [
                "pbond@chromium.org",
                "lamzin@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:74-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allows a page to show popups during its unloading",
            "default_for_enterprise_users": false,
            "deprecated": true,
            "desc": "Setting the policy to True allows pages to show pop-ups while the pages unload.\n\n      Setting the policy to False or leaving it unset prevents pages from showing pop-ups while the pages unload.\n\n      This policy was removed in Chrome 88 and is ignored if set.\n\n      See https://www.chromestatus.com/feature/5989473649164288.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 533,
            "name": "AllowPopupsDuringPageUnload",
            "owners": [
                "avi@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:74-87",
                "chrome_os:74-87",
                "android:74-87"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Wilco DTC configuration",
            "desc": "Setting the policy configures the wilco diagnostics and telemetry controller (DTC), if available on the device. The setup size can't exceed 1MB (1,000,000 bytes) and must be in JSON format. The wilco DTC is responsible for handling it. The cryptographic hash verifies the integrity of the download. The configuration is downloaded and cached. It's redownloaded whenever the URL or the hash changes.\n\n      If you set this policy, users can't change it.",
            "device_only": true,
            "example_value": {
                "url": "https://example.com/wilcodtcconfig",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 535,
            "max_size": 1000000,
            "name": "DeviceWilcoDtcConfiguration",
            "owners": [
                "pbond@chromium.org",
                "lamzin@google.com"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Enable peak shift power management",
            "desc": "Setting the policy to Enabled and setting DevicePowerPeakShiftBatteryThreshold and DevicePowerPeakShiftDayConfig keeps power peak shift on, if supported on the device. Power peak shift power management policy is a power-saving policy that minimizes alternating current usage during peak times. For each weekday, you can set a start and end time to run in power peak shift mode. As long as the battery stays above the threshold specified, during these times, the device runs from the battery (even if the alternating current is attached). After the specified end time, the device runs from alternating current (if attached), but won't charge the battery. The device will again function normally using alternating current and recharging the battery after the specified charge start time.\n\n      Setting the policy to Disabled keeps power peak shift off.\n\n      If unset, power peak shift is off at first. Users can't change this setting.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 538,
            "name": "DevicePowerPeakShiftEnabled",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set power peak shift battery threshold in percent",
            "desc": "If DevicePowerPeakShiftEnabled is Enabled, then setting DevicePowerPeakShiftBatteryThreshold sets power peak shift battery threshold in percent.\n\n       Leaving the policy unset keeps power peak shift off.",
            "device_only": true,
            "example_value": 20,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 539,
            "name": "DevicePowerPeakShiftBatteryThreshold",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "maximum": 100,
                "minimum": 15,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Set power peak shift day config",
            "desc": "If DevicePowerPeakShiftEnabled is Enabled, setting DevicePowerPeakShiftDayConfig sets power peak shift day configuration.\n\n      Leaving the policy unset keeps power peak shift off.\n\n      Valid values for the minute field in start_time, end_time and charge_start_time are 0, 15, 30, 45.",
            "device_only": true,
            "example_value": {
                "entries": [
                    {
                        "day": "MONDAY",
                        "start_time": {
                            "hour": 9,
                            "minute": 0
                        },
                        "end_time": {
                            "hour": 15,
                            "minute": 15
                        },
                        "charge_start_time": {
                            "hour": 20,
                            "minute": 45
                        }
                    },
                    {
                        "day": "FRIDAY",
                        "start_time": {
                            "hour": 2,
                            "minute": 30
                        },
                        "end_time": {
                            "hour": 21,
                            "minute": 0
                        },
                        "charge_start_time": {
                            "hour": 23,
                            "minute": 45
                        }
                    }
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 540,
            "name": "DevicePowerPeakShiftDayConfig",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "properties": {
                    "entries": {
                        "items": {
                            "properties": {
                                "charge_start_time": {
                                    "$ref": "Time",
                                    "description": "Time when the device will use alternating current to charge battery, interpreted in the device's local time zone."
                                },
                                "day": {
                                    "$ref": "WeekDay"
                                },
                                "end_time": {
                                    "$ref": "Time",
                                    "description": "Time when the device will run from alternating current, interpreted in the device's local time zone."
                                },
                                "start_time": {
                                    "$ref": "Time",
                                    "description": "Time when the device will start running from the battery, interpreted in the device's local time zone."
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable boot on AC (alternating current)",
            "desc": "Setting the policy to Enabled keeps boot on AC on, if supported on the device. Boot on AC provides an opportunity for the system to restart from Off or Hibernate after inserting the line power.\n\n      Setting the policy to Disabled keeps boot on AC off.\n\n      If you set this policy, users can't change it. If not set, boot on AC is off, and users can't turn it on.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 541,
            "name": "DeviceBootOnAcEnabled",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable USB power share",
            "desc": "Setting the policy to Enabled turns on the USB power share power management policy.\n\n      Certain devices have a specific USB port with a lightning bolt or battery icon for charging devices using the system battery. This policy affects the charging behavior of this port while the system is in sleep and shut down modes. It doesn't affect the other USB ports and the charging behavior while the system is awake, when the USB port always provides power.\n\n      When sleeping, power is supplied to the USB port when the device is plugged in to the wall charger or if the battery level exceeds 50%. When shut down, power is supplied to the USB port when the device is plugged in to the wall charger.\n\n      Setting the policy to Disabled means no power is supplied.\n\n      Leaving the policy unset means the policy is on, and users can't turn it off.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 553,
            "name": "DeviceUsbPowerShareEnabled",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Signed HTTP Exchange (SXG) support",
            "default": true,
            "desc": "Setting the policy to True or leaving it unset means Google Chrome will accept web contents served as Signed HTTP Exchanges.\n\n      Setting the policy to False prevents Signed HTTP Exchanges from loading.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 542,
            "items": [
                {
                    "caption": "Accept web contents served as Signed HTTP Exchanges",
                    "value": true
                },
                {
                    "caption": "Prevent Signed HTTP Exchanges from loading",
                    "value": false
                }
            ],
            "name": "SignedHTTPExchangeEnabled",
            "owners": [
                "file://content/browser/web_package/OWNERS",
                "ksakamoto@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:75-",
                "chrome_os:75-"
            ],
            "tags": [
                "filtering"
            ],
            "type": "main"
        },
        {
            "caption": "Enable attestation flow for a list of URLs",
            "desc": "Enable Chrome Enterprise Platform Identity Connector for a list of URLs.\n\n      Setting this policy specifies which URLs should be allowed to be part of the attestation flow to get the set of signals from the machine.\n\n      Leaving this policy unset or empty means that no endpoint will be able to start the attestation flow nor get signals from the machine.\n\n      URLs must have HTTPS scheme, e.g. \"https://example.com\".\n\n      Note: Wildcards, *, are allowed.\n\n      For ChromeOS, this policy is related to remote attestation where a certificate is automatically generated and uploaded to the Device Management Server.\n\n      For detailed information on valid URL patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "example_value": [
                "https://example1.com",
                "https://[*.]example2.com",
                "https://foo.example3.com/path"
            ],
            "features": {
                "per_profile": true,
                "dynamic_refresh": true,
                "cloud_only": true
            },
            "id": 826,
            "name": "ContextAwareAccessSignalsAllowlist",
            "owners": [
                "rodmartin@google.com",
                "rogerta@chromium.org",
                "mad@chromium.org",
                "seblalancette@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:95-",
                "chrome_os:95-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Provide users with Quick Fix Build",
            "desc": "This policy controls whether or not the device should be updated to a Quick Fix Build.\n\n      If policy value is set to a token that maps to a Quick Fix Build, the device will be updated to the corresponding Quick Fix Build if the update is not blocked by another policy.\n\n      If this policy is not set, or if its value does not map to a Quick Fix Build, then the device won't be updated to a Quick Fix Build. If the device is already running a Quick Fix Build and the policy is not set anymore or its value does not map to a Quick Fix Build anymore, then the device will be updated to a regular build if the update is not blocked by another policy.",
            "device_only": true,
            "example_value": "sometoken",
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 543,
            "name": "DeviceQuickFixBuildToken",
            "owners": [
                "askaraitzhan@chromium.org",
                "ultrotter@chromium.org"
            ],
            "schema": {
                "type": "string"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Password synchronization between third-party SSO providers and Chrome devices",
            "default": false,
            "desc": "Enables SAML password sync between multiple Chrome devices by monitoring the value of password sync token and sending a user through the online re-authentication if password was updated and needs to be synchronized.\n\n      Enables a page at chrome://password-change that lets SAML users change their SAML passwords while in-session, which ensures that the SAML password and the device lockscreen password are kept in-sync.\n\n      This policy also enables notifications that warn SAML users if their SAML passwords are soon to expire so that they can deal with this immediately by doing an in-session password change.\n      But, these notifications will only be shown if password expiry information is sent to the device by the SAML identity provider during the SAML login flow.\n\n      Setting this policy to Disabled or not set, SAML password can't be changed at chrome://password-change and there won't be any notification when SAML passwords are soon to expire.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future": true,
            "id": 545,
            "items": [
                {
                    "caption": "Trigger authentication flows to synchronize passwords with SSO providers",
                    "value": true
                },
                {
                    "caption": "Do not trigger authentication flows for password synchronization",
                    "value": false
                }
            ],
            "name": "SamlInSessionPasswordChangeEnabled",
            "owners": [
                "mslus@chromium.org",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:76-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enables online re-authentication on lock screen for SAML users",
            "desc": "Enables online user signin on a lock screen. If the policy is set to true online re-authentication on the lock screen is triggered e.g. by SAMLOfflineSigninTimeLimit.\n      The re-authentication is enforced immediately when on the lock screen or next time a user locks the screen after the condition is met.\n      If the policy is set to false or unset users can always unlock the screen with their local credentials.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future": true,
            "id": 719,
            "name": "LockScreenReauthenticationEnabled",
            "owners": [
                "mslus@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow user feedback",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset lets users send feedback to Google through Menu > Help > Report an Issue or key combination.\n\n      Setting the policy to Disabled means users can't send feedback to Google.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 570,
            "items": [
                {
                    "caption": "Allow users to file feedback",
                    "value": true
                },
                {
                    "caption": "Prevent users from filing feedback",
                    "value": false
                }
            ],
            "name": "UserFeedbackAllowed",
            "owners": [
                "apotapchuk@chromium.org",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:77-",
                "chrome_os:77-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "How many days in advance to notify SAML users when their password is due to expire",
            "desc": "This policy has no effect unless SamlInSessionPasswordChangeEnabled is true.\n      If that policy is true, and this policy is set to (for example) 14, that means SAML users will be notified 14 days in advance that their password is due to expire on a certain date.\n      Then they can deal with this immediately by doing an in-session password change and updating their password before it expires.\n      But, these notifications will only be shown if password expiry information is sent to the device by the SAML identity provider during the SAML login flow.\n      Setting this policy to zero means the users will not be notified in advance - they will only be notified once the password has already expired.\n\n      If this policy is set, the user cannot change or override it.",
            "example_value": 14,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future": true,
            "id": 555,
            "name": "SamlPasswordExpirationAdvanceWarningDays",
            "owners": [
                "olsen@chromium.org",
                "rsorokin@chromium.org"
            ],
            "schema": {
                "maximum": 90,
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:76-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable advanced battery charge mode",
            "desc": "If DeviceAdvancedBatteryChargeModeDayConfig is set, setting DeviceAdvancedBatteryChargeModeEnabled to Enabled keeps advanced battery charge mode power management policy on (if supported on the device). Using a standard charging algorithm and other techniques outside work hours, this mode lets users maximize battery health. During work hours, the system uses an express charge, which lets the battery charge faster. Specify the time when the system is used most each day by the start time and the duration.\n\n      Setting the policy to Disabled or leaving it unset keeps advanced battery charge mode off.\n\n      Users are unable to change this setting.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 548,
            "name": "DeviceAdvancedBatteryChargeModeEnabled",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set advanced battery charge mode day config",
            "desc": "If DeviceAdvancedBatteryChargeModeEnabled is set to Enabled, then setting DeviceAdvancedBatteryChargeModeDayConfig lets you set up advanced battery charge mode. The value for charge_start_time must be less than charge_end_time.\n\n      Leaving the policy unset keeps advanced battery charge mode off.\n\n      Valid values for minute field in charge_start_time and charge_end_time are 0, 15, 30, 45.",
            "device_only": true,
            "example_value": {
                "entries": [
                    {
                        "day": "TUESDAY",
                        "charge_start_time": {
                            "hour": 20,
                            "minute": 30
                        },
                        "charge_end_time": {
                            "hour": 23,
                            "minute": 0
                        }
                    },
                    {
                        "day": "FRIDAY",
                        "charge_start_time": {
                            "hour": 4,
                            "minute": 15
                        },
                        "charge_end_time": {
                            "hour": 6,
                            "minute": 45
                        }
                    }
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 549,
            "name": "DeviceAdvancedBatteryChargeModeDayConfig",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "properties": {
                    "entries": {
                        "items": {
                            "properties": {
                                "charge_end_time": {
                                    "$ref": "Time",
                                    "description": "Time when the device will stop charging, interpreted in the device's local time zone."
                                },
                                "charge_start_time": {
                                    "$ref": "Time",
                                    "description": "Time when the device will start charging, interpreted in the device's local time zone."
                                },
                                "day": {
                                    "$ref": "WeekDay"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Battery charge mode",
            "desc": "Unless DeviceAdvancedBatteryChargeModeEnabled is specified, which overrides DeviceBatteryChargeMode, then setting DeviceBatteryChargeMode specifies battery charge mode power management policy (if supported on the device). To extend battery life, the policy dynamically controls battery charging by minimizing stress and wear-out.\n\n      Leaving the policy unset (if supported on the device) applies the standard battery charge mode, and users can't change it.\n\n      Note: If Custom battery charge mode is selected, then also specify DeviceBatteryChargeCustomStartCharging and DeviceBatteryChargeCustomStopCharging.",
            "device_only": true,
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 550,
            "items": [
                {
                    "caption": "Fully charge battery at a standard rate.",
                    "name": "Standard",
                    "value": 1
                },
                {
                    "caption": "Charge battery using fast charging technology.",
                    "name": "ExpressCharge",
                    "value": 2
                },
                {
                    "caption": "Charge battery for devices that are primarily connected to an external power source.",
                    "name": "PrimarilyAcUse",
                    "value": 3
                },
                {
                    "caption": "Adaptive charge battery based on battery usage pattern.",
                    "name": "Adaptive",
                    "value": 4
                },
                {
                    "caption": "Charge battery while it is within a fixed range.",
                    "name": "Custom",
                    "value": 5
                }
            ],
            "name": "DeviceBatteryChargeMode",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "enum": [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Set battery charge custom start charging in percent",
            "desc": "If DeviceBatteryChargeMode is set to \"custom\", then setting DeviceBatteryChargeCustomStartCharging customizes when the battery starts charging, based the percentage of battery charge. The value must be at least 5 percentage points below DeviceBatteryChargeCustomStopCharging.\n\n      Leaving the policy unset applies the standard battery charge mode.",
            "device_only": true,
            "example_value": 60,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 551,
            "name": "DeviceBatteryChargeCustomStartCharging",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "maximum": 95,
                "minimum": 50,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Set battery charge custom stop charging in percent",
            "desc": "If DeviceBatteryChargeMode is set to \"custom\", then setting DeviceBatteryChargeCustomStopCharging customizes when the battery stops charging, based on the percentage of battery charge. DeviceBatteryChargeCustomStartCharging must be at least 5 percentage points below DeviceBatteryChargeCustomStopCharging.\n\n      Leaving the policy unset applies the \"standard\" battery charge mode.",
            "device_only": true,
            "example_value": 90,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 552,
            "name": "DeviceBatteryChargeCustomStopCharging",
            "owners": [
                "lamzin@google.com"
            ],
            "schema": {
                "maximum": 100,
                "minimum": 55,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Set custom schedule to check for updates",
            "desc": "Allows setting a custom schedule to check for updates. This applies to all users, and to all interfaces on the device. Once set, the device will check for updates according to the schedule. The policy must be removed to cancel any more scheduled update checks.",
            "device_only": true,
            "example_value": {
                "update_check_time": {
                    "hour": 23,
                    "minute": 35
                },
                "frequency": "WEEKLY",
                "day_of_week": "MONDAY",
                "day_of_month": 11
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 556,
            "name": "DeviceScheduledUpdateCheck",
            "owners": [
                "abhishekbh@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "properties": {
                    "day_of_month": {
                        "description": "Day of month [1-31] when the update check should happen, interpreted in the device's local time zone. Only used when 'frequency' is 'MONTHLY'. If this is more than the maximum number of days in a given month then the last day of the month will be chosen.",
                        "maximum": 31,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "day_of_week": {
                        "$ref": "WeekDay",
                        "description": "Day of week when the update check should happen, interpreted in the device's local time zone. Only used when 'frequency' is 'WEEKLY'."
                    },
                    "frequency": {
                        "description": "Frequency with which the update check should recur.",
                        "enum": [
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY"
                        ],
                        "type": "string"
                    },
                    "update_check_time": {
                        "$ref": "Time",
                        "description": "Time when the update check should happen, interpreted in the device's local time zone."
                    }
                },
                "required": [
                    "update_check_time",
                    "frequency"
                ],
                "type": "object"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:75-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Set custom schedule to reboot kiosk devices",
            "desc": "Allows setting a custom schedule to reboot devices. The policy currently applies only to devices which have enabled auto-launch app in the Kiosk session. Once set to True, the device will reboot to the schedule. The policy must be removed to cancel any more scheduled reboots.",
            "device_only": true,
            "example_value": {
                "reboot_time": {
                    "hour": 22,
                    "minute": 30
                },
                "frequency": "WEEKLY",
                "day_of_week": "TUESDAY",
                "day_of_month": 11
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 862,
            "name": "DeviceScheduledReboot",
            "owners": [
                "sanjaperisic@chromium.org"
            ],
            "schema": {
                "properties": {
                    "day_of_month": {
                        "description": "Day of month [1-31] when the reboot should happen, interpreted in the device's local time zone. Only used when 'frequency' is 'MONTHLY'. If this is more than the maximum number of days in a given month then the last day of the month will be chosen.",
                        "maximum": 31,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "day_of_week": {
                        "$ref": "WeekDay",
                        "description": "Day of week when the reboot should happen, interpreted in the device's local time zone. Only used when 'frequency' is 'WEEKLY'."
                    },
                    "frequency": {
                        "description": "Frequency at which the reboot should recur.",
                        "enum": [
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY"
                        ],
                        "type": "string"
                    },
                    "reboot_time": {
                        "$ref": "Time",
                        "description": "Time when the reboot should happen, interpreted in the device's local time zone."
                    }
                },
                "required": [
                    "reboot_time",
                    "frequency"
                ],
                "type": "object"
            },
            "supported_on": [
                "chrome_os:94-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable Kerberos functionality",
            "desc": "Controls whether the Kerberos functionality is enabled. Kerberos is an authentication protocol that can be used to authenticate to web apps and file shares.\n\n          If this policy is enabled, Kerberos functionality is enabled. Kerberos accounts can be added either through the 'Configure Kerberos accounts' policy or through the Kerberos Accounts settings in the Kerberos settings page.\n\n          If this policy is disabled or not set, the Kerberos Accounts settings are disabled. No Kerberos accounts can be added and Kerberos authentication cannot be used. All existing Kerberos accounts are deleted, all stored passwords are deleted.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 557,
            "name": "KerberosEnabled",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/kerberos/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Enable 'Remember password' feature",
            "desc": "Controls whether the 'Remember password' feature is enabled in the Kerberos authentication dialog. Passwords are stored encryped on disk, only accessible to the Kerberos system daemon and during a user session.\n\n          If this policy is enabled or not set, users can decide whether Kerberos passwords are remembered, so that they do not have to be entered again. Kerberos tickets are automatically fetched unless additional authentication is required (two-factor authentication).\n\n          If this policy is disabled, passwords are never remembered and all previously stored passwords are removed. Users have to enter their password every time they need to authenticate with the Kerberos system. Depending on server settings, this usually happens between every 8 hours to several months.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 558,
            "name": "KerberosRememberPasswordEnabled",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/kerberos/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Users can add Kerberos accounts",
            "desc": "Controls whether users may add Kerberos accounts.\n\n          If this policy is enabled or not set, users may add Kerberos accounts via the Kerberos Accounts settings in the Kerberos settings page. Users have full control over accounts they added and may modify or remove them.\n\n          If this policy is disabled, users may not add Kerberos accounts. Accounts can only be added via the 'Configure Kerberos accounts' policy. This is an effective way to lock down accounts.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 559,
            "name": "KerberosAddAccountsAllowed",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/kerberos/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Configure Kerberos accounts",
            "desc": "Adds prefilled Kerberos accounts. If the Kerberos credentials match the login credentials, an account can be configured to reuse the login credentials by specifying '${{LOGIN_EMAIL}}' and ${{PASSWORD}}' for principal and password, respectively, so that the Kerberos ticket can be retrieved automatically unless two-factor authentication is configured. Users cannot modify accounts added via this policy.\n\n          If this policy is enabled, the list of accounts defined by the policy is added to the Kerberos Accounts settings.\n\n          If this policy is disabled or not set, no accounts are added to the Kerberos Accounts settings and all accounts previously added with this policy are removed. Users may still add accounts manually if the 'Users can add Kerberos accounts' policy is enabled.",
            "example_value": [
                {
                    "principal": "${LOGIN_EMAIL}",
                    "password": "${PASSWORD}"
                },
                {
                    "principal": "user1@REALM.COM",
                    "remember_password": true
                },
                {
                    "principal": "user2@REALM.COM",
                    "password": "p4zzw0rd!",
                    "krb5conf": [
                        "[libdefaults]",
                        "  default_tgs_enctypes = aes256-cts-hmac-sha1-96",
                        "  default_tkt_enctypes = aes256-cts-hmac-sha1-96",
                        "  permitted_enctypes = aes256-cts-hmac-sha1-96",
                        "  default_realm = REALM.COM",
                        "",
                        "[realms]",
                        "  REALM.COM = {",
                        "    kdc = us-west.realm.com",
                        "    master_kdc = us-west.realm.com",
                        "    kpasswd_server = us-west.realm.com",
                        "  }"
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 560,
            "name": "KerberosAccounts",
            "owners": [
                "fsandrade@chromium.org",
                "file://chrome/browser/ash/kerberos/OWNERS"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "krb5conf": {
                            "description": "Kerberos configuration (one line per array item), see https://web.mit.edu/kerberos/krb5-1.12/doc/admin/conf_files/krb5_conf.html.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "password": {
                            "description": "Kerberos password. The placeholder ${{PASSWORD}} is replaced by the login password.",
                            "sensitiveValue": true,
                            "type": "string"
                        },
                        "principal": {
                            "description": "User principal 'user@realm'. The placeholder ${{LOGIN_ID}} is replaced by the username 'user'. The placeholder ${{LOGIN_EMAIL}} is replaced by the full principal 'user@realm'.",
                            "pattern": "^(?:[^@]+@[^@]+)|(?:\\${LOGIN_ID})|(?:\\${LOGIN_EMAIL})$",
                            "type": "string"
                        },
                        "remember_password": {
                            "description": "Whether to remember the Kerberos password. If not set or set to false, the password is not remembered. Ignored if the password is not specified.",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "principal"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_chrome_os_management": [
                "google_cloud"
            ],
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "dict"
        },
        {
            "caption": "Enable security warnings for command-line flags",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset means security warnings appear when potentially dangerous command-line flags are used to launch Chrome.\n\n      Setting the policy to Disabled prevents security warnings from appearing when Chrome is launched with potentially dangerous command-line flags.\n\n      On Microsoft\u00ae Windows\u00ae, this functionality is only available on instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain, running on Windows 10 Pro, or enrolled in Chrome Browser Cloud Management. On macOS, this functionality is only available on instances that are managed via MDM, or joined to a domain via MCX.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 566,
            "items": [
                {
                    "caption": "Show security warnings when potentially dangerous command-line flags are used",
                    "value": true
                },
                {
                    "caption": "Hide security warnings when potentially dangerous command-line flags are used",
                    "value": false
                }
            ],
            "name": "CommandLineFlagSecurityWarningsEnabled",
            "owners": [
                "proberge@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:76-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Suppress launching of browser window",
            "desc": "Setting the policy to True prevents the browser window from launching at the start of the session.\n\n      Setting the policy to False or leaving it unset allows the window to launch.\n\n      Note: The browser window might not launch due to other policies or command-line flags.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 568,
            "name": "StartupBrowserWindowLaunchSuppressed",
            "owners": [
                "jityao@chromium.org",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:76-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow the device to request powerwash",
            "desc": "Setting the policy to Enabled or leaving it unset lets a device trigger powerwash.\n\n      Setting the policy to Disabled doesn't let a device trigger powerwash. An exception to still allow a powerwash can occur if TPMFirmwareUpdateSettings is set to a value that lets the TPM firmware update, but it hasn't updated yet.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 571,
            "name": "DevicePowerwashAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "emaxx@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:77-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "External print servers",
            "desc": "Provides configurations of available print servers.\n\n      This policy allows you to provide configuration of external print servers to Google Chrome OS devices as JSON file.\n\n      The size of the file must not exceed 1MB and must contain an array of records (JSON objects). Each record must contain fields \"id\", \"url\" and \"display_name\" with strings as values. Values of \"id\" fields must be unique.\n\n      The file is downloaded and cached. The cryptographic hash is used to verify the integrity of the download. The file will be re-downloaded whenever the URL or the hash changes.\n\n      When this policy is set to correct value, devices will try to query specified print servers for available printers using IPP protocol.\n\n      If this policy is unset or set to incorrect value, none of the provided server printers are visible to users.\n\n      Currently, the number of print servers is limited to 16. Only the first 16 print servers from the list will be queried.\n      ",
            "example_value": {
                "url": "https://example.com/printserverpolicy",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 572,
            "max_size": 1048576,
            "name": "ExternalPrintServers",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "luum@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the file.",
                        "type": "string"
                    },
                    "url": {
                        "description": "URL to a JSON file with a list of print servers.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "external"
        },
        {
            "caption": "External print servers",
            "desc": "Provides configurations of available print servers.\n\n      This policy allows you to provide configuration of external print servers to Google Chrome OS devices as JSON file.\n\n      The size of the file must not exceed 1MB and must contain an array of records (JSON objects). Each record must contain fields \"id\", \"url\" and \"display_name\" with strings as values. Values of \"id\" fields must be unique.\n\n      The file is downloaded and cached. The cryptographic hash is used to verify the integrity of the download. The file will be re-downloaded whenever the URL or the hash changes.\n\n      When this policy is set to correct value, devices will try to query specified print servers for available printers using IPP protocol.\n\n      If this policy is unset or set to incorrect value, none of the provided server printers are visible to users.\n\n      Currently, the number of print servers is limited to 16. Only the first 16 print servers from the list will be queried.\n\n      This policy is similar to ExternalPrintServers, except this policy is applied by device.\n      ",
            "device_only": true,
            "example_value": {
                "url": "https://example.com/printserverpolicy",
                "hash": "deadbeefdeadbeefdeadbeefdeadbeefdeafdeadbeefdeadbeef"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 730,
            "max_size": 1048576,
            "name": "DeviceExternalPrintServers",
            "owners": [
                "mattme@google.com",
                "file://chromeos/printing/OWNERS"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the file.",
                        "type": "string"
                    },
                    "url": {
                        "description": "URL to a JSON file with a list of print servers.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Specify VM CLI permission",
            "desc": "Instructs Google Chrome OS to enable or disable virtual machine management console tools.\n\n      If the policy is set to true or left unset, the user will be able to use VM management CLI.\n      Otherwise, all of VM management CLI is disabled and hidden.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 577,
            "name": "VmManagementCliAllowed",
            "owners": [
                "aoldemeier@chromium.org",
                "okalitova@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:77-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to manage installed CA certificates.",
            "default": 0,
            "desc": "Setting the policy to All (0) or leaving it unset lets users edit trust settings for all CA certificates, remove user-imported certificates, and import certificates using Certificate Manager. Setting the policy to UserOnly (1) lets users manage only user-imported certificates, but not change trust settings of built-in certificates. Setting it to None (2) lets users view (not manage) CA certificates.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 579,
            "items": [
                {
                    "caption": "Allow users to manage all certificates",
                    "name": "All",
                    "value": 0
                },
                {
                    "caption": "Allow users to manage user certificates",
                    "name": "UserOnly",
                    "value": 1
                },
                {
                    "caption": "Disallow users from managing certificates",
                    "name": "None",
                    "value": 2
                }
            ],
            "name": "CACertificateManagementAllowed",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Allows users to play media when the device is locked",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset displays media controls on the lock screen if users lock the device when media is playing.\n\n      Setting the policy to Disabled turns media controls on the lock screen off.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 581,
            "name": "LockScreenMediaPlaybackEnabled",
            "owners": [
                "file://services/media_session/OWNERS",
                "mlamouri@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configuration policy for the OnFileDownloaded Chrome Enterprise Connector",
            "desc": "List of Chrome Enterprise Connectors services settings to be applied to the OnFileDownloaded Enterprise Connector, which triggers when a file is downloaded in Chrome.\n\n      The url_list, tags, enable and disable fields are used to determine if the connector should send a file for analysis when it is downloaded from a specific page and what tags to include in the analysis request for that file. A tag corresponding to an 'enable' pattern will be included in the analysis request if the page URL matches a pattern associated to that tag as long as no 'disable' pattern with that same tag matches the page URL. The analysis occurs if at least 1 tag is to be included in the request.\n\n      The service_provider field identifies which analysis service provider the settings correspond to.\n\n      The block_until_verdict field being set to 1 means Chrome will wait to get a response from the analysis service before giving the user access to the downloaded file. Any other integer value means Chrome gives the user access to the file immediately.\n\n      The block_password_protected field controls whether Chrome blocks or allows files that are password protected.\n\n      The block_large_files fields controls whether Chrome blocks or allows files that are too large to be analyzed (50+ MB).\n\n      The require_justification_tags field is used to determine for which tags the connector should require the user to enter a justification to bypass a scan that results in a bypassable warning. If the field is not set, it's assumed that a justification is not required.\n\n      The custom_messages, message, learn_more_url, language and tag fields are used to configure a message to show the user when a warning is shown after a scan had a non-clean verdict. The message field contains the text to show the user and should have at most 200 characters. The learn_more_url field contains an admin-provided URL that will be clickable by the user to get more customer-provided information about why the action was blocked. The language field is optional and contains the language of the message. An empty language field or a value of 'default' indicates a message to be used when the user's language doesn't have a message. The tag field specifies for which type of scans the message is displayed. The custom_messages list can have zero or more entries, where each entry is required to have non-empty message and tag fields.\n\n      This policy can only be set from the Google Admin console.",
            "example_value": [
                {
                    "service_provider": "Google",
                    "enable": [
                        {
                            "url_list": [
                                "*"
                            ],
                            "tags": [
                                "malware"
                            ]
                        },
                        {
                            "url_list": [
                                "*.them.com",
                                "*.others.com"
                            ],
                            "tags": [
                                "dlp"
                            ]
                        }
                    ],
                    "disable": [
                        {
                            "url_list": [
                                "*.us.com"
                            ],
                            "tags": [
                                "malware"
                            ]
                        }
                    ],
                    "block_until_verdict": 1,
                    "block_password_protected": false,
                    "block_large_files": true,
                    "require_justification_tags": [
                        "malware",
                        "dlp"
                    ],
                    "custom_messages": [
                        {
                            "message": "Custom message for potential sensitive data leaks.",
                            "learn_more_url": "moreinfo.example.com",
                            "language": "default",
                            "tag": "dlp"
                        },
                        {
                            "message": "Custom message for potential malware file transfer.",
                            "learn_more_url": "moreinfo.example.com/en",
                            "language": "en-US",
                            "tag": "malware"
                        },
                        {
                            "message": "Message pour le transfert de logiciel malveillant.",
                            "learn_more_url": "moreinfo.example.com/fr",
                            "language": "fr-CA",
                            "tag": "malware"
                        }
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future": true,
            "id": 696,
            "name": "OnFileDownloadedEnterpriseConnector",
            "owners": [
                "drubery@chromium.org",
                "rogerta@chromium.org",
                "mad@chromium.org",
                "domfc@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "block_large_files": {
                            "type": "boolean"
                        },
                        "block_password_protected": {
                            "type": "boolean"
                        },
                        "block_until_verdict": {
                            "type": "integer"
                        },
                        "custom_messages": {
                            "items": {
                                "properties": {
                                    "language": {
                                        "type": "string"
                                    },
                                    "learn_more_url": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "tag": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "disable": {
                            "items": {
                                "properties": {
                                    "tags": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "enable": {
                            "items": {
                                "properties": {
                                    "tags": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "require_justification_tags": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "service_provider": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:84-",
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Configuration policy for the OnFileAttached Chrome Enterprise Connector",
            "desc": "List of Chrome Enterprise Connectors services settings to be applied to the OnFileAttached Enterprise Connector, which triggers when a file is attached to Chrome.\n\n      The url_list, tags, enable and disable fields are used to determine if the connector should send a file for analysis when it is attached to a specific page and what tags to include in the analysis request for that file. A tag corresponding to an 'enable' pattern will be included in the analysis request if the page URL matches a pattern associated to that tag as long as no 'disable' pattern with that same tag matches the page URL. The analysis occurs if at least 1 tag is to be included in the request.\n\n      The service_provider field identifies which analysis service provider the settings correspond to.\n\n      The block_until_verdict field being set to 1 means Chrome will wait to get a response from the analysis service before giving the page access to the file. Any other integer value means Chrome gives the page access to the file immediately.\n\n      The block_password_protected field controls whether Chrome blocks or allows files that are password protected.\n\n      The block_large_files fields controls whether Chrome blocks or allows files that are too large to be analyzed (50+ MB).\n\n      The require_justification_tags field is used to determine for which tags the connector should require the user to enter a justification to bypass a scan that results in a bypassable warning. If the field is not set, it's assumed that a justification is not required.\n\n      The custom_messages, message, learn_more_url, language and tag fields are used to configure a message to show the user when a warning is shown after a scan had a non-clean verdict. The message field contains the text to show the user and should have at most 200 characters. The learn_more_url field contains an admin-provided URL that will be clickable by the user to get more customer-provided information about why the action was blocked. The language field is optional and contains the language of the message. An empty language field or a value of 'default' indicates a message to be used when the user's language doesn't have a message. The tag field specifies for which type of scans the message is displayed. The custom_messages list can have zero or more entries, where each entry is required to have non-empty message and tag fields.\n\n      This policy can only be set from the Google Admin console.",
            "example_value": [
                {
                    "service_provider": "Google",
                    "enable": [
                        {
                            "url_list": [
                                "*"
                            ],
                            "tags": [
                                "malware"
                            ]
                        },
                        {
                            "url_list": [
                                "*.them.com",
                                "*.others.com"
                            ],
                            "tags": [
                                "dlp"
                            ]
                        }
                    ],
                    "disable": [
                        {
                            "url_list": [
                                "*.us.com"
                            ],
                            "tags": [
                                "malware"
                            ]
                        }
                    ],
                    "block_until_verdict": 0,
                    "block_password_protected": true,
                    "block_large_files": false,
                    "require_justification_tags": [
                        "malware",
                        "dlp"
                    ],
                    "custom_messages": [
                        {
                            "message": "Custom message for potential sensitive data leaks.",
                            "learn_more_url": "moreinfo.example.com",
                            "language": "default",
                            "tag": "dlp"
                        },
                        {
                            "message": "Custom message for potential malware file transfer.",
                            "learn_more_url": "moreinfo.example.com/en",
                            "language": "en-US",
                            "tag": "malware"
                        },
                        {
                            "message": "Message pour le transfert de logiciel malveillant.",
                            "learn_more_url": "moreinfo.example.com/fr",
                            "language": "fr-CA",
                            "tag": "malware"
                        }
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future": true,
            "id": 693,
            "name": "OnFileAttachedEnterpriseConnector",
            "owners": [
                "rogerta@chromium.org",
                "mad@chromium.org",
                "domfc@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "block_large_files": {
                            "type": "boolean"
                        },
                        "block_password_protected": {
                            "type": "boolean"
                        },
                        "block_until_verdict": {
                            "type": "integer"
                        },
                        "custom_messages": {
                            "items": {
                                "properties": {
                                    "language": {
                                        "type": "string"
                                    },
                                    "learn_more_url": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "tag": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "disable": {
                            "items": {
                                "properties": {
                                    "tags": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "enable": {
                            "items": {
                                "properties": {
                                    "tags": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "require_justification_tags": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "service_provider": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:84-",
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Configuration policy for the OnBulkDataEntry Chrome Enterprise Connector",
            "desc": "List of Chrome Enterprise Connectors services settings to be applied to the OnBulkDataEntry Enterprise Connector, which triggers when data is entered in Chrome from the clipboard or by drag and dropping web content.\n\n      The url_list, tags, enable and disable fields are used to determine if the connector should send data for analysis when it is entered in a specific page and what tags to include in the analysis request for that data. A tag corresponding to an 'enable' pattern will be included in the analysis request if the page URL matches a pattern associated to that tag as long as no 'disable' pattern with that same tag matches the page URL. The analysis occurs if at least 1 tag is to be included in the request.\n\n      The service_provider field identifies which analysis service provider the settings correspond to.\n\n      The block_until_verdict field being set to 1 means Chrome will wait to get a response from the analysis service before giving the page access to the data. Any other integer value means Chrome gives the page access to the data immediately.\n\n      The minimum_data_size field indicates the minimum size (in bytes) data entered in Chrome must equal or surpass to be scanned. The default value is 100 bytes if the field is unset.\n\n      The require_justification_tags field is used to determine for which tags the connector should require the user to enter a justification to bypass a scan that results in a bypassable warning. If the field is not set, it's assumed that a justification is not required.\n\n      The custom_messages, message, learn_more_url, language and tag fields are used to configure a message to show the user when a warning is shown after a scan had a non-clean verdict. The message field contains the text to show the user and should have at most 200 characters. The learn_more_url field contains an admin-provided URL that will be clickable by the user to get more customer-provided information about why the action was blocked. The language field is optional and contains the language of the message. An empty language field or a value of 'default' indicates a message to be used when the user's language doesn't have a message. The tag field specifies for which type of scans the message is displayed. The custom_messages list can have zero or more entries, where each entry is required to have non-empty message and tag fields.\n\n      This policy can only be set from the Google Admin console.",
            "example_value": [
                {
                    "service_provider": "Google",
                    "enable": [
                        {
                            "url_list": [
                                "*"
                            ],
                            "tags": [
                                "malware"
                            ]
                        },
                        {
                            "url_list": [
                                "*.them.com",
                                "*.others.com"
                            ],
                            "tags": [
                                "dlp"
                            ]
                        }
                    ],
                    "disable": [
                        {
                            "url_list": [
                                "*.us.com"
                            ],
                            "tags": [
                                "malware"
                            ]
                        }
                    ],
                    "block_until_verdict": 0,
                    "minimum_data_size": 100,
                    "require_justification_tags": [
                        "malware",
                        "dlp"
                    ],
                    "custom_messages": [
                        {
                            "message": "Custom message for potential sensitive data leaks.",
                            "learn_more_url": "moreinfo.example.com",
                            "language": "default",
                            "tag": "dlp"
                        },
                        {
                            "message": "Custom message for potential malware file transfer.",
                            "learn_more_url": "moreinfo.example.com/en",
                            "language": "en-US",
                            "tag": "malware"
                        },
                        {
                            "message": "Message pour le transfert de logiciel malveillant.",
                            "learn_more_url": "moreinfo.example.com/fr",
                            "language": "fr-CA",
                            "tag": "malware"
                        }
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future": true,
            "id": 697,
            "name": "OnBulkDataEntryEnterpriseConnector",
            "owners": [
                "rogerta@chromium.org",
                "mad@chromium.org",
                "domfc@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "block_until_verdict": {
                            "type": "integer"
                        },
                        "custom_messages": {
                            "items": {
                                "properties": {
                                    "language": {
                                        "type": "string"
                                    },
                                    "learn_more_url": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "tag": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "disable": {
                            "items": {
                                "properties": {
                                    "tags": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "enable": {
                            "items": {
                                "properties": {
                                    "tags": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "minimum_data_size": {
                            "minimum": 0,
                            "type": "integer"
                        },
                        "require_justification_tags": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "service_provider": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:84-",
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Configuration policy for the OnSecurityEvent Chrome Enterprise Connector",
            "desc": "List of Chrome Enterprise Connectors services settings to be applied to the OnSecurityEvent Enterprise Connector, which triggers when a security event occurs in Chrome. This includes negative verdicts from analysis Enterprise Connectors, password reuse, navigations to unsafe pages and other security sensitive user actions.\n\n      The service_provider field identifies which reporting service provider the settings correspond to and the enabled_event_names field identifies which events are enabled for this provider.\n\n      This policy can only be set from the Google Admin console.",
            "example_value": [
                {
                    "service_provider": "Google",
                    "enabled_event_names": [
                        "passwordChangedEvent",
                        "sensitiveDataEvent"
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future": true,
            "id": 699,
            "name": "OnSecurityEventEnterpriseConnector",
            "owners": [
                "rogerta@chromium.org",
                "mad@chromium.org",
                "domfc@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "enabled_event_names": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "service_provider": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:84-",
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Check Safe Browsing status of URLs in real time",
            "default": 0,
            "desc": "This policy controls checking URLs in real time to identify unsafe URLs.\n\n      If this policy is left not set or set to \u2018Disabled\u2019, the consumer Safe Browsing checks will be applied. Consumer Safe Browsing checks can still include real time lookups, depending on the value of the \u201cMake searches and browsing better\u201d setting and the value of the UrlKeyedAnonymizedDataCollectionEnabled policy.\n\n      If this policy is set to \u2018Enabled\u2019, URLs will be sent to be scanned in real time under enterprise ToS. It will result in Chrome sending URLs to Google Cloud or third parties of your choosing to check them in real time. The consumer version of Safe Browsing real time lookup will be switched off.\n\n      This policy can only be set from the Google Admin console.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "id": 728,
            "items": [
                {
                    "caption": "Real time URL check is disabled.",
                    "name": "Disabled",
                    "value": 0
                },
                {
                    "caption": "Real time check for main frame URLs is enabled.",
                    "name": "Enabled",
                    "value": 1
                }
            ],
            "name": "EnterpriseRealTimeUrlCheckMode",
            "owners": [
                "xinghuilu@chromium.org",
                "file://components/safe_browsing/OWNERS"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Enable Renderer Code Integrity",
            "desc": "Setting the policy to Enabled or leaving it unset turns Renderer Code Integrity on.\n\n      Setting the policy to Disabled has a detrimental effect on Google Chrome's security and stability as unknown and potentially hostile code can load inside Google Chrome's renderer processes. Only turn off the policy if there are compatibility issues with third-party software that must run inside Google Chrome's renderer processes.\n\n      Note: Read more about Process mitigation policies ( https://chromium.googlesource.com/chromium/src/+/HEAD/docs/design/sandbox.md#Process-mitigation-policies ).",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 598,
            "name": "RendererCodeIntegrityEnabled",
            "owners": [
                "wfh@chromium.org",
                "adetaylor@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:78-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Block Browser Legacy Extension Points",
            "default": true,
            "desc": "Setting the policy to Enabled or leaving it unset will enable ProcessExtensionPointDisablePolicy to block legacy extension points in the Browser process.\n\n      Setting the policy to Disabled has a detrimental effect on Google Chrome's security and stability as unknown and potentially hostile code can load inside Google Chrome's browser process. Only turn off the policy if there are compatibility issues with third-party software that must run inside Google Chrome's browser process.\n\n      Note: Read more about Process mitigation policies ( https://chromium.googlesource.com/chromium/src/+/HEAD/docs/design/sandbox.md#Process-mitigation-policies ).",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 893,
            "items": [
                {
                    "caption": "Block legacy extension points in the Browser process",
                    "value": true
                },
                {
                    "caption": "Do not block legacy extension points in the Browser process",
                    "value": false
                }
            ],
            "name": "BrowserLegacyExtensionPointsBlocked",
            "owners": [
                "wfh@chromium.org",
                "ssmole@microsoft.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:95-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "List of names that will bypass the HSTS policy check",
            "desc": "Setting the policy specifies a list of hostnames that bypass preloaded HSTS upgrades from http to https.\n\n      Only single-label hostnames are allowed in this policy, and this policy only applies to \"static\" HSTS-preloaded entries (for instance, \"app\", \"new\", \"search\", \"play\"). This policy does not prevent HSTS upgrades for servers that have \"dynamically\" requested HSTS upgrades using a Strict-Transport-Security response header.\n\n      Supplied hostnames must be canonicalized: Any IDNs must be converted to their A-label format, and all ASCII letters must be lowercase. This policy only applies to the specific single-label hostnames specified, not to subdomains of those names.",
            "example_value": [
                "meet"
            ],
            "features": {
                "per_profile": true,
                "dynamic_refresh": false
            },
            "id": 601,
            "name": "HSTSPolicyBypassList",
            "owners": [
                "asymmetric@chromium.org",
                "rsleevi@chromium.org"
            ],
            "schema": {
                "items": {
                    "pattern": "^[a-z0-9-]*$",
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:78-",
                "android:78-",
                "chrome_os:78-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "list"
        },
        {
            "caption": "Allows a page to perform synchronous XHR requests during page dismissal.",
            "default_for_enterprise_users": true,
            "desc": "This policy allows an admin to specify that a page may send synchronous XHR requests during page dismissal.\n\n      When the policy is set to enabled, pages are allowed to send synchronous XHR requests during page dismissal.\n\n      When the policy is set to disabled or not set, pages are not allowed to send synchronous XHR requests during page dismissal.\n\n      This policy will be removed in Chrome 93.\n\n      See https://www.chromestatus.com/feature/4664843055398912 .",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 604,
            "name": "AllowSyncXHRInPageDismissal",
            "owners": [
                "kdillon@chromium.org, panicker@chromium.org",
                "kdillon@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:78-",
                "chrome_os:78-",
                "android:78-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set limit on megabytes of memory a single Chrome instance can use.",
            "desc": "Configures the amount of memory that a single Google Chrome instance can use before tabs start being discarded (I.E. the memory used by the tab will be freed and the tab will have to be reloaded when switched to) to save memory.\n\n      If the policy is set, browser will begin to discard tabs to save memory once the limitation is exceeded. However, there is no guarantee that the browser is always running under the limit. Any value under 1024 will be rounded up to 1024.\n\n      If this policy is not set, the browser will only begin attempts to save memory once it has detected that the amount of physical memory on its machine is low.",
            "example_value": 2048,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 616,
            "label": "Set memory limit for Chrome instances",
            "name": "TotalMemoryLimitMb",
            "owners": [
                "catan-team@chromium.org"
            ],
            "schema": {
                "minimum": 1024,
                "type": "integer"
            },
            "supported_on": [
                "chrome.win:79-",
                "chrome.mac:79-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable a TLS 1.3 security feature for local trust anchors.",
            "deprecated": true,
            "desc": "This policy controls a security feature in TLS 1.3 which protects connections against downgrade attacks. It is backwards-compatible and will not affect connections to compliant TLS 1.2 servers or proxies. However, older versions of some TLS-intercepting proxies have an implementation flaw which causes them to be incompatible.\n\n      If this policy is set to True or not set, Google Chrome will enable these security protections for all connections.\n\n      If this policy is set to False, Google Chrome will disable these security protections for connections authenticated with locally-installed CA certificates. These protections are always enabled for connections authenticated with publicly-trusted CA certificates.\n\n      The default value for this policy was changed in Google Chrome 81 from false to true. Affected proxies are expected to fail connections with an error code of ERR_TLS13_DOWNGRADE_DETECTED. Administrators who need more time to upgrade affected proxies may use this policy to temporarily disable this security feature. This policy was removed in version 86.\n      ",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 626,
            "name": "TLS13HardeningForLocalAnchorsEnabled",
            "owners": [
                "file://net/ssl/OWNERS",
                "davidben@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:79-85",
                "chrome_os:79-85",
                "android:79-85"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow the audio sandbox to run",
            "desc": "This policy controls the audio process sandbox.\n      If this policy is enabled, the audio process will run sandboxed.\n      If this policy is disabled, the audio process will run unsandboxed and the WebRTC audio-processing module will run in the renderer process.\n      This leaves users open to security risks related to running the audio subsystem unsandboxed.\n      If this policy is not set, the default configuration for the audio sandbox will be used, which may differ per platform.\n      This policy is intended to give enterprises flexibility to disable the audio sandbox if they use security software setups that interfere with the sandbox.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 627,
            "name": "AudioSandboxEnabled",
            "owners": [
                "file://services/audio/OWNERS",
                "dalecurtis@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:79-",
                "chrome.linux:79-",
                "chrome.mac:79-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Enable CORS check mitigations in the new CORS implementation",
            "deprecated": true,
            "desc": "Enable CORS check mitigations in the new CORS implementation, allowing Extensions to keep compatible behavior, and allowing Google Chrome to send specified headers without CORS checks.\n\n      If this list is set to empty, Google Chrome tries to run Extensions in compatible manners, and does not introduce API changes for Google Chrome 79 as explained at https://developer.chrome.com/extensions/webRequest.\n\n      If this list is set to have HTTP request header names, CORS inspection will ignore the listed headers in addition to enable the mitigation for Extensions.\n\n      If this list is not set, both mitigations explained above are not applied.\n\n      For details on CORS, visit: https://www.chromestatus.com/feature/5768642492891136.\n\n      Note that this policy was announced to be removed in Google Chrome version 82, but removed in version 84.",
            "example_value": [
                "x-googapps-allowed-domains",
                "youtube-restrict"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 629,
            "name": "CorsMitigationList",
            "owners": [
                "toyoshim@chromium.org",
                "yhirano@chromium.org",
                "kinuko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:79-83",
                "chrome_os:79-83"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Use the legacy CORS implementation rather than new CORS",
            "deprecated": true,
            "desc": "Use the legacy CORS implementation rather than new CORS.\n\n      If this setting is set to True, the legacy implementation is used that should be compatible with previous versions.\n\n      If this setting is set to False, or is not set, the new implementation is used that might cause enterprise specific compatibility issues potentially.\n\n      This policy will be removed after a couple of milestones.\n\n      For details on CORS, visit: https://www.chromestatus.com/feature/5768642492891136.\n\n      Note that this policy was announced to be removed in Google Chrome version 82, but removed in version 84.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 630,
            "name": "CorsLegacyModeEnabled",
            "owners": [
                "toyoshim@chromium.org",
                "yhirano@chromium.org",
                "kinuko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:79-83",
                "chrome_os:79-83"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enabled external print servers",
            "deprecated": true,
            "desc": "Specifies the subset of print servers that will be queried for server printers.\n\n      If this policy is used, only the server printers with ids matching the values in this policy are available to the user.\n\n      The ids must correspond to the \"id\" field in the file specified in ExternalPrintServers.\n\n      If this policy is not set, filtering is omitted and all print servers are taken into account.\n\n      This policy is deprecated, please use ExternalPrintServersAllowlist instead.",
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 631,
            "name": "ExternalPrintServersWhitelist",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "luum@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enabled external print servers",
            "desc": "Specifies the subset of print servers that will be queried for server printers.\n\n      If this policy is used, only the server printers with ids matching the values in this policy are available to the user.\n\n      The ids must correspond to the \"id\" field in the file specified in ExternalPrintServers.\n\n      If this policy is not set, filtering is omitted and all print servers are taken into account.",
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 750,
            "name": "ExternalPrintServersAllowlist",
            "owners": [
                "file://chromeos/printing/OWNERS",
                "thestig@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enabled external print servers",
            "desc": "Specifies the subset of print servers that will be queried for server printers. This applies only to the DeviceExternalPrintServers policy.\n\n      If this policy is used, only the server printers with ids matching the values in this policy are available to the user through device policy.\n\n      The ids must correspond to the \"id\" field in the file specified in DeviceExternalPrintServers.\n\n      If this policy is not set, filtering is omitted and all print servers provided by DeviceExternalPrintServers are taken into account.",
            "device_only": true,
            "example_value": [
                "id1",
                "id2",
                "id3"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 731,
            "name": "DeviceExternalPrintServersAllowlist",
            "owners": [
                "mattme@google.com",
                "file://chromeos/printing/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Show an \"Always open\" checkbox in external protocol dialog.",
            "default": true,
            "desc": " This policy controls whether or not the \"Always open\" checkbox is shown on external protocol launch confirmation prompts.\n\n      If this policy is set to True or not set, when an external protocol confirmation is shown, the user can select \"Always allow\" to skip all future confirmation prompts for the protocol on this site.\n\n      If this policy is set to False, the \"Always allow\" checkbox is not displayed and the user will be prompted each time an external protocol is invoked.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 632,
            "items": [
                {
                    "caption": "Allow users to select \"Always allow\" when an external protocol dialog is shown to skip future confirmation prompts",
                    "value": true
                },
                {
                    "caption": "Always require users to confrim external protocol prompts",
                    "value": false
                }
            ],
            "name": "ExternalProtocolDialogShowAlwaysOpenCheckbox",
            "owners": [
                "ydago@chromium.org",
                "mkwst@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control use of insecure content exceptions",
            "desc": "Allows you to set whether users can add exceptions to allow mixed content for specific sites.\n\n          This policy can be overridden for specific URL patterns using the 'InsecureContentAllowedForUrls' and 'InsecureContentBlockedForUrls' policies.\n\n          If this policy is left not set, users will be allowed to add exceptions to allow blockable mixed content and disable autoupgrades for optionally blockable mixed content.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 633,
            "items": [
                {
                    "caption": "Do not allow any site to load mixed content",
                    "name": "BlockInsecureContent",
                    "value": 2
                },
                {
                    "caption": "Allow users to add exceptions to allow mixed content",
                    "name": "AllowExceptionsInsecureContent",
                    "value": 3
                }
            ],
            "name": "DefaultInsecureContentSetting",
            "owners": [
                "carlosil@chromium.org",
                "estark@chromium.org"
            ],
            "schema": {
                "enum": [
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Allow insecure content on these sites",
            "desc": "Allows you to set a list of url patterns that specify sites which are allowed to display blockable (i.e. active) mixed content (i.e. HTTP content on HTTPS sites) and for which optionally blockable mixed content upgrades will be disabled.\n\n          If this policy is left not set blockable mixed content will be blocked and optionally blockable mixed content will be upgraded, and users will be allowed to set exceptions to allow it for specific sites.\n\n          For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 634,
            "name": "InsecureContentAllowedForUrls",
            "owners": [
                "carlosil@chromium.org",
                "estark@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block insecure content on these sites",
            "desc": "Allows you to set a list of url patterns that specify sites which are not allowed to display blockable (i.e. active) mixed content (i.e. HTTP content on HTTPS sites), and for which optionally blockable (i.e. passive) mixed content will be upgraded.\n\n          If this policy is left not set blockable mixed content will be blocked and optionally blockable mixed content will be upgraded, but users will be allowed to set exceptions to allow it for specific sites.\n\n          For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 635,
            "name": "InsecureContentBlockedForUrls",
            "owners": [
                "carlosil@chromium.org",
                "estark@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "URLs that will be granted access to perform the device attestation during SAML authentication",
            "desc": "This policy configures which URLs will be granted access to use remote attestation of device identity during the SAML flow on the sign-in screen.\n\n      Specifically, if a URL matches one of the patterns provided through this policy, it will be allowed to receive a HTTP header containing a response to a remote attestation challenge, attesting device identity and device state.\n\n      If this policy is not set or is set to an empty list, no URL is allowed to use remote attestation on the sign-in screen.\n\n      URLs must have HTTPS scheme, e.g. \"https://example.com\".\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.",
            "device_only": true,
            "example_value": [
                "https://www.example.com/",
                "https://[*.]example.edu/"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 636,
            "name": "DeviceWebBasedAttestationAllowedUrls",
            "owners": [
                "miersh@google.com",
                "pmarko@chromium.org",
                "file://chrome/browser/ash/login/OWNERS"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Show numeric keyboard for password",
            "desc": "Setting the policy to true displays numeric keyboard by default for entering password on the login screen. Users still could switch to the normal keyboard.\n\n      If you set the policy, users can't change it. If not set or set to false, it has no effect.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 638,
            "name": "DeviceShowNumericKeyboardForPassword",
            "owners": [
                "raleksandrov@google.com",
                "file://chrome/browser/ash/login/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Per-App Time Limits",
            "desc": "Allows to set per-app usage restrictions.\n        Usage restrictions can be applied to the apps installed on Google Chrome OS for the given user.\n        Restrictions should be passed in |app_limits| list. Only one entry per-app is allowed. Apps not included in the list have no restrictions.\n        It is not possible to block apps that are essential for the operating system, the restrictions for such apps will be ignored.\n        App is uniquely identified by |app_id|. Since different types of apps can use different id format |app_type| needs to be specified next to |app_id|.\n        Per-App Time Limits only support |ARC| apps currently. Android package name is used as |app_id|.\n        Support for other types of applications will be added in the future, for now they can be specified in the policy, but the restrictions will take no effect.\n        There are two types of available restrictions: |BLOCK| and |TIME_LIMIT|.\n        |BLOCK| makes app unavailable for the user. If |daily_limit_mins| is specified with |BLOCK| restriction |daily_limit_mins| will be ignored.\n        |TIME_LIMITS| applies daily usage limit and makes app unavailable after the limit is reached on the given day. Usage limit is specified in |daily_limit_mins|. Usage limit is reset daily at the UTC time passed in |reset_at|.\n        This policy is only used for child users.\n        This policy is complementary to 'UsageTimeLimit'. Restrictions specified in 'UsageTimeLimit' like screen time and bedtime will be enforced regardless of 'PerAppTimeLimits'.",
            "example_value": {
                "app_limits": [
                    {
                        "app_info": {
                            "app_id": "com.example.myapp",
                            "app_type": "ARC"
                        },
                        "restriction": "TIME_LIMIT",
                        "daily_limit_mins": 30,
                        "last_updated_millis": "1570223060437"
                    },
                    {
                        "app_info": {
                            "app_id": "pjkljhegncpnkpknbcohdijeoejaedia",
                            "app_type": "EXTENSION"
                        },
                        "restriction": "TIME_LIMIT",
                        "daily_limit_mins": 10,
                        "last_updated_millis": "1570223000000"
                    },
                    {
                        "app_info": {
                            "app_id": "iniodglblcgmngkgdipeiclkdjjpnlbn",
                            "app_type": "BUILT-IN"
                        },
                        "restriction": "BLOCK",
                        "last_updated_millis": "1570223000000"
                    }
                ],
                "reset_at": {
                    "hour": 6,
                    "minute": 0
                },
                "activity_reporting_enabled": false
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 641,
            "name": "PerAppTimeLimits",
            "owners": [
                "agawronska@chromium.org",
                "cros-families-eng@google.com"
            ],
            "schema": {
                "properties": {
                    "activity_reporting_enabled": {
                        "description": "The value of app activity collection toggle. If set to true user app activity will be reported to the server with purpose of being displayed in child and parent Google Chrome app. If set to false Per-app time limits feature will still work, but no data will be reported to the server and therefore displayed in Google Chrome.",
                        "type": "boolean"
                    },
                    "app_limits": {
                        "items": {
                            "properties": {
                                "app_info": {
                                    "properties": {
                                        "app_id": {
                                            "type": "string"
                                        },
                                        "app_type": {
                                            "enum": [
                                                "ARC",
                                                "BUILT-IN",
                                                "EXTENSION",
                                                "WEB",
                                                "CROSTINI"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "daily_limit_mins": {
                                    "maximum": 1440,
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "last_updated_millis": {
                                    "description": "UTC timestamp for the last time this entry was updated. Sent as a string because the timestamp would not fit in an integer",
                                    "type": "string"
                                },
                                "restriction": {
                                    "enum": [
                                        "BLOCK",
                                        "TIME_LIMIT"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "reset_at": {
                        "description": "The time of the day in local time when usage quota is renewed.",
                        "properties": {
                            "hour": {
                                "maximum": 23,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "minute": {
                                "maximum": 59,
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os: 80-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Re-enable Web Components v0 API until M84.",
            "deprecated": true,
            "desc": " The Web Components v0 APIs (Shadow DOM v0, Custom Elements v0, and HTML Imports) were deprecated in 2018, and have been disabled by default starting in M80. This policy allows these features to be selectively re-enabled until M84.\n\n      If this policy is set to True, the Web Components v0 features will be enabled for all sites.\n\n      If this policy is set to False or not set, the Web Components v0 features will be disabled by default, starting in M80.\n\n      This policy will be removed after Chrome 84.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 644,
            "name": "WebComponentsV0Enabled",
            "owners": [
                "masonf@chromium.org",
                "chrishtr@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-84",
                "chrome_os:80-84",
                "android:80-84",
                "webview_android:80-84"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Use Legacy Form Controls until M84.",
            "deprecated": true,
            "desc": " Starting in M81, the standard form control elements (e.g. <select>, <button>, <input type=date>) were given a refreshed look and feel, with improved accessibility and better platform uniformity. This policy restores the old \"legacy\" form control elements until M84.\n\n      If this policy is set to True, the \"legacy\" form control elements will be used for all sites.\n\n      If this policy is set to False or not set, the form control elements will be enabled as they are launched in M81, M82, and M83.\n\n      This policy will be removed after Chrome 84.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 683,
            "name": "UseLegacyFormControls",
            "owners": [
                "masonf@chromium.org",
                "chrishtr@chromium.org",
                "hwi@chromium.org",
                "nsull@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:81-84",
                "chrome_os:81-84",
                "android:81-84",
                "webview_android:81-84"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the Click to Call Feature",
            "desc": "Enable the Click to Call feature which allows users to send phone numbers from Chrome Desktops to an Android device when the user is Signed-in. For more information, see help center article: https://support.google.com/chrome/answer/9430554?hl=en.\n\n      If this policy is set to enabled, the capability of sending phone numbers to Android devices will be enabled for the Chrome user.\n\n      If this policy is set to disabled, the capability of sending phone numbers to Android devices will be disabled for the Chrome user.\n\n      If you set this policy, users cannot change or override it.\n\n      If this policy is left unset, the Click to Call feature is enabled by default.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 645,
            "name": "ClickToCallEnabled",
            "owners": [
                "knollr@chromium.org",
                "mvanouwerkerk@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:79-",
                "chrome_os:79-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Limits the number of user data snapshots retained for use in case of emergency rollback.",
            "default": 3,
            "desc": "Following each major version update, Chrome will create a snapshot of certain portions of the user's browsing data for use in case of a later emergency version rollback. If an emergency rollback is performed to a version for which a user has a corresponding snapshot, the data in the snapshot is restored. This allows users to retain such settings as bookmarks and autofill data.\n\n      If this policy is not set, the default value of 3 is used\n\n      If the policy is set, old snapshots are deleted as needed to respect the limit. If the policy is set to 0, no snapshots will be taken",
            "example_value": 3,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 673,
            "name": "UserDataSnapshotRetentionLimit",
            "owners": [
                "ydago@chromium.org",
                "grt@chromium.org"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:83-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Disable printer types on the deny list",
            "desc": "The printers of types placed on the deny list will be disabled from being discovered or having their capabilities fetched.\n\n      Placing all printer types on the deny list effectively disables printing, as there would be no available destinations to send a document for printing.\n\n      Including cloud on the deny list has the same effect as setting the CloudPrintSubmitEnabled policy to false. In order to keep Google Cloud Print destinations discoverable, the CloudPrintSubmitEnabled policy must be set to true and cloud must not be on the deny list.\n\n      If the policy is not set, or is set to an empty list, all printer types will be available for discovery.\n\n      Extension printers are also known as print provider destinations, and include any destination that belongs to a Google Chrome extension.\n\n      Local printers are also known as native printing destinations, and include destinations available to the local machine and shared network printers.",
            "example_value": [
                "cloud",
                "privet"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 647,
            "items": [
                {
                    "caption": "Zeroconf-based (mDNS + DNS-SD) protocol destinations",
                    "name": "privet",
                    "value": "privet"
                },
                {
                    "caption": "Extension-based destinations",
                    "name": "extension",
                    "value": "extension"
                },
                {
                    "caption": "The 'Save as PDF' destination",
                    "name": "pdf",
                    "value": "pdf"
                },
                {
                    "caption": "Local printer destinations",
                    "name": "local",
                    "value": "local"
                },
                {
                    "caption": "Google Cloud Print and 'Save to Google Drive' destinations",
                    "name": "cloud",
                    "value": "cloud"
                }
            ],
            "name": "PrinterTypeDenyList",
            "owners": [
                "file://printing/OWNERS",
                "weili@chromium.org"
            ],
            "schema": {
                "items": {
                    "enum": [
                        "privet",
                        "extension",
                        "pdf",
                        "local",
                        "cloud"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:80-",
                "chrome.*:80-"
            ],
            "tags": [],
            "type": "string-enum-list"
        },
        {
            "caption": "Print PostScript Mode",
            "default": 0,
            "desc": "Controls how Google Chrome prints on Microsoft\u00ae Windows\u00ae.\n\n      When printing to a PostScript printer on Microsoft\u00ae Windows\u00ae different PostScript generation methods can affect printing performance.\n\n      When this policy is set to Default, Google Chrome will use a set of default options when generating PostScript. For text in particular, text will always be rendered using Type 3 fonts.\n\n      When this policy is set to Type42, Google Chrome will render text using Type 42 fonts if possible. This should increase printing speed for some PostScript printers.\n\n      When this policy is not set, Google Chrome will be in Default mode.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 895,
            "items": [
                {
                    "caption": "Default",
                    "name": "Default",
                    "value": 0
                },
                {
                    "caption": "Type42",
                    "name": "Type42",
                    "value": 1
                }
            ],
            "name": "PrintPostScriptMode",
            "owners": [
                "thestig@chromium.org",
                "file://printing/OWNERS"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.win:95-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Print Rasterization Mode",
            "default": 0,
            "desc": "Controls how Google Chrome prints on Microsoft\u00ae Windows\u00ae.\n\n      When printing to a non-PostScript printer on Microsoft\u00ae Windows\u00ae, sometimes print jobs need to be rasterized to print correctly.\n\n      When this policy is set to Full, Google Chrome will do full page rasterization if necessary.\n\n      When this policy is set to Fast, Google Chrome will avoid rasterization if possible, reducing the amount of rasterization can help reduce print job sizes and increase printing speed.\n\n      When this policy is not set, Google Chrome will be in Full mode.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 706,
            "items": [
                {
                    "caption": "Full",
                    "name": "Full",
                    "value": 0
                },
                {
                    "caption": "Fast",
                    "name": "Fast",
                    "value": 1
                }
            ],
            "name": "PrintRasterizationMode",
            "owners": [
                "thestig@chromium.org",
                "file://printing/OWNERS"
            ],
            "schema": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.win:84-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Print PDF as Image Available",
            "default": false,
            "desc": "Controls how Google Chrome makes the Print as image option available on Microsoft\u00ae Windows\u00ae and macOS when printing PDFs.\n\n      When printing a PDF on Microsoft\u00ae Windows\u00ae or macOS, sometimes print jobs need to be rasterized to an image for certain printers to get correct looking output.\n\n      When this policy is set to Enabled, Google Chrome will make the Print as image option available in the Print Preview when printing a PDF.\n\n      When this policy is set to Disabled or not set Google Chrome the Print as image option will not be available to users in Print Preview and PDFs will be printed as usual without being rasterized to an image before being sent to the destination.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 889,
            "items": [
                {
                    "caption": "Print as image option available to user to allow PDF rasterization prior to sending print job to destination.",
                    "value": true
                },
                {
                    "caption": "Print as image option not available for user selection.",
                    "value": false
                }
            ],
            "name": "PrintPdfAsImageAvailability",
            "owners": [
                "awscreen@chromium.org",
                "file://printing/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:94-",
                "chrome.mac:94-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Print Rasterize PDF DPI",
            "default": 0,
            "desc": "Controls print image resolution when Google Chrome prints PDFs with rasterization.\n\n      When printing a PDF using the Print to image option, it can be beneficial to specify a print resolution other than a device's printer setting or the PDF default.  A high resolution will significantly increase the processing and printing time while a low resolution can lead to poor imaging quality.\n\n      This policy allows a particular resolution to be specified for use when rasterizing PDFs for printing.\n\n      If this policy is set to zero or not set at all then the system default resolution will be used during rasterization of page images.",
            "example_value": 300,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 890,
            "name": "PrintRasterizePdfDpi",
            "owners": [
                "awscreen@chromium.org",
                "file://printing/OWNERS"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:94-",
                "chrome_os:94-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Print PDF as Image Default",
            "default": false,
            "desc": "Controls if Google Chrome makes the Print as image option default to set when printing PDFs.\n\n      When this policy is set to Enabled, Google Chrome will default to setting the Print as image option in the Print Preview when printing a PDF.\n\n      When this policy is set to Disabled or not set Google Chrome then the user selection for Print as image option will be initially unset.  The user will be allowed to select it for each individual PDFs print job, if the option is available.\n\n      For Microsoft\u00ae Windows\u00ae or macOS this policy only has an effect if PrintPdfAsImageAvailability is also enabled.",
            "example_value": true,
            "features": {
                "can_be_mandatory": false,
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 896,
            "items": [
                {
                    "caption": "Print as image option defaults to set for print previews of PDF documents when it is available.",
                    "value": true
                },
                {
                    "caption": "Print as image option defaults to unset for print previews of PDF documents when it is available.",
                    "value": false
                }
            ],
            "name": "PrintPdfAsImageDefault",
            "owners": [
                "awscreen@chromium.org",
                "file://printing/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:95-",
                "chrome_os:95-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow print job history to be deleted",
            "default": true,
            "desc": "Controls whether print job history can be deleted.\n\n      Locally stored print jobs can be deleted through the print management app or through deleting the users's browser history.\n\n      When this policy is enabled or unset, the user will be able to delete their print job history through the print mangement app or through deleting their browser history.\n\n      When this policy is disabled, the user will not be able to delete their print job history through the print management app or through deleting their browser history.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 720,
            "name": "DeletePrintJobHistoryAllowed",
            "owners": [
                "jimmyxgong@chromium.org",
                "file://printing/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Ambient Authentication for profile types.",
            "desc": "Configuring this policy will allow/disallow ambient authentication for Incognito and Guest profiles in Google Chrome.\n\n      Ambient Authentication is http authentication with default credentials if explicit credentials are not provided via NTLM/Kerberos/Negotiate challenge/response schemes.\n\n      Setting the RegularOnly (value 0), allows ambient authentication for Regular sessions only. Incognito and Guest sessions wouldn't be allowed to ambiently authenticate.\n\n      Setting the IncognitoAndRegular (value 1), allows ambient authentication for Incognito and Regular sessions. Guest sessions wouldn't be allowed to ambiently authenticate.\n\n      Setting the GuestAndRegular (value 2), allows ambient authentication for Guest and Regular sessions. Incognito sessions wouldn't be allowed to ambiently authenticate.\n\n      Setting the  All (value 3), allows ambient authentication for all sessions.\n\n      Note that, ambient authentication is always allowed on regular profiles.\n\n      In Google Chrome version 81 and later, if the policy is left not set, ambient authentication will be enabled in regular sessions only.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 650,
            "items": [
                {
                    "caption": "Enable ambient authentication in regular sessions only.",
                    "name": "RegularOnly",
                    "value": 0
                },
                {
                    "caption": "Enable ambient authentication in incognito and regular sessions.",
                    "name": "IncognitoAndRegular",
                    "value": 1
                },
                {
                    "caption": "Enable ambient authentication in guest and regular sessions.",
                    "name": "GuestAndRegular",
                    "value": 2
                },
                {
                    "caption": "Enable ambient authentication in regular, incognito and guest sessions.",
                    "name": "All",
                    "value": 3
                }
            ],
            "name": "AmbientAuthenticationInPrivateModesEnabled",
            "owners": [
                "rhalavati@chromium.org",
                "roagarwal@chromium.org",
                "chrome-privacy-core@google.com"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:80-",
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Allow websites to query for available payment methods.",
            "desc": "Allows you to set whether websites are allowed to check if the user has payment methods saved.\n\n      If this policy is set to disabled, websites that use PaymentRequest.canMakePayment or PaymentRequest.hasEnrolledInstrument API will be informed that no payment methods are available.\n\n      If the setting is enabled or not set then websites are allowed to check if the user has payment methods saved.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 651,
            "name": "PaymentMethodQueryEnabled",
            "owners": [
                "file://components/payments/OWNERS",
                "nburris@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-",
                "chrome_os:80-",
                "android:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable stricter treatment for mixed content",
            "deprecated": true,
            "desc": "This policy has been removed as of M85, please use InsecureContentAllowedForUrls to allow insecure content on a per-site basis instead.\n       This policy controls the treatment for mixed content (HTTP content in HTTPS sites) in the browser.\n       If the policy is set to true or unset, audio and video mixed content will be autoupgraded to HTTPS (i.e. the URL will be rewritten as HTTPS, without a fallback if the resource is not available over HTTPS) and a 'Not Secure' warning will be shown in the URL bar for image mixed content.\n       If the policy is set to false, autoupgrades will be disabled for audio and video, and no warning will be shown for images.\n       This policy does not affect other types of mixed content other than audio, video, and images.\n       This policy will no longer take effect starting in Google Chrome 84.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 652,
            "name": "StricterMixedContentTreatmentEnabled",
            "owners": [
                "carlosil@chromium.org",
                "estark@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:80-",
                "chrome_os:80-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Per-App Time Limits Whitelist",
            "deprecated": true,
            "desc": "This policy specifies which applications and URLs should be whitelisted for per-app usage restrictions.\n        The configured whitelist are applied to the apps installed on Google Chrome OS for the given user with per-app time limits.\n        The configured whitelist can only be applied to child user accounts and take effect when PerAppTimeLimits policy is set.\n        The configured whitelist are applied to applications and URLs so that they will not be blocked by per-app time limits.\n        Accessing whitelisted URLs will not count towards the chrome time limit.\n        Add url regular expressions to |url_list| to whitelist urls that match any of the regular expressions in the list.\n        Add an application with its |app_id| and |app_type| to |app_list| to whitelist the application.\n\n        This policy is deprecated, please use PerAppTimeLimitsAllowlist instead.\n        ",
            "example_value": {
                "url_list": [
                    "chrome://*",
                    "file://*",
                    "https://www.support.google.com",
                    "https://www.policies.google.com"
                ],
                "app_list": [
                    {
                        "app_id": "pjkljhegncpnkpknbcohdijeoejaedia",
                        "app_type": "EXTENSION"
                    },
                    {
                        "app_id": "iniodglblcgmngkgdipeiclkdjjpnlbn",
                        "app_type": "BUILT-IN"
                    }
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 658,
            "name": "PerAppTimeLimitsWhitelist",
            "owners": [
                "yilkal@chromium.org",
                "cros-families-eng@google.com"
            ],
            "schema": {
                "properties": {
                    "app_list": {
                        "items": {
                            "properties": {
                                "app_id": {
                                    "type": "string"
                                },
                                "app_type": {
                                    "enum": [
                                        "ARC",
                                        "BUILT-IN",
                                        "EXTENSION",
                                        "WEB",
                                        "CROSTINI"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "url_list": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os: 80-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Per-App Time Limits Allowlist",
            "desc": "This policy specifies which applications and URLs should be allowed for per-app usage restrictions.\n        The configured allowlist is applied to the apps installed on Google Chrome OS for the given user with per-app time limits.\n        The configured allowlist can only be applied to child user accounts and take effect when PerAppTimeLimits policy is set.\n        The configured allowlist is applied to applications and URLs so that they will not be blocked by per-app time limits.\n        Accessing allowed URLs will not count towards the chrome time limit.\n        Add url regular expressions to |url_list| to allow urls that match any of the regular expressions in the list.\n        Add an application with its |app_id| and |app_type| to |app_list| to allow the application.\n       ",
            "example_value": {
                "url_list": [
                    "chrome://*",
                    "file://*",
                    "https://www.support.google.com",
                    "https://www.policies.google.com"
                ],
                "app_list": [
                    {
                        "app_id": "pjkljhegncpnkpknbcohdijeoejaedia",
                        "app_type": "EXTENSION"
                    },
                    {
                        "app_id": "iniodglblcgmngkgdipeiclkdjjpnlbn",
                        "app_type": "BUILT-IN"
                    }
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 762,
            "name": "PerAppTimeLimitsAllowlist",
            "owners": [
                "yilkal@chromium.org",
                "cros-families-eng@google.com"
            ],
            "schema": {
                "properties": {
                    "app_list": {
                        "items": {
                            "properties": {
                                "app_id": {
                                    "type": "string"
                                },
                                "app_type": {
                                    "enum": [
                                        "ARC",
                                        "BUILT-IN",
                                        "EXTENSION",
                                        "WEB",
                                        "CROSTINI"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "url_list": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os: 86-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable chrome://devices",
            "default": true,
            "deprecated": true,
            "desc": "This policy controls access to controllable features in the local discovery UI (chrome://devices) which shows discoverable devices near the user as well as cloud devices registered to them. On all operating systems except for Google Chrome OS, the local discovery UI also allows users to add classic printers connected to their computers to Google Cloud Print.\n\n      Setting the policy to Enabled or not set allow local device discovery.\n\n      Setting the policy to Disabled prevents local device discovery.\n      ",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 662,
            "items": [
                {
                    "caption": "Allow local device discovery",
                    "value": true
                },
                {
                    "caption": "Prevent local device discovery",
                    "value": false
                }
            ],
            "name": "LocalDiscoveryEnabled",
            "owners": [
                "file://cloud_print/OWNERS",
                "weili@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:81-87",
                "chrome_os:81-87"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow or deny screen capture",
            "default": true,
            "desc": "If enabled or not configured (default), a Web page can use\n      screen-share APIs (e.g., getDisplayMedia() or the Desktop Capture extension API)\n      to prompt the user to select a tab, window or desktop to capture.\n\n      When this policy is disabled, any calls to screen-share APIs will fail\n      with an error; however this policy is not considered (and a site will be\n      allowed to use screen-share APIs) if the site matches an origin pattern in\n      any of the following policies:\n      ScreenCaptureAllowedByOrigins,\n      WindowCaptureAllowedByOrigins,\n      TabCaptureAllowedByOrigins,\n      SameOriginTabCaptureAllowedByOrigins.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 666,
            "name": "ScreenCaptureAllowed",
            "owners": [
                "guidou@chromium.org",
                "marinaciocea@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:81-",
                "chrome_os:81-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow Desktop, Window, and Tab capture by these origins",
            "desc": "Setting the policy lets you set a list of URL patterns that can use Desktop, Window, and Tab Capture.\n\n      Leaving the policy unset means that sites will not be considered for an override at this level of Capture.\n\n      This policy is not considered if a site matches a URL pattern in any of the following policies: WindowCaptureAllowedByOrigins, TabCaptureAllowedByOrigins, SameOriginTabCaptureAllowedByOrigins.\n\n      If a site matches a URL pattern in this policy, the ScreenCaptureAllowed will not be considered.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 881,
            "name": "ScreenCaptureAllowedByOrigins",
            "owners": [
                "alcooper@chromium.org",
                "mfoltz@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:94-",
                "chrome.*:95-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow Window and Tab capture by these origins",
            "desc": "Setting the policy lets you set a list of URL patterns that can use Window and Tab Capture.\n\n      Leaving the policy unset means that sites will not be considered for an override at this level of Capture.\n\n      This policy is not considered if a site matches a URL pattern in any of the following policies: TabCaptureAllowedByOrigins, SameOriginTabCaptureAllowedByOrigins.\n\n      If a site matches a URL pattern in this policy, the following policies will not be considered: ScreenCaptureAllowedByOrigins, ScreenCaptureAllowed.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 882,
            "name": "WindowCaptureAllowedByOrigins",
            "owners": [
                "alcooper@chromium.org",
                "mfoltz@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:94-",
                "chrome.*:95-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow Tab capture by these origins",
            "desc": "Setting the policy lets you set a list of URL patterns that can use Tab Capture.\n\n      Leaving the policy unset means that sites will not be considered for an override at this level of capture.\n\n      Note that windowed Chrome Apps will still be allowed to be captured.\n\n      This policy is not considered if a site matches a URL pattern in the SameOriginTabCaptureAllowedByOrigins policy.\n\n      If a site matches a URL pattern in this policy, the following policies will not be considered: WindowCaptureAllowedByOrigins, ScreenCaptureAllowedByOrigins, ScreenCaptureAllowed.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 883,
            "name": "TabCaptureAllowedByOrigins",
            "owners": [
                "alcooper@chromium.org",
                "mfoltz@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:94-",
                "chrome.*:95-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow Same Origin Tab capture by these origins",
            "desc": "Setting the policy lets you set a list of URL patterns that can capture tabs with their same Origin.\n\n      Leaving the policy unset means that sites will not be considered for an override at this level of capture.\n\n      Note that windowed Chrome Apps with the same origin as this site will still be allowed to be captured.\n\n      If a site matches a URL pattern in this policy, the following policies will not be considered: TabCaptureAllowedByOrigins, WindowCaptureAllowedByOrigins, ScreenCaptureAllowedByOrigins, ScreenCaptureAllowed.\n\n      For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns.  This policy only matches based on origin, so any path in the URL pattern is ignored.",
            "example_value": [
                "https://www.example.com",
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 884,
            "name": "SameOriginTabCaptureAllowedByOrigins",
            "owners": [
                "alcooper@chromium.org",
                "mfoltz@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:94-",
                "chrome.*:95-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable sending downloads to Google for deep scanning for users enrolled in the Advanced Protection program",
            "deprecated": true,
            "desc": "This policy is deprecated, and has been replaced with AdvancedProtectionAllowed.\n\n      This policy controls whether users enrolled in the Advanced Protection program are allowed to send their downloads to Google for malware scanning. If set to True or not set, enrolled users will be be prompted to send their files to Google for deep scanning. If the user selects 'Scan', their download will be sent to Google. If set to False, users will not be prompted and their downloads will not be sent to Google.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 667,
            "name": "AdvancedProtectionDeepScanningEnabled",
            "owners": [
                "file://chrome/browser/safe_browsing/OWNERS",
                "drubery@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:81-81"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configures System-proxy service for Google Chrome OS.",
            "desc": "Configures the availability of System-proxy service and the proxy credentials for system services.\n      If the policy is not set, System-proxy service will not be available.",
            "device_only": true,
            "example_value": {
                "system_proxy_enabled": true,
                "system_services_username": "test_user",
                "system_services_password": "0000",
                "policy_credentials_auth_schemes": [
                    "basic",
                    "ntlm"
                ]
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 672,
            "name": "SystemProxySettings",
            "owners": [
                "acostinas@google.com",
                "pmarko@chromium.org"
            ],
            "schema": {
                "properties": {
                    "policy_credentials_auth_schemes": {
                        "description": "The authentication schemes for which the policy credentials can be applied. Can be one of:\n            * basic\n            * digest\n            * ntlm\n            Leaving this option empty will allow all three schemes to be used.",
                        "items": {
                            "enum": [
                                "basic",
                                "digest",
                                "ntlm"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "system_proxy_enabled": {
                        "type": "boolean"
                    },
                    "system_services_password": {
                        "description": "The password for authenticating system services to the remote web proxy.",
                        "sensitiveValue": true,
                        "type": "string"
                    },
                    "system_services_username": {
                        "description": "The username for authenticating system services to the remote web proxy.",
                        "sensitiveValue": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Set the state of privacy screen on the login screen",
            "default": null,
            "desc": "Set the state of the privacy screen feature on the login screen.\n\nIf this policy is set to True, privacy screen will be enabled when the login screen is shown.\n\nIf this policy is set to False, privacy screen will be disabled when the login screen is shown.\n\nWhen this policy is set, the user cannot override the value when the login screen is shown.\n\nIf this policy is left unset, the privacy screen is disabled initially, but remains controllable by the user when the login screen is shown.",
            "device_only": true,
            "example_value": true,
            "features": {
                "can_be_mandatory": true,
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 676,
            "name": "DeviceLoginScreenPrivacyScreenEnabled",
            "owners": [
                "lamzin@google.com",
                "gildekel@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable privacy screen",
            "default": null,
            "desc": "Enable/disable the privacy screen feature.\n\nIf this policy is set to True, privacy screen will always be enabled.\n\nIf this policy is set to False, privacy screen will always be disabled.\n\nWhen this policy is set, the user cannot override the value.\n\nIf this policy is left unset, privacy screen is disabled initially but can be controlled by the user.",
            "example_value": true,
            "features": {
                "can_be_mandatory": true,
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 677,
            "name": "PrivacyScreenEnabled",
            "owners": [
                "lamzin@google.com",
                "gildekel@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allows native notifications",
            "default": true,
            "deprecated": true,
            "desc": "This policy is deprecated, please use the 'AllowSystemNotifications' policy instead.\n\nConfigures whether Google Chrome on Linux will use native notifications.\n\nIf set to True or not set, Google Chrome is allowed to use native notifications.\n\nIf set to False, Google Chrome will not use native notifications. Google Chrome's Message Center will be used as a fallback.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 678,
            "name": "AllowNativeNotifications",
            "owners": [
                "file://chrome/browser/notifications/OWNERS",
                "knollr@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.linux:83-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allows system notifications",
            "default": true,
            "desc": "Configures whether Google Chrome on Linux will use system notifications.\n\nIf set to True or not set, Google Chrome is allowed to use system notifications.\n\nIf set to False, Google Chrome will not use system notifications. Google Chrome's Message Center will be used as a fallback.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 828,
            "items": [
                {
                    "caption": "Allow system notifications to be used",
                    "value": true
                },
                {
                    "caption": "Do not allow system notifications to be used",
                    "value": false
                }
            ],
            "name": "AllowSystemNotifications",
            "owners": [
                "file://chrome/browser/notifications/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.linux:90-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Required Client Certificates",
            "desc": "Specifies client certificates that should be enrolled using the device management protocol.",
            "device_only": false,
            "example_value": [
                {
                    "name": "Certificate Profile 1",
                    "cert_profile_id": "cert_profile_id_1",
                    "key_algorithm": "rsa",
                    "renewal_period_seconds": 2592000,
                    "policy_version": "some_hash",
                    "enable_remote_attestation_check": true
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "can_be_recommended": false,
                "can_be_mandatory": true
            },
            "id": 680,
            "name": "RequiredClientCertificateForUser",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "cert_profile_id": {
                            "description": "The identifier for this client certificate.",
                            "type": "string"
                        },
                        "enable_remote_attestation_check": {
                            "description": "Enable an additional security check based on remote attestation (optional, default: True).",
                            "type": "boolean"
                        },
                        "key_algorithm": {
                            "description": "The algorithm for key pair generation.",
                            "enum": [
                                "rsa"
                            ],
                            "type": "string"
                        },
                        "name": {
                            "description": "The name of the certificate profile.",
                            "type": "string"
                        },
                        "policy_version": {
                            "description": "The client should not interpret this data and should forward it verbatim. The DMServer uses policy_version to verify that the policy view of DMServer matches the view of Chrome OS device.",
                            "type": "string"
                        },
                        "renewal_period_seconds": {
                            "description": "Number of seconds before expiration of a certificate when renewal should be triggered",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "cert_profile_id",
                        "key_algorithm"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:83-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Required device-wide Client Certificates",
            "desc": "Specifies device-wide client certificates that should be enrolled using the device management protocol.",
            "device_only": true,
            "example_value": [
                {
                    "name": "Certificate Profile 1",
                    "cert_profile_id": "cert_profile_id_1",
                    "key_algorithm": "rsa",
                    "renewal_period_seconds": 2592000,
                    "policy_version": "some_hash",
                    "enable_remote_attestation_check": true
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "can_be_recommended": false,
                "can_be_mandatory": true
            },
            "id": 681,
            "name": "RequiredClientCertificateForDevice",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "atwilson@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "cert_profile_id": {
                            "description": "The identifier for this client certificate.",
                            "type": "string"
                        },
                        "enable_remote_attestation_check": {
                            "description": "Enable an additional security check based on remote attestation (optional, default: True).",
                            "type": "boolean"
                        },
                        "key_algorithm": {
                            "description": "The algorithm for key pair generation.",
                            "enum": [
                                "rsa"
                            ],
                            "type": "string"
                        },
                        "name": {
                            "description": "The name of the certificate profile.",
                            "type": "string"
                        },
                        "policy_version": {
                            "description": "The client should not interpret this data and should forward it verbatim. The DMServer uses policy_version to verify that the policy view of DMServer matches the view of Chrome OS device.",
                            "type": "string"
                        },
                        "renewal_period_seconds": {
                            "description": "Number of seconds before expiration of a certificate when renewal should be triggered",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "cert_profile_id",
                        "key_algorithm"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:84-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Enable additional protections for users enrolled in the Advanced Protection program",
            "default": true,
            "desc": "This policy controls whether users enrolled in the Advanced Protection program receive extra protections. Some of these features may involve the sharing of data with Google (for example, Advanced Protection users will be able to send their downloads to Google for malware scanning). If set to True or not set, enrolled users will receive extra protections. If set to False, Advanced Protection users will receive only the standard consumer features.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 685,
            "name": "AdvancedProtectionAllowed",
            "owners": [
                "file://chrome/browser/safe_browsing/OWNERS",
                "drubery@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:83-",
                "chrome_os:83-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable scrolling to text specified in URL fragments",
            "default": true,
            "desc": "This feature allows for hyperlinks and address bar URL navigations to target specific text within a web page, which will be scrolled to once the loading of the web page is complete.\n\nIf you enable or don't configure this policy, web page scrolling to specific text fragments via URL will be enabled.\n\nIf you disable this policy, web page scrolling to specific text fragments via URL will be disabled.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 687,
            "name": "ScrollToTextFragmentEnabled",
            "owners": [
                "dlibby@microsoft.com",
                "bokan@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:83-",
                "chrome_os:83-",
                "android:83-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show the display password button on the login and lock screen",
            "default_for_enterprise_users": false,
            "desc": "When enabled, this feature shows a button on the login and lock screen that allows the password to be displayed.\n          It is represented as an eye icon on the password textfield. The button is absent when the feature is disabled.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 701,
            "name": "LoginDisplayPasswordButtonEnabled",
            "owners": [
                "tellier@google.com",
                "rsorokin@chromium.org",
                "cros-oac@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Get Image Descriptions from Google.",
            "default": null,
            "desc": "The Get Image Descriptions from Google\n          accessibility feature enables visually-impaired screen reader users to\n          get descriptions of unlabeled images on the web. Users who choose to enable it\n          will have the option of using an anonymous Google service to provide\n          automatic descriptions for unlabeled images they encounter on the web.\n\n          If this feature is enabled, the content of images will be sent to Google\n          servers in order to generate a description. No cookies or other user\n          data is sent, and Google does not save or log any image content.\n\n          If this policy is set to Enabled, the\n          Get Image Descriptions from Google\n          feature will be enabled, though it will only affect users who are using a\n          screen reader or other similar assistive technology.\n\n          If this policy is set to Disabled, users will not have the option of enabling\n          the feature.\n\n          If this policy is not set, user can choose to use this feature or not.\n          ",
            "example_value": false,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 703,
            "items": [
                {
                    "caption": "Use an anonymous Google service to provide automatic descriptions for unlabeled images",
                    "value": true
                },
                {
                    "caption": "Do not use Google services to provide automatic image descriptions",
                    "value": false
                },
                {
                    "caption": "Let users choose to use an anonymous Google service to provide automatic descriptions for unlabeled images",
                    "value": null
                }
            ],
            "name": "AccessibilityImageLabelsEnabled",
            "owners": [
                "file://ui/accessibility/OWNERS",
                "dmazzoni@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:84-",
                "chrome.*:84-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Control the IntensiveWakeUpThrottling feature.",
            "default": null,
            "desc": "When enabled the IntensiveWakeUpThrottling feature causes Javascript timers in background tabs to be aggressively throttled and coalesced, running no more than once per minute after a page has been backgrounded for 5 minutes or more.\n\n          This is a web standards compliant feature, but it may break functionality\n          on some websites by causing certain actions to be delayed by up to a\n          minute. However, it results in significant CPU and battery savings when\n          enabled. See https://bit.ly/30b1XR4 for more details.\n\n          If this policy is set to enabled then the feature will be force enabled, and\n          users will not be able to override this.\n\n          If this policy is set to disabled then the feature will be force disabled, and\n          users will not be able to override this.\n\n          If this policy is left unset then the feature will be controlled by its\n          own internal logic, which can be manually configured by users.\n\n          Note that the policy is applied per renderer process, with the most recent\n          value of the policy setting in force when a renderer process starts. A full\n          restart is required to ensure that all loaded tabs receive a consistent\n          policy setting. It is harmless for processes to be running with different\n          values of this policy.\n          ",
            "example_value": true,
            "features": {
                "per_profile": false,
                "dynamic_refresh": true
            },
            "id": 713,
            "name": "IntensiveWakeUpThrottlingEnabled",
            "owners": [
                "file://components/performance_manager/OWNERS",
                "chrisha@google.com",
                "chrisha@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:85-",
                "chrome.*:85-",
                "android:85-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control the BackForwardCache feature.",
            "default": true,
            "desc": "When enabled the BackForwardCache feature allows the use of the back-forward cache. When navigating away from a page, its current state (document tree, script, etc.) may be preserved in the back-forward cache. If the browser navigates back to the page, the page may be restored from the back-forward cache and displayed in the state it was in before being cached.\n\n          This feature might cause issues for some websites that do not expect this caching. In particular, some websites depend on the \"unload\" event being dispatched when the browser navigates away from the page. The \"unload\" event will not be dispatched if the page enters the back-forward cache.\n\n          If this policy is set to enabled or not set,\n          the BackForwardCache feature will be enabled.\n\n          If this policy is set to disabled then the feature will be force disabled.\n          ",
            "example_value": true,
            "features": {
                "per_profile": false,
                "dynamic_refresh": true
            },
            "id": 758,
            "items": [
                {
                    "caption": "Allow the back-forward cache to be used",
                    "value": true
                },
                {
                    "caption": "Do not allow the back-forward cache to be used",
                    "value": false
                }
            ],
            "name": "BackForwardCacheEnabled",
            "owners": [
                "chrome-bfcache@google.com",
                "rakina@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable PIN auto-submit feature on the lock and login screen.",
            "default_for_enterprise_users": false,
            "desc": "The PIN auto-submit feature changes how PINs are entered in Chrome OS.\n          Instead of showing the same textfield that is used for password input, this\n          feature shows a special UI that clearly shows to the user how many\n          digits are necessary for their PIN. As a consequence, the user's PIN length\n          will be stored outside the user encrypted data. Only supports PINs that are\n          between 6 and 12 digits long.\n\n          If this policy is set to false, users will not have the option of enabling\n          the feature on the Settings page.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 718,
            "name": "PinUnlockAutosubmitEnabled",
            "owners": [
                "rrsilva@google.com",
                "cros-oac@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Emoji Suggestion",
            "default_for_enterprise_users": false,
            "desc": "This policy enables Google Chrome OS to suggest emojis when users type text with their virtual or physical keyboards.\n      If this policy is set to true, the feature will be enabled, and users will be able to change it.\n      This policy is defaulted to false, no emoji will be suggested and users cannot override it.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 721,
            "name": "EmojiSuggestionEnabled",
            "owners": [
                "myy@chromium.org",
                "essential-inputs-team@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control the User-Agent Client Hints feature.",
            "default": true,
            "deprecated": true,
            "desc": "Note that this policy was removed in M94.  This policy was intended for short-term adaptation purposes only.\n\n      When enabled the User-Agent Client Hints feature sends granular request headers providing information about the user browser and environment.\n      This is an additive feature, but the new headers may break some websites that restrict the characters that requests may contain.\n      If this policy is enabled or not set the User-Agent Client Hints feature is enabled. If the policy is disabled the feature is unavailable.",
            "example_value": true,
            "features": {
                "per_profile": false,
                "dynamic_refresh": true
            },
            "id": 725,
            "name": "UserAgentClientHintsEnabled",
            "owners": [
                "file://components/client_hints/OWNERS",
                "yoavweiss@google.com",
                "aarontag@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:84-93",
                "chrome.*:84-93",
                "android:84-93"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control the User-Agent Client Hints GREASE Update feature.",
            "default": true,
            "desc": "When enabled the User-Agent Client Hints GREASE Update feature aligns the User-Agent GREASE algorithm with the latest spec.\n      The updated spec may break some websites that restrict the characters that requests may contain. See the spec for more information: https://wicg.github.io/ua-client-hints/#grease\n      If this policy is enabled or not set the User-Agent Client Hints GREASE Update feature is enabled. If the policy is disabled the prior User-Agent GREASE algorithm is used.",
            "example_value": true,
            "features": {
                "per_profile": false,
                "dynamic_refresh": true
            },
            "future_on": [
                "chrome_os",
                "chrome.*",
                "android"
            ],
            "id": 924,
            "items": [
                {
                    "caption": "Allow the updated User-Agent GREASE algorithm to be run.",
                    "value": true
                },
                {
                    "caption": "Force the prior User-Agent GREASE algorithm to be used.",
                    "value": false
                }
            ],
            "name": "UserAgentClientHintsGREASEUpdateEnabled",
            "owners": [
                "miketaylr@google.com",
                "mreichhoff@chromium.org",
                "file://components/client_hints/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Suggested Content",
            "default_for_enterprise_users": false,
            "desc": "This feature enables suggestions for new content to explore. Includes apps, webpages, and more.\n      If this policy is set to True, then suggestions for new content to explore will be enabled.\n      If this policy is set to False, then suggestions for new content to explore will be disabled.\n      If this policy is left unset, then suggestions for new content to explore will be disabled for managed users and enabled for other users.\n      ",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 726,
            "name": "SuggestedContentEnabled",
            "owners": [
                "wrong@chromium.org",
                "chrome-knowledge-eng@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:85-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Show Full URLs",
            "default": null,
            "default_for_enterprise_users": false,
            "desc": "This feature enables display of the full URL in the address bar.\n      If this policy is set to True, then the full URL will be shown in the address bar, including schemes and subdomains.\n      If this policy is set to False, then the default URL display will apply.\n      If this policy is left unset, then the default URL display will apply and the user will be able to toggle between default and full URL display with a context menu option.\n      ",
            "example_value": false,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 739,
            "name": "ShowFullUrlsInAddressBar",
            "owners": [
                "livvielin@chromium.org",
                "enamelites@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:86-",
                "chrome.*:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable warnings for insecure forms",
            "default": true,
            "desc": "This policy controls the treatment for insecure forms (forms that submit over HTTP) embedded in secure (HTTPS) sites in the browser.\n       If the policy is enabled or unset, a full page warning will be shown when an insecure form is submitted. Additionally, a warning bubble will be shown next to the form fields when they are focused, and autofill will be disabled for those forms.\n       If the policy is disabled, warnings will not be shown for insecure forms, and autofill will work normally.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 748,
            "name": "InsecureFormsWarningsEnabled",
            "owners": [
                "carlosil@chromium.org",
                "estark@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-",
                "android:86-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Suppress lookalike domain warnings on domains",
            "desc": "This policy prevents the display of lookalike URL warnings on the sites listed. These warnings are typically shown on sites that Google Chrome believes might be trying to spoof another site the user is familiar with.\n\n       If the policy is enabled and set to one or more domains, no lookalike warnings pages will be shown when the user visits pages on that domain.\n\n       If the policy is not set, or set to an empty list, warnings may appear on any site the user visits.\n\n       A hostname can be allowed with a complete host match, or any domain match. For example, a URL like \"https://foo.example.com/bar\" may have warnings suppressed if this list includes either \"foo.example.com\" or \"example.com\".",
            "example_value": [
                "foo.example.com",
                "example.org"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 782,
            "name": "LookalikeWarningAllowlistDomains",
            "owners": [
                "file://chrome/browser/lookalikes/OWNERS",
                "jdeblasio@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:86-",
                "chrome_os:86-",
                "android:86-"
            ],
            "tags": [
                "system-security",
                "website-sharing"
            ],
            "type": "list"
        },
        {
            "caption": "Enable ToS during first-run for CCT",
            "deprecated": true,
            "desc": "This policy is deprecated, please use the ToSDialogBehavior policy instead.\n\n      By default the Terms of Service are shown when CCT is first-run. Setting this policy to Disabled will cause the Terms of Service dialog to not appear during the first-run-experience or subsequent runs. Setting this policy to Enabled or leaving it unset will cause the Terms of Service dialog to appear during the first-run-experience. The other caveats are:\n\n      - This policy only works on fully managed Android devices that can be configured by Unified Endpoint Management vendors.\n\n      - If this policy is Disabled the BrowserSignin policy will have no effect.\n\n      - If this policy is Disabled metrics\u200b will not be sent to the server.\n\n      - If this policy is Disabled the browser will have limited functionality.\n\n      - If this policy is Disabled admins must communicate this to end users of the device.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 760,
            "name": "CCTToSDialogEnabled",
            "owners": [
                "skym@chromium.org",
                "wenyufu@chromium.org",
                "twellington@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:86-86"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configuring the ToS behavior during first-run for CCT",
            "default": 1,
            "desc": "By default the Terms of Service are shown when CCT is first-run. Setting this policy to SkipTosDialog will cause the Terms of Service dialog to not appear during the first-run-experience or subsequent runs. Setting this policy to StandardTosDialog or leaving it unset will cause the Terms of Service dialog to appear during the first-run-experience. The other caveats are:\n\n      - This policy only works on fully managed Android devices that can be configured by Unified Endpoint Management vendors.\n\n      - If this policy is SkipTosDialog the BrowserSignin policy will have no effect.\n\n      - If this policy is SkipTosDialog metrics\u200b will not be sent to the server.\n\n      - If this policy is SkipTosDialog the browser will have limited functionality.\n\n      - If this policy is SkipTosDialog admins must communicate this to end users of the device.",
            "example_value": 2,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false,
                "platform_only": true
            },
            "id": 801,
            "items": [
                {
                    "caption": "Use default browser behavior, shows the ToS and waits for the user to accept.",
                    "name": "StandardTosDialog",
                    "value": 1
                },
                {
                    "caption": "Automatically skips ToS and loads the browser.",
                    "name": "SkipTosDialog",
                    "value": 2
                }
            ],
            "name": "TosDialogBehavior",
            "owners": [
                "skym@chromium.org",
                "wenyufu@chromium.org",
                "twellington@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "android:87-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Suppress Google Cloud Print deprecation messages",
            "default": false,
            "deprecated": true,
            "desc": "This policy controls whether Google Cloud Print deprecation warnings are shown to users in the print preview dialog or settings pages.\n      Setting this policy to True will hide the deprecation warnings.\n      Setting this policy to False or leaving it unset will show the deprecation warnings.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 781,
            "items": [
                {
                    "caption": "Hide Google Cloud Print deprecation warnings",
                    "value": true
                },
                {
                    "caption": "Show Google Cloud Print deprecation warnings",
                    "value": false
                }
            ],
            "name": "CloudPrintWarningsSuppressed",
            "owners": [
                "file://printing/OWNERS",
                "rbpotter@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:86-87",
                "chrome_os:86-87"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable deprecated privet printing",
            "default": false,
            "deprecated": true,
            "desc": "This policy controls whether any available privet printers are shown to users in the print preview dialog.\n      Setting this policy to Enabled will show available privet printers.\n      Setting this policy to Disabled or leaving it unset will result in privet printers not appearing in print preview, as this printing method is deprecated.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 815,
            "items": [
                {
                    "caption": "Enable deprecated privet printing",
                    "value": true
                },
                {
                    "caption": "Disable deprecated privet printing",
                    "value": false
                }
            ],
            "name": "EnableDeprecatedPrivetPrinting",
            "owners": [
                "file://printing/OWNERS",
                "rbpotter@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:89-93",
                "chrome_os:89-93"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Set minimal size limit for data leak prevention clipboard restriction",
            "default": 0,
            "desc": "This policy sets the minimal data size (in bytes) of the data in the clipboard that will be checked against clipboard restriction rules defined in DataLeakPreventionRulesList policy.\n      If not set, it defaults to 0 that means that all pastes from the clipboard will be checked according to the configured rules.",
            "example_value": 50,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 877,
            "name": "DataLeakPreventionClipboardCheckSizeLimit",
            "owners": [
                "file://chrome/browser/ash/policy/dlp/OWNERS",
                "poromov@chromium.org"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome_os:93-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable data leak prevention reporting",
            "default": false,
            "desc": "This policy is a general switch for all rules defined in the DataLeakPreventionRulesList policy.\n      Setting this policy to True will switch on real-time reporting of data leak prevention events.\n      Setting this policy to False or leaving it unset will switch off the reporting.\n      Rules defined with ALLOW level restrictions in DataLeakPreventionRulesList will not report events in both cases.",
            "example_value": true,
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 856,
            "items": [
                {
                    "caption": "Enable reporting of data leak prevention events",
                    "value": true
                },
                {
                    "caption": "Disable reporting of data leak prevention events",
                    "value": false
                }
            ],
            "name": "DataLeakPreventionReportingEnabled",
            "owners": [
                "file://chrome/browser/ash/policy/dlp/OWNERS",
                "jkopanski@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Sets a list of data leak prevention rules.",
            "desc": "Configures a list of rules to prevent data leak on Google Chrome OS.\n      Data leak can happen by copying and pasting data, transferring files, printing, screensharing, or taking screenshots ...etc.\n\n      Each rule consists of the following:\n      - A list of sources defined as URLs. Any data in the sources will be considered confidential data, to which the restrictions will be applied.\n      - A list of destinations defined as URLs or components, to which the confidential data is either allowed or disallowed to be shared.\n      - A list of restrictions to be applied on the data of the sources.\n\n      Rules can be added to:\n      - Control the clipboard data shared between the sources and the destinations.\n      - Control taking screenshots of any of the sources.\n      - Control printing of any of the sources.\n      - Control the privacy screen when any of the sources is visible.\n      - Control screen sharing of any of the sources.\n\n      The restriction level can be set to BLOCK, ALLOW, REPORT.\n      - If the restriction level is set to BLOCK, the action won't be allowed. If DataLeakPreventionReportingEnabled is set to True, the blocked action will be reported to the admin.\n      - If the resriction level is set to ALLOW, the action will be allowed.\n      - If the resriction level is set to REPORT and DataLeakPreventionReportingEnabled is set to True, the action will be reported to the admin.\n\n      Notes:\n      - PRIVACY_SCREEN restriction doesn't block the ability to turn on privacy screen, but enforces it when the restriction class is set to BLOCK.\n      - Destinations cannot be empty in case one of the restrictions is CLIPBOARD, but they don't make any difference for the remaining restrictions.\n      - Format the URL patterns according to this format ( https://www.chromium.org/administrators/url-blocklist-filter-format ).\n\n      If the policy is left not set, no restrictions will be applied.",
            "example_value": [
                {
                    "name": "Support agent work flows",
                    "description": "Allow copy and paste for work purposes but block screenshots, screen share and printing",
                    "sources": {
                        "urls": [
                            "salesforce.com",
                            "gmail.com",
                            "docs.google.com",
                            "drive.google.com",
                            "company.com"
                        ]
                    },
                    "destinations": {
                        "urls": [
                            "salesforce.com",
                            "gmail.com",
                            "docs.google.com",
                            "drive.google.com",
                            "company.com"
                        ]
                    },
                    "restrictions": [
                        {
                            "class": "CLIPBOARD",
                            "level": "ALLOW"
                        },
                        {
                            "class": "SCREENSHOT",
                            "level": "BLOCK"
                        },
                        {
                            "class": "PRINTING",
                            "level": "BLOCK"
                        },
                        {
                            "class": "PRIVACY_SCREEN",
                            "level": "BLOCK"
                        },
                        {
                            "class": "SCREEN_SHARE",
                            "level": "REPORT"
                        }
                    ]
                },
                {
                    "name": "Non agent work flows",
                    "description": "Block copy and paste from work flows to other sites and external drives",
                    "sources": {
                        "urls": [
                            "salesforce.com",
                            "gmail.com",
                            "docs.google.com",
                            "company.com"
                        ]
                    },
                    "destinations": {
                        "urls": [
                            "*"
                        ],
                        "components": [
                            "ARC",
                            "CROSTINI",
                            "PLUGIN_VM"
                        ]
                    },
                    "restrictions": [
                        {
                            "class": "CLIPBOARD",
                            "level": "BLOCK"
                        }
                    ]
                }
            ],
            "features": {
                "can_be_recommended": false,
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 786,
            "name": "DataLeakPreventionRulesList",
            "owners": [
                "file://chrome/browser/ash/policy/dlp/OWNERS",
                "ayaelattar@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "destinations": {
                            "properties": {
                                "components": {
                                    "items": {
                                        "enum": [
                                            "ARC",
                                            "CROSTINI",
                                            "PLUGIN_VM"
                                        ],
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "urls": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "name": {
                            "type": "string"
                        },
                        "restrictions": {
                            "items": {
                                "properties": {
                                    "class": {
                                        "enum": [
                                            "CLIPBOARD",
                                            "SCREENSHOT",
                                            "PRINTING",
                                            "PRIVACY_SCREEN",
                                            "SCREEN_SHARE"
                                        ],
                                        "type": "string"
                                    },
                                    "level": {
                                        "enum": [
                                            "BLOCK",
                                            "ALLOW",
                                            "REPORT"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "sources": {
                            "properties": {
                                "urls": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow legacy TLS/DTLS downgrade in WebRTC",
            "default": false,
            "desc": "If enabled, WebRTC peer connections can downgrade to obsolete\n      versions of the TLS/DTLS (DTLS 1.0, TLS 1.0 and TLS 1.1) protocols.\n      When this policy is disabled or not set, these TLS/DTLS versions are\n      disabled.\n\n      This policy is temporary and will be removed in a future version\n      of Google Chrome.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 787,
            "items": [
                {
                    "caption": "Allow WebRTC to use obsolete versions of the TLD/DTLS protocol",
                    "value": true
                },
                {
                    "caption": "Prevent WebRTC from using obsolete versions of TLS/DTLS",
                    "value": false
                }
            ],
            "name": "WebRtcAllowLegacyTLSProtocols",
            "owners": [
                "hta@chromium.org",
                "guidou@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:87-",
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable Media Recommendations",
            "default": true,
            "desc": "By default the browser will show media recommendations that are personalized to the user. Setting this policy to Disabled will result in these recommendations being hidden from the user. Setting this policy to Enabled or leaving it unset will result in the media recommendations being shown to the user.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 788,
            "items": [
                {
                    "caption": "Show media recommendations to the user",
                    "value": true
                },
                {
                    "caption": "Hide media recommendations from the user",
                    "value": false
                }
            ],
            "name": "MediaRecommendationsEnabled",
            "owners": [
                "beccahughes@chromium.org",
                "steimel@chromium.org",
                "mlamouri@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:87-",
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow addition of Family Link accounts to the device",
            "default": false,
            "desc": "Controls whether Google Chrome OS allows new Family Link user accounts to be added on the device.\n      This policy is only useful in combination with DeviceUserAllowlist. It allows Family Link accounts additionally to the accounts defined in the allowlist.\n      This policy does not affect the behavior of other sign-in policies. Particularly it will not have any effect when:\n      - Adding new users to the device is disabled with DeviceAllowNewUsers policy.\n      - Adding all users is allowed with DeviceUserAllowlist policy.\n\n      If this policy is set to false (or not configured), no additional rules will be applied to Family Link accounts.\n      If this policy is set to true, new Family Link user accounts will be allowed additionally to those defined in DeviceUserAllowlist.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true
            },
            "id": 789,
            "name": "DeviceFamilyLinkAccountsAllowed",
            "owners": [
                "agawronska@chromium.org",
                "cros-families-eng@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:87-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "The valid version of Edu Coexistence Terms of Service",
            "desc": "This policy indicates current valid version of Edu Coexistence Terms of Service.\n      It is compared with the version last accepted by the parent and used to prompt parent permission renewal when needed.\n\n      When this policy is set Terms of Service version can be validated.\n      When this policy is unset it is not possible to verify validity of Edu Coexistence Terms of Service.\n\n      This policy is only used for Family Link users.",
            "example_value": "333024512",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 790,
            "name": "EduCoexistenceToSVersion",
            "owners": [
                "agawronska@chromium.org",
                "danan@chromium.org",
                "yilkal@chromium.org",
                "cros-families-eng@google.com"
            ],
            "schema": {
                "description": "The valid version of Terms of Service derived from Google3 cl that introduced new Terms version.",
                "type": "string"
            },
            "supported_on": [
                "chrome_os:89-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "Browsing Data Lifetime Settings",
            "desc": "Configures browsing data lifetime settings for Google Chrome. This policy allows admins to configure (per data-type) when data is deleted by the browser. This is useful for customers that work with sensitive customer data. The policy will only take effect if SyncDisabled is set to true.\n\n      The available data types are 'browsing_history', 'download_history', 'cookies_and_other_site_data', 'cached_images_and_files', 'password_signin', 'autofill', 'site_settings' and 'hosted_app_data'.\n\n      The browser will automatically remove data of selected types that is older than 'time_to_live_in_hours'. The minimum value that can be set is 1 hour.\n\n      The deletion of expired data will happen 15 seconds after the browser starts then every hour while the browser is running.",
            "example_value": [
                {
                    "time_to_live_in_hours": 24,
                    "data_types": [
                        "browsing_history"
                    ]
                },
                {
                    "time_to_live_in_hours": 12,
                    "data_types": [
                        "password_signin",
                        "autofill"
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 791,
            "name": "BrowsingDataLifetime",
            "owners": [
                "ydago@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "data_types": {
                            "items": {
                                "enum": [
                                    "browsing_history",
                                    "download_history",
                                    "cookies_and_other_site_data",
                                    "cached_images_and_files",
                                    "password_signin",
                                    "autofill",
                                    "site_settings",
                                    "hosted_app_data"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "time_to_live_in_hours": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:89-",
                "chrome_os:89-",
                "android:96-"
            ],
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow usage of Lacros",
            "default": false,
            "default_for_enterprise_users": false,
            "deprecated": true,
            "desc": "This setting is deprecated. Use LacrosAvailability instead.\n\n      If this policy is set to Disabled or unset, the user cannot use Lacros.\n\n      If this policy is set to Enabled, the user can use the Lacros browser.",
            "example_value": false,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 793,
            "items": [
                {
                    "caption": "Allow users to use the Lacros browser",
                    "value": true
                },
                {
                    "caption": "Prevent users from using the Lacros browser",
                    "value": false
                }
            ],
            "name": "LacrosAllowed",
            "owners": [
                "igorcov@chromium.org",
                "okalitova@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:88-95"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to create and use secondary profiles, and use guest mode in the Lacros browser",
            "default": true,
            "default_for_enterprise_users": false,
            "desc": "This setting allows users to create and use secondary profiles, and use guest mode in the Lacros browser.\n\n      Similar to both BrowserAddPersonEnabled and BrowserGuestModeEnabled, if this policy is set to false or unset, the user cannot create or use secondary profiles, and use guest mode. Previously created secondary profiles, if any, will be unavailable.\n\n      If this policy is set to true, the user can create and use secondary profiles, and use guest mode.\n\n      Note, that if this policy is set to true but BrowserAddPersonEnabled is set to false, the user cannot create secondary profiles. The same for BrowserGuestModeEnabled and guest mode.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 832,
            "items": [
                {
                    "caption": "Allow users to create and use secondary profiles, and use guest mode in the Lacros browser",
                    "value": true
                },
                {
                    "caption": "Prevent users from creating and using secondary profiles, and from using guest mode in the Lacros browser",
                    "value": false
                }
            ],
            "name": "LacrosSecondaryProfilesAllowed",
            "owners": [
                "asumaneev@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.linux:91-92",
                "chrome_os:91-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Make the Lacros browser available",
            "default": "user_choice",
            "default_for_enterprise_users": "lacros_disallowed",
            "desc": "This setting provides several availability options for the Lacros browser.\n\n      If the policy is set to user_choice, the user can enable Lacros and make it primary.\n\n      If the policy is set to lacros_disallowed, the user cannot use Lacros.\n\n      If the policy is set to side_by_side, Lacros is enabled but is not the primary browser.\n\n      If the policy is set to lacros_primary, Lacros is enabled and is the primary browser.\n\n      If the policy is unset, the default is lacros_disallowed for enterprise-managed users and user_choice for non-managed users.\n\n      In the future it will be possible to make Lacros the only available browser in Google Chrome OS with lacros_only value.",
            "example_value": "lacros_primary",
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 855,
            "items": [
                {
                    "caption": "Allow users to enable Lacros and make it the primary browser",
                    "name": "user_choice",
                    "value": "user_choice"
                },
                {
                    "caption": "Prevent users from using Lacros",
                    "name": "lacros_disallowed",
                    "value": "lacros_disallowed"
                },
                {
                    "caption": "Enable Lacros",
                    "name": "side_by_side",
                    "value": "side_by_side"
                },
                {
                    "caption": "Enable Lacros and make it the primary browser",
                    "name": "lacros_primary",
                    "value": "lacros_primary"
                },
                {
                    "caption": "Make Lacros the only available browser (not implemented yet)",
                    "name": "lacros_only",
                    "value": "lacros_only"
                }
            ],
            "name": "LacrosAvailability",
            "owners": [
                "asumaneev@google.com"
            ],
            "schema": {
                "enum": [
                    "user_choice",
                    "lacros_disallowed",
                    "side_by_side",
                    "lacros_primary",
                    "lacros_only"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Allow reusing the Google Chrome OS login credentials for network authentication",
            "default": false,
            "deprecated": true,
            "desc": " This policy is deprecated, please configure Kerberos policies to reuse the login password instead.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 808,
            "items": [
                {
                    "caption": "The Google Chrome OS login credentials will be used for network authentication to a managed proxy.",
                    "value": true
                },
                {
                    "caption": "The Google Chrome OS login credentials will not be used for network authentication.",
                    "value": false
                }
            ],
            "name": "IntegratedWebAuthenticationAllowed",
            "owners": [
                "acostinas@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:89-93"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Clear Browsing Data on Exit",
            "desc": "Configures a list of browsing data types that should be deleted when the user closes all browser windows. The available data types are browsing history (browsing_history), download history (download_history), cookies (cookies_and_other_site_data), cache(cached_images_and_files), autofill (autofill), passwords (password_signin), site settings (site_settings) and hosted apps data (hosted_app_data). This policy does not take precedence over AllowDeletingBrowserHistory.\n\n      This policy requires the SyncDisabled policy to be set to true, otherwise it will be ignored. If this policy is set at platform level, Sync should be disabled at platform level. If this policy is set at user level, Sync should be disabled for that user in order for this policy to take effect.\n\n      If Google Chrome does not exit cleanly (for example, if the browser or the OS crashes), the browsing data will be cleared the next time the profile is loaded.",
            "example_value": [
                "browsing_history",
                "download_history",
                "cookies_and_other_site_data",
                "cached_images_and_files",
                "password_signin",
                "autofill",
                "site_settings",
                "hosted_app_data"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 809,
            "items": [
                {
                    "caption": "Browsing history",
                    "name": "browsing_history",
                    "value": "browsing_history"
                },
                {
                    "caption": "Download history",
                    "name": "download_history",
                    "value": "download_history"
                },
                {
                    "caption": "Cookies and other site data",
                    "name": "cookies_and_other_site_data",
                    "value": "cookies_and_other_site_data"
                },
                {
                    "caption": "Cached images and files",
                    "name": "cached_images_and_files",
                    "value": "cached_images_and_files"
                },
                {
                    "caption": "Password signin",
                    "name": "password_signin",
                    "value": "password_signin"
                },
                {
                    "caption": "Autofill",
                    "name": "autofill",
                    "value": "autofill"
                },
                {
                    "caption": "Site settings",
                    "name": "site_settings",
                    "value": "site_settings"
                },
                {
                    "caption": "Hosted apps data",
                    "name": "hosted_app_data",
                    "value": "hosted_app_data"
                }
            ],
            "name": "ClearBrowsingDataOnExitList",
            "owners": [
                "ydago@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "enum": [
                        "browsing_history",
                        "download_history",
                        "cookies_and_other_site_data",
                        "cached_images_and_files",
                        "password_signin",
                        "autofill",
                        "site_settings",
                        "hosted_app_data"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:89-",
                "chrome_os:89-"
            ],
            "tags": [],
            "type": "string-enum-list"
        },
        {
            "caption": "Profile picker availability on startup",
            "default": 0,
            "desc": "Specifies whether the profile picker is enabled, disabled or forced at the browser startup.\n\n      By default the profile picker is not shown if the browser starts in guest or incognito mode, a profile directory and/or urls are specified by command line, an app is explicitly requested to open, the browser was launched by a native notification, there is only one profile available or the policy ForceBrowserSignin is set to true.\n\n      If 'Enabled' (0) is selected or the policy is left unset, the profile picker will be shown at startup by default, but users will be able to enable/disable it.\n\n      If 'Disabled' (1) is selected, the profile picker will never be shown, and users will not be able to change the setting.\n\n      If 'Forced' (2) is selected, the profile picker cannot be suppressed by the user. The profile picker will be shown even if there is only one profile available.",
            "example_value": 0,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 810,
            "items": [
                {
                    "caption": "Profile picker available at startup",
                    "name": "Enabled",
                    "value": 0
                },
                {
                    "caption": "Profile picker disabled at startup",
                    "name": "Disabled",
                    "value": 1
                },
                {
                    "caption": "Profile picker forced at startup",
                    "name": "Forced",
                    "value": 2
                }
            ],
            "name": "ProfilePickerOnStartupAvailability",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:89-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Enable signin interception",
            "default": null,
            "desc": "This settings enables or disables signin interception.\n\n      When this policy not set or is set to True, the signin interception dialog triggers when a Google account is added on the web, and the user may benefit from moving this account to another (new or existing) profile.\n\n      When this is set to False, the signin interception dialog does not trigger.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 811,
            "items": [
                {
                    "caption": "Enable signin interception",
                    "value": true
                },
                {
                    "caption": "Disable signin interception",
                    "value": false
                },
                {
                    "caption": "Enable signin interception",
                    "value": null
                }
            ],
            "name": "SigninInterceptionEnabled",
            "owners": [
                "ydago@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:89-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow creating WebXR's \"immersive-ar\" sessions",
            "default": true,
            "desc": "Configures whether the sites that the user navigates to are allowed to create immersive Augmented Reality sessions using WebXR Device API.\n\n      When this policy is unset or enabled, the WebXR Device API will accept \"immersive-ar\" during session creation, thus allowing the users to enter Augmented Reality experiences.\n\n      When this policy is disabled, the WebXR Device API will reject requests to create sessions with mode set to \"immersive-ar\". The existing \"immersive-ar\" sessions (if any) will not be terminated.\n\n      For more details about \"immersive-ar\" sessions, please see WebXR Augmented Reality Module specfication.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 820,
            "items": [
                {
                    "caption": "Allow creating WebXR's \"immersive-ar\" sessions",
                    "value": true
                },
                {
                    "caption": "Prevent creating WebXR's \"immersive-ar\" sessions",
                    "value": false
                }
            ],
            "name": "WebXRImmersiveArEnabled",
            "owners": [
                "bialpio@chromium.org",
                "xr-dev@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:90-"
            ],
            "tags": [
                "website-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Configuration policy for the File System Enterprise Connector handling of downloaded files",
            "desc": "List of settings to be applied to the File System Enterprise Connector, which triggers when a file is downloaded.\n\n      The url_list, mime_types, enable and disable fields are used to determine if the connector should send a file to the service provider when downloading from a web page. The web page URL must match a pattern associated to an 'enable' pattern and not associated to a 'disable' pattern.  The file's MIME type must also match a pattern associated to an 'enable' pattern and not associated to a 'disable' pattern.\n\n      The service_provider field identifies which analysis service provider the settings correspond to.\n\n      The enterprise_id field is a unique ID for a partner service provider that identifies the customer's account with the service provider. When the user is asked to sign in as part of setting up the File System Enterprise Connector, only user accounts associated with this customer's service provider account are permitted.\n\n      This policy can only be set from the Google Admin console.",
            "example_value": [
                {
                    "service_provider": "Google",
                    "enterprise_id": "1234567890",
                    "domain": "example.com",
                    "enable": [
                        {
                            "url_list": [
                                "*"
                            ],
                            "mime_types": [
                                "text/plain"
                            ]
                        },
                        {
                            "url_list": [
                                "*.them.com",
                                "*.others.com"
                            ],
                            "mime_types": [
                                "image/png"
                            ]
                        }
                    ],
                    "disable": [
                        {
                            "url_list": [
                                "*.us.com"
                            ],
                            "mime_types": [
                                "application/zip"
                            ]
                        }
                    ]
                }
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true,
                "cloud_only": true
            },
            "future_on": [
                "chrome.*",
                "chrome_os"
            ],
            "id": 822,
            "name": "SendDownloadToCloudEnterpriseConnector",
            "owners": [
                "rogerta@chromium.org",
                "mad@chromium.org",
                "alicego@google.com"
            ],
            "schema": {
                "items": {
                    "properties": {
                        "disable": {
                            "items": {
                                "properties": {
                                    "mime_types": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "domain": {
                            "type": "string"
                        },
                        "enable": {
                            "items": {
                                "properties": {
                                    "mime_types": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "url_list": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "enterprise_id": {
                            "type": "string"
                        },
                        "service_provider": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Allow collection of system-wide performance trace",
            "default": false,
            "default_for_managed_devices_doc_only": false,
            "desc": "This setting allows to collect a system-wide performance trace using the system tracing service.\n\n      If this policy is disabled, the user cannot collect a system-wide trace using the system tracing service.\n      If this policy is enabled, the user can collect a system-wide trace using system tracing service.\n      If unset, this policy is disabled for managed devices and enabled for consumer-owned devices.\n      Note that setting this policy to disabled only disables system-wide trace collection. Browser trace collection is unaffected by this policy.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 823,
            "items": [
                {
                    "caption": "Allow users to collect a system-wide performance trace.",
                    "value": true
                },
                {
                    "caption": "Prevent users from colecting a system-wide performance trace.",
                    "value": false
                }
            ],
            "name": "DeviceSystemWideTracingEnabled",
            "owners": [
                "chinglinyu@chromium.org",
                "eseckler@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:90-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Web App management settings",
            "desc": "Setting the policy controls web app management settings for Google Chrome.\n\n      This policy allows an admin to specify settings for web apps installed through WebAppInstallForceList. A default configuration can be set using the special ID \"*\", which applies to all web apps without a custom configuration in this policy.\n\n      The \"run_on_os_login\" field specifies if a web app can be run during OS login. If this field is set to \"blocked\", the web app will not run during OS login and the user will not be able to enable this later. If this field is set to \"run_windowed\", the web app will run during OS login and the user will not be able to disable this later. If this field is set to \"allowed\", the user will be able to configure the web app to run at OS login. The default configuration only allows the \"allowed\" and \"blocked\" values.\n      ",
            "example_value": {
                "https://foo.example": {
                    "run_on_os_login": "allowed"
                },
                "https://bar.example": {
                    "run_on_os_login": "blocked"
                },
                "https://foobar.example": {
                    "run_on_os_login": "run_windowed"
                },
                "*": {
                    "run_on_os_login": "blocked"
                }
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "future_on": [
                "chrome.*"
            ],
            "id": 824,
            "name": "WebAppSettings",
            "owners": [
                "mjackson@microsoft.com",
                "cmp@chromium.org",
                "file://chrome/browser/web_applications/OWNERS",
                "tapted@chromium.org"
            ],
            "schema": {
                "patternProperties": {
                    "^.+$": {
                        "properties": {
                            "run_on_os_login": {
                                "enum": [
                                    "allowed",
                                    "blocked",
                                    "run_windowed"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "properties": {
                    "*": {
                        "properties": {
                            "run_on_os_login": {
                                "enum": [
                                    "allowed",
                                    "blocked"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "tags": [],
            "type": "dict"
        },
        {
            "caption": "Fetch keepalive duration on Shutdown",
            "default": 0,
            "desc": "Controls the duration (in seconds) allowed for keepalive requests on browser shutdown.\n\n      When specified, browser shutdown can be blocked up to the specified seconds,\n      to process keepalive (https://fetch.spec.whatwg.org/#request-keepalive-flag) requests.\n\n      The default value (0) means this feature is disabled.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 827,
            "name": "FetchKeepaliveDurationSecondsOnShutdown",
            "owners": [
                "yhirano@chromium.org"
            ],
            "schema": {
                "maximum": 5,
                "minimum": 0,
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:90-"
            ],
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Suppress JavaScript Dialogs triggered from different origin subframes",
            "default": true,
            "desc": "As described in https://www.chromestatus.com/feature/5148698084376576 , JavaScript modal dialogs, triggered by window.alert, window.confirm, and window.prompt, will be blocked in Google Chrome if triggered from a subframe whose origin is different from the main frame origin.\n       This policy allows overriding that change.\n       If the policy is set to enabled or unset, JavaScript dialogs triggered from a different origin subframe will be blocked.\n       If the policy is set to disabled, JavaScript dialogs triggered from a different origin subframe will not be blocked.\n\n       This policy will be removed in Google Chrome version 95.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 829,
            "items": [
                {
                    "caption": "Block JavaScript dialogs triggered from a different origin subframe.",
                    "value": true
                },
                {
                    "caption": "Allow JavaScript dialogs triggered from a different origin subframe.",
                    "value": false
                }
            ],
            "name": "SuppressDifferentOriginSubframeDialogs",
            "owners": [
                "carlosil@chromium.org",
                "meacer@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:91-",
                "chrome_os:91-",
                "android:91-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow devices to use Borealis on Google Chrome OS",
            "default": true,
            "desc": "Controls the availability of Borealis for this device.\n\n      If the policy is set to false, Borealis will be unavailable for all users of the device. Otherwise (when the policy is unset, or true) Borealis will be available if and only if no other policy or setting disables it.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true
            },
            "id": 830,
            "items": [
                {
                    "caption": "Do not prevent Borealis from running on a device",
                    "value": true
                },
                {
                    "caption": "Prevent Borealis from running on a device",
                    "value": false
                }
            ],
            "name": "DeviceBorealisAllowed",
            "owners": [
                "hollingum@google.com",
                "dca@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:91-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to use Borealis on Google Chrome OS",
            "default": true,
            "desc": "Controls the availability of Borealis for this user.\n\n      If the policy is set to false, Borealis will be unavailable. Otherwise (when the policy is unset, or true) Borealis will be available if and only if no other policy or setting disables it.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 831,
            "items": [
                {
                    "caption": "Do not prevent Borealis from running for a user",
                    "value": true
                },
                {
                    "caption": "Prevent Borealis from running for a user",
                    "value": false
                }
            ],
            "name": "UserBorealisAllowed",
            "owners": [
                "hollingum@google.com\t",
                "dca@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:91-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow the audio process to run with priority above normal on Windows",
            "default": null,
            "desc": "This policy controls the priority of the audio process on Windows.\n      If this policy is enabled, the audio process will run with above normal priority.\n      If this policy is disabled, the audio process will run with normal priority.\n      If this policy is not set, the default configuration for the audio process will be used.\n      This policy is intended as a temporary measure to give enterprises the ability to\n      run audio with higher priority to address certain performance issues with audio capture.\n      This policy will be removed in the future.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 836,
            "items": [
                {
                    "caption": "Use high priority for audio process",
                    "value": true
                },
                {
                    "caption": "Use normal Priority for audio process",
                    "value": false
                },
                {
                    "caption": "Use default priority for audio process",
                    "value": null
                }
            ],
            "name": "AudioProcessHighPriorityEnabled",
            "owners": [
                "file://services/audio/OWNERS",
                "guidou@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:90-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure the content and order of preferred languages",
            "default": null,
            "desc": "This policy allows admins to configure the order of the preferred languages in Google Chrome's settings.\n\n      The order of the list will appear in the same order under the \"Order languages based on your preference\" section in chrome://settings/languages. Users won't be able to remove or reorder languages set by the policy, but will be able to add languages underneath those set by the policy. Users will also have full control over the browser's UI language and translation/spell check settings, unless enforced by other policies.\n\n      Leaving the policy unset lets users manipulate the entire list of preferred languages.",
            "example_value": [
                "en-US"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 839,
            "name": "ForcedLanguages",
            "owners": [
                "igorruvinov@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:91-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Configure the color of the browser's theme",
            "default": null,
            "desc": "This policy allows admins to configure the color of Google Chrome's theme. The input string should be a valid hex color string matching the format \"#RRGGBB\".\n\n      Setting the policy to a valid hex color causes a theme based on that color to be automatically generated and applied to the browser. Users won't be able to change the theme set by the policy.\n\n      Leaving the policy unset lets users change their browser's theme as preferred.",
            "example_value": "#FFFFFF",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 840,
            "name": "BrowserThemeColor",
            "owners": [
                "igorruvinov@google.com",
                "ydago@google.com",
                "pastarmovj@google.com"
            ],
            "schema": {
                "description": "Hex color which will be used to generate and apply a theme to the browser.",
                "type": "string"
            },
            "supported_on": [
                "chrome.*:91-"
            ],
            "tags": [],
            "type": "string"
        },
        {
            "caption": "The IP handling policy of WebRTC",
            "default": "default",
            "desc": "This policy allows restricting which IP addresses and interfaces WebRTC uses when attempting to find the best available connection. See RFC 8828 section 5.2 (https://tools.ietf.org/html/rfc8828.html#section-5.2). When unset, defaults to using all available interfaces.",
            "example_value": "default",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 843,
            "items": [
                {
                    "caption": "WebRTC will use all available interfaces when searching for the best path.",
                    "name": "default",
                    "value": "default"
                },
                {
                    "caption": "WebRTC will only use the interface connecting to the public Internet, but may connect using private IP addresses.",
                    "name": "default_public_and_private_interfaces",
                    "value": "default_public_and_private_interfaces"
                },
                {
                    "caption": "WebRTC will only use the interface connecting to the public Internet, and will not connect using private IP addresses.",
                    "name": "default_public_interface_only",
                    "value": "default_public_interface_only"
                },
                {
                    "caption": "WebRTC will use TCP on the public-facing interface, and will only use UDP if supported by a configured proxy.",
                    "name": "disable_non_proxied_udp",
                    "value": "disable_non_proxied_udp"
                }
            ],
            "name": "WebRtcIPHandling",
            "owners": [
                "file://third_party/blink/renderer/modules/peerconnection/OWNERS",
                "toprice@chromium.org"
            ],
            "schema": {
                "enum": [
                    "default",
                    "default_public_and_private_interfaces",
                    "default_public_interface_only",
                    "disable_non_proxied_udp"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome.*:91-",
                "chrome_os:91-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Enable PDF Annotations",
            "default": true,
            "desc": "Controls if the PDF viewer in Google Chrome can annotate PDFs.\n\n      When this policy is not set, or is set to true, then the PDF viewer will be able to annotate PDFs.\n\n      When this policy is set to false, then the PDF viewer will not be able to annotate PDFs.",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 844,
            "items": [
                {
                    "caption": "The PDF viewer can annotate PDFs",
                    "value": true
                },
                {
                    "caption": "The PDF viewer cannot annotate PDFs",
                    "value": false
                }
            ],
            "name": "PdfAnnotationsEnabled",
            "owners": [
                "thestig@chromium.org",
                "file://pdf/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:91-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Only allow connection to the Bluetooth services in the list",
            "desc": "This policy allows admins to configure Bluetooth services that Google Chrome OS is allowed to connect to.\n\nWhen this policy is set, Google Chrome OS only allows users to connect to the specified Bluetooth services with an exception when the list is empty which means any service is allowed to use. UUIDs reserved by the Bluetooth SIG can be represented as '0xABCD' or 'ABCD'. Custom UUIDs can be represented as 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'. UUIDs are case insensitive. Leaving this policy unset lets users connect to any Bluetooth service.",
            "device_only": true,
            "example_value": [
                "0x111E",
                "0x110B",
                "0x1203",
                "0x1108",
                "0x110C",
                "0x110E",
                "0x110F",
                "0x1200"
            ],
            "features": {
                "dynamic_refresh": true
            },
            "id": 848,
            "name": "DeviceAllowedBluetoothServices",
            "owners": [
                "howardchung@google.com",
                "alainm@chromium.org",
                "mcchou@chromium.org"
            ],
            "schema": {
                "items": {
                    "pattern": "^((0x)?[0-9A-Fa-f]{4})|((0x)?[0-9A-Fa-f]{8})|([0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12})$",
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:91-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Explicitly allowed network ports",
            "desc": "There is a list of restricted ports built into Google Chrome. Connections to these ports will fail. This setting permits bypassing that list. The value is a comma-separated list of zero or more ports that outgoing connections will be permitted on.\n\n      Ports are restricted to prevent Google Chrome being used as a vector to exploit various network vulnerabilities. Setting this policy may expose your network to attacks. This policy is intended as a temporary workaround for errors with code \"ERR_UNSAFE_PORT\" while migrating a service running on a blocked port to a standard port (ie. port 80 or 443).\n\n      Malicious websites can easily detect that this policy is set, and for what ports, and use that information to target attacks.\n\n      Each port here is labelled with a date that it can be unblocked until. After that date the port will be restricted regardless of this setting.\n\n      Leaving the value empty or unset means that all restricted ports will be blocked. If there is a mixture of valid and invalid values, the valid ones will be applied.\n\n      This policy overrides the \"--explicitly-allowed-ports\" command-line option.",
            "example_value": [
                "10080"
            ],
            "features": {
                "per_profile": false,
                "dynamic_refresh": true
            },
            "id": 849,
            "items": [
                {
                    "caption": "port 554 (can be unblocked until 2021/10/15)",
                    "name": "554",
                    "supported_on": [
                        "chrome.*:91-95",
                        "android:91-95",
                        "chrome_os:91-95",
                        "webview_android:91-95"
                    ],
                    "value": "554"
                },
                {
                    "caption": "port 10080 (can be unblocked until 2022/04/01)",
                    "name": "10080",
                    "supported_on": [
                        "chrome.*:91-99",
                        "android:91-99",
                        "chrome_os:91-99",
                        "webview_android:91-99"
                    ],
                    "value": "10080"
                },
                {
                    "caption": "port 6566 (can be unblocked until 2021/10/15)",
                    "name": "6566",
                    "supported_on": [
                        "chrome.*:91-94",
                        "android:91-94",
                        "chrome_os:91-94",
                        "webview_android:91-94"
                    ],
                    "value": "6566"
                },
                {
                    "caption": "port 989 (can be unblocked until 2022/02/01)",
                    "name": "989",
                    "supported_on": [
                        "chrome.*:93-100",
                        "android:93-100",
                        "chrome_os:93-100",
                        "webview_android:93-100"
                    ],
                    "value": "989"
                },
                {
                    "caption": "port 990 (can be unblocked until 2022/02/01)",
                    "name": "990",
                    "supported_on": [
                        "chrome.*:93-100",
                        "android:93-100",
                        "chrome_os:93-100",
                        "webview_android:93-100"
                    ],
                    "value": "990"
                }
            ],
            "name": "ExplicitlyAllowedNetworkPorts",
            "owners": [
                "ricea@chromium.org",
                "yhirano@chromium.org"
            ],
            "schema": {
                "items": {
                    "enum": [
                        "554",
                        "10080",
                        "6566",
                        "989",
                        "990"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:91-",
                "android:91-",
                "chrome_os:91-",
                "webview_android:91-"
            ],
            "tags": [
                "system-security",
                "website-sharing",
                "local-data-access"
            ],
            "type": "string-enum-list"
        },
        {
            "arc_support": "This policy has no effect on the logging done by Android.",
            "caption": "Allow debug network packet captures",
            "default": true,
            "desc": "Allow network packet captures on device for debugging.\n\n      If the policy is set to true or left unset, user will be able to perform network packet captures on device.\n      If set to false, network packet capture won't be available on the device.",
            "device_only": true,
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false,
                "can_be_recommended": false
            },
            "id": 850,
            "items": [
                {
                    "caption": "The user will be able to perform network packet captures",
                    "value": true
                },
                {
                    "caption": "The user will not be able to perform network packet captures",
                    "value": false
                }
            ],
            "name": "DeviceDebugPacketCaptureAllowed",
            "owners": [
                "iremuguz@google.com",
                "pmarko@chromium.org",
                "file://components/policy/resources/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Display the logout confirmation dialog",
            "default": true,
            "desc": "The policy only applies to managed guest sessions.\n      Setting the policy to True or leaving it unset will show a dialog asking the user to confirm or deny logout when the last window is closed.\n      Setting the policy to False will prevent the dialog from being displayed and therefore also disables auto-logout after closing the last window.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 851,
            "items": [
                {
                    "caption": "Show logout dialog on last window closed.",
                    "value": true
                },
                {
                    "caption": "Suppress showing logout dialog on last window closed.",
                    "value": false
                }
            ],
            "name": "SuggestLogoutAfterClosingLastWindow",
            "owners": [
                "mpetrisor@chromium.org",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:92-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable 3DES cipher suites in TLS",
            "default": null,
            "deprecated": true,
            "desc": "Warning: 3DES will be completely removed from Google Chrome in version 95 (around October 2021) and this policy will stop working then.\n\n      If the policy is set to true, then 3DES cipher suites in TLS will be enabled. If it is set to false, they will be disabled. If the policy is unset, 3DES cipher suites are disabled by default. This policy may be used to temporarily retain compatibility with an outdated server. This is a stopgap measure and the server should be reconfigured.\n      ",
            "example_value": false,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 858,
            "items": [
                {
                    "caption": "3DES cipher suites will be enabled in TLS",
                    "value": true
                },
                {
                    "caption": "3DES cipher suites will be disabled in TLS",
                    "value": false
                },
                {
                    "caption": "Use the default setting for 3DES cipher suites in TLS",
                    "value": null
                }
            ],
            "name": "TripleDESEnabled",
            "owners": [
                "file://net/ssl/OWNERS",
                "davidben@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:92-96",
                "chrome_os:92-96",
                "android:92-96"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Add restrictions on managed accounts",
            "default": "none",
            "desc": "\n      This policy requires SigninInterceptionEnabled to be set to True to take effect.\n\n      If this policy is set to 'primary_account' at the machine level, all managed accounts will be forced to be primary.\n      If this policy is set to 'primary_account' on an account, that account will always be a primary account, but may have secondary accounts in its profile.\n\n      If this policy is set to 'primary_account_strict' at the machine level, all managed accounts will be forced to be primary.\n      If this policy is set to 'primary_account_strict' on an account, that account will always be a primary account and will not have any secondary accounts in its profile.\n\n      If this policy is set to 'none' or not set, managed accounts have no restrictions. This may result in a managed account being a secondary account, which disables its ability to receive policies set on the account by the admin.\n    ",
            "example_value": "primary_account",
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 860,
            "items": [
                {
                    "caption": "A Managed account must be a primary account",
                    "name": "PrimaryAccount",
                    "value": "primary_account"
                },
                {
                    "caption": "A Managed account must be a primary account and have no secondary accounts",
                    "name": "PrimaryAccountStrict",
                    "value": "primary_account_strict"
                },
                {
                    "caption": "No restrictions on managed accounts",
                    "name": "None",
                    "value": "none"
                }
            ],
            "name": "ManagedAccountsSigninRestriction",
            "owners": [
                "ydago@chromium.org",
                "pastarmovj@chromium.org"
            ],
            "schema": {
                "enum": [
                    "primary_account",
                    "primary_account_strict",
                    "affiliated_device",
                    "none"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome.*:94-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Enable lock icon in the omnibox for secure connections",
            "default": false,
            "desc": "This policy controls the treatment for lock icon in the omnibox.\n       From Chrome M93, there is a new omnibox icon for secure connections.\n       If the policy is Enabled, Chrome will use the existing lock icon for secure connections.\n       If the policy is Disabled or not set, Chrome will use the default icon for secure connections.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 861,
            "items": [
                {
                    "caption": "Use lock icon for secure connections",
                    "value": true
                },
                {
                    "caption": "Use default icons for secure connections",
                    "value": false
                }
            ],
            "name": "LockIconInAddressBarEnabled",
            "owners": [
                "meacer@chromium.org",
                "trusty-transport@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:93-",
                "chrome_os:93-",
                "android:93-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Control use of JavaScript JIT",
            "default": 1,
            "desc": "Allows you to set whether Google Chrome will run the v8 JavaScript engine with JIT (Just In Time) compiler enabled or not.\n\n          Disabling the JavaScript JIT will mean that Google Chrome may render web content more slowly, and may also disable parts of JavaScript including WebAssembly. Disabling the JavaScript JIT may allow Google Chrome to render web content in a more secure configuration.\n\n          This policy can be overridden for specific URL patterns using the JavaScriptJitAllowedForSites and JavaScriptJitBlockedForSites policies.\n\n          If this policy is left not set, JavaScript JIT is enabled.",
            "example_value": 1,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 867,
            "items": [
                {
                    "caption": "Allow any site to run JavaScript JIT",
                    "name": "AllowJavaScriptJit",
                    "value": 1
                },
                {
                    "caption": "Do not allow any site to run JavaScript JIT",
                    "name": "BlockJavaScriptJit",
                    "value": 2
                }
            ],
            "name": "DefaultJavaScriptJitSetting",
            "owners": [
                "wfh@chromium.org",
                "nasko@chromium.org"
            ],
            "schema": {
                "enum": [
                    1,
                    2
                ],
                "type": "integer"
            },
            "supported_on": [
                "chrome.*:93-",
                "chrome_os:93-",
                "android:93-"
            ],
            "tags": [],
            "type": "int-enum"
        },
        {
            "caption": "Allow JavaScript to use JIT on these sites",
            "desc": "Allows you to set a list of site url patterns that specify sites which are allowed to run JavaScript with JIT (Just In Time) compiler enabled.\n\n          For detailed information on valid site url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.\n\n          JavaScript JIT policy exceptions will only be enforced at a site granularity (eTLD+1). A policy set for only subdomain.site.com will not correctly apply to site.com or subdomain.site.com since they both resolve to the same eTLD+1 (site.com) for which there is no policy. In this case, policy must be set on site.com to apply correctly for both site.com and subdomain.site.com.\n\n          This policy applies on a frame-by-frame basis and not based on top level origin url alone, so e.g. if site-one.com is listed in the JavaScriptJitAllowedForSites policy but site-one.com loads a frame containing site-two.com then site-one.com will have JavaScript JIT enabled, but site-two.com will use the policy from DefaultJavaScriptJitSetting, if set, or default to JavaScript JIT enabled.\n\n          If this policy is not set for a site then the policy from DefaultJavaScriptJitSetting applies to the site, if set, otherwise Javascript JIT is enabled for the site.",
            "example_value": [
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 868,
            "name": "JavaScriptJitAllowedForSites",
            "owners": [
                "wfh@chromium.org",
                "nasko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:93-",
                "chrome_os:93-",
                "android:93-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Block JavaScript from using JIT on these sites",
            "desc": "Allows you to set a list of site url patterns that specify sites which are not allowed to run JavaScript JIT (Just In Time) compiler enabled.\n\n          Disabling the JavaScript JIT will mean that Google Chrome may render web content more slowly, and may also disable parts of JavaScript including WebAssembly. Disabling the JavaScript JIT may allow Google Chrome to render web content in a more secure configuration.\n\n          For detailed information on valid url patterns, please see https://cloud.google.com/docs/chrome-enterprise/policies/url-patterns. * is not an accepted value for this policy.\n\n          JavaScript JIT policy exceptions will only be enforced at a site granularity (eTLD+1). A policy set for only subdomain.site.com will not correctly apply to site.com or subdomain.site.com since they both resolve to the same eTLD+1 (site.com) for which there is no policy. In this case, policy must be set on site.com to apply correctly for both site.com and subdomain.site.com.\n\n          This policy applies on a frame-by-frame basis and not based on top level origin url alone, so e.g. if site-one.com is listed in the JavaScriptJitBlockedForSites policy but site-one.com loads a frame containing site-two.com then site-one.com will have JavaScript JIT disabled, but site-two.com will use the policy from DefaultJavaScriptJitSetting, if set, or default to JavaScript JIT enabled.\n\n          If this policy is not set for a site then the policy from DefaultJavaScriptJitSetting applies to the site, if set, otherwise JavaScript JIT is enabled for the site.",
            "example_value": [
                "[*.]example.edu"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 869,
            "name": "JavaScriptJitBlockedForSites",
            "owners": [
                "wfh@chromium.org",
                "nasko@chromium.org"
            ],
            "schema": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome.*:93-",
                "chrome_os:93-",
                "android:93-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Allow HTTPS-Only Mode to be enabled",
            "default": "allowed",
            "desc": "This policy controls whether users can enable HTTPS-Only Mode in Settings. HTTPS-Only Mode upgrades all navigations to HTTPS.\n      If this setting is not set or set to allowed, users will be allowed to enable HTTPS-Only Mode.\n      If this setting is set to disallowed, users will not be allowed to enable HTTPS-Only Mode.\n      Force enabling HTTPS-Only Mode is not currently supported.",
            "example_value": "disallowed",
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 870,
            "items": [
                {
                    "caption": "Allow users to enable HTTPS-Only Mode",
                    "name": "allowed",
                    "value": "allowed"
                },
                {
                    "caption": "Do not allow users to enable HTTPS-Only Mode",
                    "name": "disallowed",
                    "value": "disallowed"
                },
                {
                    "caption": "Force enable HTTPS-Only Mode (not supported yet)",
                    "name": "force_enabled",
                    "value": "force_enabled"
                }
            ],
            "name": "HttpsOnlyMode",
            "owners": [
                "cthomp@chromium.org",
                "trusty-transport@chromium.org"
            ],
            "schema": {
                "enum": [
                    "allowed",
                    "disallowed",
                    "force_enabled"
                ],
                "type": "string"
            },
            "supported_on": [
                "chrome.*:94-",
                "chrome_os:94-",
                "android:94-"
            ],
            "tags": [],
            "type": "string-enum"
        },
        {
            "caption": "Enable desktop sharing in the omnibox and 3-dot menu",
            "default": true,
            "desc": "Setting the policy to True or leaving it unset lets users share or save the current webpage using actions provided by the desktop sharing hub. The sharing hub is accessed through either an omnibox icon or the 3-dot menu.\n\n       Setting the policy to False removes the sharing icon from the omnibox and the entry from the 3-dot menu.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 871,
            "items": [
                {
                    "caption": "Enable desktop sharing hub",
                    "value": true
                },
                {
                    "caption": "Disable desktop sharing hub",
                    "value": false
                }
            ],
            "name": "DesktopSharingHubEnabled",
            "owners": [
                "kristipark@chromium.org",
                "jeffreycohen@chromium.org",
                "file://components/send_tab_to_self/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:93-",
                "chrome.linux:93-",
                "chrome.mac:93-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Restricted managed guest sessions",
            "default": false,
            "desc": "The policy only applies to managed guest sessions. It has to be enabled for Imprivata's shared workstation mode to allow in-session user switches.\n      Setting the policy to True will forcefully override certain policies for features, which persist sensitive user data and are not handled by the clean-up mechanism used for in-session user switches with Imprivata shared workstation mode.\n      Setting the policy to False or leaving it unset will not override any policies.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 894,
            "items": [
                {
                    "caption": "Enable restricted managed guest session.",
                    "value": true
                },
                {
                    "caption": "Disable restricted managed guest session.",
                    "value": false
                }
            ],
            "name": "DeviceRestrictedManagedGuestSessionEnabled",
            "owners": [
                "mpetrisor@chromium.org",
                "hendrich@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Configure the list of extension IDs exempt from the restricted managed guest session clean-up procedure",
            "desc": "The policy only applies to managed guest sessions.\n      Setting the policy specifies a list of extension IDs that are exempt from the restricted managed guest session clean-up procedure (see DeviceRestrictedManagedGuestSessionEnabled).\n      Leaving the policy unset means no extensions are exempt from the reset procedure.",
            "example_value": [
                "abcdefghijklmnopabcdefghijklmnop",
                "bcdefghijklmnopabcdefghijklmnopa"
            ],
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 879,
            "name": "RestrictedManagedGuestSessionExtensionCleanupExemptList",
            "owners": [
                "mpetrisor@chromium.org",
                "hendrich@chromium.org"
            ],
            "schema": {
                "items": {
                    "pattern": "^[a-p]{32}$",
                    "type": "string"
                },
                "type": "array"
            },
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [],
            "type": "list"
        },
        {
            "caption": "Enable sharing from Android apps to Web apps",
            "default": true,
            "desc": "Setting the policy to True enables sharing text/files from Android apps to supported Web Apps, using the built-in Android sharing system.\n      When enabled, this will send metadata for installed Web Apps to Google to generate and install a shim Android app.\n      Setting the policy to False disables this functionality.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 887,
            "items": [
                {
                    "caption": "Enable Android to Web App sharing.",
                    "value": true
                },
                {
                    "caption": "Disable Android to Web App sharing.",
                    "value": false
                }
            ],
            "name": "ArcAppToWebAppSharingEnabled",
            "owners": [
                "tsergeant@chromium.org",
                "chromeos-apps-foundation-team@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:94-"
            ],
            "tags": [
                "google-sharing"
            ],
            "type": "main"
        },
        {
            "caption": "Allow the enhanced network text-to-speech voices in Select-to-speak",
            "default": true,
            "desc": "Allow the enhanced network text-to-speech voices in Select-to-speak accessibility feature. These voices send text to Google's servers to synthesize natural-sounding speech.\n\n          If this policy is set to false, the enhanced network text-to-speech voices feature in Select-to-speak will always be disabled.\n\n          If this policy is set to true or unset, the enhanced network text-to-speech voices feature in Select-to-speak can be enabled or disabled by the user.",
            "example_value": true,
            "features": {
                "can_be_recommended": true,
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 888,
            "items": [
                {
                    "caption": "Allow enhanced network text-to-speech voices when using Select-to-Speak",
                    "value": true
                },
                {
                    "caption": "Disallow enhanced network text-to-speech voices when using Select-to-Speak",
                    "value": false
                }
            ],
            "name": "EnhancedNetworkVoicesInSelectToSpeakAllowed",
            "owners": [
                "file://ui/accessibility/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:94-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Extend support for Chrome Apps on Windows, Mac, and Linux.",
            "default": false,
            "desc": "Chrome Apps are deprecated on Windows, Mac, and Linux.\n      If this policy is enabled, Google Chrome will continue to allow Chrome Apps to be run on these platforms until the final date when Chrome Apps support is removed on all platforms, June 2022.\n      If this policy is disabled or unset, Chrome Apps may not be allowed to run, depending on the status of the deprecation rollout.\n      In either case, Chrome Apps that are force installed by policy will continue to be allowed.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome.win",
                "chrome.mac",
                "chrome.linux"
            ],
            "id": 892,
            "items": [
                {
                    "caption": "Chrome Apps will be allowed to run on these platforms.",
                    "value": true
                },
                {
                    "caption": "Chrome Apps may not be allowed to run, depending on the status of the deprecation rollout.",
                    "value": false
                }
            ],
            "name": "ChromeAppsEnabled",
            "owners": [
                "mattm@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the full restore feature",
            "default": true,
            "desc": "Setting the policy to enable the full restore feature.\n      If this policy is true, apps and app windows will be restored or not restored after a crash or reboot based on the restore app setting.\n      If this policy is false, only browser windows are automatcially launched.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 897,
            "items": [
                {
                    "caption": "Enable the full restore feature.",
                    "value": true
                },
                {
                    "caption": "Disable the full restore feature.",
                    "value": false
                }
            ],
            "name": "FullRestoreEnabled",
            "owners": [
                "nancylingwang@chromium.org",
                "sammiequon@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Enable the ghost window feature",
            "default": true,
            "desc": "Setting the policy to enable the ghost window feature.\n      If this policy is true, ARC ghost windows will be created before ARC boots after a crash or reboot based on the restore app setting.\n      If this policy is false, there is no ghost window created before ARC boots. Arc apps are restored after ARC boots",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": true
            },
            "id": 898,
            "items": [
                {
                    "caption": "Enable the ghost window feature.",
                    "value": true
                },
                {
                    "caption": "Disable the ghost window feature.",
                    "value": false
                }
            ],
            "name": "GhostWindowEnabled",
            "owners": [
                "nancylingwang@chromium.org",
                "sstan@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Force WebSQL in third-party contexts to be re-enabled.",
            "default": false,
            "desc": "WebSQL in third-party contexts (e.g., cross-site iframes) is off by default as of M97 and will be fully removed in M101.\n          If this policy is set to false or unset, WebSQL in third party contexts will remain off.\n          If this policy is set to true, WebSQL in third-party contexts will be re-enabled.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 902,
            "items": [
                {
                    "caption": "Force WebSQL in third-party contexts to be re-enabled.",
                    "value": true
                },
                {
                    "caption": "Allow WebSQL in third-party contexts to be disabled by default.",
                    "value": false
                }
            ],
            "name": "WebSQLInThirdPartyContextEnabled",
            "owners": [
                "arichiv@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "android:96-100",
                "chrome.*:96-100",
                "chrome_os:96-100"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Prompt for the client certificate when multiple certificates match on the sign-in screen.",
            "default": false,
            "desc": "This policy controls whether the user is prompted to select a client certificate on the sign-in screen in the frame hosting the SAML flow when more than one certificate matches DeviceLoginScreenAutoSelectCertificateForUrls.\n      If this policy is set to Enabled, the user is asked to select the client certificate whenever the auto-selection policy matches multiple certificates.\n      If this policy is set to Disabled or not set, the user is never prompted to select a client certificate on the sign-in screen.\n      Note: This policy is in general not recommended, since it imposes potential privacy risks (in case device-wide TPM-backed certificates are used) and presents poor user experience.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 904,
            "items": [
                {
                    "caption": "Prompt the user to select the client certificate whenever the auto-selection policy matches multiple certificates.",
                    "value": true
                },
                {
                    "caption": "Do not prompt the user to select a client certificate on the sign-in screen.",
                    "value": false
                }
            ],
            "name": "DeviceLoginScreenPromptOnMultipleMatchingCertificates",
            "owners": [
                "emaxx@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:96-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Prompt for the client certificate when multiple certificates match.",
            "default": false,
            "desc": "This policy controls whether the user is prompted to select a client certificate when more than one certificate matches AutoSelectCertificateForUrls.\n      If this policy is set to Enabled, the user is prompted to select a client certificate whenever the auto-selection policy matches multiple certificates.\n      If this policy is set to Disabled or not set, the user may only be prompted when no certificate matches the auto-selection.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 905,
            "items": [
                {
                    "caption": "Prompt the user to select the client certificate whenever the auto-selection policy matches multiple certificates.",
                    "value": true
                },
                {
                    "caption": "Only prompt the user when no certificate matches the auto-selection.",
                    "value": false
                }
            ],
            "name": "PromptOnMultipleMatchingCertificates",
            "owners": [
                "emaxx@chromium.org",
                "pmarko@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:96-",
                "chrome.*:96-"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to select cast devices with an access code or QR code from within the Google Cast menu.",
            "default": false,
            "desc": "This policy controls whether a user will be presented with an option, within the Google Cast menu which allows them to cast to cast devices that do not appear in the Google Cast menu, using either the access code or QR code displayed on the cast devices's screen.\n      By default, a user must reenter the access code or rescan the QR code in order to initiate a subsequent casting session, but if the AccessCodeCastDeviceDuration policy has been set to a non-zero value (the default is zero), then the cast device will remain in the list of available cast devices until the specified period of time has expired.\n      When this policy is set to Enabled, users will be presented with the option to select cast devices by using an access code or by scanning a QR code.\n      When this policy is set to Disabled or not set, users will not be given the option to select cast devices by using an access code or by scanning a QR code.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome.*",
                "chrome_os"
            ],
            "id": 907,
            "items": [
                {
                    "caption": "User will be given the option in the Google Cast menu to select cast devices by using an access code or by scanning a QR code.",
                    "value": true
                },
                {
                    "caption": "User will not be given the option in the Google Cast menu to select cast devices by using an access code or by scanning a QR code.",
                    "value": false
                }
            ],
            "name": "AccessCodeCastEnabled",
            "owners": [
                "bmalcolm@chromium.org",
                "bzielinski@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Specifies how long (in seconds) a cast device selected with an access code or QR code stays in the Google Cast menu's list of cast devices.",
            "default": 0,
            "desc": "This policy specifies how long (in seconds) a cast device that was previously selected via an access code or QR code can be seen within the Google Cast menu of cast devices.\n      The lifetime of an entry starts at the time the access code was first entered or the QR code was first scanned.\n      During this period the cast device will appear in the Google Cast menu's list of cast devices.\n      After this period, in order to use the cast device again the access code must be reentered or the QR code must be rescanned.\n      By default, the period is zero seconds, so cast devices will not stay in the Google Cast menu, and so the access code must be reentered, or the QR code rescanned, in order to initiate a new casting session.\n      Note that this policy only affects how long a cast devices appears in the Google Cast menu, and has no effect on any ongoing cast session which will continue even if the period expires.\n      This policy has no effect unless the AccessCodeCastEnabled policy is Enabled.",
            "example_value": 60,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome.*",
                "chrome_os"
            ],
            "id": 908,
            "name": "AccessCodeCastDeviceDuration",
            "owners": [
                "bmalcolm@chromium.org",
                "gbj@google.com"
            ],
            "schema": {
                "minimum": 0,
                "type": "integer"
            },
            "tags": [],
            "type": "int"
        },
        {
            "caption": "Enable the network service sandbox",
            "desc": "This policy controls whether or not the network service process runs sandboxed.\n      If this policy is enabled, the network service process will run sandboxed.\n      If this policy is disabled, the network service process will run unsandboxed. This leaves users open to additional security risks related to running the network service unsandboxed.\n      If this policy is not set, the default configuration for the network sandbox will be used. This may vary depending on Google Chrome release, currently running field trials, and platform.\n      This policy is intended to give enterprises flexibility to disable the network sandbox if they use third party software that interferes with the network service sandbox.",
            "example_value": true,
            "features": {
                "dynamic_refresh": false,
                "per_profile": false
            },
            "id": 909,
            "items": [
                {
                    "caption": "Enable the network service sandbox",
                    "value": true
                },
                {
                    "caption": "Disable the network service sandbox",
                    "value": false
                }
            ],
            "name": "NetworkServiceSandboxEnabled",
            "owners": [
                "wfh@chromium.org",
                "file://services/network/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.win:96-"
            ],
            "tags": [
                "system-security"
            ],
            "type": "main"
        },
        {
            "caption": "Allow users to select a desk template layout to load",
            "default": false,
            "desc": "Setting the policy to Enabled allows users to use desktop layout templates.  Setting the policy to Disabled or unset means these templates will be unavailable.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 910,
            "items": [
                {
                    "caption": "Allow users to use desk templates",
                    "value": true
                },
                {
                    "caption": "Do not allow users to use desk templates",
                    "value": false
                }
            ],
            "name": "DeskTemplatesEnabled",
            "owners": [
                "brianbeck@chromium.org",
                "yzd@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [],
            "type": "main"
        },
        {
            "caption": "Allow users to select a preconfigured desktop layout to load",
            "desc": "If set, this policy contains information to download a desk template file.  The file contains a desk template to be provisioned for the current user.\n      If not set, no preconfigured desk template will be included in the list of desk templates.  If the DeskTemplatesEnabled\n      policy is not set to true, this policy has no effect.",
            "example_value": {
                "url": "https://example.com/a.json",
                "hash": "842841a4c75a55ad050d686f4ea5f77e83ae059877fe9b6946aa63d3d057ed32"
            },
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 911,
            "max_size": 1048576,
            "name": "PreconfiguredDeskTemplates",
            "owners": [
                "brianbeck@chromium.org",
                "yzd@chromium.org"
            ],
            "schema": {
                "properties": {
                    "hash": {
                        "description": "The SHA-256 hash of the desk template.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL from which the desk template can be downloaded.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "tags": [],
            "type": "external"
        },
        {
            "caption": "Enable Fast Pair (fast Bluetooth pairing)",
            "default": true,
            "desc": "Setting this policy will force Fast Pair to be enabled or disabled.\n      Fast Pair is a new Bluetooth pairing flow that links paired peripherals with a GAIA account.\n      This allows other Chrome OS (and Android) devices signed in with the same GAIA account to pair automatically.\n      If unset, Fast Pair will follow Chrome OS's default, which is enabled.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "future_on": [
                "chrome_os"
            ],
            "id": 912,
            "items": [
                {
                    "caption": "Force Fast Pair (fast Bluetooth pairing) to be enabled.",
                    "value": true
                },
                {
                    "caption": "Force Fast Pair (fast Bluetooth pairing) to be disabled.",
                    "value": false
                }
            ],
            "name": "FastPairEnabled",
            "owners": [
                "file://ash/quick_pair/OWNERS"
            ],
            "schema": {
                "type": "boolean"
            },
            "tags": [],
            "type": "main"
        },
        {
            "caption": "CORS non-wildcard request headers support",
            "default": true,
            "desc": "Configures support of CORS non-wildcard request headers.\n\n      Google Chrome version 97 introduces support for CORS non-wildcard request headers. When scripts make a cross-origin network request via fetch() and XMLHttpRequest with a script-added Authorization header, the header must be explicitly allowed by the Access-Control-Allow-Headers header in the CORS preflight response. \"Explicitly\" here means that the wild card symbol \"*\" doesn't cover the Authorization header. See https://www.chromest atus.com/feature/5768642492891136 for more detail.\n\n      If this policy is not set, or set to True, Google Chrome will support the CORS non-wildcard request headers and behave as described above.\n\n      When this policy is set to False, chrome will allow the wildcard symbol (\"*\") in the Access-Control-Allow-Headers header in the CORS preflight response to cover the Authorization header.\n\n      This Enterprise policy is temporary; it's intended to be removed after Google Chrome version 103.",
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": true
            },
            "id": 921,
            "items": [
                {
                    "caption": "Support CORS non-wildcard request headers.",
                    "value": true
                },
                {
                    "caption": "Do not support CORS non-wildcard request headers.",
                    "value": false
                }
            ],
            "name": "CORSNonWildcardRequestHeadersSupport",
            "owners": [
                "yhirano@chromium.org"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome.*:97-103",
                "chrome_os:97-103",
                "android:97-103"
            ],
            "tags": [],
            "type": "main"
        },
        {
            "caption": " Allows enabling/disabling international shortcut keys remaps",
            "default": true,
            "default_for_managed_devices_doc_only": true,
            "desc": " This policy controls whether the improved international keyboard shortcut mapping is enabled.\n      This feature ensures keyboard shortcuts work consistently with international keyboard layouts and deprecate legacy shortcuts.\n\n      If this policy is disabled, improved international keyboards shortcuts are disabled.\n      If this policy is enabled, improved international keyboards shortcuts are enabled.\n      If unset, this policy is enabled for managed devices and enabled for consumer-owned devices.\n      Note this is only a temporarily policy to allow managed users to still be able to use deprecated legacy shortcuts. This policy will deprecate after customized keyboard shortcuts are available.",
            "device_only": true,
            "example_value": true,
            "features": {
                "dynamic_refresh": true,
                "per_profile": false
            },
            "id": 925,
            "items": [
                {
                    "caption": "International keyboard shortcuts are mapped to the location of the keys in the keyboard instead of the glyph of the key.",
                    "value": true
                },
                {
                    "caption": "International keyboard shortcuts are mapped to the glyph of the keys instead of key location on the keyboard.",
                    "value": false
                }
            ],
            "name": "DeviceI18nShortcutsEnabled",
            "owners": [
                "jimmyxgong@chromium.org",
                "zentaro@chromium.org",
                "cros-peripheral@google.com"
            ],
            "schema": {
                "type": "boolean"
            },
            "supported_on": [
                "chrome_os:97-"
            ],
            "tags": [],
            "type": "main"
        }
    ],
    "policy_atomic_group_definitions": [
        {
            "caption": "Homepage",
            "id": 1,
            "name": "Homepage",
            "policies": [
                "HomepageLocation",
                "HomepageIsNewTabPage",
                "NewTabPageLocation",
                "ShowHomeButton"
            ]
        },
        {
            "caption": "Remote access",
            "id": 2,
            "name": "RemoteAccess",
            "policies": [
                "RemoteAccessClientFirewallTraversal",
                "RemoteAccessHostClientDomain",
                "RemoteAccessHostClientDomainList",
                "RemoteAccessHostFirewallTraversal",
                "RemoteAccessHostDomain",
                "RemoteAccessHostDomainList",
                "RemoteAccessHostRequireTwoFactor",
                "RemoteAccessHostTalkGadgetPrefix",
                "RemoteAccessHostRequireCurtain",
                "RemoteAccessHostAllowClientPairing",
                "RemoteAccessHostAllowGnubbyAuth",
                "RemoteAccessHostAllowRelayedConnection",
                "RemoteAccessHostUdpPortRange",
                "RemoteAccessHostMatchUsername",
                "RemoteAccessHostTokenUrl",
                "RemoteAccessHostTokenValidationUrl",
                "RemoteAccessHostTokenValidationCertificateIssuer",
                "RemoteAccessHostDebugOverridePolicies",
                "RemoteAccessHostAllowUiAccessForRemoteAssistance",
                "RemoteAccessHostAllowFileTransfer",
                "RemoteAccessHostEnableUserInterface",
                "RemoteAccessHostAllowRemoteAccessConnections",
                "RemoteAccessHostMaximumSessionDurationMinutes",
                "RemoteAccessHostClipboardSizeBytes",
                "RemoteAccessHostAllowRemoteSupportConnections"
            ]
        },
        {
            "caption": "Password manager",
            "id": 3,
            "name": "PasswordManager",
            "policies": [
                "PasswordManagerEnabled",
                "PasswordManagerAllowShowPasswords"
            ]
        },
        {
            "caption": "Proxy",
            "id": 4,
            "name": "Proxy",
            "policies": [
                "ProxyMode",
                "ProxyServerMode",
                "ProxyServer",
                "ProxyPacUrl",
                "ProxyBypassList",
                "ProxySettings"
            ]
        },
        {
            "caption": "Extensions",
            "id": 5,
            "name": "Extensions",
            "policies": [
                "ExtensionInstallAllowlist",
                "ExtensionInstallBlocklist",
                "ExtensionInstallBlacklist",
                "ExtensionInstallWhitelist",
                "ExtensionInstallForcelist",
                "ExtensionInstallSources",
                "ExtensionAllowedTypes",
                "ExtensionAllowInsecureUpdates",
                "ExtensionSettings"
            ]
        },
        {
            "caption": "Action on startup",
            "id": 6,
            "name": "RestoreOnStartup",
            "owners": [
                "file://components/policy/resources/OWNERS",
                "rsorokin@chromium.org"
            ],
            "policies": [
                "RestoreOnStartup",
                "RestoreOnStartupURLs"
            ]
        },
        {
            "caption": "Default search provider",
            "id": 7,
            "name": "DefaultSearchProvider",
            "policies": [
                "DefaultSearchProviderEnabled",
                "DefaultSearchProviderName",
                "DefaultSearchProviderKeyword",
                "DefaultSearchProviderSearchURL",
                "DefaultSearchProviderSuggestURL",
                "DefaultSearchProviderInstantURL",
                "DefaultSearchProviderIconURL",
                "DefaultSearchProviderEncodings",
                "DefaultSearchProviderAlternateURLs",
                "DefaultSearchProviderSearchTermsReplacementKey",
                "DefaultSearchProviderImageURL",
                "DefaultSearchProviderNewTabURL",
                "DefaultSearchProviderSearchURLPostParams",
                "DefaultSearchProviderSuggestURLPostParams",
                "DefaultSearchProviderInstantURLPostParams",
                "DefaultSearchProviderImageURLPostParams"
            ]
        },
        {
            "caption": "Image settings",
            "id": 8,
            "name": "ImageSettings",
            "policies": [
                "DefaultImagesSetting",
                "ImagesAllowedForUrls",
                "ImagesBlockedForUrls"
            ]
        },
        {
            "caption": "Cookies settings",
            "id": 9,
            "name": "CookiesSettings",
            "policies": [
                "DefaultCookiesSetting",
                "CookiesAllowedForUrls",
                "CookiesBlockedForUrls",
                "CookiesSessionOnlyForUrls"
            ]
        },
        {
            "caption": "Javascript settings",
            "id": 10,
            "name": "JavascriptSettings",
            "policies": [
                "DefaultJavaScriptSetting",
                "JavaScriptAllowedForUrls",
                "JavaScriptBlockedForUrls"
            ]
        },
        {
            "caption": "Plugins settings",
            "id": 11,
            "name": "PluginsSettings",
            "policies": [
                "DefaultPluginsSetting",
                "PluginsAllowedForUrls",
                "PluginsBlockedForUrls"
            ]
        },
        {
            "caption": "Popups settings",
            "id": 12,
            "name": "PopupsSettings",
            "policies": [
                "DefaultPopupsSetting",
                "PopupsAllowedForUrls",
                "PopupsBlockedForUrls"
            ]
        },
        {
            "caption": "Keygen settings",
            "id": 13,
            "name": "KeygenSettings",
            "policies": [
                "DefaultKeygenSetting",
                "KeygenAllowedForUrls",
                "KeygenBlockedForUrls"
            ]
        },
        {
            "caption": "Notification settings",
            "id": 14,
            "name": "NotificationsSettings",
            "policies": [
                "DefaultNotificationsSetting",
                "NotificationsAllowedForUrls",
                "NotificationsBlockedForUrls"
            ]
        },
        {
            "caption": "Web USB settings",
            "id": 15,
            "name": "WebUsbSettings",
            "policies": [
                "DefaultWebUsbGuardSetting",
                "DeviceLoginScreenWebUsbAllowDevicesForUrls",
                "WebUsbAllowDevicesForUrls",
                "WebUsbAskForUrls",
                "WebUsbBlockedForUrls"
            ]
        },
        {
            "caption": "Native messaging",
            "id": 16,
            "name": "NativeMessaging",
            "policies": [
                "NativeMessagingBlacklist",
                "NativeMessagingBlocklist",
                "NativeMessagingAllowlist",
                "NativeMessagingWhitelist",
                "NativeMessagingUserLevelHosts"
            ]
        },
        {
            "caption": "Drive",
            "id": 17,
            "name": "Drive",
            "policies": [
                "DriveDisabled",
                "DriveDisabledOverCellular"
            ]
        },
        {
            "caption": "Attestation",
            "id": 18,
            "name": "Attestation",
            "policies": [
                "AttestationEnabledForDevice",
                "AttestationEnabledForUser",
                "AttestationExtensionAllowlist",
                "AttestationExtensionWhitelist",
                "AttestationForContentProtectionEnabled"
            ]
        },
        {
            "caption": "Supervised users",
            "id": 20,
            "name": "SupervisedUsers",
            "policies": [
                "SupervisedUsersEnabled",
                "SupervisedUserCreationEnabled",
                "SupervisedUserContentProviderEnabled"
            ]
        },
        {
            "caption": "Google Cast",
            "id": 21,
            "name": "GoogleCast",
            "policies": [
                "CastReceiverEnabled",
                "CastReceiverName"
            ]
        },
        {
            "caption": "Quick unlock",
            "id": 22,
            "name": "QuickUnlock",
            "policies": [
                "QuickUnlockModeAllowlist",
                "QuickUnlockModeWhitelist",
                "QuickUnlockTimeout"
            ]
        },
        {
            "caption": "Pin unlock",
            "id": 23,
            "name": "PinUnlock",
            "policies": [
                "PinUnlockMinimumLength",
                "PinUnlockMaximumLength",
                "PinUnlockWeakPinsAllowed",
                "PinUnlockAutosubmitEnabled"
            ]
        },
        {
            "caption": "Safe Browsing settings",
            "id": 24,
            "name": "SafeBrowsing",
            "policies": [
                "SafeBrowsingEnabled",
                "SafeBrowsingExtendedReportingEnabled",
                "SafeBrowsingProtectionLevel",
                "SafeBrowsingWhitelistDomains",
                "SafeBrowsingAllowlistDomains"
            ]
        },
        {
            "caption": "Password protection",
            "id": 25,
            "name": "PasswordProtection",
            "policies": [
                "PasswordProtectionWarningTrigger",
                "PasswordProtectionLoginURLs",
                "PasswordProtectionChangePasswordURL"
            ]
        },
        {
            "caption": "Network File Shares settings",
            "id": 26,
            "name": "NetworkFileShares",
            "policies": [
                "NetworkFileSharesAllowed",
                "NetBiosShareDiscoveryEnabled",
                "NTLMShareAuthenticationEnabled",
                "NetworkFileSharesPreconfiguredShares"
            ]
        },
        {
            "caption": "Cloud Reporting",
            "id": 27,
            "name": "CloudReporting",
            "policies": [
                "ReportVersionData",
                "ReportPolicyData",
                "ReportMachineIDData",
                "ReportUserIDData",
                "ReportExtensionsAndPluginsData",
                "CloudExtensionRequestEnabled",
                "CloudReportingEnabled"
            ]
        },
        {
            "caption": "Legacy Browser Support",
            "id": 28,
            "name": "BrowserSwitcher",
            "policies": [
                "AlternativeBrowserPath",
                "AlternativeBrowserParameters",
                "BrowserSwitcherChromePath",
                "BrowserSwitcherChromeParameters",
                "BrowserSwitcherDelay",
                "BrowserSwitcherEnabled",
                "BrowserSwitcherExternalSitelistUrl",
                "BrowserSwitcherExternalGreylistUrl",
                "BrowserSwitcherKeepLastChromeTab",
                "BrowserSwitcherUrlList",
                "BrowserSwitcherUrlGreylist",
                "BrowserSwitcherUseIeSitelist"
            ]
        },
        {
            "caption": "PluginVm",
            "id": 29,
            "name": "PluginVm",
            "policies": [
                "PluginVmAllowed",
                "PluginVmDataCollectionAllowed",
                "PluginVmImage",
                "PluginVmLicenseKey",
                "PluginVmRequiredFreeDiskSpace",
                "PluginVmUserId",
                "UserPluginVmAllowed"
            ]
        },
        {
            "caption": "SAML",
            "id": 30,
            "name": "SAML",
            "policies": [
                "DeviceSamlLoginAuthenticationType",
                "DeviceTransferSAMLCookies"
            ]
        },
        {
            "caption": "Login and screen origins",
            "id": 31,
            "name": "LoginScreenOrigins",
            "policies": [
                "DeviceLoginScreenIsolateOrigins",
                "DeviceLoginScreenSitePerProcess"
            ]
        },
        {
            "caption": "User and device reporting",
            "id": 32,
            "name": "UserAndDeviceReporting",
            "policies": [
                "EnableDeviceGranularReporting",
                "ReportDeviceVersionInfo",
                "ReportDeviceBootMode",
                "ReportDeviceUsers",
                "ReportDeviceActivityTimes",
                "ReportDeviceAudioStatus",
                "ReportDeviceLocation",
                "ReportDeviceNetworkConfiguration",
                "ReportDeviceNetworkInterfaces",
                "ReportDeviceNetworkStatus",
                "ReportDeviceHardwareStatus",
                "ReportDeviceSessionStatus",
                "ReportDeviceGraphicsStatus",
                "ReportDeviceCrashReportInfo",
                "ReportDeviceOsUpdateStatus",
                "ReportDeviceBoardStatus",
                "ReportDeviceCpuInfo",
                "ReportDeviceTimezoneInfo",
                "ReportDeviceMemoryInfo",
                "ReportDeviceBacklightInfo",
                "ReportDevicePowerStatus",
                "ReportDeviceSecurityStatus",
                "ReportDeviceStorageStatus",
                "ReportDeviceAppInfo",
                "ReportDeviceBluetoothInfo",
                "ReportDeviceFanInfo",
                "ReportDeviceVpdInfo",
                "ReportDeviceSystemInfo",
                "ReportDevicePrintJobs",
                "ReportDeviceLoginLogout",
                "ReportUploadFrequency",
                "ReportArcStatusEnabled",
                "HeartbeatEnabled",
                "HeartbeatFrequency",
                "LogUploadEnabled",
                "DeviceMetricsReportingEnabled"
            ]
        },
        {
            "caption": "WiFi",
            "id": 33,
            "name": "WiFi",
            "policies": [
                "DeviceWiFiFastTransitionEnabled",
                "DeviceWiFiAllowed"
            ]
        },
        {
            "caption": "Kiosk settings",
            "id": 34,
            "name": "Kiosk",
            "policies": [
                "DeviceLocalAccounts",
                "DeviceLocalAccountAutoLoginId",
                "DeviceLocalAccountAutoLoginDelay",
                "DeviceLocalAccountAutoLoginBailoutEnabled",
                "DeviceLocalAccountPromptForNetworkWhenOffline"
            ]
        },
        {
            "caption": "Date and time",
            "id": 35,
            "name": "DateAndTime",
            "policies": [
                "SystemTimezone",
                "SystemTimezoneAutomaticDetection"
            ]
        },
        {
            "caption": "Display",
            "id": 36,
            "name": "Display",
            "policies": [
                "DeviceDisplayResolution",
                "DisplayRotationDefault"
            ]
        },
        {
            "caption": "Microsoft\u00ae Active Directory\u00ae management settings",
            "id": 37,
            "name": "ActiveDirectoryManagement",
            "policies": [
                "DeviceMachinePasswordChangeRate",
                "DeviceUserPolicyLoopbackProcessingMode",
                "DeviceKerberosEncryptionTypes",
                "DeviceGpoCacheLifetime",
                "DeviceAuthDataCacheLifetime"
            ]
        },
        {
            "caption": "Legacy SameSite cookie behavior settings",
            "id": 38,
            "name": "LegacySameSiteCookieBehaviorSettings",
            "policies": [
                "LegacySameSiteCookieBehaviorEnabled",
                "LegacySameSiteCookieBehaviorEnabledForDomainList"
            ]
        },
        {
            "caption": "Sensors settings",
            "id": 39,
            "name": "SensorsSettings",
            "policies": [
                "DefaultSensorsSetting",
                "SensorsAllowedForUrls",
                "SensorsBlockedForUrls"
            ]
        },
        {
            "caption": "Private network request settings",
            "id": 40,
            "name": "PrivateNetworkRequestSettings",
            "policies": [
                "InsecurePrivateNetworkRequestsAllowed",
                "InsecurePrivateNetworkRequestsAllowedForUrls"
            ]
        },
        {
            "caption": "Screen Capture settings",
            "id": 41,
            "name": "ScreenCaptureSettings",
            "policies": [
                "ScreenCaptureAllowed",
                "ScreenCaptureAllowedByOrigins",
                "WindowCaptureAllowedByOrigins",
                "TabCaptureAllowedByOrigins",
                "SameOriginTabCaptureAllowedByOrigins"
            ]
        }
    ],
    "messages": {
        "win_supported_all": {
            "text": "Microsoft Windows 7 or later"
        },
        "win_supported_win7": {
            "text": "Microsoft Windows 7"
        },
        "mac_chrome_preferences": {
            "text": "Google Chrome preferences"
        },
        "doc_data_type": {
            "text": "Data type:"
        },
        "doc_win_reg_loc": {
            "text": "Windows registry location for Windows clients:"
        },
        "doc_oma_uri": {
            "text": "OMA-URI:"
        },
        "doc_chrome_os_reg_loc": {
            "text": "Windows registry location for Google Chrome OS clients:"
        },
        "doc_mac_linux_pref_name": {
            "text": "Mac/Linux preference name:"
        },
        "doc_android_restriction_name": {
            "text": "Android restriction name:"
        },
        "doc_android_webview_restriction_name": {
            "text": "Android WebView restriction name:"
        },
        "doc_supported_on": {
            "text": "Supported on:"
        },
        "doc_since_version": {
            "text": "since version $6"
        },
        "doc_until_version": {
            "text": "until version $6"
        },
        "doc_supported_features": {
            "text": "Supported features:"
        },
        "doc_description": {
            "text": "Description:"
        },
        "doc_arc_support": {
            "text": "Note for Google Chrome OS devices supporting Android apps:"
        },
        "doc_schema": {
            "text": "Schema:"
        },
        "doc_url_schema": {
            "text": "Expanded schema description:"
        },
        "doc_example_value": {
            "text": "Example value:"
        },
        "doc_win_example_value": {
            "text": "Windows (Windows clients):"
        },
        "doc_chrome_os_example_value": {
            "text": "Windows (Google Chrome OS clients):"
        },
        "doc_banner": {
            "text": "The Chrome Enterprise policy list is moving! Please update your bookmarks to https://cloud.google.com/docs/chrome-enterprise/policies/."
        },
        "doc_intro": {
            "text": "Both Chromium and Google Chrome support the same set of policies. Please note that this document may include unreleased policies (i.e. their 'Supported on' entry refers to a not-yet released version of Google Chrome) which are subject to change or removal without notice and for which no guarantees of any kind are provided, including no guarantees with respect to their security and privacy properties.\n\nThese policies are strictly intended to be used to configure instances of Google Chrome internal to your organization. Use of these policies outside of your organization (for example, in a publicly distributed program) is considered malware and will likely be labeled as malware by Google and anti-virus vendors.\n\nThese settings don't need to be configured manually! Easy-to-use templates for Windows, Mac and Linux are available for download from https://www.chromium.org/administrators/policy-templates.\n\nThe recommended way to configure policy on Windows is via GPO, although provisioning policy via registry is still supported for Windows instances that are joined to a Microsoft\u00ae Active Directory\u00ae domain."
        },
        "doc_group_intro": {
            "text": "Both Chromium and Google Chrome have some groups of policies that depend on each other to provide control over a feature. These sets are represented by the following policy groups. Given that policies can have multiple sources, only values coming from the highest priority source will be applied. Values coming from a lower priority source in the same group will be ignored. The order of priority is defined in https://support.google.com/chrome/a/?p=policy_order."
        },
        "doc_policy_in_atomic_group": {
            "text": "This policy is part of the following atomic group (only policies from the highest priority source present in the group are applied) :"
        },
        "doc_policy_atomic_group": {
            "text": "Policy atomic group:"
        },
        "doc_back_to_top": {
            "text": "Back to top"
        },
        "doc_supported": {
            "text": "Yes"
        },
        "doc_not_supported": {
            "text": "No"
        },
        "doc_name_column_title": {
            "text": "Policy Name"
        },
        "doc_description_column_title": {
            "text": "Description"
        },
        "doc_feature_dynamic_refresh": {
            "text": "Dynamic Policy Refresh"
        },
        "doc_feature_can_be_recommended": {
            "text": "Can Be Recommended"
        },
        "doc_feature_can_be_mandatory": {
            "text": "Can Be Mandatory"
        },
        "doc_feature_per_profile": {
            "text": "Per Profile"
        },
        "doc_feature_cloud_only": {
            "text": "Cloud Only"
        },
        "doc_feature_platform_only": {
            "text": "Platform Only"
        },
        "doc_feature_internal_only": {
            "text": "Internal Only"
        },
        "doc_feature_unlisted": {
            "text": "Unlisted"
        },
        "doc_feature_metapolicy_type": {
            "text": "Metapolicy Type"
        },
        "doc_deprecated": {
            "text": "Deprecated"
        },
        "doc_recommended": {
            "text": "Default Settings (users can override)"
        },
        "doc_complex_policies_on_windows": {
            "text": "encoded as a JSON string, for details see https://www.chromium.org/administrators/complex-policies-on-windows"
        },
        "doc_reference_link": {
            "text": "Reference: $6"
        },
        "doc_legacy_single_line_label": {
            "text": "$6 (The single-line field is deprecated and will be removed in the future. Please start using the multi-line textbox below.)"
        },
        "doc_policy_restriction": {
            "text": "Restrictions:"
        },
        "doc_range_minimum": {
            "text": "Minimum:"
        },
        "doc_range_maximum": {
            "text": "Maximum:"
        },
        "doc_schema_description_link": {
            "text": "See $6 for more information about schema and formatting."
        },
        "deprecated_policy_group_caption": {
            "text": "Deprecated policies"
        },
        "deprecated_policy_group_desc": {
            "text": "These policies are included here to make them easy to remove."
        },
        "deprecated_policy_desc": {
            "text": "This policy is deprecated. Its usage is discouraged. Read more at https://support.google.com/chrome/a/answer/7643500"
        },
        "removed_policy_group_caption": {
            "text": "Removed policies"
        },
        "removed_policy_group_desc": {
            "text": "These policies are included here to make them easy to remove."
        },
        "removed_policy_desc": {
            "text": "This policy is removed. It is not compatible with this version of Google Chrome. Read more at https://support.google.com/chrome/a/answer/7643500"
        }
    }
}