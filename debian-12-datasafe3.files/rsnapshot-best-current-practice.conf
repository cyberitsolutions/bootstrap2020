# -*-mode:conf;indent-tabs-mode:t-*-
config_version		1.2
no_create_root		1
link_dest		1
sync_first		1
lockfile		/run/lock/rsnapshot
snapshot_root		/srv/backup/
rsync_short_args	-ahhHASX
ssh_args		-oBatchMode=yes -oIPQoS=throughput

cmd_cp			/bin/cp
cmd_du			/usr/bin/du
cmd_logger		/usr/bin/logger
cmd_rm			/bin/rm
cmd_rsnapshot_diff	/usr/bin/rsnapshot-diff
cmd_rsync		/usr/bin/rsync
cmd_ssh			/usr/bin/ssh

# If we want to back up all the real filesystems (e.g. ext4, btrfs)
# and skip all the pseudofilesystems (e.g. devtmpfs, sysfs),
# we have three options:
#
#  1. blacklist filesystems by filesystem type, like mlocate does.
#     rsync DOES NOT SUPPORT THIS.
#
#  2. use one_fs=1 and whitelist the real filesystems by mountpoint.
#     If a new fs is added later (e.g. /var/log is split off), and
#     rsnapshot.conf isn't updated, THE NEW FILESYSTEM IS NOT BACKED UP.
#
#  3. use one_fs=0 (the default) and blacklist the fake filesystems by mountpoint.
#     if a new pseudo fs is added later (e.g. /run in 2012), and
#     rsnapshot.conf isn't updated, THE NEW FAKE FILESYSTEM IS BACKED UP,
#     making syncs take longer and the backup disk get fuler.
#
# New mountpoints are likely to be real (not fake), so
# the failure mode for #2 is more likely than
# the failure mode for #3.
#
# Therefore, we are going with option #3.
# FTR, understudy uses option #2; zhug used option #3.
#
# zhug:/tank/hosted-backup/bin/backup-share.pl:
#   … --exclude proc/ --exclude sys/ --exclude dev/ --exclude mnt/ --exclude /run/ …
#
# <ron> should all excludes be explicit? ie; have leading slashes?
# <twb> Unfortunately, there is no correct answer for all cases
# <twb> If you are backing up exactly master:/ and there are no chroots or anything, then a leading slash is correct
# <twb> leading slash means it won't back up e.g. /root/proc
# <twb> no leading slash means it will incorrectly back up e.g. /var/chroot/named/proc

exclude		/proc/
exclude		/sys/
exclude		/dev/
exclude		/mnt/
exclude		/run/
