# A "watchdog" is a thing on the mainboard that, once activated, must be "petted" every N seconds.
# If it isn't, it reboots the machine.
# This is intended mainly for appliances (e.g. smartbulbs, routers, printers) to self-heal if they crash/hang badly.
# (Linux also has softdog.ko, where the kernel will try to reset power if userland stops petting it.)
# https://docs.kernel.org/watchdog/
#
# Around 2015 we made session-snitch (account-sharing detector/preventer) use the watchdog.
# If a detainee managed to pause/hang/break session-snitch, the system would reboot.
# https://git.cyber.com.au/bootstrap.attic/commit/1f76417d20e1fda0bedb533fb7a74c302a02f31d/#2-R-0
# https://alloc.cyber.com.au/task/task.php?taskID=24626
# https://alloc.cyber.com.au/task/task.php?taskID=25366
#
# At some point after switching to systemd, systemd took over managing /dev/watchdog.
# Or at least I *thought* it did in 2021. --twb
# https://github.com/cyberitsolutions/bootstrap2020/commit/9858860dceb8bbbd2b1bfdf1b93cec059b0bab82/#diff-b4f68d68cccb82a938e2ccac664a97593ffdfd8691be90c030c516617f10f08dR76
#
# As at 2024, it looks like systemd does *not* activate hardware watchdogs by default.
# If session-snitch hangs (stops petting *systemd*), then *systemd-level* watchdog will try to reboot.
# https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#WatchdogSec=
# You can trivially test this with e.g. "pkill -STOP -f snitch"
# But this is unrelated to the *hardware* watchdog, which reboots if *systemd* hangs.
# I do not know how to simulate a kernel or systemd pid1 hang. :-( --twb
# https://alloc.cyber.com.au/task/task.php?taskID=35271
# https://alloc.cyber.com.au/task/task.php?taskID=35270
# https://alloc.cyber.com.au/task/task.php?taskID=35258
# https://alloc.cyber.com.au/task/task.php?taskID=35240
# https://www.freedesktop.org/software/systemd/man/latest/systemd-system.conf#RuntimeWatchdogSec=
#
# Expected output for stock kernel:
#
#     systemd[1]: Using hardware watchdog 'iTCO_wdt', version 2, device /dev/watchdog0
#     systemd[1]: Watchdog running with a hardware timeout of 30s.
#
# Expected output for cloud kernel:
#
#     <nothing!>
#
#     FIXME: should we forcibly enable softdog.ko for cloud kernels?
#            "modprobe softdog" is sufficient to get this:
#
#                systemd[1]: Using hardware watchdog 'Software Watchdog', version 0, device /dev/watchdog0
#                systemd[1]: Watchdog running with a hardware timeout of 1min.
#
#
# NOTE: RuntimeWatchdogSec=default is *not* the default.
#       RuntimeWatchdogSec=no      is the default.
#       The default in =default is the *watchdog driver* default, not the *systemd* default.
#       For example, iTCO_wdt.ko default is 30s, but softdog.ko default is 60s.
#
#       It is not possible to set a sensible global default, because e.g.
#       A.ko might support a timeout between 10s and 20s
#       B.ko might support a timeout of 60s or more that is an exact multiple of 60s.
#
# NOTE: RebootWatchdogSec=10min is a good enough default, leave it as-is.
#       KExecWatchdogSec=no default I don't think we care about - we do not use kexec.
#       I have added KExecWatchdogSec==default purely because users are more likely to report
#       "always reboots after X seconds" (watchdog fired wrongly) than
#       "sometimes hangs if A, B and C all occur" (watchdog not running, upstream default).
#       --twb, September 2024
#
# NOTE: In 2015, when our loop was hard-coded to 10s, we forcibly set
#       the watchdog timer to 60s, and forcibly set the driver to be
#       iTCO_wdt or softdog (i.e. blocked all others).
#
#       As the loop is now managed by systemd and is automatically half of the configured timeout,
#       I think it is reasonable to use =default (not =60s) today.
#       I also think it is reasonable to turn this on for all SOEs (not just for PrisonPC desktop SOEs).
#       --twb, September 2024
#
# NOTE: systemd will ignore these options completely unless/until /dev/watchdog0 (or whatever the device is) appears.
#       So e.g. on a cloud kernel, this still works and doesn't force an immediate reboot.
#
# FIXME: By default systemd talks to /dev/watchdog0.
#        What if you have >1 watchdog?
#        Does /dev/watchdog multiplex *all* watchdogs, or
#        is it merely an alias for /dev/watchdog0?
#        It looks like it's an alias for watchdog0.
#
#            root@main:~# ls -l /dev/watchdog*
#            crw------- 1 root root  10, 130 Sep 25 19:56 /dev/watchdog
#            crw------- 1 root root 246,   0 Sep 25 19:56 /dev/watchdog0
#            root@main:~# modprobe softdog
#            root@main:~# ls -l /dev/watchdog*
#            crw------- 1 root root  10, 130 Sep 25 19:56 /dev/watchdog
#            crw------- 1 root root 246,   0 Sep 25 19:56 /dev/watchdog0
#            crw------- 1 root root 246,   1 Sep 25 19:57 /dev/watchdog1
#            root@main:~# journalctl -kfn0 &
#            [1] 452
#            root@main:~# echo test >/dev/watchdog
#            -bash: /dev/watchdog: Device or resource busy
#            root@main:~# echo test >/dev/watchdog0
#            -bash: /dev/watchdog0: Device or resource busy
#            root@main:~# echo test >/dev/watchdog1
#            Sep 25 19:58:33 main.lan kernel: watchdog: watchdog1: watchdog did not stop!
#            root@main:~#
#
#        File a bug demanding systemd support petting *all* watchdogs, instead of just the first one?
#        After all, the order that watchdog drivers load is non-deterministic now...
#        --twb, September 2024
#
# FIXME: In 2015, we enabled "nowayout=1" when the module loaded.
#        This is good hardening.
#        We should AT LEAST do this again for the drivers we know are
#        used (iTCO_wdt.ko and maybe softdog.ko).
#        --twb, September 2024
[Manager]
RuntimeWatchdogSec=default
KExecWatchdogSec=default
