# -*-conf-*-

# Example attack recipe to get a writable DVD.
# ============================================================
# A straightforward example of this would be:
#
#   1. insert blank DVD-R into normal computer (needn't be DVD-RW)
#   2. run "mkfs.udf /dev/sr0"
#   3. move disc to inmate desktop
#   4. in thunar, click on disc to mount it
#   5. drag-and-drop files into the mounted disc folder
#   6. click on thunar's eject icon to umount it
#   7. CONGRATULATIONS, you have removable user-writable storage
#
# Step 5 will Just Work using the in-kernel UDF driver.
# No special userspace is needed (e.g. don't need mkisofs).
# No special access is needed, just mount without -o ro.
# This is the NORMAL BEHAVIOUR of a UDF filesystem on a CDRW or DVDRW disc.
#
# UPDATE: I struggled to make this work in testing.
# It does work on a USB key, but not on an optical disk.
# The "mkfs.udf /dev/sr0" step fails.
# I'm not 100% sure we've locked out this attack path, but
# I'm not getting anywhere trying to crack it myself. ☹
#
# Also this attack is ACTUALLY about udisks2 doing
# "mount -o rw" (not "mount -o ro").
# Can we do anything about that?

# Simpler attack that does not work anyway
# ============================================================
# The Debian 11 default udev rules add uaccess/seat tags,
# such that a logged-in GUI user has read-write access to /dev/sr0.
# So just do this?
#
#    echo VITO SAYS MURDER WITNESS >/dev/sr0
#
# Then the other inmate reads it like
#
#    head -n1 /dev/sr0




# What the fuck are these ACLs doing in /dev ?
# ============================================================
# In Debian 9 we did not use systemd-logind.
# Instead we just ran "adduser p1234 cdrom" &c when they logged in, and
# arranged for udev to give group read access to appropriate groups.
#
# In Debian 11 it works like this:
#
#     1. user p123 is logged in, and logind knows it (via libpam_systemd.so).
#     2. /dev/foo is plugged in, and a matching udev rule has TAG+="uaccess".
#     3. udevd asks logind "who is logged in?" and is told "p123" (or really, p123's UID)
#     4. udevd runs "builtin-uaccess" which adds "user:p123:rw-" access to /dev/foo.
#
# This uaccess process DOES NOT SUPPORT granting only read access (i.e. "user:p123:r--").
# This might make "allow read-only DVDs, but not read-write DVDs" a stone-cold cunt to enforce.
#
# This is not well documented anywhere:
#
#     $ find /usr/share/man/ -xdev -type f -exec zgrep -nHFw uaccess {} +  ===>  0 hits
#
#     https://github.com/systemd/systemd/blob/main/src/login/70-uaccess.rules.in
#     https://github.com/systemd/systemd/blob/main/src/udev/udev-builtin-uaccess.c
#     https://github.com/systemd/systemd/blob/main/src/shared/devnode-acl.c#L50-L159
#     https://manpages.debian.org/acl_set_file
#     https://manpages.debian.org/setfacl
#     https://manpages.debian.org/acl
#     https://manpages.debian.org/udev
#     https://lintian.debian.org/tags/udev-rule-missing-uaccess
#     https://wiki.debian.org/USB/GadgetSetup
#
# Here is a comparison between a logged-in and logged-out user:
#
#     root@desktop-staff:~# loginctl
#     SESSION   UID USER SEAT  TTY
#           1 10243 s123 seat0
#
#     1 sessions listed.
#
#     root@desktop-staff:~# runuser -u s123 -- find /dev '(' -type c -o -type b ')' '(' -readable -o -writable ')' -ls
#           296      0 brw-rw----   1 root     cdrom     11,   1 Feb  3 14:08 /dev/sr1
#           295      0 b---rw----   1 root     cdrom     11,   0 Feb  3 14:18 /dev/sr0
#           294      0 crw-rw----   1 root     cdrom     21,   1 Feb  3 14:08 /dev/sg1
#           293      0 crw-rw----   1 root     cdrom     21,   0 Feb  3 14:08 /dev/sg0
#           288      0 crw-rw----   1 root     kvm       10, 232 Feb  3 14:08 /dev/kvm
#           282      0 crw-rw----   1 root     audio    116,   4 Feb  3 14:08 /dev/snd/controlC0
#           281      0 crw-rw----   1 root     audio    116,   3 Feb  3 14:08 /dev/snd/hwC0D0
#           280      0 crw-rw----   1 root     audio    116,   2 Feb  3 14:25 /dev/snd/pcmC0D0p
#           249      0 crw-rw----   1 root     audio    116,   1 Feb  3 14:08 /dev/snd/seq
#           248      0 crw-rw----   1 root     audio    116,  33 Feb  3 14:08 /dev/snd/timer
#           236      0 crw-rw-rw-   1 root     root      10, 200 Feb  3 14:08 /dev/net/tun
#           231      0 crw-rw-rw-   1 root     root      10, 229 Feb  3 14:08 /dev/fuse
#           220      0 crw-r--r--   1 root     root      10, 235 Feb  3 14:08 /dev/autofs
#           197      0 crw-rw----   1 root     video    226,   0 Feb  3 14:08 /dev/dri/card0
#           196      0 crw-rw----   1 root     render   226, 128 Feb  3 14:08 /dev/dri/renderD128
#            84      0 crw-rw-rw-   1 root     tty        5,   2 Feb  3 14:32 /dev/ptmx
#            11      0 crw-rw-rw-   1 root     tty        5,   0 Feb  3 14:08 /dev/tty
#            10      0 crw-r--r--   1 root     root       1,  11 Feb  3 14:08 /dev/kmsg
#             9      0 crw-rw-rw-   1 root     root       1,   9 Feb  3 14:08 /dev/urandom
#             8      0 crw-rw-rw-   1 root     root       1,   8 Feb  3 14:08 /dev/random
#             7      0 crw-rw-rw-   1 root     root       1,   7 Feb  3 14:08 /dev/full
#             6      0 crw-rw-rw-   1 root     root       1,   5 Feb  3 14:08 /dev/zero
#             4      0 crw-rw-rw-   1 root     root       1,   3 Feb  3 14:08 /dev/null
#
#     root@desktop-staff:~# runuser -u s456 -- find /dev '(' -type c -o -type b ')' '(' -readable -o -writable ')' -ls
#           236      0 crw-rw-rw-   1 root     root      10, 200 Feb  3 14:08 /dev/net/tun
#           231      0 crw-rw-rw-   1 root     root      10, 229 Feb  3 14:08 /dev/fuse
#           220      0 crw-r--r--   1 root     root      10, 235 Feb  3 14:08 /dev/autofs
#            84      0 crw-rw-rw-   1 root     tty        5,   2 Feb  3 14:32 /dev/ptmx
#            11      0 crw-rw-rw-   1 root     tty        5,   0 Feb  3 14:08 /dev/tty
#            10      0 crw-r--r--   1 root     root       1,  11 Feb  3 14:08 /dev/kmsg
#             9      0 crw-rw-rw-   1 root     root       1,   9 Feb  3 14:08 /dev/urandom
#             8      0 crw-rw-rw-   1 root     root       1,   8 Feb  3 14:08 /dev/random
#             7      0 crw-rw-rw-   1 root     root       1,   7 Feb  3 14:08 /dev/full
#             6      0 crw-rw-rw-   1 root     root       1,   5 Feb  3 14:08 /dev/zero
#             4      0 crw-rw-rw-   1 root     root       1,   3 Feb  3 14:08 /dev/null
#
# WARNING: "find -ls" does not print a "+" to indicate the presence of ACLs.
#          You need to use "find -exec ls -hlds {} +" for that.
#          You need to use "getfacl" to see the actual ACLs themselves.
#
# So OK, to harden this up we want to basically REMOVE the uaccess tag from almost everything.
# Let's start out conservatively and remove it from just the optical drives, and see if we can still mount/umount/eject those...
#KERNEL=="sr[0-9]*", TAG-="uaccess"
#
# What if we just remove uaccess except for a whitelist of subsystems (audio and video).
# In testing, this is not working -- something keeps putting the ACL back for /dev/sr0...
# In fact udevadm info /dev/sr0 | grep uaccess ==> E: TAGS=:systemd:uaccess:seat:disc-snitch:
# UPDATE: TAG-="foo" edits CURRENT_TAGS (not TAGS) since v247.  Is that sufficient?  YES!
#
# NOTE: We only GUESS that pulseaudio needs audio, and
#       when we eventually get rootless X (or wayland), it will need video.
#       We have not actually TESTED because
#       we aren't too worried about attacks on the sound/video cards.
SUBSYSTEM!="sound", SUBSYSTEM!="drm", TAG-="uaccess", TAG-="seat"


####################
## Upstream udev-defaults.rules has some MODE="0660" entries we dislike.
## We can't exclude the entire file; we need most of it.
## We are scared to try to EDIT that file programmatically (because GOTOs).
## So, try to override udev-defaults.rules here. (#30098)
##
## At first I tried this:
##   MODE=="0660", MODE="0640"
## But this doesn't work, because in udev the == operator is NOT COMMUTATIVE;
## MODE can be set, but not compared.  So udev set *EVERYTHING* to MODE="0640",
## which breaks at least /dev/random and /dev/tty.
##
## FIXME: build with stock Debian kernel; boot; /dev/fuse is 0660.
## After "modprobe fuse", it becomes 0640.  Why?
##
## UPDATE: none of these devices are expected in PrisonPC,
## so force them to 0 instead of just 640.
## NB: Staff SOE will probably need 0660 for fuse, for gvfs SFTP.
####################
KERNEL=="tun",           MODE:="0000"
KERNEL=="fuse",          MODE:="0000"
KERNEL=="legousbtower*", MODE:="0000"
KERNEL=="sonypi",        MODE:="0000"
KERNEL=="sgi_*",         MODE:="0000"
KERNEL=="z90crypt",      MODE:="0000"
# Added these in 2022, based on what was in static-nodes-permissions.conf.
KERNEL=="kvm",           MODE:="0000"
KERNEL=="loop-control",  MODE:="0000"
# https://github.com/systemd/systemd/blame/main/tmpfiles.d/static-nodes-permissions.conf.in
# FIXME: /dev/vfio/vfio and /dev/net/tun are still inmate-writable.
#        On inmate kernel, they are not connected to anything, so
#        it is not really a cause for concern.
KERNEL=="tun",           MODE:="0000"
KERNEL=="vfio",          MODE:="0000"
KERNEL=="rfkill",        MODE:="0000"
KERNEL=="vhost-net",     MODE:="0000"
KERNEL=="vsock",         MODE:="0000"
KERNEL=="vhost-vsock",   MODE:="0000"
DEVPATH=="/devices/virtual/misc/autofs", MODE:="0000"
## systemd-udevd[422]: ⋯ Invalid key 'DEVNAME'
#DEVNAME=="/dev/net/tun", MODE:="0000"
#DEVNAME=="/dev/vfio/vfio", MODE:="0000"
