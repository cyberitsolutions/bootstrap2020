#!/usr/bin/python3
import pathlib
import re
import subprocess

__doc__ = """ work around warzone2100 bug

We can place warzone2100 addons in
/usr/share/games/warzone2100/maps/X.wz and
/usr/share/games/warzone2100/mods/Y.wz.

Warzone2100 FINDS these files, but it READS from
~/.local/share/warzone2100-$VERSION/maps/X.wz and
~/.local/share/warzone2100-$VERSION/mods/Y.wz.
This is a bug in warzone2100.

As a workaround, symlink the latter to the former.

NOTE: this breaks map auto-download for online play.
PrisonPC does not allow online play, so we don't care.
â€”twb, Sep 2017
https://alloc.cyber.com.au/task/task.php?taskID=31556

"""

# FIXME: in Python3.5+ use subprocess.run instead of the try/except shit!
proc = subprocess.run(
    ['/usr/games/warzone2100', '--version'],
    stdout=subprocess.PIPE,
    text=True,
    check=False)
if proc.returncode != 1:
    raise RuntimeError('warzone2100 --version should always exit(1)!')

# Example: Warzone 2100 - Version: 3.3.0, Built: 2020-10-16
version = re.fullmatch(
    r'Warzone 2100 - Version: (\d+\.\d+\.\d+), .*',
    proc.stdout.strip()).group(1)

root_path = pathlib.Path.home() / f'.local/share/warzone2100-{version}'
maps_path = root_path / 'maps'
mods_path = root_path / 'mods'

root_path.mkdir(exist_ok=True)
for path in (maps_path, mods_path):
    # If someone ran warzone before this script,
    # remove the empty dir warzone2100 made.
    # We don't bother with unlikely edge-cases.
    # If a user runs into that, they can factory-reset.
    if path.is_dir():
        path.rmdir()
    if not path.is_symlink():
        path.symlink_to(
            pathlib.Path('/usr/share/games/warzone2100') / path.name)
